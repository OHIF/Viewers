worker_processes 2;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;
# 如有需要，包含其他模块的配置
#include /etc/nginx/modules/*.conf;

events {
    worker_connections 1024;
    use epoll; # 如果您的系统支持 epoll，保留此行
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    keepalive_timeout 65;
    keepalive_requests 100000;
    tcp_nopush on;
    tcp_nodelay on;

    # 配置 SSL 证书路径（容器内的路径）
    ssl_certificate     /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # 第一个服务器块：HTTPS 服务
    server {
        listen 443 ssl;
        server_name 10.0.10.72; # 替换为您的宿主机 IP 地址，例如 192.168.1.100

        gzip on;
        gzip_types text/css application/javascript application/json image/svg+xml;
        gzip_comp_level 9;
        etag on;

        # 反向代理 `orthanc` APIs（包括 DICOMWeb）
        location /pacs/ {
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            expires 0;
            add_header Cache-Control private;

            # 添加 CORS 头
            add_header Access-Control-Allow-Origin '*' always;

            proxy_pass http://orthanc:8042/; # 如果 Orthanc 在 Docker 容器中，服务名称为 orthanc
            # proxy_pass https://orthanc:443/
            proxy_ssl_verify off;
        }

        # 不缓存 sw.js，离线更新需要
        location /sw.js {
            add_header Cache-Control "no-cache";
            proxy_cache_bypass $http_pragma;
            proxy_cache_revalidate on;
            expires off;
            access_log off;
        }

        # Single Page Application 配置
        location / {
            root /var/www/html; # Nginx 容器内默认的网页目录
            index index.html;
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            add_header 'Cross-Origin-Opener-Policy' 'same-origin' always;
            add_header 'Cross-Origin-Embedder-Policy' 'require-corp' always;
        }
    }

    # 第二个服务器块：HTTP 重定向到 HTTPS
    server {
        listen 80;
        server_name 10.0.10.72; # 替换为您的宿主机 IP 地址

        return 301 https://$host$request_uri;
    }
}
