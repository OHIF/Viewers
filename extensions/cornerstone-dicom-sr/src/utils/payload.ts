import sanitize from 'sanitize-html';

export const HTML_REGEX =
  /<(br|basefont|hr|input|source|frame|param|area|meta|!--|col|link|option|base|img|wbr|!DOCTYPE).*?>|<(a|abbr|acronym|address|applet|article|aside|audio|b|bdi|bdo|big|blockquote|body|button|canvas|caption|center|cite|code|colgroup|command|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|em|embed|fieldset|figcaption|figure|font|footer|form|frameset|head|header|hgroup|h1|h2|h3|h4|h5|h6|html|i|iframe|ins|kbd|keygen|label|legend|li|map|mark|menu|meter|nav|noframes|noscript|object|ol|optgroup|output|p|pre|progress|q|rp|rt|ruby|s|samp|script|section|select|small|span|strike|strong|style|sub|summary|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video).*?<\/\2>/i;
export const HTML_EXTRACTION_REGEX = /<html.*>.*<\/html.*>/gms;

export const enum payloadMIMEOptions {
  TEXT = 'text/plain',
  HTML = 'text/html',
  PDF = 'application/pdf',
  DEFAULT = TEXT,
}

/**
 * Set of options to pass through to sanitize-html.
 *
 * Over time, we should optimize this structure towards maximum security possible. The idea is to
 * allow some level of document fidelity as generated by vendors but help guard users from any potential
 * malicious payloads that might be living in the user's data repository (e.g. VNA).
 */
export const htmlSanitizerOptions = {
  allowVulnerableTags: true, //We block most styles below, but we should allow some styles through for now so documents can display.
  allowedTags: [
    'html',
    'meta',
    'head',
    'p',
    'br',
    'strong',
    'em',
    'style',
    'title',
    'body',
    'li',
    'ul',
    'ol',
    'table',
    'tr',
    'td',
    'tbody',
    'th',
    'h1',
    'h2',
    'h3',
    'h4',
    'a',
    'img',
    'sup',
    'sub',
    'style',
    'i',
    'strike',
    'textarea',
    'address',
    'article',
    'aside',
    'footer',
    'header',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'hgroup',
    'main',
    'nav',
    'section',
    'blockquote',
    'dd',
    'div',
    'dl',
    'dt',
    'figcaption',
    'figure',
    'hr',
    'li',
    'main',
    'ol',
    'p',
    'pre',
    'ul',
    'a',
    'abbr',
    'b',
    'bdi',
    'bdo',
    'br',
    'cite',
    'code',
    'data',
    'dfn',
    'em',
    'i',
    'kbd',
    'mark',
    'q',
    'rb',
    'rp',
    'rt',
    'rtc',
    'ruby',
    's',
    'samp',
    'small',
    'span',
    'strong',
    'sub',
    'sup',
    'time',
    'u',
    'var',
    'wbr',
    'caption',
    'col',
    'colgroup',
    'table',
    'tbody',
    'td',
    'tfoot',
    'th',
    'thead',
    'tr',
  ],
  nonBooleanAttributes: [
    'abbr',
    'accept',
    'accept-charset',
    'accesskey',
    'action',
    'allow',
    'alt',
    'as',
    'autocapitalize',
    'autocomplete',
    'blocking',
    'charset',
    'cite',
    'class',
    'color',
    'cols',
    'colspan',
    'content',
    'contenteditable',
    'coords',
    'crossorigin',
    'data',
    'datetime',
    'decoding',
    'dir',
    'dirname',
    'download',
    'draggable',
    'enctype',
    'enterkeyhint',
    'fetchpriority',
    'for',
    'form',
    'formaction',
    'formenctype',
    'formmethod',
    'formtarget',
    'headers',
    'height',
    'hidden',
    'high',
    'href',
    'hreflang',
    'http-equiv',
    'id',
    'imagesizes',
    'imagesrcset',
    'inputmode',
    'integrity',
    'is',
    'itemid',
    'itemprop',
    'itemref',
    'itemtype',
    'kind',
    'label',
    'lang',
    'list',
    'loading',
    'low',
    'max',
    'maxlength',
    'media',
    'method',
    'min',
    'minlength',
    'name',
    'nonce',
    'optimum',
    'pattern',
    'ping',
    'placeholder',
    'popover',
    'popovertarget',
    'popovertargetaction',
    'poster',
    'preload',
    'referrerpolicy',
    'rel',
    'rows',
    'rowspan',
    'sandbox',
    'scope',
    'shape',
    'size',
    'sizes',
    'slot',
    'span',
    'spellcheck',
    'src',
    'srcdoc',
    'srclang',
    'srcset',
    'start',
    'step',
    'style',
    'tabindex',
    'target',
    'title',
    'translate',
    'type',
    'usemap',
    'value',
    'width',
    'wrap',
    'style',
    'href',
    'height',
    'width',
    'class',
    'id',
    'src',
    'top',
    'left',
    'bottom',
    'right',
    'xmlns',
    'name',
    'content',
    'position',
    'colspan',
    'rowspan',
    'http-equiv',
    'valign',
    'xmlns:v',
    'xmlns:o',
    'xmlns:w',
    'xmlns:m',
  ],
  allowedAttributes: {
    '*': [
      'abbr',
      'accept',
      'accept-charset',
      'accesskey',
      'action',
      'allow',
      'alt',
      'as',
      'autocapitalize',
      'autocomplete',
      'blocking',
      'charset',
      'cite',
      'class',
      'color',
      'cols',
      'colspan',
      'content',
      'contenteditable',
      'coords',
      'crossorigin',
      'data',
      'datetime',
      'decoding',
      'dir',
      'dirname',
      'download',
      'draggable',
      'enctype',
      'enterkeyhint',
      'fetchpriority',
      'for',
      'form',
      'formaction',
      'formenctype',
      'formmethod',
      'formtarget',
      'headers',
      'height',
      'hidden',
      'high',
      'href',
      'hreflang',
      'http-equiv',
      'id',
      'imagesizes',
      'imagesrcset',
      'inputmode',
      'integrity',
      'is',
      'itemid',
      'itemprop',
      'itemref',
      'itemtype',
      'kind',
      'label',
      'lang',
      'list',
      'loading',
      'low',
      'max',
      'maxlength',
      'media',
      'method',
      'min',
      'minlength',
      'name',
      'nonce',
      'optimum',
      'pattern',
      'ping',
      'placeholder',
      'popover',
      'popovertarget',
      'popovertargetaction',
      'poster',
      'preload',
      'referrerpolicy',
      'rel',
      'rows',
      'rowspan',
      'sandbox',
      'scope',
      'shape',
      'size',
      'sizes',
      'slot',
      'span',
      'spellcheck',
      'src',
      'srcdoc',
      'srclang',
      'srcset',
      'start',
      'step',
      'style',
      'tabindex',
      'target',
      'title',
      'translate',
      'type',
      'usemap',
      'value',
      'width',
      'wrap',
      'style',
      'href',
      'height',
      'width',
      'class',
      'id',
      'src',
      'top',
      'left',
      'bottom',
      'right',
      'xmlns',
      'name',
      'content',
      'position',
      'colspan',
      'rowspan',
      'http-equiv',
      'valign',
      'xmlns:v',
      'xmlns:o',
      'xmlns:w',
      'xmlns:m',
    ],
  },
  allowedSchemes: ['data', 'priorlink', 'xmlns', 'urn', 'http', 'https', 'mailto'],
  enforceHtmlBoundary: true,
};

export function getPayloadType(payload: string, suggested_mime: string = 'text/plain') {
  // PDF
  if (!payload.indexOf('%PDF-')) {
    return 'application/pdf';
  }
  // HTML.
  // Credit for validation regex goes to CSáµ  (https://stackoverflow.com/questions/15458876/check-if-a-string-is-html-or-not)
  if (HTML_REGEX.test(payload)) {
    return 'text/html';
  }
  // Passthrough mime if we cannot detect a special mime.
  return suggested_mime;
}

export function stringToBlob(data: string, mime: string = payloadMIMEOptions.DEFAULT): Blob {
  return new Blob([data], {
    type: mime,
  });
}

export function extractHTMLFromPayload(data: string): string {
  const results = HTML_EXTRACTION_REGEX.exec(data);
  if (results && results.length) {
    return results.shift();
  }
  return data;
}

// TODO: Switch over to using DicomBufferCODEC from dcmjs once PR #455 is merged and a new release
// is provided
export function toUTF8(data: string, initialEncoding: string = 'latin1'): string {
  return Buffer.from(data, initialEncoding).toString('utf-8');
}

export function sanitizeHTML(data: string): string {
  let html = toUTF8(data);
  html = extractHTMLFromPayload(html);
  return sanitize(html, htmlSanitizerOptions);
}

export function fromBase64(data: string): string {
  try {
    return window.atob(data);
  } catch {
    return data;
  }
}
