(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("AMI", [], factory);
	else if(typeof exports === 'object')
		exports["AMI"] = factory();
	else
		root["AMI"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./external/scripts/jpeg.js":
/*!**********************************!*\
  !*** ./external/scripts/jpeg.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

// jshint ignore: start

/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /
 /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
/*
 Copyright 2011 notmasteryet

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

// - The JPEG specification can be found in the ITU CCITT Recommendation T.81
//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)
// - The JFIF specification can be found in the JPEG File Interchange Format
//   (www.w3.org/Graphics/JPEG/jfif3.pdf)
// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters
//   in PostScript Level 2, Technical Note #5116
//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)

var ColorSpace = {Unkown: 0, Grayscale: 1, AdobeRGB: 2, RGB: 3, CYMK: 4};
var JpegImage = (function jpegImage() {
  "use strict";
  var dctZigZag = new Int32Array([
    0,
    1, 8,
    16, 9, 2,
    3, 10, 17, 24,
    32, 25, 18, 11, 4,
    5, 12, 19, 26, 33, 40,
    48, 41, 34, 27, 20, 13, 6,
    7, 14, 21, 28, 35, 42, 49, 56,
    57, 50, 43, 36, 29, 22, 15,
    23, 30, 37, 44, 51, 58,
    59, 52, 45, 38, 31,
    39, 46, 53, 60,
    61, 54, 47,
    55, 62,
    63
  ]);

  var dctCos1 = 4017;   // cos(pi/16)
  var dctSin1 = 799;   // sin(pi/16)
  var dctCos3 = 3406;   // cos(3*pi/16)
  var dctSin3 = 2276;   // sin(3*pi/16)
  var dctCos6 = 1567;   // cos(6*pi/16)
  var dctSin6 = 3784;   // sin(6*pi/16)
  var dctSqrt2 = 5793;   // sqrt(2)
  var dctSqrt1d2 = 2896;  // sqrt(2) / 2

  function constructor() {
  }

  function buildHuffmanTable(codeLengths, values) {
    var k = 0, code = [], i, j, length = 16;
    while (length > 0 && !codeLengths[length - 1])
      length--;
    code.push({children: [], index: 0});
    var p = code[0], q;
    for (i = 0; i < length; i++) {
      for (j = 0; j < codeLengths[i]; j++) {
        p = code.pop();
        p.children[p.index] = values[k];
        while (p.index > 0) {
          p = code.pop();
        }
        p.index++;
        code.push(p);
        while (code.length <= i) {
          code.push(q = {children: [], index: 0});
          p.children[p.index] = q.children;
          p = q;
        }
        k++;
      }
      if (i + 1 < length) {
        // p here points to last code
        code.push(q = {children: [], index: 0});
        p.children[p.index] = q.children;
        p = q;
      }
    }
    return code[0].children;
  }

  function getBlockBufferOffset(component, row, col) {
    return 64 * ((component.blocksPerLine + 1) * row + col);
  }

  function decodeScan(data, offset,
                      frame, components, resetInterval,
                      spectralStart, spectralEnd,
                      successivePrev, successive) {
    var precision = frame.precision;
    var samplesPerLine = frame.samplesPerLine;
    var scanLines = frame.scanLines;
    var mcusPerLine = frame.mcusPerLine;
    var progressive = frame.progressive;
    var maxH = frame.maxH, maxV = frame.maxV;

    var startOffset = offset, bitsData = 0, bitsCount = 0;

    function readBit() {
      if (bitsCount > 0) {
        bitsCount--;
        return (bitsData >> bitsCount) & 1;
      }
      bitsData = data[offset++];
      if (bitsData == 0xFF) {
        var nextByte = data[offset++];
        if (nextByte) {
          throw "unexpected marker: " + ((bitsData << 8) | nextByte).toString(16);
        }
        // unstuff 0
      }
      bitsCount = 7;
      return bitsData >>> 7;
    }

    function decodeHuffman(tree) {
      var node = tree;
      var bit;
      while ((bit = readBit()) !== null) {
        node = node[bit];
        if (typeof node === 'number')
          return node;
        if (typeof node !== 'object')
          throw "invalid huffman sequence";
      }
      return null;
    }

    function receive(length) {
      var n = 0;
      while (length > 0) {
        var bit = readBit();
        if (bit === null)
          return;
        n = (n << 1) | bit;
        length--;
      }
      return n;
    }

    function receiveAndExtend(length) {
      var n = receive(length);
      if (n >= 1 << (length - 1))
        return n;
      return n + (-1 << length) + 1;
    }

    function decodeBaseline(component, offset) {
      var t = decodeHuffman(component.huffmanTableDC);
      var diff = t === 0 ? 0 : receiveAndExtend(t);
      component.blockData[offset] = (component.pred += diff);
      var k = 1;
      while (k < 64) {
        var rs = decodeHuffman(component.huffmanTableAC);
        var s = rs & 15, r = rs >> 4;
        if (s === 0) {
          if (r < 15)
            break;
          k += 16;
          continue;
        }
        k += r;
        var z = dctZigZag[k];
        component.blockData[offset + z] = receiveAndExtend(s);
        k++;
      }
    }

    function decodeDCFirst(component, offset) {
      var t = decodeHuffman(component.huffmanTableDC);
      var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);
      component.blockData[offset] = (component.pred += diff);
    }

    function decodeDCSuccessive(component, offset) {
      component.blockData[offset] |= readBit() << successive;
    }

    var eobrun = 0;
    function decodeACFirst(component, offset) {
      if (eobrun > 0) {
        eobrun--;
        return;
      }
      var k = spectralStart, e = spectralEnd;
      while (k <= e) {
        var rs = decodeHuffman(component.huffmanTableAC);
        var s = rs & 15, r = rs >> 4;
        if (s === 0) {
          if (r < 15) {
            eobrun = receive(r) + (1 << r) - 1;
            break;
          }
          k += 16;
          continue;
        }
        k += r;
        var z = dctZigZag[k];
        component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);
        k++;
      }
    }

    var successiveACState = 0, successiveACNextValue;
    function decodeACSuccessive(component, offset) {
      var k = spectralStart, e = spectralEnd, r = 0;
      while (k <= e) {
        var z = dctZigZag[k];
        switch (successiveACState) {
          case 0: // initial state
            var rs = decodeHuffman(component.huffmanTableAC);
            var s = rs & 15;
            r = rs >> 4;
            if (s === 0) {
              if (r < 15) {
                eobrun = receive(r) + (1 << r);
                successiveACState = 4;
              } else {
                r = 16;
                successiveACState = 1;
              }
            } else {
              if (s !== 1)
                throw "invalid ACn encoding";
              successiveACNextValue = receiveAndExtend(s);
              successiveACState = r ? 2 : 3;
            }
            continue;
          case 1: // skipping r zero items
          case 2:
            if (component.blockData[offset + z]) {
              component.blockData[offset + z] += (readBit() << successive);
            } else {
              r--;
              if (r === 0)
                successiveACState = successiveACState == 2 ? 3 : 0;
            }
            break;
          case 3: // set value for a zero item
            if (component.blockData[offset + z]) {
              component.blockData[offset + z] += (readBit() << successive);
            } else {
              component.blockData[offset + z] = successiveACNextValue << successive;
              successiveACState = 0;
            }
            break;
          case 4: // eob
            if (component.blockData[offset + z]) {
              component.blockData[offset + z] += (readBit() << successive);
            }
            break;
        }
        k++;
      }
      if (successiveACState === 4) {
        eobrun--;
        if (eobrun === 0)
          successiveACState = 0;
      }
    }

    function decodeMcu(component, decode, mcu, row, col) {
      var mcuRow = (mcu / mcusPerLine) | 0;
      var mcuCol = mcu % mcusPerLine;
      var blockRow = mcuRow * component.v + row;
      var blockCol = mcuCol * component.h + col;
      var offset = getBlockBufferOffset(component, blockRow, blockCol);
      decode(component, offset);
    }

    function decodeBlock(component, decode, mcu) {
      var blockRow = (mcu / component.blocksPerLine) | 0;
      var blockCol = mcu % component.blocksPerLine;
      var offset = getBlockBufferOffset(component, blockRow, blockCol);
      decode(component, offset);
    }

    var componentsLength = components.length;
    var component, i, j, k, n;
    var decodeFn;
    if (progressive) {
      if (spectralStart === 0)
        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
      else
        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
    } else {
      decodeFn = decodeBaseline;
    }

    var mcu = 0, marker;
    var mcuExpected;
    if (componentsLength == 1) {
      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
    } else {
      mcuExpected = mcusPerLine * frame.mcusPerColumn;
    }
    if (!resetInterval) {
      resetInterval = mcuExpected;
    }

    var h, v;
    while (mcu < mcuExpected) {
      // reset interval stuff
      for (i = 0; i < componentsLength; i++) {
        components[i].pred = 0;
      }
      eobrun = 0;

      if (componentsLength == 1) {
        component = components[0];
        for (n = 0; n < resetInterval; n++) {
          decodeBlock(component, decodeFn, mcu);
          mcu++;
        }
      } else {
        for (n = 0; n < resetInterval; n++) {
          for (i = 0; i < componentsLength; i++) {
            component = components[i];
            h = component.h;
            v = component.v;
            for (j = 0; j < v; j++) {
              for (k = 0; k < h; k++) {
                decodeMcu(component, decodeFn, mcu, j, k);
              }
            }
          }
          mcu++;
        }
      }

      // find marker
      bitsCount = 0;
      marker = (data[offset] << 8) | data[offset + 1];
      if (marker <= 0xFF00) {
        throw "marker was not found";
      }

      if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx
        offset += 2;
      } else {
        break;
      }
    }

    return offset - startOffset;
  }

  // A port of poppler's IDCT method which in turn is taken from:
  //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,
  //   "Practical Fast 1-D DCT Algorithms with 11 Multiplications",
  //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,
  //   988-991.
  function quantizeAndInverse(component, blockBufferOffset, p) {
    var qt = component.quantizationTable;
    var v0, v1, v2, v3, v4, v5, v6, v7, t;
    var i;

    // dequant
    for (i = 0; i < 64; i++) {
      p[i] = component.blockData[blockBufferOffset + i] * qt[i];
    }

    // inverse DCT on rows
    for (i = 0; i < 8; ++i) {
      var row = 8 * i;

      // check for all-zero AC coefficients
      if (p[1 + row] === 0 && p[2 + row] === 0 && p[3 + row] === 0 &&
        p[4 + row] === 0 && p[5 + row] === 0 && p[6 + row] === 0 &&
        p[7 + row] === 0) {
        t = (dctSqrt2 * p[0 + row] + 512) >> 10;
        p[0 + row] = t;
        p[1 + row] = t;
        p[2 + row] = t;
        p[3 + row] = t;
        p[4 + row] = t;
        p[5 + row] = t;
        p[6 + row] = t;
        p[7 + row] = t;
        continue;
      }

      // stage 4
      v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;
      v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;
      v2 = p[2 + row];
      v3 = p[6 + row];
      v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;
      v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;
      v5 = p[3 + row] << 4;
      v6 = p[5 + row] << 4;

      // stage 3
      t = (v0 - v1 + 1) >> 1;
      v0 = (v0 + v1 + 1) >> 1;
      v1 = t;
      t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;
      v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;
      v3 = t;
      t = (v4 - v6 + 1) >> 1;
      v4 = (v4 + v6 + 1) >> 1;
      v6 = t;
      t = (v7 + v5 + 1) >> 1;
      v5 = (v7 - v5 + 1) >> 1;
      v7 = t;

      // stage 2
      t = (v0 - v3 + 1) >> 1;
      v0 = (v0 + v3 + 1) >> 1;
      v3 = t;
      t = (v1 - v2 + 1) >> 1;
      v1 = (v1 + v2 + 1) >> 1;
      v2 = t;
      t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
      v7 = t;
      t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
      v6 = t;

      // stage 1
      p[0 + row] = v0 + v7;
      p[7 + row] = v0 - v7;
      p[1 + row] = v1 + v6;
      p[6 + row] = v1 - v6;
      p[2 + row] = v2 + v5;
      p[5 + row] = v2 - v5;
      p[3 + row] = v3 + v4;
      p[4 + row] = v3 - v4;
    }

    // inverse DCT on columns
    for (i = 0; i < 8; ++i) {
      var col = i;

      // check for all-zero AC coefficients
      if (p[1 * 8 + col] === 0 && p[2 * 8 + col] === 0 && p[3 * 8 + col] === 0 &&
        p[4 * 8 + col] === 0 && p[5 * 8 + col] === 0 && p[6 * 8 + col] === 0 &&
        p[7 * 8 + col] === 0) {
        t = (dctSqrt2 * p[i + 0] + 8192) >> 14;
        p[0 * 8 + col] = t;
        p[1 * 8 + col] = t;
        p[2 * 8 + col] = t;
        p[3 * 8 + col] = t;
        p[4 * 8 + col] = t;
        p[5 * 8 + col] = t;
        p[6 * 8 + col] = t;
        p[7 * 8 + col] = t;
        continue;
      }

      // stage 4
      v0 = (dctSqrt2 * p[0 * 8 + col] + 2048) >> 12;
      v1 = (dctSqrt2 * p[4 * 8 + col] + 2048) >> 12;
      v2 = p[2 * 8 + col];
      v3 = p[6 * 8 + col];
      v4 = (dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048) >> 12;
      v7 = (dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048) >> 12;
      v5 = p[3 * 8 + col];
      v6 = p[5 * 8 + col];

      // stage 3
      t = (v0 - v1 + 1) >> 1;
      v0 = (v0 + v1 + 1) >> 1;
      v1 = t;
      t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;
      v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;
      v3 = t;
      t = (v4 - v6 + 1) >> 1;
      v4 = (v4 + v6 + 1) >> 1;
      v6 = t;
      t = (v7 + v5 + 1) >> 1;
      v5 = (v7 - v5 + 1) >> 1;
      v7 = t;

      // stage 2
      t = (v0 - v3 + 1) >> 1;
      v0 = (v0 + v3 + 1) >> 1;
      v3 = t;
      t = (v1 - v2 + 1) >> 1;
      v1 = (v1 + v2 + 1) >> 1;
      v2 = t;
      t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
      v7 = t;
      t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
      v6 = t;

      // stage 1
      p[0 * 8 + col] = v0 + v7;
      p[7 * 8 + col] = v0 - v7;
      p[1 * 8 + col] = v1 + v6;
      p[6 * 8 + col] = v1 - v6;
      p[2 * 8 + col] = v2 + v5;
      p[5 * 8 + col] = v2 - v5;
      p[3 * 8 + col] = v3 + v4;
      p[4 * 8 + col] = v3 - v4;
    }

    // convert to 8-bit integers
    for (i = 0; i < 64; ++i) {
      var index = blockBufferOffset + i;
      var q = p[i];
      q = (q <= -2056 / component.bitConversion) ? 0 :
        (q >= 2024 / component.bitConversion) ? 255 / component.bitConversion :
        (q + 2056 / component.bitConversion) >> 4;
      component.blockData[index] = q;
    }
  }

  function buildComponentData(frame, component) {
    var lines = [];
    var blocksPerLine = component.blocksPerLine;
    var blocksPerColumn = component.blocksPerColumn;
    var samplesPerLine = blocksPerLine << 3;
    var computationBuffer = new Int32Array(64);

    var i, j, ll = 0;
    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
        var offset = getBlockBufferOffset(component, blockRow, blockCol);
        quantizeAndInverse(component, offset, computationBuffer);
      }
    }
    return component.blockData;
  }

  function clampToUint8(a) {
    return a <= 0 ? 0 : a >= 255 ? 255 : a | 0;
  }

  constructor.prototype = {
    load: function load(path) {
      var handleData = (function (data) {
        this.parse(data);
        if (this.onload)
          this.onload();
      }).bind(this);

      if (path.indexOf("data:") > -1) {
        var offset = path.indexOf("base64,") + 7;
        var data = atob(path.substring(offset));
        var arr = new Uint8Array(data.length);
        for (var i = data.length - 1; i >= 0; i--) {
          arr[i] = data.charCodeAt(i);
        }
        handleData(data);
      } else {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", path, true);
        xhr.responseType = "arraybuffer";
        xhr.onload = (function () {
          // TODO catch parse error
          var data = new Uint8Array(xhr.response);
          handleData(data);
        }).bind(this);
        xhr.send(null);
      }
    },
    parse: function parse(data) {

      function readUint16() {
        var value = (data[offset] << 8) | data[offset + 1];
        offset += 2;
        return value;
      }

      function readDataBlock() {
        var length = readUint16();
        var array = data.subarray(offset, offset + length - 2);
        offset += array.length;
        return array;
      }

      function prepareComponents(frame) {
        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);
        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
        for (var i = 0; i < frame.components.length; i++) {
          component = frame.components[i];
          var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);
          var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);
          var blocksPerLineForMcu = mcusPerLine * component.h;
          var blocksPerColumnForMcu = mcusPerColumn * component.v;

          var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
          component.blockData = new Int16Array(blocksBufferSize);
          component.blocksPerLine = blocksPerLine;
          component.blocksPerColumn = blocksPerColumn;
        }
        frame.mcusPerLine = mcusPerLine;
        frame.mcusPerColumn = mcusPerColumn;
      }

      var offset = 0, length = data.length;
      var jfif = null;
      var adobe = null;
      var pixels = null;
      var frame, resetInterval;
      var quantizationTables = [];
      var huffmanTablesAC = [], huffmanTablesDC = [];
      var fileMarker = readUint16();
      if (fileMarker != 0xFFD8) { // SOI (Start of Image)
        throw "SOI not found";
      }

      fileMarker = readUint16();
      while (fileMarker != 0xFFD9) { // EOI (End of image)
        var i, j, l;
        switch (fileMarker) {
          case 0xFFE0: // APP0 (Application Specific)
          case 0xFFE1: // APP1
          case 0xFFE2: // APP2
          case 0xFFE3: // APP3
          case 0xFFE4: // APP4
          case 0xFFE5: // APP5
          case 0xFFE6: // APP6
          case 0xFFE7: // APP7
          case 0xFFE8: // APP8
          case 0xFFE9: // APP9
          case 0xFFEA: // APP10
          case 0xFFEB: // APP11
          case 0xFFEC: // APP12
          case 0xFFED: // APP13
          case 0xFFEE: // APP14
          case 0xFFEF: // APP15
          case 0xFFFE: // COM (Comment)
            var appData = readDataBlock();

            if (fileMarker === 0xFFE0) {
              if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 &&
                appData[3] === 0x46 && appData[4] === 0) { // 'JFIF\x00'
                jfif = {
                  version: {major: appData[5], minor: appData[6]},
                  densityUnits: appData[7],
                  xDensity: (appData[8] << 8) | appData[9],
                  yDensity: (appData[10] << 8) | appData[11],
                  thumbWidth: appData[12],
                  thumbHeight: appData[13],
                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
                };
              }
            }
            // TODO APP1 - Exif
            if (fileMarker === 0xFFEE) {
              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F &&
                appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) { // 'Adobe\x00'
                adobe = {
                  version: appData[6],
                  flags0: (appData[7] << 8) | appData[8],
                  flags1: (appData[9] << 8) | appData[10],
                  transformCode: appData[11]
                };
              }
            }
            break;

          case 0xFFDB: // DQT (Define Quantization Tables)
            var quantizationTablesLength = readUint16();
            var quantizationTablesEnd = quantizationTablesLength + offset - 2;
            while (offset < quantizationTablesEnd) {
              var quantizationTableSpec = data[offset++];
              var tableData = new Int32Array(64);
              if ((quantizationTableSpec >> 4) === 0) { // 8 bit values
                for (j = 0; j < 64; j++) {
                  var z = dctZigZag[j];
                  tableData[z] = data[offset++];
                }
              } else if ((quantizationTableSpec >> 4) === 1) { //16 bit
                for (j = 0; j < 64; j++) {
                  var zz = dctZigZag[j];
                  tableData[zz] = readUint16();
                }
              } else
                throw "DQT: invalid table spec";
              quantizationTables[quantizationTableSpec & 15] = tableData;
            }
            break;

          case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)
          case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)
          case 0xFFC2: // SOF2 (Start of Frame, Progressive DCT)
            if (frame) {
              throw "Only single frame JPEGs supported";
            }
            readUint16(); // skip data length
            frame = {};
            frame.extended = (fileMarker === 0xFFC1);
            frame.progressive = (fileMarker === 0xFFC2);
            frame.precision = data[offset++];
            frame.scanLines = readUint16();
            frame.samplesPerLine = readUint16();
            frame.components = [];
            frame.componentIds = {};
            var componentsCount = data[offset++], componentId;
            var maxH = 0, maxV = 0;
            for (i = 0; i < componentsCount; i++) {
              componentId = data[offset];
              var h = data[offset + 1] >> 4;
              var v = data[offset + 1] & 15;
              if (maxH < h)
                maxH = h;
              if (maxV < v)
                maxV = v;
              var qId = data[offset + 2];
              l = frame.components.push({
                h: h,
                v: v,
                quantizationTable: quantizationTables[qId],
                quantizationTableId: qId,
                bitConversion: 255 / ((1 << frame.precision) - 1)
              });
              frame.componentIds[componentId] = l - 1;
              offset += 3;
            }
            frame.maxH = maxH;
            frame.maxV = maxV;
            prepareComponents(frame);
            break;

          case 0xFFC4: // DHT (Define Huffman Tables)
            var huffmanLength = readUint16();
            for (i = 2; i < huffmanLength; ) {
              var huffmanTableSpec = data[offset++];
              var codeLengths = new Uint8Array(16);
              var codeLengthSum = 0;
              for (j = 0; j < 16; j++, offset++)
                codeLengthSum += (codeLengths[j] = data[offset]);
              var huffmanValues = new Uint8Array(codeLengthSum);
              for (j = 0; j < codeLengthSum; j++, offset++)
                huffmanValues[j] = data[offset];
              i += 17 + codeLengthSum;

              ((huffmanTableSpec >> 4) === 0 ?
                huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] =
                buildHuffmanTable(codeLengths, huffmanValues);
            }
            break;

          case 0xFFDD: // DRI (Define Restart Interval)
            readUint16(); // skip data length
            resetInterval = readUint16();
            break;

          case 0xFFDA: // SOS (Start of Scan)
            var scanLength = readUint16();
            var selectorsCount = data[offset++];
            var components = [], component;
            for (i = 0; i < selectorsCount; i++) {
              var componentIndex = frame.componentIds[data[offset++]];
              component = frame.components[componentIndex];
              var tableSpec = data[offset++];
              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
              components.push(component);
            }
            var spectralStart = data[offset++];
            var spectralEnd = data[offset++];
            var successiveApproximation = data[offset++];
            var processed = decodeScan(data, offset,
              frame, components, resetInterval,
              spectralStart, spectralEnd,
              successiveApproximation >> 4, successiveApproximation & 15);
            offset += processed;
            break;
          default:
            if (data[offset - 3] == 0xFF &&
              data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {
              // could be incorrect encoding -- last 0xFF byte of the previous
              // block was eaten by the encoder
              offset -= 3;
              break;
            }
            throw "unknown JPEG marker " + fileMarker.toString(16);
        }
        fileMarker = readUint16();
      }

      this.width = frame.samplesPerLine;
      this.height = frame.scanLines;
      this.jfif = jfif;
      this.adobe = adobe;
      this.components = [];
      switch (frame.components.length)
      {
        case 1:
          this.colorspace = ColorSpace.Grayscale;
          break;
        case 3:
          if (this.adobe)
            this.colorspace = ColorSpace.AdobeRGB;
          else
            this.colorspace = ColorSpace.RGB;
          break;
        case 4:
          this.colorspace = ColorSpace.CYMK;
          break;
        default:
          this.colorspace = ColorSpace.Unknown;
      }
      for (var i = 0; i < frame.components.length; i++) {
        var component = frame.components[i];
        if (!component.quantizationTable && component.quantizationTableId !== null)
          component.quantizationTable = quantizationTables[component.quantizationTableId];
        this.components.push({
          output: buildComponentData(frame, component),
          scaleX: component.h / frame.maxH,
          scaleY: component.v / frame.maxV,
          blocksPerLine: component.blocksPerLine,
          blocksPerColumn: component.blocksPerColumn,
          bitConversion: component.bitConversion
        });
      }
    },
    getData16: function getData16(width, height) {
      if (this.components.length !== 1)
        throw 'Unsupported color mode';
      var scaleX = this.width / width, scaleY = this.height / height;

      var component, componentScaleX, componentScaleY;
      var x, y, i;
      var offset = 0;
      var numComponents = this.components.length;
      var dataLength = width * height * numComponents;
      var data = new Uint16Array(dataLength);
      var componentLine;

      // lineData is reused for all components. Assume first component is
      // the biggest
      var lineData = new Uint16Array((this.components[0].blocksPerLine << 3) *
      this.components[0].blocksPerColumn * 8);

      // First construct image data ...
      for (i = 0; i < numComponents; i++) {
        component = this.components[i];
        var blocksPerLine = component.blocksPerLine;
        var blocksPerColumn = component.blocksPerColumn;
        var samplesPerLine = blocksPerLine << 3;

        var j, k, ll = 0;
        var lineOffset = 0;
        for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
          var scanLine = blockRow << 3;
          for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
            var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);
            var offset = 0, sample = blockCol << 3;
            for (j = 0; j < 8; j++) {
              var lineOffset = (scanLine + j) * samplesPerLine;
              for (k = 0; k < 8; k++) {
                lineData[lineOffset + sample + k] =
                  component.output[bufferOffset + offset++];
              }
            }
          }
        }

        componentScaleX = component.scaleX * scaleX;
        componentScaleY = component.scaleY * scaleY;
        offset = i;

        var cx, cy;
        var index;
        for (y = 0; y < height; y++) {
          for (x = 0; x < width; x++) {
            cy = 0 | (y * componentScaleY);
            cx = 0 | (x * componentScaleX);
            index = cy * samplesPerLine + cx;
            data[offset] = lineData[index];
            offset += numComponents;
          }
        }
      }
      return data;
    },
    getData: function getData(width, height) {
      var scaleX = this.width / width, scaleY = this.height / height;

      var component, componentScaleX, componentScaleY;
      var x, y, i;
      var offset = 0;
      var Y, Cb, Cr, K, C, M, Ye, R, G, B;
      var colorTransform;
      var numComponents = this.components.length;
      var dataLength = width * height * numComponents;
      var data = new Uint8Array(dataLength);
      var componentLine;

      // lineData is reused for all components. Assume first component is
      // the biggest
      var lineData = new Uint8Array((this.components[0].blocksPerLine << 3) *
      this.components[0].blocksPerColumn * 8);

      // First construct image data ...
      for (i = 0; i < numComponents; i++) {
        component = this.components[i];
        var blocksPerLine = component.blocksPerLine;
        var blocksPerColumn = component.blocksPerColumn;
        var samplesPerLine = blocksPerLine << 3;

        var j, k, ll = 0;
        var lineOffset = 0;
        for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
          var scanLine = blockRow << 3;
          for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
            var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);
            var offset = 0, sample = blockCol << 3;
            for (j = 0; j < 8; j++) {
              var lineOffset = (scanLine + j) * samplesPerLine;
              for (k = 0; k < 8; k++) {
                lineData[lineOffset + sample + k] =
                  component.output[bufferOffset + offset++] * component.bitConversion;
              }
            }
          }
        }

        componentScaleX = component.scaleX * scaleX;
        componentScaleY = component.scaleY * scaleY;
        offset = i;

        var cx, cy;
        var index;
        for (y = 0; y < height; y++) {
          for (x = 0; x < width; x++) {
            cy = 0 | (y * componentScaleY);
            cx = 0 | (x * componentScaleX);
            index = cy * samplesPerLine + cx;
            data[offset] = lineData[index];
            offset += numComponents;
          }
        }
      }

      // ... then transform colors, if necessary
      switch (numComponents) {
        case 1:
        case 2:
          break;
        // no color conversion for one or two compoenents

        case 3:
          // The default transform for three components is true
          colorTransform = true;
          // The adobe transform marker overrides any previous setting
          if (this.adobe && this.adobe.transformCode)
            colorTransform = true;
          else if (typeof this.colorTransform !== 'undefined')
            colorTransform = !!this.colorTransform;

          if (colorTransform) {
            for (i = 0; i < dataLength; i += numComponents) {
              Y = data[i    ];
              Cb = data[i + 1];
              Cr = data[i + 2];

              R = clampToUint8(Y - 179.456 + 1.402 * Cr);
              G = clampToUint8(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);
              B = clampToUint8(Y - 226.816 + 1.772 * Cb);

              data[i    ] = R;
              data[i + 1] = G;
              data[i + 2] = B;
            }
          }
          break;
        case 4:
          if (!this.adobe)
            throw 'Unsupported color mode (4 components)';
          // The default transform for four components is false
          colorTransform = false;
          // The adobe transform marker overrides any previous setting
          if (this.adobe && this.adobe.transformCode)
            colorTransform = true;
          else if (typeof this.colorTransform !== 'undefined')
            colorTransform = !!this.colorTransform;

          if (colorTransform) {
            for (i = 0; i < dataLength; i += numComponents) {
              Y = data[i];
              Cb = data[i + 1];
              Cr = data[i + 2];

              C = clampToUint8(434.456 - Y - 1.402 * Cr);
              M = clampToUint8(119.541 - Y + 0.344 * Cb + 0.714 * Cr);
              Y = clampToUint8(481.816 - Y - 1.772 * Cb);

              data[i    ] = C;
              data[i + 1] = M;
              data[i + 2] = Y;
              // K is unchanged
            }
          }
          break;
        default:
          throw 'Unsupported color mode';
      }
      return data;
    }
  };

  return constructor;
})();

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = JpegImage;
}

/***/ }),

/***/ "./external/scripts/jpx.js":
/*!*********************************!*\
  !*** ./external/scripts/jpx.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*! image-JPEG2000 - v0.3.1 - 2015-08-26 | https://github.com/OHIF/image-JPEG2000 */
/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
/* Copyright 2012 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* globals ArithmeticDecoder, globalScope, log2, readUint16, readUint32,
           info, warn */



var JpxImage = (function JpxImageClosure() {
  // Table E.1
  var SubbandsGainLog2 = {
    'LL': 0,
    'LH': 1,
    'HL': 1,
    'HH': 2
  };
  function JpxImage() {
    this.failOnCorruptedImage = false;
  }
  JpxImage.prototype = {
    parse: function JpxImage_parse(data) {

      var head = readUint16(data, 0);
      // No box header, immediate start of codestream (SOC)
      if (head === 0xFF4F) {
        this.parseCodestream(data, 0, data.length);
        return;
      }

      var position = 0, length = data.length;
      while (position < length) {
        var headerSize = 8;
        var lbox = readUint32(data, position);
        var tbox = readUint32(data, position + 4);
        position += headerSize;
        if (lbox === 1) {
          // XLBox: read UInt64 according to spec.
          // JavaScript's int precision of 53 bit should be sufficient here.
          lbox = readUint32(data, position) * 4294967296 +
                 readUint32(data, position + 4);
          position += 8;
          headerSize += 8;
        }
        if (lbox === 0) {
          lbox = length - position + headerSize;
        }
        if (lbox < headerSize) {
          throw new Error('JPX Error: Invalid box field size');
        }
        var dataLength = lbox - headerSize;
        var jumpDataLength = true;
        switch (tbox) {
          case 0x6A703268: // 'jp2h'
            jumpDataLength = false; // parsing child boxes
            break;
          case 0x636F6C72: // 'colr'
            // Colorspaces are not used, the CS from the PDF is used.
            var method = data[position];
            var precedence = data[position + 1];
            var approximation = data[position + 2];
            if (method === 1) {
              // enumerated colorspace
              var colorspace = readUint32(data, position + 3);
              switch (colorspace) {
                case 16: // this indicates a sRGB colorspace
                case 17: // this indicates a grayscale colorspace
                case 18: // this indicates a YUV colorspace
                  break;
                default:
                  warn('Unknown colorspace ' + colorspace);
                  break;
              }
            } else if (method === 2) {
              info('ICC profile not supported');
            }
            break;
          case 0x6A703263: // 'jp2c'
            this.parseCodestream(data, position, position + dataLength);
            break;
          case 0x6A502020: // 'jP\024\024'
            if (0x0d0a870a !== readUint32(data, position)) {
              warn('Invalid JP2 signature');
            }
            break;
          // The following header types are valid but currently not used:
          case 0x6A501A1A: // 'jP\032\032'
          case 0x66747970: // 'ftyp'
          case 0x72726571: // 'rreq'
          case 0x72657320: // 'res '
          case 0x69686472: // 'ihdr'
            break;
          default:
            var headerType = String.fromCharCode((tbox >> 24) & 0xFF,
                                                 (tbox >> 16) & 0xFF,
                                                 (tbox >> 8) & 0xFF,
                                                 tbox & 0xFF);
            warn('Unsupported header type ' + tbox + ' (' + headerType + ')');
            break;
        }
        if (jumpDataLength) {
          position += dataLength;
        }
      }
    },
    parseImageProperties: function JpxImage_parseImageProperties(stream) {
      var newByte = stream.getByte();
      while (newByte >= 0) {
        var oldByte = newByte;
        newByte = stream.getByte();
        var code = (oldByte << 8) | newByte;
        // Image and tile size (SIZ)
        if (code === 0xFF51) {
          stream.skip(4);
          var Xsiz = stream.getInt32() >>> 0; // Byte 4
          var Ysiz = stream.getInt32() >>> 0; // Byte 8
          var XOsiz = stream.getInt32() >>> 0; // Byte 12
          var YOsiz = stream.getInt32() >>> 0; // Byte 16
          stream.skip(16);
          var Csiz = stream.getUint16(); // Byte 36
          this.width = Xsiz - XOsiz;
          this.height = Ysiz - YOsiz;
          this.componentsCount = Csiz;
          // Results are always returned as Uint8Arrays
          this.bitsPerComponent = 8;
          return;
        }
      }
      throw new Error('JPX Error: No size marker found in JPX stream');
    },
    parseCodestream: function JpxImage_parseCodestream(data, start, end) {
      var context = {};
      try {
        var doNotRecover = false;
        var position = start;
        while (position + 1 < end) {
          var code = readUint16(data, position);
          position += 2;

          var length = 0, j, sqcd, spqcds, spqcdSize, scalarExpounded, tile;
          switch (code) {
            case 0xFF4F: // Start of codestream (SOC)
              context.mainHeader = true;
              break;
            case 0xFFD9: // End of codestream (EOC)
              break;
            case 0xFF51: // Image and tile size (SIZ)
              length = readUint16(data, position);
              var siz = {};
              siz.Xsiz = readUint32(data, position + 4);
              siz.Ysiz = readUint32(data, position + 8);
              siz.XOsiz = readUint32(data, position + 12);
              siz.YOsiz = readUint32(data, position + 16);
              siz.XTsiz = readUint32(data, position + 20);
              siz.YTsiz = readUint32(data, position + 24);
              siz.XTOsiz = readUint32(data, position + 28);
              siz.YTOsiz = readUint32(data, position + 32);
              var componentsCount = readUint16(data, position + 36);
              siz.Csiz = componentsCount;
              var components = [];
              j = position + 38;
              for (var i = 0; i < componentsCount; i++) {
                var component = {
                  precision: (data[j] & 0x7F) + 1,
                  isSigned: !!(data[j] & 0x80),
                  XRsiz: data[j + 1],
                  YRsiz: data[j + 1]
                };
                calculateComponentDimensions(component, siz);
                components.push(component);
              }
              context.SIZ = siz;
              context.components = components;
              calculateTileGrids(context, components);
              context.QCC = [];
              context.COC = [];
              break;
            case 0xFF5C: // Quantization default (QCD)
              length = readUint16(data, position);
              var qcd = {};
              j = position + 2;
              sqcd = data[j++];
              switch (sqcd & 0x1F) {
                case 0:
                  spqcdSize = 8;
                  scalarExpounded = true;
                  break;
                case 1:
                  spqcdSize = 16;
                  scalarExpounded = false;
                  break;
                case 2:
                  spqcdSize = 16;
                  scalarExpounded = true;
                  break;
                default:
                  throw new Error('JPX Error: Invalid SQcd value ' + sqcd);
              }
              qcd.noQuantization = (spqcdSize === 8);
              qcd.scalarExpounded = scalarExpounded;
              qcd.guardBits = sqcd >> 5;
              spqcds = [];
              while (j < length + position) {
                var spqcd = {};
                if (spqcdSize === 8) {
                  spqcd.epsilon = data[j++] >> 3;
                  spqcd.mu = 0;
                } else {
                  spqcd.epsilon = data[j] >> 3;
                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];
                  j += 2;
                }
                spqcds.push(spqcd);
              }
              qcd.SPqcds = spqcds;
              if (context.mainHeader) {
                context.QCD = qcd;
              } else {
                context.currentTile.QCD = qcd;
                context.currentTile.QCC = [];
              }
              break;
            case 0xFF5D: // Quantization component (QCC)
              length = readUint16(data, position);
              var qcc = {};
              j = position + 2;
              var cqcc;
              if (context.SIZ.Csiz < 257) {
                cqcc = data[j++];
              } else {
                cqcc = readUint16(data, j);
                j += 2;
              }
              sqcd = data[j++];
              switch (sqcd & 0x1F) {
                case 0:
                  spqcdSize = 8;
                  scalarExpounded = true;
                  break;
                case 1:
                  spqcdSize = 16;
                  scalarExpounded = false;
                  break;
                case 2:
                  spqcdSize = 16;
                  scalarExpounded = true;
                  break;
                default:
                  throw new Error('JPX Error: Invalid SQcd value ' + sqcd);
              }
              qcc.noQuantization = (spqcdSize === 8);
              qcc.scalarExpounded = scalarExpounded;
              qcc.guardBits = sqcd >> 5;
              spqcds = [];
              while (j < (length + position)) {
                spqcd = {};
                if (spqcdSize === 8) {
                  spqcd.epsilon = data[j++] >> 3;
                  spqcd.mu = 0;
                } else {
                  spqcd.epsilon = data[j] >> 3;
                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];
                  j += 2;
                }
                spqcds.push(spqcd);
              }
              qcc.SPqcds = spqcds;
              if (context.mainHeader) {
                context.QCC[cqcc] = qcc;
              } else {
                context.currentTile.QCC[cqcc] = qcc;
              }
              break;
            case 0xFF52: // Coding style default (COD)
              length = readUint16(data, position);
              var cod = {};
              j = position + 2;
              var scod = data[j++];
              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);
              cod.sopMarkerUsed = !!(scod & 2);
              cod.ephMarkerUsed = !!(scod & 4);
              cod.progressionOrder = data[j++];
              cod.layersCount = readUint16(data, j);
              j += 2;
              cod.multipleComponentTransform = data[j++];

              cod.decompositionLevelsCount = data[j++];
              cod.xcb = (data[j++] & 0xF) + 2;
              cod.ycb = (data[j++] & 0xF) + 2;
              var blockStyle = data[j++];
              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);
              cod.resetContextProbabilities = !!(blockStyle & 2);
              cod.terminationOnEachCodingPass = !!(blockStyle & 4);
              cod.verticalyStripe = !!(blockStyle & 8);
              cod.predictableTermination = !!(blockStyle & 16);
              cod.segmentationSymbolUsed = !!(blockStyle & 32);
              cod.reversibleTransformation = data[j++];
              if (cod.entropyCoderWithCustomPrecincts) {
                var precinctsSizes = [];
                while (j < length + position) {
                  var precinctsSize = data[j++];
                  precinctsSizes.push({
                    PPx: precinctsSize & 0xF,
                    PPy: precinctsSize >> 4
                  });
                }
                cod.precinctsSizes = precinctsSizes;
              }
              var unsupported = [];
              if (cod.selectiveArithmeticCodingBypass) {
                unsupported.push('selectiveArithmeticCodingBypass');
              }
              if (cod.resetContextProbabilities) {
                unsupported.push('resetContextProbabilities');
              }
              if (cod.terminationOnEachCodingPass) {
                unsupported.push('terminationOnEachCodingPass');
              }
              if (cod.verticalyStripe) {
                unsupported.push('verticalyStripe');
              }
              if (cod.predictableTermination) {
                unsupported.push('predictableTermination');
              }
              if (unsupported.length > 0) {
                doNotRecover = true;
                throw new Error('JPX Error: Unsupported COD options (' +
                                unsupported.join(', ') + ')');
              }
              if (context.mainHeader) {
                context.COD = cod;
              } else {
                context.currentTile.COD = cod;
                context.currentTile.COC = [];
              }
              break;
            case 0xFF90: // Start of tile-part (SOT)
              length = readUint16(data, position);
              tile = {};
              tile.index = readUint16(data, position + 2);
              tile.length = readUint32(data, position + 4);
              tile.dataEnd = tile.length + position - 2;
              tile.partIndex = data[position + 8];
              tile.partsCount = data[position + 9];

              context.mainHeader = false;
              if (tile.partIndex === 0) {
                // reset component specific settings
                tile.COD = context.COD;
                tile.COC = context.COC.slice(0); // clone of the global COC
                tile.QCD = context.QCD;
                tile.QCC = context.QCC.slice(0); // clone of the global COC
              }
              context.currentTile = tile;
              break;
            case 0xFF93: // Start of data (SOD)
              tile = context.currentTile;
              if (tile.partIndex === 0) {
                initializeTile(context, tile.index);
                buildPackets(context);
              }

              // moving to the end of the data
              length = tile.dataEnd - position;
              parseTilePackets(context, data, position, length);
              break;
            case 0xFF55: // Tile-part lengths, main header (TLM)
            case 0xFF57: // Packet length, main header (PLM)
            case 0xFF58: // Packet length, tile-part header (PLT)
            case 0xFF64: // Comment (COM)
              length = readUint16(data, position);
              // skipping content
              break;
            case 0xFF53: // Coding style component (COC)
              throw new Error('JPX Error: Codestream code 0xFF53 (COC) is ' +
                              'not implemented');
            default:
              throw new Error('JPX Error: Unknown codestream code: ' +
                              code.toString(16));
          }
          position += length;
        }
      } catch (e) {
        if (doNotRecover || this.failOnCorruptedImage) {
          throw e;
        } else {
          warn('Trying to recover from ' + e.message);
        }
      }
      this.tiles = transformComponents(context);
      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;
      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;
      this.componentsCount = context.SIZ.Csiz;
    }
  };
  function calculateComponentDimensions(component, siz) {
    // Section B.2 Component mapping
    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);
    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);
    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);
    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);
    component.width = component.x1 - component.x0;
    component.height = component.y1 - component.y0;
  }
  function calculateTileGrids(context, components) {
    var siz = context.SIZ;
    // Section B.3 Division into tile and tile-components
    var tile, tiles = [];
    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);
    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);
    for (var q = 0; q < numYtiles; q++) {
      for (var p = 0; p < numXtiles; p++) {
        tile = {};
        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);
        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);
        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);
        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);
        tile.width = tile.tx1 - tile.tx0;
        tile.height = tile.ty1 - tile.ty0;
        tile.components = [];
        tiles.push(tile);
      }
    }
    context.tiles = tiles;

    var componentsCount = siz.Csiz;
    for (var i = 0, ii = componentsCount; i < ii; i++) {
      var component = components[i];
      for (var j = 0, jj = tiles.length; j < jj; j++) {
        var tileComponent = {};
        tile = tiles[j];
        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);
        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);
        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);
        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);
        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;
        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;
        tile.components[i] = tileComponent;
      }
    }
  }
  function getBlocksDimensions(context, component, r) {
    var codOrCoc = component.codingStyleParameters;
    var result = {};
    if (!codOrCoc.entropyCoderWithCustomPrecincts) {
      result.PPx = 15;
      result.PPy = 15;
    } else {
      result.PPx = codOrCoc.precinctsSizes[r].PPx;
      result.PPy = codOrCoc.precinctsSizes[r].PPy;
    }
    // calculate codeblock size as described in section B.7
    result.xcb_ = (r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) :
                   Math.min(codOrCoc.xcb, result.PPx));
    result.ycb_ = (r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) :
                   Math.min(codOrCoc.ycb, result.PPy));
    return result;
  }
  function buildPrecincts(context, resolution, dimensions) {
    // Section B.6 Division resolution to precincts
    var precinctWidth = 1 << dimensions.PPx;
    var precinctHeight = 1 << dimensions.PPy;
    // Jasper introduces codeblock groups for mapping each subband codeblocks
    // to precincts. Precinct partition divides a resolution according to width
    // and height parameters. The subband that belongs to the resolution level
    // has a different size than the level, unless it is the zero resolution.

    // From Jasper documentation: jpeg2000.pdf, section K: Tier-2 coding:
    // The precinct partitioning for a particular subband is derived from a
    // partitioning of its parent LL band (i.e., the LL band at the next higher
    // resolution level)... The LL band associated with each resolution level is
    // divided into precincts... Each of the resulting precinct regions is then
    // mapped into its child subbands (if any) at the next lower resolution
    // level. This is accomplished by using the coordinate transformation
    // (u, v) = (ceil(x/2), ceil(y/2)) where (x, y) and (u, v) are the
    // coordinates of a point in the LL band and child subband, respectively.
    var isZeroRes = resolution.resLevel === 0;
    var precinctWidthInSubband = 1 << (dimensions.PPx + (isZeroRes ? 0 : -1));
    var precinctHeightInSubband = 1 << (dimensions.PPy + (isZeroRes ? 0 : -1));
    var numprecinctswide = (resolution.trx1 > resolution.trx0 ?
      Math.ceil(resolution.trx1 / precinctWidth) -
      Math.floor(resolution.trx0 / precinctWidth) : 0);
    var numprecinctshigh = (resolution.try1 > resolution.try0 ?
      Math.ceil(resolution.try1 / precinctHeight) -
      Math.floor(resolution.try0 / precinctHeight) : 0);
    var numprecincts = numprecinctswide * numprecinctshigh;

    resolution.precinctParameters = {
      precinctWidth: precinctWidth,
      precinctHeight: precinctHeight,
      numprecinctswide: numprecinctswide,
      numprecinctshigh: numprecinctshigh,
      numprecincts: numprecincts,
      precinctWidthInSubband: precinctWidthInSubband,
      precinctHeightInSubband: precinctHeightInSubband
    };
  }
  function buildCodeblocks(context, subband, dimensions) {
    // Section B.7 Division sub-band into code-blocks
    var xcb_ = dimensions.xcb_;
    var ycb_ = dimensions.ycb_;
    var codeblockWidth = 1 << xcb_;
    var codeblockHeight = 1 << ycb_;
    var cbx0 = subband.tbx0 >> xcb_;
    var cby0 = subband.tby0 >> ycb_;
    var cbx1 = (subband.tbx1 + codeblockWidth - 1) >> xcb_;
    var cby1 = (subband.tby1 + codeblockHeight - 1) >> ycb_;
    var precinctParameters = subband.resolution.precinctParameters;
    var codeblocks = [];
    var precincts = [];
    var i, j, codeblock, precinctNumber;
    for (j = cby0; j < cby1; j++) {
      for (i = cbx0; i < cbx1; i++) {
        codeblock = {
          cbx: i,
          cby: j,
          tbx0: codeblockWidth * i,
          tby0: codeblockHeight * j,
          tbx1: codeblockWidth * (i + 1),
          tby1: codeblockHeight * (j + 1)
        };

        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);
        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);
        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);
        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);

        // Calculate precinct number for this codeblock, codeblock position
        // should be relative to its subband, use actual dimension and position
        // See comment about codeblock group width and height
        var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) /
          precinctParameters.precinctWidthInSubband);
        var pj = Math.floor((codeblock.tby0_ - subband.tby0) /
          precinctParameters.precinctHeightInSubband);
        precinctNumber = pi + (pj * precinctParameters.numprecinctswide);

        codeblock.precinctNumber = precinctNumber;
        codeblock.subbandType = subband.type;
        codeblock.Lblock = 3;

        if (codeblock.tbx1_ <= codeblock.tbx0_ ||
            codeblock.tby1_ <= codeblock.tby0_) {
          continue;
        }
        codeblocks.push(codeblock);
        // building precinct for the sub-band
        var precinct = precincts[precinctNumber];
        if (precinct !== undefined) {
          if (i < precinct.cbxMin) {
            precinct.cbxMin = i;
          } else if (i > precinct.cbxMax) {
            precinct.cbxMax = i;
          }
          if (j < precinct.cbyMin) {
            precinct.cbxMin = j;
          } else if (j > precinct.cbyMax) {
            precinct.cbyMax = j;
          }
        } else {
          precincts[precinctNumber] = precinct = {
            cbxMin: i,
            cbyMin: j,
            cbxMax: i,
            cbyMax: j
          };
        }
        codeblock.precinct = precinct;
      }
    }
    subband.codeblockParameters = {
      codeblockWidth: xcb_,
      codeblockHeight: ycb_,
      numcodeblockwide: cbx1 - cbx0 + 1,
      numcodeblockhigh: cby1 - cby0 + 1
    };
    subband.codeblocks = codeblocks;
    subband.precincts = precincts;
  }
  function createPacket(resolution, precinctNumber, layerNumber) {
    var precinctCodeblocks = [];
    // Section B.10.8 Order of info in packet
    var subbands = resolution.subbands;
    // sub-bands already ordered in 'LL', 'HL', 'LH', and 'HH' sequence
    for (var i = 0, ii = subbands.length; i < ii; i++) {
      var subband = subbands[i];
      var codeblocks = subband.codeblocks;
      for (var j = 0, jj = codeblocks.length; j < jj; j++) {
        var codeblock = codeblocks[j];
        if (codeblock.precinctNumber !== precinctNumber) {
          continue;
        }
        precinctCodeblocks.push(codeblock);
      }
    }
    return {
      layerNumber: layerNumber,
      codeblocks: precinctCodeblocks
    };
  }
  function LayerResolutionComponentPositionIterator(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var layersCount = tile.codingStyleDefaultParameters.layersCount;
    var componentsCount = siz.Csiz;
    var maxDecompositionLevelsCount = 0;
    for (var q = 0; q < componentsCount; q++) {
      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,
        tile.components[q].codingStyleParameters.decompositionLevelsCount);
    }

    var l = 0, r = 0, i = 0, k = 0;

    this.nextPacket = function JpxImage_nextPacket() {
      // Section B.12.1.1 Layer-resolution-component-position
      for (; l < layersCount; l++) {
        for (; r <= maxDecompositionLevelsCount; r++) {
          for (; i < componentsCount; i++) {
            var component = tile.components[i];
            if (r > component.codingStyleParameters.decompositionLevelsCount) {
              continue;
            }

            var resolution = component.resolutions[r];
            var numprecincts = resolution.precinctParameters.numprecincts;
            for (; k < numprecincts;) {
              var packet = createPacket(resolution, k, l);
              k++;
              return packet;
            }
            k = 0;
          }
          i = 0;
        }
        r = 0;
      }
    };
  }
  function ResolutionLayerComponentPositionIterator(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var layersCount = tile.codingStyleDefaultParameters.layersCount;
    var componentsCount = siz.Csiz;
    var maxDecompositionLevelsCount = 0;
    for (var q = 0; q < componentsCount; q++) {
      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,
        tile.components[q].codingStyleParameters.decompositionLevelsCount);
    }

    var r = 0, l = 0, i = 0, k = 0;

    this.nextPacket = function JpxImage_nextPacket() {
      // Section B.12.1.2 Resolution-layer-component-position
      for (; r <= maxDecompositionLevelsCount; r++) {
        for (; l < layersCount; l++) {
          for (; i < componentsCount; i++) {
            var component = tile.components[i];
            if (r > component.codingStyleParameters.decompositionLevelsCount) {
              continue;
            }

            var resolution = component.resolutions[r];
            var numprecincts = resolution.precinctParameters.numprecincts;
            for (; k < numprecincts;) {
              var packet = createPacket(resolution, k, l);
              k++;
              return packet;
            }
            k = 0;
          }
          i = 0;
        }
        l = 0;
      }
    };
  }
  function ResolutionPositionComponentLayerIterator(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var layersCount = tile.codingStyleDefaultParameters.layersCount;
    var componentsCount = siz.Csiz;
    var l, r, c, p;
    var maxDecompositionLevelsCount = 0;
    for (c = 0; c < componentsCount; c++) {
      var component = tile.components[c];
      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,
        component.codingStyleParameters.decompositionLevelsCount);
    }
    var maxNumPrecinctsInLevel = new Int32Array(
      maxDecompositionLevelsCount + 1);
    for (r = 0; r <= maxDecompositionLevelsCount; ++r) {
      var maxNumPrecincts = 0;
      for (c = 0; c < componentsCount; ++c) {
        var resolutions = tile.components[c].resolutions;
        if (r < resolutions.length) {
          maxNumPrecincts = Math.max(maxNumPrecincts,
            resolutions[r].precinctParameters.numprecincts);
        }
      }
      maxNumPrecinctsInLevel[r] = maxNumPrecincts;
    }
    l = 0;
    r = 0;
    c = 0;
    p = 0;

    this.nextPacket = function JpxImage_nextPacket() {
      // Section B.12.1.3 Resolution-position-component-layer
      for (; r <= maxDecompositionLevelsCount; r++) {
        for (; p < maxNumPrecinctsInLevel[r]; p++) {
          for (; c < componentsCount; c++) {
            var component = tile.components[c];
            if (r > component.codingStyleParameters.decompositionLevelsCount) {
              continue;
            }
            var resolution = component.resolutions[r];
            var numprecincts = resolution.precinctParameters.numprecincts;
            if (p >= numprecincts) {
              continue;
            }
            for (; l < layersCount;) {
              var packet = createPacket(resolution, p, l);
              l++;
              return packet;
            }
            l = 0;
          }
          c = 0;
        }
        p = 0;
      }
    };
  }
  function PositionComponentResolutionLayerIterator(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var layersCount = tile.codingStyleDefaultParameters.layersCount;
    var componentsCount = siz.Csiz;
    var precinctsSizes = getPrecinctSizesInImageScale(tile);
    var precinctsIterationSizes = precinctsSizes;
    var l = 0, r = 0, c = 0, px = 0, py = 0;

    this.nextPacket = function JpxImage_nextPacket() {
      // Section B.12.1.4 Position-component-resolution-layer
      for (; py < precinctsIterationSizes.maxNumHigh; py++) {
        for (; px < precinctsIterationSizes.maxNumWide; px++) {
          for (; c < componentsCount; c++) {
            var component = tile.components[c];
            var decompositionLevelsCount =
              component.codingStyleParameters.decompositionLevelsCount;
            for (; r <= decompositionLevelsCount; r++) {
              var resolution = component.resolutions[r];
              var sizeInImageScale =
                precinctsSizes.components[c].resolutions[r];
              var k = getPrecinctIndexIfExist(
                px,
                py,
                sizeInImageScale,
                precinctsIterationSizes,
                resolution);
              if (k === null) {
                continue;
              }
              for (; l < layersCount;) {
                var packet = createPacket(resolution, k, l);
                l++;
                return packet;
              }
              l = 0;
            }
            r = 0;
          }
          c = 0;
        }
        px = 0;
      }
    };
  }
  function ComponentPositionResolutionLayerIterator(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var layersCount = tile.codingStyleDefaultParameters.layersCount;
    var componentsCount = siz.Csiz;
    var precinctsSizes = getPrecinctSizesInImageScale(tile);
    var l = 0, r = 0, c = 0, px = 0, py = 0;

    this.nextPacket = function JpxImage_nextPacket() {
      // Section B.12.1.5 Component-position-resolution-layer
      for (; c < componentsCount; ++c) {
        var component = tile.components[c];
        var precinctsIterationSizes = precinctsSizes.components[c];
        var decompositionLevelsCount =
          component.codingStyleParameters.decompositionLevelsCount;
        for (; py < precinctsIterationSizes.maxNumHigh; py++) {
          for (; px < precinctsIterationSizes.maxNumWide; px++) {
            for (; r <= decompositionLevelsCount; r++) {
              var resolution = component.resolutions[r];
              var sizeInImageScale = precinctsIterationSizes.resolutions[r];
              var k = getPrecinctIndexIfExist(
                px,
                py,
                sizeInImageScale,
                precinctsIterationSizes,
                resolution);
              if (k === null) {
                continue;
              }
              for (; l < layersCount;) {
                var packet = createPacket(resolution, k, l);
                l++;
                return packet;
              }
              l = 0;
            }
            r = 0;
          }
          px = 0;
        }
        py = 0;
      }
    };
  }
  function getPrecinctIndexIfExist(
    pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {
    var posX = pxIndex * precinctIterationSizes.minWidth;
    var posY = pyIndex * precinctIterationSizes.minHeight;
    if (posX % sizeInImageScale.width !== 0 ||
        posY % sizeInImageScale.height !== 0) {
      return null;
    }
    var startPrecinctRowIndex =
      (posY / sizeInImageScale.width) *
      resolution.precinctParameters.numprecinctswide;
    return (posX / sizeInImageScale.height) + startPrecinctRowIndex;
  }
  function getPrecinctSizesInImageScale(tile) {
    var componentsCount = tile.components.length;
    var minWidth = Number.MAX_VALUE;
    var minHeight = Number.MAX_VALUE;
    var maxNumWide = 0;
    var maxNumHigh = 0;
    var sizePerComponent = new Array(componentsCount);
    for (var c = 0; c < componentsCount; c++) {
      var component = tile.components[c];
      var decompositionLevelsCount =
        component.codingStyleParameters.decompositionLevelsCount;
      var sizePerResolution = new Array(decompositionLevelsCount + 1);
      var minWidthCurrentComponent = Number.MAX_VALUE;
      var minHeightCurrentComponent = Number.MAX_VALUE;
      var maxNumWideCurrentComponent = 0;
      var maxNumHighCurrentComponent = 0;
      var scale = 1;
      for (var r = decompositionLevelsCount; r >= 0; --r) {
        var resolution = component.resolutions[r];
        var widthCurrentResolution =
          scale * resolution.precinctParameters.precinctWidth;
        var heightCurrentResolution =
          scale * resolution.precinctParameters.precinctHeight;
        minWidthCurrentComponent = Math.min(
          minWidthCurrentComponent,
          widthCurrentResolution);
        minHeightCurrentComponent = Math.min(
          minHeightCurrentComponent,
          heightCurrentResolution);
        maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent,
          resolution.precinctParameters.numprecinctswide);
        maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent,
          resolution.precinctParameters.numprecinctshigh);
        sizePerResolution[r] = {
          width: widthCurrentResolution,
          height: heightCurrentResolution
        };
        scale <<= 1;
      }
      minWidth = Math.min(minWidth, minWidthCurrentComponent);
      minHeight = Math.min(minHeight, minHeightCurrentComponent);
      maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);
      maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);
      sizePerComponent[c] = {
        resolutions: sizePerResolution,
        minWidth: minWidthCurrentComponent,
        minHeight: minHeightCurrentComponent,
        maxNumWide: maxNumWideCurrentComponent,
        maxNumHigh: maxNumHighCurrentComponent
      };
    }
    return {
      components: sizePerComponent,
      minWidth: minWidth,
      minHeight: minHeight,
      maxNumWide: maxNumWide,
      maxNumHigh: maxNumHigh
    };
  }
  function buildPackets(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var componentsCount = siz.Csiz;
    // Creating resolutions and sub-bands for each component
    for (var c = 0; c < componentsCount; c++) {
      var component = tile.components[c];
      var decompositionLevelsCount =
        component.codingStyleParameters.decompositionLevelsCount;
      // Section B.5 Resolution levels and sub-bands
      var resolutions = [];
      var subbands = [];
      for (var r = 0; r <= decompositionLevelsCount; r++) {
        var blocksDimensions = getBlocksDimensions(context, component, r);
        var resolution = {};
        var scale = 1 << (decompositionLevelsCount - r);
        resolution.trx0 = Math.ceil(component.tcx0 / scale);
        resolution.try0 = Math.ceil(component.tcy0 / scale);
        resolution.trx1 = Math.ceil(component.tcx1 / scale);
        resolution.try1 = Math.ceil(component.tcy1 / scale);
        resolution.resLevel = r;
        buildPrecincts(context, resolution, blocksDimensions);
        resolutions.push(resolution);

        var subband;
        if (r === 0) {
          // one sub-band (LL) with last decomposition
          subband = {};
          subband.type = 'LL';
          subband.tbx0 = Math.ceil(component.tcx0 / scale);
          subband.tby0 = Math.ceil(component.tcy0 / scale);
          subband.tbx1 = Math.ceil(component.tcx1 / scale);
          subband.tby1 = Math.ceil(component.tcy1 / scale);
          subband.resolution = resolution;
          buildCodeblocks(context, subband, blocksDimensions);
          subbands.push(subband);
          resolution.subbands = [subband];
        } else {
          var bscale = 1 << (decompositionLevelsCount - r + 1);
          var resolutionSubbands = [];
          // three sub-bands (HL, LH and HH) with rest of decompositions
          subband = {};
          subband.type = 'HL';
          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
          subband.tby0 = Math.ceil(component.tcy0 / bscale);
          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
          subband.tby1 = Math.ceil(component.tcy1 / bscale);
          subband.resolution = resolution;
          buildCodeblocks(context, subband, blocksDimensions);
          subbands.push(subband);
          resolutionSubbands.push(subband);

          subband = {};
          subband.type = 'LH';
          subband.tbx0 = Math.ceil(component.tcx0 / bscale);
          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
          subband.tbx1 = Math.ceil(component.tcx1 / bscale);
          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
          subband.resolution = resolution;
          buildCodeblocks(context, subband, blocksDimensions);
          subbands.push(subband);
          resolutionSubbands.push(subband);

          subband = {};
          subband.type = 'HH';
          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
          subband.resolution = resolution;
          buildCodeblocks(context, subband, blocksDimensions);
          subbands.push(subband);
          resolutionSubbands.push(subband);

          resolution.subbands = resolutionSubbands;
        }
      }
      component.resolutions = resolutions;
      component.subbands = subbands;
    }
    // Generate the packets sequence
    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;
    switch (progressionOrder) {
      case 0:
        tile.packetsIterator =
          new LayerResolutionComponentPositionIterator(context);
        break;
      case 1:
        tile.packetsIterator =
          new ResolutionLayerComponentPositionIterator(context);
        break;
      case 2:
        tile.packetsIterator =
          new ResolutionPositionComponentLayerIterator(context);
        break;
      case 3:
        tile.packetsIterator =
          new PositionComponentResolutionLayerIterator(context);
        break;
      case 4:
        tile.packetsIterator =
          new ComponentPositionResolutionLayerIterator(context);
        break;
      default:
        throw new Error('JPX Error: Unsupported progression order ' +
                        progressionOrder);
    }
  }
  function parseTilePackets(context, data, offset, dataLength) {
    var position = 0;
    var buffer, bufferSize = 0, skipNextBit = false;
    function readBits(count) {
      while (bufferSize < count) {
        if(offset + position  >= data.length){
          throw new Error("Unexpected EOF");
        }
        var b = data[offset + position];
        position++;
        if (skipNextBit) {
          buffer = (buffer << 7) | b;
          bufferSize += 7;
          skipNextBit = false;
        } else {
          buffer = (buffer << 8) | b;
          bufferSize += 8;
        }
        if (b === 0xFF) {
          skipNextBit = true;
        }
      }
      bufferSize -= count;
      return (buffer >>> bufferSize) & ((1 << count) - 1);
    }
    function skipMarkerIfEqual(value) {
      if (data[offset + position - 1] === 0xFF &&
          data[offset + position] === value) {
        skipBytes(1);
        return true;
      } else if (data[offset + position] === 0xFF &&
                 data[offset + position + 1] === value) {
        skipBytes(2);
        return true;
      }
      return false;
    }
    function skipBytes(count) {
      position += count;
    }
    function alignToByte() {
      bufferSize = 0;
      if (skipNextBit) {
        position++;
        skipNextBit = false;
      }
    }
    function readCodingpasses() {
      if (readBits(1) === 0) {
        return 1;
      }
      if (readBits(1) === 0) {
        return 2;
      }
      var value = readBits(2);
      if (value < 3) {
        return value + 3;
      }
      value = readBits(5);
      if (value < 31) {
        return value + 6;
      }
      value = readBits(7);
      return value + 37;
    }
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var sopMarkerUsed = context.COD.sopMarkerUsed;
    var ephMarkerUsed = context.COD.ephMarkerUsed;
    var packetsIterator = tile.packetsIterator;
    while (position < dataLength) {
      try{
        alignToByte();
        if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {
          // Skip also marker segment length and packet sequence ID
          skipBytes(4);
        }
        var packet = packetsIterator.nextPacket();
        if (packet === undefined) {
          //No more packets. Stream is probably truncated.
          return;
        }
        if (!readBits(1)) {
          continue;
        }
        var layerNumber = packet.layerNumber;
        var queue = [], codeblock;
        for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {
          codeblock = packet.codeblocks[i];
          var precinct = codeblock.precinct;
          var codeblockColumn = codeblock.cbx - precinct.cbxMin;
          var codeblockRow = codeblock.cby - precinct.cbyMin;
          var codeblockIncluded = false;
          var firstTimeInclusion = false;
          var valueReady;
          if (codeblock['included'] !== undefined) {
            codeblockIncluded = !!readBits(1);
          } else {
            // reading inclusion tree
            precinct = codeblock.precinct;
            var inclusionTree, zeroBitPlanesTree;
            if (precinct['inclusionTree'] !== undefined) {
              inclusionTree = precinct.inclusionTree;
            } else {
              // building inclusion and zero bit-planes trees
              var width = precinct.cbxMax - precinct.cbxMin + 1;
              var height = precinct.cbyMax - precinct.cbyMin + 1;
              inclusionTree = new InclusionTree(width, height);
              zeroBitPlanesTree = new TagTree(width, height);
              precinct.inclusionTree = inclusionTree;
              precinct.zeroBitPlanesTree = zeroBitPlanesTree;
            }

            inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber);
            while (true) {
              if (position >= data.length) {
                return;
              }
              if (inclusionTree.isAboveThreshold()){
                break;
              }
              if (inclusionTree.isKnown()) {
                inclusionTree.nextLevel();
                continue;
              }
              if (readBits(1)) {
                inclusionTree.setKnown();
                if (inclusionTree.isLeaf()) {
                  codeblock.included = true;
                  codeblockIncluded = firstTimeInclusion = true;
                  break;
                } else {
                  inclusionTree.nextLevel();
                }
              } else {
                inclusionTree.incrementValue();
              }
            }
          }
          if (!codeblockIncluded) {
            continue;
          }
          if (firstTimeInclusion) {
            zeroBitPlanesTree = precinct.zeroBitPlanesTree;
            zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);
            while (true) {
              if (position >= data.length) {
                return;
              }
              if (readBits(1)) {
                valueReady = !zeroBitPlanesTree.nextLevel();
                if (valueReady) {
                  break;
                }
              } else {
                zeroBitPlanesTree.incrementValue();
              }
            }
            codeblock.zeroBitPlanes = zeroBitPlanesTree.value;
          }
          var codingpasses = readCodingpasses();
          while (readBits(1)) {
            codeblock.Lblock++;
          }
          var codingpassesLog2 = log2(codingpasses);
          // rounding down log2
          var bits = ((codingpasses < (1 << codingpassesLog2)) ?
                      codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;
          var codedDataLength = readBits(bits);
          queue.push({
            codeblock: codeblock,
            codingpasses: codingpasses,
            dataLength: codedDataLength
          });
        }
        alignToByte();
        if (ephMarkerUsed) {
          skipMarkerIfEqual(0x92);
        }
        while (queue.length > 0) {
          var packetItem = queue.shift();
          codeblock = packetItem.codeblock;
          if (codeblock['data'] === undefined) {
            codeblock.data = [];
          }
          codeblock.data.push({
            data: data,
            start: offset + position,
            end: offset + position + packetItem.dataLength,
            codingpasses: packetItem.codingpasses
          });
          position += packetItem.dataLength;
        }
      } catch (e) {
        return;
      }
    }
    return position;
  }
  function copyCoefficients(coefficients, levelWidth, levelHeight, subband,
                            delta, mb, reversible, segmentationSymbolUsed) {
    var x0 = subband.tbx0;
    var y0 = subband.tby0;
    var width = subband.tbx1 - subband.tbx0;
    var codeblocks = subband.codeblocks;
    var right = subband.type.charAt(0) === 'H' ? 1 : 0;
    var bottom = subband.type.charAt(1) === 'H' ? levelWidth : 0;

    for (var i = 0, ii = codeblocks.length; i < ii; ++i) {
      var codeblock = codeblocks[i];
      var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;
      var blockHeight = codeblock.tby1_ - codeblock.tby0_;
      if (blockWidth === 0 || blockHeight === 0) {
        continue;
      }
      if (codeblock['data'] === undefined) {
        continue;
      }

      var bitModel, currentCodingpassType;
      bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType,
                              codeblock.zeroBitPlanes, mb);
      currentCodingpassType = 2; // first bit plane starts from cleanup

      // collect data
      var data = codeblock.data, totalLength = 0, codingpasses = 0;
      var j, jj, dataItem;
      for (j = 0, jj = data.length; j < jj; j++) {
        dataItem = data[j];
        totalLength += dataItem.end - dataItem.start;
        codingpasses += dataItem.codingpasses;
      }
      var encodedData = new Int16Array(totalLength);
      var position = 0;
      for (j = 0, jj = data.length; j < jj; j++) {
        dataItem = data[j];
        var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);
        encodedData.set(chunk, position);
        position += chunk.length;
      }
      // decoding the item
      var decoder = new ArithmeticDecoder(encodedData, 0, totalLength);
      bitModel.setDecoder(decoder);

      for (j = 0; j < codingpasses; j++) {
        switch (currentCodingpassType) {
          case 0:
            bitModel.runSignificancePropogationPass();
            break;
          case 1:
            bitModel.runMagnitudeRefinementPass();
            break;
          case 2:
            bitModel.runCleanupPass();
            if (segmentationSymbolUsed) {
              bitModel.checkSegmentationSymbol();
            }
            break;
        }
        currentCodingpassType = (currentCodingpassType + 1) % 3;
      }

      var offset = (codeblock.tbx0_ - x0) + (codeblock.tby0_ - y0) * width;
      var sign = bitModel.coefficentsSign;
      var magnitude = bitModel.coefficentsMagnitude;
      var bitsDecoded = bitModel.bitsDecoded;
      var magnitudeCorrection = reversible ? 0 : 0.5;
      var k, n, nb;
      position = 0;
      // Do the interleaving of Section F.3.3 here, so we do not need
      // to copy later. LL level is not interleaved, just copied.
      var interleave = (subband.type !== 'LL');
      for (j = 0; j < blockHeight; j++) {
        var row = (offset / width) | 0; // row in the non-interleaved subband
        var levelOffset = 2 * row * (levelWidth - width) + right + bottom;
        for (k = 0; k < blockWidth; k++) {
          n = magnitude[position];
          if (n !== 0) {
            n = (n + magnitudeCorrection) * delta;
            if (sign[position] !== 0) {
              n = -n;
            }
            nb = bitsDecoded[position];
            var pos = interleave ? (levelOffset + (offset << 1)) : offset;
            if (reversible && (nb >= mb)) {
              coefficients[pos] = n;
            } else {
              coefficients[pos] = n * (1 << (mb - nb));
            }
          }
          offset++;
          position++;
        }
        offset += width - blockWidth;
      }
    }
  }
  function transformTile(context, tile, c) {
    var component = tile.components[c];
    var codingStyleParameters = component.codingStyleParameters;
    var quantizationParameters = component.quantizationParameters;
    var decompositionLevelsCount =
      codingStyleParameters.decompositionLevelsCount;
    var spqcds = quantizationParameters.SPqcds;
    var scalarExpounded = quantizationParameters.scalarExpounded;
    var guardBits = quantizationParameters.guardBits;
    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;
    var precision = context.components[c].precision;

    var reversible = codingStyleParameters.reversibleTransformation;
    var transform = (reversible ? new ReversibleTransform() :
                                  new IrreversibleTransform());

    var subbandCoefficients = [];
    var b = 0;
    for (var i = 0; i <= decompositionLevelsCount; i++) {
      var resolution = component.resolutions[i];

      var width = resolution.trx1 - resolution.trx0;
      var height = resolution.try1 - resolution.try0;
      // Allocate space for the whole sublevel.
      var coefficients = new Float32Array(width * height);

      for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {
        var mu, epsilon;
        if (!scalarExpounded) {
          // formula E-5
          mu = spqcds[0].mu;
          epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);
        } else {
          mu = spqcds[b].mu;
          epsilon = spqcds[b].epsilon;
          b++;
        }

        var subband = resolution.subbands[j];
        var gainLog2 = SubbandsGainLog2[subband.type];

        // calulate quantization coefficient (Section E.1.1.1)
        var delta = (reversible ? 1 :
          Math.pow(2, precision + gainLog2 - epsilon) * (1 + mu / 2048));
        var mb = (guardBits + epsilon - 1);

        // In the first resolution level, copyCoefficients will fill the
        // whole array with coefficients. In the succeding passes,
        // copyCoefficients will consecutively fill in the values that belong
        // to the interleaved positions of the HL, LH, and HH coefficients.
        // The LL coefficients will then be interleaved in Transform.iterate().
        copyCoefficients(coefficients, width, height, subband, delta, mb,
                         reversible, segmentationSymbolUsed);
      }
      subbandCoefficients.push({
        width: width,
        height: height,
        items: coefficients
      });
    }

    var result = transform.calculate(subbandCoefficients,
                                     component.tcx0, component.tcy0);
    return {
      left: component.tcx0,
      top: component.tcy0,
      width: result.width,
      height: result.height,
      items: result.items
    };
  }
  function transformComponents(context) {
    var siz = context.SIZ;
    var components = context.components;
    var componentsCount = siz.Csiz;
    var resultImages = [];
    for (var i = 0, ii = context.tiles.length; i < ii; i++) {
      var tile = context.tiles[i];
      var transformedTiles = [];
      var c;
      for (c = 0; c < componentsCount; c++) {
        transformedTiles[c] = transformTile(context, tile, c);
      }
      var tile0 = transformedTiles[0];
      var isSigned = components[0].isSigned;
      if (isSigned) {
        var out = new Int16Array(tile0.items.length * componentsCount);
      } else {
        var out = new Uint16Array(tile0.items.length * componentsCount);
      }
      var result = {
        left: tile0.left,
        top: tile0.top,
        width: tile0.width,
        height: tile0.height,
        items: out
      };

      // Section G.2.2 Inverse multi component transform
      var shift, offset, max, min, maxK;
      var pos = 0, j, jj, y0, y1, y2, r, g, b, k, val;
      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {
        var fourComponents = componentsCount === 4;
        var y0items = transformedTiles[0].items;
        var y1items = transformedTiles[1].items;
        var y2items = transformedTiles[2].items;
        var y3items = fourComponents ? transformedTiles[3].items : null;

        // HACK: The multiple component transform formulas below assume that
        // all components have the same precision. With this in mind, we
        // compute shift and offset only once.
        shift = components[0].precision - 8;
        offset = (128 << shift) + 0.5;
        max = 255 * (1 << shift);
        maxK = max * 0.5;
        min = -maxK;

        var component0 = tile.components[0];
        var alpha01 = componentsCount - 3;
        jj = y0items.length;
        if (!component0.codingStyleParameters.reversibleTransformation) {
          // inverse irreversible multiple component transform
          for (j = 0; j < jj; j++, pos += alpha01) {
            y0 = y0items[j] + offset;
            y1 = y1items[j];
            y2 = y2items[j];
            r = y0 + 1.402 * y2;
            g = y0 - 0.34413 * y1 - 0.71414 * y2;
            b = y0 + 1.772 * y1;
            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;
            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;
            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;
          }
        } else {
          // inverse reversible multiple component transform
          for (j = 0; j < jj; j++, pos += alpha01) {
            y0 = y0items[j] + offset;
            y1 = y1items[j];
            y2 = y2items[j];
            g = y0 - ((y2 + y1) >> 2);
            r = g + y2;
            b = g + y1;
            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;
            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;
            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;
          }
        }
        if (fourComponents) {
          for (j = 0, pos = 3; j < jj; j++, pos += 4) {
            k = y3items[j];
            out[pos] = k <= min ? 0 : k >= maxK ? 255 : (k + offset) >> shift;
          }
        }
      } else { // no multi-component transform
        for (c = 0; c < componentsCount; c++) {
          if (components[c].precision === 8){
            var items = transformedTiles[c].items;
            shift = components[c].precision - 8;
            offset = (128 << shift) + 0.5;
            max = (127.5 * (1 << shift));
            min = -max;
            for (pos = c, j = 0, jj = items.length; j < jj; j++) {
              val = items[j];
              out[pos] = val <= min ? 0 :
                         val >= max ? 255 : (val + offset) >> shift;
              pos += componentsCount;
            }
          }else{
            var isSigned = components[c].isSigned;
            var items = transformedTiles[c].items;

            if(isSigned){
              for (pos = c, j = 0, jj = items.length; j < jj; j++) {
                out[pos] = items[j];
                pos += componentsCount;
              }
            }else{
              shift = components[c].precision - 8;
              offset = (128 << shift) + 0.5;
              var precisionMax = Math.pow(2,components[c].precision)-1;
              for (pos = c, j = 0, jj = items.length; j < jj; j++) {
                val = items[j];
                out[pos] = Math.max(Math.min((val + offset),precisionMax),0);
                pos += componentsCount;
              }
            }
          }
        }
      }
      resultImages.push(result);
    }
    return resultImages;
  }
  function initializeTile(context, tileIndex) {
    var siz = context.SIZ;
    var componentsCount = siz.Csiz;
    var tile = context.tiles[tileIndex];
    for (var c = 0; c < componentsCount; c++) {
      var component = tile.components[c];
      var qcdOrQcc = (context.currentTile.QCC[c] !== undefined ?
        context.currentTile.QCC[c] : context.currentTile.QCD);
      component.quantizationParameters = qcdOrQcc;
      var codOrCoc = (context.currentTile.COC[c] !== undefined  ?
        context.currentTile.COC[c] : context.currentTile.COD);
      component.codingStyleParameters = codOrCoc;
    }
    tile.codingStyleDefaultParameters = context.currentTile.COD;
  }

  // Section B.10.2 Tag trees
  var TagTree = (function TagTreeClosure() {
    function TagTree(width, height) {
      var levelsLength = log2(Math.max(width, height)) + 1;
      this.levels = [];
      for (var i = 0; i < levelsLength; i++) {
        var level = {
          width: width,
          height: height,
          items: []
        };
        this.levels.push(level);
        width = Math.ceil(width / 2);
        height = Math.ceil(height / 2);
      }
    }
    TagTree.prototype = {
      reset: function TagTree_reset(i, j) {
        var currentLevel = 0, value = 0, level;
        while (currentLevel < this.levels.length) {
          level = this.levels[currentLevel];
          var index = i + j * level.width;
          if (level.items[index] !== undefined) {
            value = level.items[index];
            break;
          }
          level.index = index;
          i >>= 1;
          j >>= 1;
          currentLevel++;
        }
        currentLevel--;
        level = this.levels[currentLevel];
        level.items[level.index] = value;
        this.currentLevel = currentLevel;
        delete this.value;
      },
      incrementValue: function TagTree_incrementValue() {
        var level = this.levels[this.currentLevel];
        level.items[level.index]++;
      },
      nextLevel: function TagTree_nextLevel() {
        var currentLevel = this.currentLevel;
        var level = this.levels[currentLevel];
        var value = level.items[level.index];
        currentLevel--;
        if (currentLevel < 0) {
          this.value = value;
          return false;
        }

        this.currentLevel = currentLevel;
        level = this.levels[currentLevel];
        level.items[level.index] = value;
        return true;
      }
    };
    return TagTree;
  })();

  var InclusionTree = (function InclusionTreeClosure() {
    function InclusionTree(width, height) {
      var levelsLength = log2(Math.max(width, height)) + 1;
      this.levels = [];
      for (var i = 0; i < levelsLength; i++) {
        var items = new Uint8Array(width * height);
        var status = new Uint8Array(width * height);
        for (var j = 0, jj = items.length; j < jj; j++) {
          items[j] = 0;
          status[j] = 0;
        }

        var level = {
          width: width,
          height: height,
          items: items,
          status: status
        };
        this.levels.push(level);

        width = Math.ceil(width / 2);
        height = Math.ceil(height / 2);
      }
    }
    InclusionTree.prototype = {
      reset: function InclusionTree_reset(i, j, stopValue) {
        this.currentStopValue = stopValue;
        var currentLevel = 0;
        while (currentLevel < this.levels.length) {
          var level = this.levels[currentLevel];
          var index = i + j * level.width;
          level.index = index;

          i >>= 1;
          j >>= 1;
          currentLevel++;
        }

        this.currentLevel = this.levels.length - 1;
        this.minValue =this.levels[this.currentLevel].items[0];
        return;
      },
      incrementValue: function InclusionTree_incrementValue() {
        var level = this.levels[this.currentLevel];
        level.items[level.index] = level.items[level.index] + 1;
        if(level.items[level.index] > this.minValue) {
          this.minValue = level.items[level.index];
        }
      },
      nextLevel: function InclusionTree_nextLevel() {
        var currentLevel = this.currentLevel;
        currentLevel--;
        if (currentLevel < 0) {
          return false;
        } else {
          this.currentLevel = currentLevel;
          var level = this.levels[currentLevel];
          if(level.items[level.index] < this.minValue) {
            level.items[level.index] = this.minValue;
          }else if (level.items[level.index] > this.minValue) {
            this.minValue = level.items[level.index];
          }
          return true;
        }
      },
    isLeaf: function InclusionTree_isLeaf(){
      return (this.currentLevel === 0);
    },
    isAboveThreshold: function InclusionTree_isAboveThreshold(){
      var levelindex = this.currentLevel;
      var level = this.levels[levelindex];
      return (level.items[level.index] > this.currentStopValue);
    },
    isKnown: function InclusionTree_isKnown(){
      var levelindex = this.currentLevel;
      var level = this.levels[levelindex];
      return (level.status[level.index] > 0);
    },
    setKnown: function InclusionTree_setKnown(){
      var levelindex = this.currentLevel;
      var level = this.levels[levelindex];
      level.status[level.index] = 1;
      return;
    }

    };
    return InclusionTree;
  })();

  // Section D. Coefficient bit modeling
  var BitModel = (function BitModelClosure() {
    var UNIFORM_CONTEXT = 17;
    var RUNLENGTH_CONTEXT = 18;
    // Table D-1
    // The index is binary presentation: 0dddvvhh, ddd - sum of Di (0..4),
    // vv - sum of Vi (0..2), and hh - sum of Hi (0..2)
    var LLAndLHContextsLabel = new Uint8Array([
      0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4,
      7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6,
      8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8
    ]);
    var HLContextLabel = new Uint8Array([
      0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8,
      8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3,
      4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8
    ]);
    var HHContextLabel = new Uint8Array([
      0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5,
      5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8,
      8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8
    ]);

    function BitModel(width, height, subband, zeroBitPlanes, mb) {
      this.width = width;
      this.height = height;

      this.contextLabelTable = (subband === 'HH' ? HHContextLabel :
        (subband === 'HL' ? HLContextLabel : LLAndLHContextsLabel));

      var coefficientCount = width * height;

      // coefficients outside the encoding region treated as insignificant
      // add border state cells for significanceState
      this.neighborsSignificance = new Uint8Array(coefficientCount);
      this.coefficentsSign = new Uint8Array(coefficientCount);
      this.coefficentsMagnitude = mb > 14 ? new Uint32Array(coefficientCount) :
                                  mb > 6 ? new Uint16Array(coefficientCount) :
                                  new Uint8Array(coefficientCount);
      this.processingFlags = new Uint8Array(coefficientCount);

      var bitsDecoded = new Uint8Array(coefficientCount);
      if (zeroBitPlanes !== 0) {
        for (var i = 0; i < coefficientCount; i++) {
          bitsDecoded[i] = zeroBitPlanes;
        }
      }
      this.bitsDecoded = bitsDecoded;

      this.reset();
    }

    BitModel.prototype = {
      setDecoder: function BitModel_setDecoder(decoder) {
        this.decoder = decoder;
      },
      reset: function BitModel_reset() {
        // We have 17 contexts that are accessed via context labels,
        // plus the uniform and runlength context.
        this.contexts = new Int8Array(19);

        // Contexts are packed into 1 byte:
        // highest 7 bits carry the index, lowest bit carries mps
        this.contexts[0] = (4 << 1) | 0;
        this.contexts[UNIFORM_CONTEXT] = (46 << 1) | 0;
        this.contexts[RUNLENGTH_CONTEXT] = (3 << 1) | 0;
      },
      setNeighborsSignificance:
        function BitModel_setNeighborsSignificance(row, column, index) {
        var neighborsSignificance = this.neighborsSignificance;
        var width = this.width, height = this.height;
        var left = (column > 0);
        var right = (column + 1 < width);
        var i;

        if (row > 0) {
          i = index - width;
          if (left) {
            neighborsSignificance[i - 1] += 0x10;
          }
          if (right) {
            neighborsSignificance[i + 1] += 0x10;
          }
          neighborsSignificance[i] += 0x04;
        }

        if (row + 1 < height) {
          i = index + width;
          if (left) {
            neighborsSignificance[i - 1] += 0x10;
          }
          if (right) {
            neighborsSignificance[i + 1] += 0x10;
          }
          neighborsSignificance[i] += 0x04;
        }

        if (left) {
          neighborsSignificance[index - 1] += 0x01;
        }
        if (right) {
          neighborsSignificance[index + 1] += 0x01;
        }
        neighborsSignificance[index] |= 0x80;
      },
      runSignificancePropogationPass:
        function BitModel_runSignificancePropogationPass() {
        var decoder = this.decoder;
        var width = this.width, height = this.height;
        var coefficentsMagnitude = this.coefficentsMagnitude;
        var coefficentsSign = this.coefficentsSign;
        var neighborsSignificance = this.neighborsSignificance;
        var processingFlags = this.processingFlags;
        var contexts = this.contexts;
        var labels = this.contextLabelTable;
        var bitsDecoded = this.bitsDecoded;
        var processedInverseMask = ~1;
        var processedMask = 1;
        var firstMagnitudeBitMask = 2;

        for (var i0 = 0; i0 < height; i0 += 4) {
          for (var j = 0; j < width; j++) {
            var index = i0 * width + j;
            for (var i1 = 0; i1 < 4; i1++, index += width) {
              var i = i0 + i1;
              if (i >= height) {
                break;
              }
              // clear processed flag first
              processingFlags[index] &= processedInverseMask;

              if (coefficentsMagnitude[index] ||
                  !neighborsSignificance[index]) {
                continue;
              }

              var contextLabel = labels[neighborsSignificance[index]];
              var decision = decoder.readBit(contexts, contextLabel);
              if (decision) {
                var sign = this.decodeSignBit(i, j, index);
                coefficentsSign[index] = sign;
                coefficentsMagnitude[index] = 1;
                this.setNeighborsSignificance(i, j, index);
                processingFlags[index] |= firstMagnitudeBitMask;
              }
              bitsDecoded[index]++;
              processingFlags[index] |= processedMask;
            }
          }
        }
      },
      decodeSignBit: function BitModel_decodeSignBit(row, column, index) {
        var width = this.width, height = this.height;
        var coefficentsMagnitude = this.coefficentsMagnitude;
        var coefficentsSign = this.coefficentsSign;
        var contribution, sign0, sign1, significance1;
        var contextLabel, decoded;

        // calculate horizontal contribution
        significance1 = (column > 0 && coefficentsMagnitude[index - 1] !== 0);
        if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {
          sign1 = coefficentsSign[index + 1];
          if (significance1) {
            sign0 = coefficentsSign[index - 1];
            contribution = 1 - sign1 - sign0;
          } else {
            contribution = 1 - sign1 - sign1;
          }
        } else if (significance1) {
          sign0 = coefficentsSign[index - 1];
          contribution = 1 - sign0 - sign0;
        } else {
          contribution = 0;
        }
        var horizontalContribution = 3 * contribution;

        // calculate vertical contribution and combine with the horizontal
        significance1 = (row > 0 && coefficentsMagnitude[index - width] !== 0);
        if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {
          sign1 = coefficentsSign[index + width];
          if (significance1) {
            sign0 = coefficentsSign[index - width];
            contribution = 1 - sign1 - sign0 + horizontalContribution;
          } else {
            contribution = 1 - sign1 - sign1 + horizontalContribution;
          }
        } else if (significance1) {
          sign0 = coefficentsSign[index - width];
          contribution = 1 - sign0 - sign0 + horizontalContribution;
        } else {
          contribution = horizontalContribution;
        }

        if (contribution >= 0) {
          contextLabel = 9 + contribution;
          decoded = this.decoder.readBit(this.contexts, contextLabel);
        } else {
          contextLabel = 9 - contribution;
          decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;
        }
        return decoded;
      },
      runMagnitudeRefinementPass:
        function BitModel_runMagnitudeRefinementPass() {
        var decoder = this.decoder;
        var width = this.width, height = this.height;
        var coefficentsMagnitude = this.coefficentsMagnitude;
        var neighborsSignificance = this.neighborsSignificance;
        var contexts = this.contexts;
        var bitsDecoded = this.bitsDecoded;
        var processingFlags = this.processingFlags;
        var processedMask = 1;
        var firstMagnitudeBitMask = 2;
        var length = width * height;
        var width4 = width * 4;

        for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {
          indexNext = Math.min(length, index0 + width4);
          for (var j = 0; j < width; j++) {
            for (var index = index0 + j; index < indexNext; index += width) {

              // significant but not those that have just become
              if (!coefficentsMagnitude[index] ||
                (processingFlags[index] & processedMask) !== 0) {
                continue;
              }

              var contextLabel = 16;
              if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {
                processingFlags[index] ^= firstMagnitudeBitMask;
                // first refinement
               var significance = neighborsSignificance[index] & 127;
               contextLabel = significance === 0 ? 15 : 14;
              }

              var bit = decoder.readBit(contexts, contextLabel);
              coefficentsMagnitude[index] =
                (coefficentsMagnitude[index] << 1) | bit;
              bitsDecoded[index]++;
              processingFlags[index] |= processedMask;
            }
          }
        }
      },
      runCleanupPass: function BitModel_runCleanupPass() {
        var decoder = this.decoder;
        var width = this.width, height = this.height;
        var neighborsSignificance = this.neighborsSignificance;
        var coefficentsMagnitude = this.coefficentsMagnitude;
        var coefficentsSign = this.coefficentsSign;
        var contexts = this.contexts;
        var labels = this.contextLabelTable;
        var bitsDecoded = this.bitsDecoded;
        var processingFlags = this.processingFlags;
        var processedMask = 1;
        var firstMagnitudeBitMask = 2;
        var oneRowDown = width;
        var twoRowsDown = width * 2;
        var threeRowsDown = width * 3;
        var iNext;
        for (var i0 = 0; i0 < height; i0 = iNext) {
          iNext = Math.min(i0 + 4, height);
          var indexBase = i0 * width;
          var checkAllEmpty = i0 + 3 < height;
          for (var j = 0; j < width; j++) {
            var index0 = indexBase + j;
            // using the property: labels[neighborsSignificance[index]] === 0
            // when neighborsSignificance[index] === 0
            var allEmpty = (checkAllEmpty &&
              processingFlags[index0] === 0 &&
              processingFlags[index0 + oneRowDown] === 0 &&
              processingFlags[index0 + twoRowsDown] === 0 &&
              processingFlags[index0 + threeRowsDown] === 0 &&
              neighborsSignificance[index0] === 0 &&
              neighborsSignificance[index0 + oneRowDown] === 0 &&
              neighborsSignificance[index0 + twoRowsDown] === 0 &&
              neighborsSignificance[index0 + threeRowsDown] === 0);
            var i1 = 0, index = index0;
            var i = i0, sign;
            if (allEmpty) {
              var hasSignificantCoefficent =
                decoder.readBit(contexts, RUNLENGTH_CONTEXT);
              if (!hasSignificantCoefficent) {
                bitsDecoded[index0]++;
                bitsDecoded[index0 + oneRowDown]++;
                bitsDecoded[index0 + twoRowsDown]++;
                bitsDecoded[index0 + threeRowsDown]++;
                continue; // next column
              }
              i1 = (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |
                    decoder.readBit(contexts, UNIFORM_CONTEXT);
              if (i1 !== 0) {
                i = i0 + i1;
                index += i1 * width;
              }

              sign = this.decodeSignBit(i, j, index);
              coefficentsSign[index] = sign;
              coefficentsMagnitude[index] = 1;
              this.setNeighborsSignificance(i, j, index);
              processingFlags[index] |= firstMagnitudeBitMask;

              index = index0;
              for (var i2 = i0; i2 <= i; i2++, index += width) {
                bitsDecoded[index]++;
              }

              i1++;
            }
            for (i = i0 + i1; i < iNext; i++, index += width) {
              if (coefficentsMagnitude[index] ||
                (processingFlags[index] & processedMask) !== 0) {
                continue;
              }

              var contextLabel = labels[neighborsSignificance[index]];
              var decision = decoder.readBit(contexts, contextLabel);
              if (decision === 1) {
                sign = this.decodeSignBit(i, j, index);
                coefficentsSign[index] = sign;
                coefficentsMagnitude[index] = 1;
                this.setNeighborsSignificance(i, j, index);
                processingFlags[index] |= firstMagnitudeBitMask;
              }
              bitsDecoded[index]++;
            }
          }
        }
      },
      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {
        var decoder = this.decoder;
        var contexts = this.contexts;
        var symbol = (decoder.readBit(contexts, UNIFORM_CONTEXT) << 3) |
                     (decoder.readBit(contexts, UNIFORM_CONTEXT) << 2) |
                     (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |
                      decoder.readBit(contexts, UNIFORM_CONTEXT);
        if (symbol !== 0xA) {
          throw new Error('JPX Error: Invalid segmentation symbol');
        }
      }
    };

    return BitModel;
  })();

  // Section F, Discrete wavelet transformation
  var Transform = (function TransformClosure() {
    function Transform() {}

    Transform.prototype.calculate =
      function transformCalculate(subbands, u0, v0) {
      var ll = subbands[0];
      for (var i = 1, ii = subbands.length; i < ii; i++) {
        ll = this.iterate(ll, subbands[i], u0, v0);
      }
      return ll;
    };
    Transform.prototype.extend = function extend(buffer, offset, size) {
      // Section F.3.7 extending... using max extension of 4
      var i1 = offset - 1, j1 = offset + 1;
      var i2 = offset + size - 2, j2 = offset + size;
      buffer[i1--] = buffer[j1++];
      buffer[j2++] = buffer[i2--];
      buffer[i1--] = buffer[j1++];
      buffer[j2++] = buffer[i2--];
      buffer[i1--] = buffer[j1++];
      buffer[j2++] = buffer[i2--];
      buffer[i1] = buffer[j1];
      buffer[j2] = buffer[i2];
    };
    Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh,
                                                             u0, v0) {
      var llWidth = ll.width, llHeight = ll.height, llItems = ll.items;
      var width = hl_lh_hh.width;
      var height = hl_lh_hh.height;
      var items = hl_lh_hh.items;
      var i, j, k, l, u, v;

      // Interleave LL according to Section F.3.3
      for (k = 0, i = 0; i < llHeight; i++) {
        l = i * 2 * width;
        for (j = 0; j < llWidth; j++, k++, l += 2) {
          items[l] = llItems[k];
        }
      }
      // The LL band is not needed anymore.
      llItems = ll.items = null;

      var bufferPadding = 4;
      var rowBuffer = new Float32Array(width + 2 * bufferPadding);

      // Section F.3.4 HOR_SR
      if (width === 1) {
        // if width = 1, when u0 even keep items as is, when odd divide by 2
        if ((u0 & 1) !== 0) {
          for (v = 0, k = 0; v < height; v++, k += width) {
            items[k] *= 0.5;
          }
        }
      } else {
        for (v = 0, k = 0; v < height; v++, k += width) {
          rowBuffer.set(items.subarray(k, k + width), bufferPadding);

          this.extend(rowBuffer, bufferPadding, width);
          this.filter(rowBuffer, bufferPadding, width);

          items.set(
            rowBuffer.subarray(bufferPadding, bufferPadding + width),
            k);
        }
      }

      // Accesses to the items array can take long, because it may not fit into
      // CPU cache and has to be fetched from main memory. Since subsequent
      // accesses to the items array are not local when reading columns, we
      // have a cache miss every time. To reduce cache misses, get up to
      // 'numBuffers' items at a time and store them into the individual
      // buffers. The colBuffers should be small enough to fit into CPU cache.
      var numBuffers = 16;
      var colBuffers = [];
      for (i = 0; i < numBuffers; i++) {
        colBuffers.push(new Float32Array(height + 2 * bufferPadding));
      }
      var b, currentBuffer = 0;
      ll = bufferPadding + height;

      // Section F.3.5 VER_SR
      if (height === 1) {
          // if height = 1, when v0 even keep items as is, when odd divide by 2
        if ((v0 & 1) !== 0) {
          for (u = 0; u < width; u++) {
            items[u] *= 0.5;
          }
        }
      } else {
        for (u = 0; u < width; u++) {
          // if we ran out of buffers, copy several image columns at once
          if (currentBuffer === 0) {
            numBuffers = Math.min(width - u, numBuffers);
            for (k = u, l = bufferPadding; l < ll; k += width, l++) {
              for (b = 0; b < numBuffers; b++) {
                colBuffers[b][l] = items[k + b];
              }
            }
            currentBuffer = numBuffers;
          }

          currentBuffer--;
          var buffer = colBuffers[currentBuffer];
          this.extend(buffer, bufferPadding, height);
          this.filter(buffer, bufferPadding, height);

          // If this is last buffer in this group of buffers, flush all buffers.
          if (currentBuffer === 0) {
            k = u - numBuffers + 1;
            for (l = bufferPadding; l < ll; k += width, l++) {
              for (b = 0; b < numBuffers; b++) {
                items[k + b] = colBuffers[b][l];
              }
            }
          }
        }
      }

      return {
        width: width,
        height: height,
        items: items
      };
    };
    return Transform;
  })();

  // Section 3.8.2 Irreversible 9-7 filter
  var IrreversibleTransform = (function IrreversibleTransformClosure() {
    function IrreversibleTransform() {
      Transform.call(this);
    }

    IrreversibleTransform.prototype = Object.create(Transform.prototype);
    IrreversibleTransform.prototype.filter =
      function irreversibleTransformFilter(x, offset, length) {
      var len = length >> 1;
      offset = offset | 0;
      var j, n, current, next;

      var alpha = -1.586134342059924;
      var beta = -0.052980118572961;
      var gamma = 0.882911075530934;
      var delta = 0.443506852043971;
      var K = 1.230174104914001;
      var K_ = 1 / K;

      // step 1 is combined with step 3

      // step 2
      j = offset - 3;
      for (n = len + 4; n--; j += 2) {
        x[j] *= K_;
      }

      // step 1 & 3
      j = offset - 2;
      current = delta * x[j -1];
      for (n = len + 3; n--; j += 2) {
        next = delta * x[j + 1];
        x[j] = K * x[j] - current - next;
        if (n--) {
          j += 2;
          current = delta * x[j + 1];
          x[j] = K * x[j] - current - next;
        } else {
          break;
        }
      }

      // step 4
      j = offset - 1;
      current = gamma * x[j - 1];
      for (n = len + 2; n--; j += 2) {
        next = gamma * x[j + 1];
        x[j] -= current + next;
        if (n--) {
          j += 2;
          current = gamma * x[j + 1];
          x[j] -= current + next;
        } else {
          break;
        }
      }

      // step 5
      j = offset;
      current = beta * x[j - 1];
      for (n = len + 1; n--; j += 2) {
        next = beta * x[j + 1];
        x[j] -= current + next;
        if (n--) {
          j += 2;
          current = beta * x[j + 1];
          x[j] -= current + next;
        } else {
          break;
        }
      }

      // step 6
      if (len !== 0) {
        j = offset + 1;
        current = alpha * x[j - 1];
        for (n = len; n--; j += 2) {
          next = alpha * x[j + 1];
          x[j] -= current + next;
          if (n--) {
            j += 2;
            current = alpha * x[j + 1];
            x[j] -= current + next;
          } else {
            break;
          }
        }
      }
    };

    return IrreversibleTransform;
  })();

  // Section 3.8.1 Reversible 5-3 filter
  var ReversibleTransform = (function ReversibleTransformClosure() {
    function ReversibleTransform() {
      Transform.call(this);
    }

    ReversibleTransform.prototype = Object.create(Transform.prototype);
    ReversibleTransform.prototype.filter =
      function reversibleTransformFilter(x, offset, length) {
      var len = length >> 1;
      offset = offset | 0;
      var j, n;

      for (j = offset, n = len + 1; n--; j += 2) {
        x[j] -= (x[j - 1] + x[j + 1] + 2) >> 2;
      }

      for (j = offset + 1, n = len; n--; j += 2) {
        x[j] += (x[j - 1] + x[j + 1]) >> 1;
      }
    };

    return ReversibleTransform;
  })();

  return JpxImage;
})();


/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
/* Copyright 2012 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

/* This class implements the QM Coder decoding as defined in
 *   JPEG 2000 Part I Final Committee Draft Version 1.0
 *   Annex C.3 Arithmetic decoding procedure
 * available at http://www.jpeg.org/public/fcd15444-1.pdf
 *
 * The arithmetic decoder is used in conjunction with context models to decode
 * JPEG2000 and JBIG2 streams.
 */
var ArithmeticDecoder = (function ArithmeticDecoderClosure() {
  // Table C-2
  var QeTable = [
    {qe: 0x5601, nmps: 1, nlps: 1, switchFlag: 1},
    {qe: 0x3401, nmps: 2, nlps: 6, switchFlag: 0},
    {qe: 0x1801, nmps: 3, nlps: 9, switchFlag: 0},
    {qe: 0x0AC1, nmps: 4, nlps: 12, switchFlag: 0},
    {qe: 0x0521, nmps: 5, nlps: 29, switchFlag: 0},
    {qe: 0x0221, nmps: 38, nlps: 33, switchFlag: 0},
    {qe: 0x5601, nmps: 7, nlps: 6, switchFlag: 1},
    {qe: 0x5401, nmps: 8, nlps: 14, switchFlag: 0},
    {qe: 0x4801, nmps: 9, nlps: 14, switchFlag: 0},
    {qe: 0x3801, nmps: 10, nlps: 14, switchFlag: 0},
    {qe: 0x3001, nmps: 11, nlps: 17, switchFlag: 0},
    {qe: 0x2401, nmps: 12, nlps: 18, switchFlag: 0},
    {qe: 0x1C01, nmps: 13, nlps: 20, switchFlag: 0},
    {qe: 0x1601, nmps: 29, nlps: 21, switchFlag: 0},
    {qe: 0x5601, nmps: 15, nlps: 14, switchFlag: 1},
    {qe: 0x5401, nmps: 16, nlps: 14, switchFlag: 0},
    {qe: 0x5101, nmps: 17, nlps: 15, switchFlag: 0},
    {qe: 0x4801, nmps: 18, nlps: 16, switchFlag: 0},
    {qe: 0x3801, nmps: 19, nlps: 17, switchFlag: 0},
    {qe: 0x3401, nmps: 20, nlps: 18, switchFlag: 0},
    {qe: 0x3001, nmps: 21, nlps: 19, switchFlag: 0},
    {qe: 0x2801, nmps: 22, nlps: 19, switchFlag: 0},
    {qe: 0x2401, nmps: 23, nlps: 20, switchFlag: 0},
    {qe: 0x2201, nmps: 24, nlps: 21, switchFlag: 0},
    {qe: 0x1C01, nmps: 25, nlps: 22, switchFlag: 0},
    {qe: 0x1801, nmps: 26, nlps: 23, switchFlag: 0},
    {qe: 0x1601, nmps: 27, nlps: 24, switchFlag: 0},
    {qe: 0x1401, nmps: 28, nlps: 25, switchFlag: 0},
    {qe: 0x1201, nmps: 29, nlps: 26, switchFlag: 0},
    {qe: 0x1101, nmps: 30, nlps: 27, switchFlag: 0},
    {qe: 0x0AC1, nmps: 31, nlps: 28, switchFlag: 0},
    {qe: 0x09C1, nmps: 32, nlps: 29, switchFlag: 0},
    {qe: 0x08A1, nmps: 33, nlps: 30, switchFlag: 0},
    {qe: 0x0521, nmps: 34, nlps: 31, switchFlag: 0},
    {qe: 0x0441, nmps: 35, nlps: 32, switchFlag: 0},
    {qe: 0x02A1, nmps: 36, nlps: 33, switchFlag: 0},
    {qe: 0x0221, nmps: 37, nlps: 34, switchFlag: 0},
    {qe: 0x0141, nmps: 38, nlps: 35, switchFlag: 0},
    {qe: 0x0111, nmps: 39, nlps: 36, switchFlag: 0},
    {qe: 0x0085, nmps: 40, nlps: 37, switchFlag: 0},
    {qe: 0x0049, nmps: 41, nlps: 38, switchFlag: 0},
    {qe: 0x0025, nmps: 42, nlps: 39, switchFlag: 0},
    {qe: 0x0015, nmps: 43, nlps: 40, switchFlag: 0},
    {qe: 0x0009, nmps: 44, nlps: 41, switchFlag: 0},
    {qe: 0x0005, nmps: 45, nlps: 42, switchFlag: 0},
    {qe: 0x0001, nmps: 45, nlps: 43, switchFlag: 0},
    {qe: 0x5601, nmps: 46, nlps: 46, switchFlag: 0}
  ];

  // C.3.5 Initialisation of the decoder (INITDEC)
  function ArithmeticDecoder(data, start, end) {
    this.data = data;
    this.bp = start;
    this.dataEnd = end;

    this.chigh = data[start];
    this.clow = 0;

    this.byteIn();

    this.chigh = ((this.chigh << 7) & 0xFFFF) | ((this.clow >> 9) & 0x7F);
    this.clow = (this.clow << 7) & 0xFFFF;
    this.ct -= 7;
    this.a = 0x8000;
  }

  ArithmeticDecoder.prototype = {
    // C.3.4 Compressed data input (BYTEIN)
    byteIn: function ArithmeticDecoder_byteIn() {
      var data = this.data;
      var bp = this.bp;
      if (data[bp] === 0xFF) {
        var b1 = data[bp + 1];
        if (b1 > 0x8F) {
          this.clow += 0xFF00;
          this.ct = 8;
        } else {
          bp++;
          this.clow += (data[bp] << 9);
          this.ct = 7;
          this.bp = bp;
        }
      } else {
        bp++;
        this.clow += bp < this.dataEnd ? (data[bp] << 8) : 0xFF00;
        this.ct = 8;
        this.bp = bp;
      }
      if (this.clow > 0xFFFF) {
        this.chigh += (this.clow >> 16);
        this.clow &= 0xFFFF;
      }
    },
    // C.3.2 Decoding a decision (DECODE)
    readBit: function ArithmeticDecoder_readBit(contexts, pos) {
      // contexts are packed into 1 byte:
      // highest 7 bits carry cx.index, lowest bit carries cx.mps
      var cx_index = contexts[pos] >> 1, cx_mps = contexts[pos] & 1;
      var qeTableIcx = QeTable[cx_index];
      var qeIcx = qeTableIcx.qe;
      var d;
      var a = this.a - qeIcx;

      if (this.chigh < qeIcx) {
        // exchangeLps
        if (a < qeIcx) {
          a = qeIcx;
          d = cx_mps;
          cx_index = qeTableIcx.nmps;
        } else {
          a = qeIcx;
          d = 1 ^ cx_mps;
          if (qeTableIcx.switchFlag === 1) {
            cx_mps = d;
          }
          cx_index = qeTableIcx.nlps;
        }
      } else {
        this.chigh -= qeIcx;
        if ((a & 0x8000) !== 0) {
          this.a = a;
          return cx_mps;
        }
        // exchangeMps
        if (a < qeIcx) {
          d = 1 ^ cx_mps;
          if (qeTableIcx.switchFlag === 1) {
            cx_mps = d;
          }
          cx_index = qeTableIcx.nlps;
        } else {
          d = cx_mps;
          cx_index = qeTableIcx.nmps;
        }
      }
      // C.3.3 renormD;
      do {
        if (this.ct === 0) {
          this.byteIn();
        }

        a <<= 1;
        this.chigh = ((this.chigh << 1) & 0xFFFF) | ((this.clow >> 15) & 1);
        this.clow = (this.clow << 1) & 0xFFFF;
        this.ct--;
      } while ((a & 0x8000) === 0);
      this.a = a;

      contexts[pos] = cx_index << 1 | cx_mps;
      return d;
    }
  };

  return ArithmeticDecoder;
})();

/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
/* Copyright 2012 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* globals Cmd, ColorSpace, Dict, MozBlobBuilder, Name, PDFJS, Ref, URL,
           Promise */

'use strict';

var globalScope = (typeof window === 'undefined') ? this : window;

var isWorker = (typeof window === 'undefined');

var FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];

var TextRenderingMode = {
  FILL: 0,
  STROKE: 1,
  FILL_STROKE: 2,
  INVISIBLE: 3,
  FILL_ADD_TO_PATH: 4,
  STROKE_ADD_TO_PATH: 5,
  FILL_STROKE_ADD_TO_PATH: 6,
  ADD_TO_PATH: 7,
  FILL_STROKE_MASK: 3,
  ADD_TO_PATH_FLAG: 4
};

var ImageKind = {
  GRAYSCALE_1BPP: 1,
  RGB_24BPP: 2,
  RGBA_32BPP: 3
};

var AnnotationType = {
  WIDGET: 1,
  TEXT: 2,
  LINK: 3
};

var StreamType = {
  UNKNOWN: 0,
  FLATE: 1,
  LZW: 2,
  DCT: 3,
  JPX: 4,
  JBIG: 5,
  A85: 6,
  AHX: 7,
  CCF: 8,
  RL: 9
};

var FontType = {
  UNKNOWN: 0,
  TYPE1: 1,
  TYPE1C: 2,
  CIDFONTTYPE0: 3,
  CIDFONTTYPE0C: 4,
  TRUETYPE: 5,
  CIDFONTTYPE2: 6,
  TYPE3: 7,
  OPENTYPE: 8,
  TYPE0: 9,
  MMTYPE1: 10
};

// The global PDFJS object exposes the API
// In production, it will be declared outside a global wrapper
// In development, it will be declared here
if (!globalScope.PDFJS) {
  globalScope.PDFJS = {};
}

globalScope.PDFJS.pdfBug = false;

PDFJS.VERBOSITY_LEVELS = {
  errors: 0,
  warnings: 1,
  infos: 5
};

// All the possible operations for an operator list.
var OPS = PDFJS.OPS = {
  // Intentionally start from 1 so it is easy to spot bad operators that will be
  // 0's.
  dependency: 1,
  setLineWidth: 2,
  setLineCap: 3,
  setLineJoin: 4,
  setMiterLimit: 5,
  setDash: 6,
  setRenderingIntent: 7,
  setFlatness: 8,
  setGState: 9,
  save: 10,
  restore: 11,
  transform: 12,
  moveTo: 13,
  lineTo: 14,
  curveTo: 15,
  curveTo2: 16,
  curveTo3: 17,
  closePath: 18,
  rectangle: 19,
  stroke: 20,
  closeStroke: 21,
  fill: 22,
  eoFill: 23,
  fillStroke: 24,
  eoFillStroke: 25,
  closeFillStroke: 26,
  closeEOFillStroke: 27,
  endPath: 28,
  clip: 29,
  eoClip: 30,
  beginText: 31,
  endText: 32,
  setCharSpacing: 33,
  setWordSpacing: 34,
  setHScale: 35,
  setLeading: 36,
  setFont: 37,
  setTextRenderingMode: 38,
  setTextRise: 39,
  moveText: 40,
  setLeadingMoveText: 41,
  setTextMatrix: 42,
  nextLine: 43,
  showText: 44,
  showSpacedText: 45,
  nextLineShowText: 46,
  nextLineSetSpacingShowText: 47,
  setCharWidth: 48,
  setCharWidthAndBounds: 49,
  setStrokeColorSpace: 50,
  setFillColorSpace: 51,
  setStrokeColor: 52,
  setStrokeColorN: 53,
  setFillColor: 54,
  setFillColorN: 55,
  setStrokeGray: 56,
  setFillGray: 57,
  setStrokeRGBColor: 58,
  setFillRGBColor: 59,
  setStrokeCMYKColor: 60,
  setFillCMYKColor: 61,
  shadingFill: 62,
  beginInlineImage: 63,
  beginImageData: 64,
  endInlineImage: 65,
  paintXObject: 66,
  markPoint: 67,
  markPointProps: 68,
  beginMarkedContent: 69,
  beginMarkedContentProps: 70,
  endMarkedContent: 71,
  beginCompat: 72,
  endCompat: 73,
  paintFormXObjectBegin: 74,
  paintFormXObjectEnd: 75,
  beginGroup: 76,
  endGroup: 77,
  beginAnnotations: 78,
  endAnnotations: 79,
  beginAnnotation: 80,
  endAnnotation: 81,
  paintJpegXObject: 82,
  paintImageMaskXObject: 83,
  paintImageMaskXObjectGroup: 84,
  paintImageXObject: 85,
  paintInlineImageXObject: 86,
  paintInlineImageXObjectGroup: 87,
  paintImageXObjectRepeat: 88,
  paintImageMaskXObjectRepeat: 89,
  paintSolidColorImageMask: 90,
  constructPath: 91
};

// A notice for devs. These are good for things that are helpful to devs, such
// as warning that Workers were disabled, which is important to devs but not
// end users.
function info(msg) {
  if (PDFJS.verbosity >= PDFJS.VERBOSITY_LEVELS.infos) {
    console.log('Info: ' + msg);
  }
}

// Non-fatal warnings.
function warn(msg) {
  if (PDFJS.verbosity >= PDFJS.VERBOSITY_LEVELS.warnings) {
    console.log('Warning: ' + msg);
  }
}

// Fatal errors that should trigger the fallback UI and halt execution by
// throwing an exception.
function error(msg) {
  // If multiple arguments were passed, pass them all to the log function.
  if (arguments.length > 1) {
    var logArguments = ['Error:'];
    logArguments.push.apply(logArguments, arguments);
    console.log.apply(console, logArguments);
    // Join the arguments into a single string for the lines below.
    msg = [].join.call(arguments, ' ');
  } else {
    console.log('Error: ' + msg);
  }
  console.log(backtrace());
  UnsupportedManager.notify(UNSUPPORTED_FEATURES.unknown);
  throw new Error(msg);
}

function backtrace() {
  try {
    throw new Error();
  } catch (e) {
    return e.stack ? e.stack.split('\n').slice(2).join('\n') : '';
  }
}

function assert(cond, msg) {
  if (!cond) {
    error(msg);
  }
}

var UNSUPPORTED_FEATURES = PDFJS.UNSUPPORTED_FEATURES = {
  unknown: 'unknown',
  forms: 'forms',
  javaScript: 'javaScript',
  smask: 'smask',
  shadingPattern: 'shadingPattern',
  font: 'font'
};

var UnsupportedManager = PDFJS.UnsupportedManager =
  (function UnsupportedManagerClosure() {
  var listeners = [];
  return {
    listen: function (cb) {
      listeners.push(cb);
    },
    notify: function (featureId) {
      warn('Unsupported feature "' + featureId + '"');
      for (var i = 0, ii = listeners.length; i < ii; i++) {
        listeners[i](featureId);
      }
    }
  };
})();

// Combines two URLs. The baseUrl shall be absolute URL. If the url is an
// absolute URL, it will be returned as is.
function combineUrl(baseUrl, url) {
  if (!url) {
    return baseUrl;
  }
  if (/^[a-z][a-z0-9+\-.]*:/i.test(url)) {
    return url;
  }
  var i;
  if (url.charAt(0) === '/') {
    // absolute path
    i = baseUrl.indexOf('://');
    if (url.charAt(1) === '/') {
      ++i;
    } else {
      i = baseUrl.indexOf('/', i + 3);
    }
    return baseUrl.substring(0, i) + url;
  } else {
    // relative path
    var pathLength = baseUrl.length;
    i = baseUrl.lastIndexOf('#');
    pathLength = i >= 0 ? i : pathLength;
    i = baseUrl.lastIndexOf('?', pathLength);
    pathLength = i >= 0 ? i : pathLength;
    var prefixLength = baseUrl.lastIndexOf('/', pathLength);
    return baseUrl.substring(0, prefixLength + 1) + url;
  }
}

// Validates if URL is safe and allowed, e.g. to avoid XSS.
function isValidUrl(url, allowRelative) {
  if (!url) {
    return false;
  }
  // RFC 3986 (http://tools.ietf.org/html/rfc3986#section-3.1)
  // scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
  var protocol = /^[a-z][a-z0-9+\-.]*(?=:)/i.exec(url);
  if (!protocol) {
    return allowRelative;
  }
  protocol = protocol[0].toLowerCase();
  switch (protocol) {
    case 'http':
    case 'https':
    case 'ftp':
    case 'mailto':
    case 'tel':
      return true;
    default:
      return false;
  }
}
PDFJS.isValidUrl = isValidUrl;

function shadow(obj, prop, value) {
  Object.defineProperty(obj, prop, { value: value,
                                     enumerable: true,
                                     configurable: true,
                                     writable: false });
  return value;
}
PDFJS.shadow = shadow;

var PasswordResponses = PDFJS.PasswordResponses = {
  NEED_PASSWORD: 1,
  INCORRECT_PASSWORD: 2
};

var PasswordException = (function PasswordExceptionClosure() {
  function PasswordException(msg, code) {
    this.name = 'PasswordException';
    this.message = msg;
    this.code = code;
  }

  PasswordException.prototype = new Error();
  PasswordException.constructor = PasswordException;

  return PasswordException;
})();
PDFJS.PasswordException = PasswordException;

var UnknownErrorException = (function UnknownErrorExceptionClosure() {
  function UnknownErrorException(msg, details) {
    this.name = 'UnknownErrorException';
    this.message = msg;
    this.details = details;
  }

  UnknownErrorException.prototype = new Error();
  UnknownErrorException.constructor = UnknownErrorException;

  return UnknownErrorException;
})();
PDFJS.UnknownErrorException = UnknownErrorException;

var InvalidPDFException = (function InvalidPDFExceptionClosure() {
  function InvalidPDFException(msg) {
    this.name = 'InvalidPDFException';
    this.message = msg;
  }

  InvalidPDFException.prototype = new Error();
  InvalidPDFException.constructor = InvalidPDFException;

  return InvalidPDFException;
})();
PDFJS.InvalidPDFException = InvalidPDFException;

var MissingPDFException = (function MissingPDFExceptionClosure() {
  function MissingPDFException(msg) {
    this.name = 'MissingPDFException';
    this.message = msg;
  }

  MissingPDFException.prototype = new Error();
  MissingPDFException.constructor = MissingPDFException;

  return MissingPDFException;
})();
PDFJS.MissingPDFException = MissingPDFException;

var UnexpectedResponseException =
    (function UnexpectedResponseExceptionClosure() {
  function UnexpectedResponseException(msg, status) {
    this.name = 'UnexpectedResponseException';
    this.message = msg;
    this.status = status;
  }

  UnexpectedResponseException.prototype = new Error();
  UnexpectedResponseException.constructor = UnexpectedResponseException;

  return UnexpectedResponseException;
})();
PDFJS.UnexpectedResponseException = UnexpectedResponseException;

var NotImplementedException = (function NotImplementedExceptionClosure() {
  function NotImplementedException(msg) {
    this.message = msg;
  }

  NotImplementedException.prototype = new Error();
  NotImplementedException.prototype.name = 'NotImplementedException';
  NotImplementedException.constructor = NotImplementedException;

  return NotImplementedException;
})();

var MissingDataException = (function MissingDataExceptionClosure() {
  function MissingDataException(begin, end) {
    this.begin = begin;
    this.end = end;
    this.message = 'Missing data [' + begin + ', ' + end + ')';
  }

  MissingDataException.prototype = new Error();
  MissingDataException.prototype.name = 'MissingDataException';
  MissingDataException.constructor = MissingDataException;

  return MissingDataException;
})();

var XRefParseException = (function XRefParseExceptionClosure() {
  function XRefParseException(msg) {
    this.message = msg;
  }

  XRefParseException.prototype = new Error();
  XRefParseException.prototype.name = 'XRefParseException';
  XRefParseException.constructor = XRefParseException;

  return XRefParseException;
})();


function bytesToString(bytes) {
  assert(bytes !== null && typeof bytes === 'object' &&
         bytes.length !== undefined, 'Invalid argument for bytesToString');
  var length = bytes.length;
  var MAX_ARGUMENT_COUNT = 8192;
  if (length < MAX_ARGUMENT_COUNT) {
    return String.fromCharCode.apply(null, bytes);
  }
  var strBuf = [];
  for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
    var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
    var chunk = bytes.subarray(i, chunkEnd);
    strBuf.push(String.fromCharCode.apply(null, chunk));
  }
  return strBuf.join('');
}

function stringToBytes(str) {
  assert(typeof str === 'string', 'Invalid argument for stringToBytes');
  var length = str.length;
  var bytes = new Uint8Array(length);
  for (var i = 0; i < length; ++i) {
    bytes[i] = str.charCodeAt(i) & 0xFF;
  }
  return bytes;
}

function string32(value) {
  return String.fromCharCode((value >> 24) & 0xff, (value >> 16) & 0xff,
                             (value >> 8) & 0xff, value & 0xff);
}

function log2(x) {
  var n = 1, i = 0;
  while (x > n) {
    n <<= 1;
    i++;
  }
  return i;
}

function readInt8(data, start) {
  return (data[start] << 24) >> 24;
}

function readUint16(data, offset) {
  return (data[offset] << 8) | data[offset + 1];
}

function readUint32(data, offset) {
  return ((data[offset] << 24) | (data[offset + 1] << 16) |
         (data[offset + 2] << 8) | data[offset + 3]) >>> 0;
}

// Lazy test the endianness of the platform
// NOTE: This will be 'true' for simulated TypedArrays
function isLittleEndian() {
  var buffer8 = new Uint8Array(2);
  buffer8[0] = 1;
  var buffer16 = new Uint16Array(buffer8.buffer);
  return (buffer16[0] === 1);
}

Object.defineProperty(PDFJS, 'isLittleEndian', {
  configurable: true,
  get: function PDFJS_isLittleEndian() {
    return shadow(PDFJS, 'isLittleEndian', isLittleEndian());
  }
});

//#if !(FIREFOX || MOZCENTRAL || B2G || CHROME)
//// Lazy test if the userAgant support CanvasTypedArrays
function hasCanvasTypedArrays() {
  var canvas = document.createElement('canvas');
  canvas.width = canvas.height = 1;
  var ctx = canvas.getContext('2d');
  var imageData = ctx.createImageData(1, 1);
  return (typeof imageData.data.buffer !== 'undefined');
}

Object.defineProperty(PDFJS, 'hasCanvasTypedArrays', {
  configurable: true,
  get: function PDFJS_hasCanvasTypedArrays() {
    return shadow(PDFJS, 'hasCanvasTypedArrays', hasCanvasTypedArrays());
  }
});

var Uint32ArrayView = (function Uint32ArrayViewClosure() {

  function Uint32ArrayView(buffer, length) {
    this.buffer = buffer;
    this.byteLength = buffer.length;
    this.length = length === undefined ? (this.byteLength >> 2) : length;
    ensureUint32ArrayViewProps(this.length);
  }
  Uint32ArrayView.prototype = Object.create(null);

  var uint32ArrayViewSetters = 0;
  function createUint32ArrayProp(index) {
    return {
      get: function () {
        var buffer = this.buffer, offset = index << 2;
        return (buffer[offset] | (buffer[offset + 1] << 8) |
          (buffer[offset + 2] << 16) | (buffer[offset + 3] << 24)) >>> 0;
      },
      set: function (value) {
        var buffer = this.buffer, offset = index << 2;
        buffer[offset] = value & 255;
        buffer[offset + 1] = (value >> 8) & 255;
        buffer[offset + 2] = (value >> 16) & 255;
        buffer[offset + 3] = (value >>> 24) & 255;
      }
    };
  }

  function ensureUint32ArrayViewProps(length) {
    while (uint32ArrayViewSetters < length) {
      Object.defineProperty(Uint32ArrayView.prototype,
        uint32ArrayViewSetters,
        createUint32ArrayProp(uint32ArrayViewSetters));
      uint32ArrayViewSetters++;
    }
  }

  return Uint32ArrayView;
})();
//#else
//PDFJS.hasCanvasTypedArrays = true;
//#endif

var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];

var Util = PDFJS.Util = (function UtilClosure() {
  function Util() {}

  var rgbBuf = ['rgb(', 0, ',', 0, ',', 0, ')'];

  // makeCssRgb() can be called thousands of times. Using |rgbBuf| avoids
  // creating many intermediate strings.
  Util.makeCssRgb = function Util_makeCssRgb(r, g, b) {
    rgbBuf[1] = r;
    rgbBuf[3] = g;
    rgbBuf[5] = b;
    return rgbBuf.join('');
  };

  // Concatenates two transformation matrices together and returns the result.
  Util.transform = function Util_transform(m1, m2) {
    return [
      m1[0] * m2[0] + m1[2] * m2[1],
      m1[1] * m2[0] + m1[3] * m2[1],
      m1[0] * m2[2] + m1[2] * m2[3],
      m1[1] * m2[2] + m1[3] * m2[3],
      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],
      m1[1] * m2[4] + m1[3] * m2[5] + m1[5]
    ];
  };

  // For 2d affine transforms
  Util.applyTransform = function Util_applyTransform(p, m) {
    var xt = p[0] * m[0] + p[1] * m[2] + m[4];
    var yt = p[0] * m[1] + p[1] * m[3] + m[5];
    return [xt, yt];
  };

  Util.applyInverseTransform = function Util_applyInverseTransform(p, m) {
    var d = m[0] * m[3] - m[1] * m[2];
    var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
    var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
    return [xt, yt];
  };

  // Applies the transform to the rectangle and finds the minimum axially
  // aligned bounding box.
  Util.getAxialAlignedBoundingBox =
    function Util_getAxialAlignedBoundingBox(r, m) {

    var p1 = Util.applyTransform(r, m);
    var p2 = Util.applyTransform(r.slice(2, 4), m);
    var p3 = Util.applyTransform([r[0], r[3]], m);
    var p4 = Util.applyTransform([r[2], r[1]], m);
    return [
      Math.min(p1[0], p2[0], p3[0], p4[0]),
      Math.min(p1[1], p2[1], p3[1], p4[1]),
      Math.max(p1[0], p2[0], p3[0], p4[0]),
      Math.max(p1[1], p2[1], p3[1], p4[1])
    ];
  };

  Util.inverseTransform = function Util_inverseTransform(m) {
    var d = m[0] * m[3] - m[1] * m[2];
    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d,
      (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
  };

  // Apply a generic 3d matrix M on a 3-vector v:
  //   | a b c |   | X |
  //   | d e f | x | Y |
  //   | g h i |   | Z |
  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],
  // with v as [X,Y,Z]
  Util.apply3dTransform = function Util_apply3dTransform(m, v) {
    return [
      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],
      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],
      m[6] * v[0] + m[7] * v[1] + m[8] * v[2]
    ];
  };

  // This calculation uses Singular Value Decomposition.
  // The SVD can be represented with formula A = USV. We are interested in the
  // matrix S here because it represents the scale values.
  Util.singularValueDecompose2dScale =
    function Util_singularValueDecompose2dScale(m) {

    var transpose = [m[0], m[2], m[1], m[3]];

    // Multiply matrix m with its transpose.
    var a = m[0] * transpose[0] + m[1] * transpose[2];
    var b = m[0] * transpose[1] + m[1] * transpose[3];
    var c = m[2] * transpose[0] + m[3] * transpose[2];
    var d = m[2] * transpose[1] + m[3] * transpose[3];

    // Solve the second degree polynomial to get roots.
    var first = (a + d) / 2;
    var second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;
    var sx = first + second || 1;
    var sy = first - second || 1;

    // Scale values are the square roots of the eigenvalues.
    return [Math.sqrt(sx), Math.sqrt(sy)];
  };

  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)
  // For coordinate systems whose origin lies in the bottom-left, this
  // means normalization to (BL,TR) ordering. For systems with origin in the
  // top-left, this means (TL,BR) ordering.
  Util.normalizeRect = function Util_normalizeRect(rect) {
    var r = rect.slice(0); // clone rect
    if (rect[0] > rect[2]) {
      r[0] = rect[2];
      r[2] = rect[0];
    }
    if (rect[1] > rect[3]) {
      r[1] = rect[3];
      r[3] = rect[1];
    }
    return r;
  };

  // Returns a rectangle [x1, y1, x2, y2] corresponding to the
  // intersection of rect1 and rect2. If no intersection, returns 'false'
  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]
  Util.intersect = function Util_intersect(rect1, rect2) {
    function compare(a, b) {
      return a - b;
    }

    // Order points along the axes
    var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare),
        orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare),
        result = [];

    rect1 = Util.normalizeRect(rect1);
    rect2 = Util.normalizeRect(rect2);

    // X: first and second points belong to different rectangles?
    if ((orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||
        (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])) {
      // Intersection must be between second and third points
      result[0] = orderedX[1];
      result[2] = orderedX[2];
    } else {
      return false;
    }

    // Y: first and second points belong to different rectangles?
    if ((orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||
        (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])) {
      // Intersection must be between second and third points
      result[1] = orderedY[1];
      result[3] = orderedY[2];
    } else {
      return false;
    }

    return result;
  };

  Util.sign = function Util_sign(num) {
    return num < 0 ? -1 : 1;
  };

  Util.appendToArray = function Util_appendToArray(arr1, arr2) {
    Array.prototype.push.apply(arr1, arr2);
  };

  Util.prependToArray = function Util_prependToArray(arr1, arr2) {
    Array.prototype.unshift.apply(arr1, arr2);
  };

  Util.extendObj = function extendObj(obj1, obj2) {
    for (var key in obj2) {
      obj1[key] = obj2[key];
    }
  };

  Util.getInheritableProperty = function Util_getInheritableProperty(dict,
                                                                     name) {
    while (dict && !dict.has(name)) {
      dict = dict.get('Parent');
    }
    if (!dict) {
      return null;
    }
    return dict.get(name);
  };

  Util.inherit = function Util_inherit(sub, base, prototype) {
    sub.prototype = Object.create(base.prototype);
    sub.prototype.constructor = sub;
    for (var prop in prototype) {
      sub.prototype[prop] = prototype[prop];
    }
  };

  Util.loadScript = function Util_loadScript(src, callback) {
    var script = document.createElement('script');
    var loaded = false;
    script.setAttribute('src', src);
    if (callback) {
      script.onload = function() {
        if (!loaded) {
          callback();
        }
        loaded = true;
      };
    }
    document.getElementsByTagName('head')[0].appendChild(script);
  };

  return Util;
})();

/**
 * PDF page viewport created based on scale, rotation and offset.
 * @class
 * @alias PDFJS.PageViewport
 */
var PageViewport = PDFJS.PageViewport = (function PageViewportClosure() {
  /**
   * @constructor
   * @private
   * @param viewBox {Array} xMin, yMin, xMax and yMax coordinates.
   * @param scale {number} scale of the viewport.
   * @param rotation {number} rotations of the viewport in degrees.
   * @param offsetX {number} offset X
   * @param offsetY {number} offset Y
   * @param dontFlip {boolean} if true, axis Y will not be flipped.
   */
  function PageViewport(viewBox, scale, rotation, offsetX, offsetY, dontFlip) {
    this.viewBox = viewBox;
    this.scale = scale;
    this.rotation = rotation;
    this.offsetX = offsetX;
    this.offsetY = offsetY;

    // creating transform to convert pdf coordinate system to the normal
    // canvas like coordinates taking in account scale and rotation
    var centerX = (viewBox[2] + viewBox[0]) / 2;
    var centerY = (viewBox[3] + viewBox[1]) / 2;
    var rotateA, rotateB, rotateC, rotateD;
    rotation = rotation % 360;
    rotation = rotation < 0 ? rotation + 360 : rotation;
    switch (rotation) {
      case 180:
        rotateA = -1; rotateB = 0; rotateC = 0; rotateD = 1;
        break;
      case 90:
        rotateA = 0; rotateB = 1; rotateC = 1; rotateD = 0;
        break;
      case 270:
        rotateA = 0; rotateB = -1; rotateC = -1; rotateD = 0;
        break;
      //case 0:
      default:
        rotateA = 1; rotateB = 0; rotateC = 0; rotateD = -1;
        break;
    }

    if (dontFlip) {
      rotateC = -rotateC; rotateD = -rotateD;
    }

    var offsetCanvasX, offsetCanvasY;
    var width, height;
    if (rotateA === 0) {
      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
      width = Math.abs(viewBox[3] - viewBox[1]) * scale;
      height = Math.abs(viewBox[2] - viewBox[0]) * scale;
    } else {
      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
      width = Math.abs(viewBox[2] - viewBox[0]) * scale;
      height = Math.abs(viewBox[3] - viewBox[1]) * scale;
    }
    // creating transform for the following operations:
    // translate(-centerX, -centerY), rotate and flip vertically,
    // scale, and translate(offsetCanvasX, offsetCanvasY)
    this.transform = [
      rotateA * scale,
      rotateB * scale,
      rotateC * scale,
      rotateD * scale,
      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,
      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY
    ];

    this.width = width;
    this.height = height;
    this.fontScale = scale;
  }
  PageViewport.prototype = /** @lends PDFJS.PageViewport.prototype */ {
    /**
     * Clones viewport with additional properties.
     * @param args {Object} (optional) If specified, may contain the 'scale' or
     * 'rotation' properties to override the corresponding properties in
     * the cloned viewport.
     * @returns {PDFJS.PageViewport} Cloned viewport.
     */
    clone: function PageViewPort_clone(args) {
      args = args || {};
      var scale = 'scale' in args ? args.scale : this.scale;
      var rotation = 'rotation' in args ? args.rotation : this.rotation;
      return new PageViewport(this.viewBox.slice(), scale, rotation,
                              this.offsetX, this.offsetY, args.dontFlip);
    },
    /**
     * Converts PDF point to the viewport coordinates. For examples, useful for
     * converting PDF location into canvas pixel coordinates.
     * @param x {number} X coordinate.
     * @param y {number} Y coordinate.
     * @returns {Object} Object that contains 'x' and 'y' properties of the
     * point in the viewport coordinate space.
     * @see {@link convertToPdfPoint}
     * @see {@link convertToViewportRectangle}
     */
    convertToViewportPoint: function PageViewport_convertToViewportPoint(x, y) {
      return Util.applyTransform([x, y], this.transform);
    },
    /**
     * Converts PDF rectangle to the viewport coordinates.
     * @param rect {Array} xMin, yMin, xMax and yMax coordinates.
     * @returns {Array} Contains corresponding coordinates of the rectangle
     * in the viewport coordinate space.
     * @see {@link convertToViewportPoint}
     */
    convertToViewportRectangle:
      function PageViewport_convertToViewportRectangle(rect) {
      var tl = Util.applyTransform([rect[0], rect[1]], this.transform);
      var br = Util.applyTransform([rect[2], rect[3]], this.transform);
      return [tl[0], tl[1], br[0], br[1]];
    },
    /**
     * Converts viewport coordinates to the PDF location. For examples, useful
     * for converting canvas pixel location into PDF one.
     * @param x {number} X coordinate.
     * @param y {number} Y coordinate.
     * @returns {Object} Object that contains 'x' and 'y' properties of the
     * point in the PDF coordinate space.
     * @see {@link convertToViewportPoint}
     */
    convertToPdfPoint: function PageViewport_convertToPdfPoint(x, y) {
      return Util.applyInverseTransform([x, y], this.transform);
    }
  };
  return PageViewport;
})();

var PDFStringTranslateTable = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014,
  0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C,
  0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160,
  0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC
];

function stringToPDFString(str) {
  var i, n = str.length, strBuf = [];
  if (str[0] === '\xFE' && str[1] === '\xFF') {
    // UTF16BE BOM
    for (i = 2; i < n; i += 2) {
      strBuf.push(String.fromCharCode(
        (str.charCodeAt(i) << 8) | str.charCodeAt(i + 1)));
    }
  } else {
    for (i = 0; i < n; ++i) {
      var code = PDFStringTranslateTable[str.charCodeAt(i)];
      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));
    }
  }
  return strBuf.join('');
}

function stringToUTF8String(str) {
  return decodeURIComponent(escape(str));
}

function isEmptyObj(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
}

function isBool(v) {
  return typeof v === 'boolean';
}

function isInt(v) {
  return typeof v === 'number' && ((v | 0) === v);
}

function isNum(v) {
  return typeof v === 'number';
}

function isString(v) {
  return typeof v === 'string';
}

function isNull(v) {
  return v === null;
}

function isName(v) {
  return v instanceof Name;
}

function isCmd(v, cmd) {
  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);
}

function isDict(v, type) {
  if (!(v instanceof Dict)) {
    return false;
  }
  if (!type) {
    return true;
  }
  var dictType = v.get('Type');
  return isName(dictType) && dictType.name === type;
}

function isArray(v) {
  return v instanceof Array;
}

function isStream(v) {
  return typeof v === 'object' && v !== null && v.getBytes !== undefined;
}

function isArrayBuffer(v) {
  return typeof v === 'object' && v !== null && v.byteLength !== undefined;
}

function isRef(v) {
  return v instanceof Ref;
}

/**
 * Promise Capability object.
 *
 * @typedef {Object} PromiseCapability
 * @property {Promise} promise - A promise object.
 * @property {function} resolve - Fullfills the promise.
 * @property {function} reject - Rejects the promise.
 */

/**
 * Creates a promise capability object.
 * @alias PDFJS.createPromiseCapability
 *
 * @return {PromiseCapability} A capability object contains:
 * - a Promise, resolve and reject methods.
 */
function createPromiseCapability() {
  var capability = {};
  capability.promise = new Promise(function (resolve, reject) {
    capability.resolve = resolve;
    capability.reject = reject;
  });
  return capability;
}

PDFJS.createPromiseCapability = createPromiseCapability;

/**
 * Polyfill for Promises:
 * The following promise implementation tries to generally implement the
 * Promise/A+ spec. Some notable differences from other promise libaries are:
 * - There currently isn't a seperate deferred and promise object.
 * - Unhandled rejections eventually show an error if they aren't handled.
 *
 * Based off of the work in:
 * https://bugzilla.mozilla.org/show_bug.cgi?id=810490
 */
(function PromiseClosure() {
  if (globalScope.Promise) {
    // Promises existing in the DOM/Worker, checking presence of all/resolve
    if (typeof globalScope.Promise.all !== 'function') {
      globalScope.Promise.all = function (iterable) {
        var count = 0, results = [], resolve, reject;
        var promise = new globalScope.Promise(function (resolve_, reject_) {
          resolve = resolve_;
          reject = reject_;
        });
        iterable.forEach(function (p, i) {
          count++;
          p.then(function (result) {
            results[i] = result;
            count--;
            if (count === 0) {
              resolve(results);
            }
          }, reject);
        });
        if (count === 0) {
          resolve(results);
        }
        return promise;
      };
    }
    if (typeof globalScope.Promise.resolve !== 'function') {
      globalScope.Promise.resolve = function (value) {
        return new globalScope.Promise(function (resolve) { resolve(value); });
      };
    }
    if (typeof globalScope.Promise.reject !== 'function') {
      globalScope.Promise.reject = function (reason) {
        return new globalScope.Promise(function (resolve, reject) {
          reject(reason);
        });
      };
    }
    if (typeof globalScope.Promise.prototype.catch !== 'function') {
      globalScope.Promise.prototype.catch = function (onReject) {
        return globalScope.Promise.prototype.then(undefined, onReject);
      };
    }
    return;
  }
//#if !MOZCENTRAL
  var STATUS_PENDING = 0;
  var STATUS_RESOLVED = 1;
  var STATUS_REJECTED = 2;

  // In an attempt to avoid silent exceptions, unhandled rejections are
  // tracked and if they aren't handled in a certain amount of time an
  // error is logged.
  var REJECTION_TIMEOUT = 500;

  var HandlerManager = {
    handlers: [],
    running: false,
    unhandledRejections: [],
    pendingRejectionCheck: false,

    scheduleHandlers: function scheduleHandlers(promise) {
      if (promise._status === STATUS_PENDING) {
        return;
      }

      this.handlers = this.handlers.concat(promise._handlers);
      promise._handlers = [];

      if (this.running) {
        return;
      }
      this.running = true;

      setTimeout(this.runHandlers.bind(this), 0);
    },

    runHandlers: function runHandlers() {
      var RUN_TIMEOUT = 1; // ms
      var timeoutAt = Date.now() + RUN_TIMEOUT;
      while (this.handlers.length > 0) {
        var handler = this.handlers.shift();

        var nextStatus = handler.thisPromise._status;
        var nextValue = handler.thisPromise._value;

        try {
          if (nextStatus === STATUS_RESOLVED) {
            if (typeof handler.onResolve === 'function') {
              nextValue = handler.onResolve(nextValue);
            }
          } else if (typeof handler.onReject === 'function') {
              nextValue = handler.onReject(nextValue);
              nextStatus = STATUS_RESOLVED;

              if (handler.thisPromise._unhandledRejection) {
                this.removeUnhandeledRejection(handler.thisPromise);
              }
          }
        } catch (ex) {
          nextStatus = STATUS_REJECTED;
          nextValue = ex;
        }

        handler.nextPromise._updateStatus(nextStatus, nextValue);
        if (Date.now() >= timeoutAt) {
          break;
        }
      }

      if (this.handlers.length > 0) {
        setTimeout(this.runHandlers.bind(this), 0);
        return;
      }

      this.running = false;
    },

    addUnhandledRejection: function addUnhandledRejection(promise) {
      this.unhandledRejections.push({
        promise: promise,
        time: Date.now()
      });
      this.scheduleRejectionCheck();
    },

    removeUnhandeledRejection: function removeUnhandeledRejection(promise) {
      promise._unhandledRejection = false;
      for (var i = 0; i < this.unhandledRejections.length; i++) {
        if (this.unhandledRejections[i].promise === promise) {
          this.unhandledRejections.splice(i);
          i--;
        }
      }
    },

    scheduleRejectionCheck: function scheduleRejectionCheck() {
      if (this.pendingRejectionCheck) {
        return;
      }
      this.pendingRejectionCheck = true;
      setTimeout(function rejectionCheck() {
        this.pendingRejectionCheck = false;
        var now = Date.now();
        for (var i = 0; i < this.unhandledRejections.length; i++) {
          if (now - this.unhandledRejections[i].time > REJECTION_TIMEOUT) {
            var unhandled = this.unhandledRejections[i].promise._value;
            var msg = 'Unhandled rejection: ' + unhandled;
            if (unhandled.stack) {
              msg += '\n' + unhandled.stack;
            }
            warn(msg);
            this.unhandledRejections.splice(i);
            i--;
          }
        }
        if (this.unhandledRejections.length) {
          this.scheduleRejectionCheck();
        }
      }.bind(this), REJECTION_TIMEOUT);
    }
  };

  function Promise(resolver) {
    this._status = STATUS_PENDING;
    this._handlers = [];
    try {
      resolver.call(this, this._resolve.bind(this), this._reject.bind(this));
    } catch (e) {
      this._reject(e);
    }
  }
  /**
   * Builds a promise that is resolved when all the passed in promises are
   * resolved.
   * @param {array} array of data and/or promises to wait for.
   * @return {Promise} New dependant promise.
   */
  Promise.all = function Promise_all(promises) {
    var resolveAll, rejectAll;
    var deferred = new Promise(function (resolve, reject) {
      resolveAll = resolve;
      rejectAll = reject;
    });
    var unresolved = promises.length;
    var results = [];
    if (unresolved === 0) {
      resolveAll(results);
      return deferred;
    }
    function reject(reason) {
      if (deferred._status === STATUS_REJECTED) {
        return;
      }
      results = [];
      rejectAll(reason);
    }
    for (var i = 0, ii = promises.length; i < ii; ++i) {
      var promise = promises[i];
      var resolve = (function(i) {
        return function(value) {
          if (deferred._status === STATUS_REJECTED) {
            return;
          }
          results[i] = value;
          unresolved--;
          if (unresolved === 0) {
            resolveAll(results);
          }
        };
      })(i);
      if (Promise.isPromise(promise)) {
        promise.then(resolve, reject);
      } else {
        resolve(promise);
      }
    }
    return deferred;
  };

  /**
   * Checks if the value is likely a promise (has a 'then' function).
   * @return {boolean} true if value is thenable
   */
  Promise.isPromise = function Promise_isPromise(value) {
    return value && typeof value.then === 'function';
  };

  /**
   * Creates resolved promise
   * @param value resolve value
   * @returns {Promise}
   */
  Promise.resolve = function Promise_resolve(value) {
    return new Promise(function (resolve) { resolve(value); });
  };

  /**
   * Creates rejected promise
   * @param reason rejection value
   * @returns {Promise}
   */
  Promise.reject = function Promise_reject(reason) {
    return new Promise(function (resolve, reject) { reject(reason); });
  };

  Promise.prototype = {
    _status: null,
    _value: null,
    _handlers: null,
    _unhandledRejection: null,

    _updateStatus: function Promise__updateStatus(status, value) {
      if (this._status === STATUS_RESOLVED ||
          this._status === STATUS_REJECTED) {
        return;
      }

      if (status === STATUS_RESOLVED &&
          Promise.isPromise(value)) {
        value.then(this._updateStatus.bind(this, STATUS_RESOLVED),
                   this._updateStatus.bind(this, STATUS_REJECTED));
        return;
      }

      this._status = status;
      this._value = value;

      if (status === STATUS_REJECTED && this._handlers.length === 0) {
        this._unhandledRejection = true;
        HandlerManager.addUnhandledRejection(this);
      }

      HandlerManager.scheduleHandlers(this);
    },

    _resolve: function Promise_resolve(value) {
      this._updateStatus(STATUS_RESOLVED, value);
    },

    _reject: function Promise_reject(reason) {
      this._updateStatus(STATUS_REJECTED, reason);
    },

    then: function Promise_then(onResolve, onReject) {
      var nextPromise = new Promise(function (resolve, reject) {
        this.resolve = resolve;
        this.reject = reject;
      });
      this._handlers.push({
        thisPromise: this,
        onResolve: onResolve,
        onReject: onReject,
        nextPromise: nextPromise
      });
      HandlerManager.scheduleHandlers(this);
      return nextPromise;
    },

    catch: function Promise_catch(onReject) {
      return this.then(undefined, onReject);
    }
  };

  globalScope.Promise = Promise;
//#else
//throw new Error('DOM Promise is not present');
//#endif
})();

var StatTimer = (function StatTimerClosure() {
  function rpad(str, pad, length) {
    while (str.length < length) {
      str += pad;
    }
    return str;
  }
  function StatTimer() {
    this.started = {};
    this.times = [];
    this.enabled = true;
  }
  StatTimer.prototype = {
    time: function StatTimer_time(name) {
      if (!this.enabled) {
        return;
      }
      if (name in this.started) {
        warn('Timer is already running for ' + name);
      }
      this.started[name] = Date.now();
    },
    timeEnd: function StatTimer_timeEnd(name) {
      if (!this.enabled) {
        return;
      }
      if (!(name in this.started)) {
        warn('Timer has not been started for ' + name);
      }
      this.times.push({
        'name': name,
        'start': this.started[name],
        'end': Date.now()
      });
      // Remove timer from started so it can be called again.
      delete this.started[name];
    },
    toString: function StatTimer_toString() {
      var i, ii;
      var times = this.times;
      var out = '';
      // Find the longest name for padding purposes.
      var longest = 0;
      for (i = 0, ii = times.length; i < ii; ++i) {
        var name = times[i]['name'];
        if (name.length > longest) {
          longest = name.length;
        }
      }
      for (i = 0, ii = times.length; i < ii; ++i) {
        var span = times[i];
        var duration = span.end - span.start;
        out += rpad(span['name'], ' ', longest) + ' ' + duration + 'ms\n';
      }
      return out;
    }
  };
  return StatTimer;
})();

PDFJS.createBlob = function createBlob(data, contentType) {
  if (typeof Blob !== 'undefined') {
    return new Blob([data], { type: contentType });
  }
  // Blob builder is deprecated in FF14 and removed in FF18.
  var bb = new MozBlobBuilder();
  bb.append(data);
  return bb.getBlob(contentType);
};

PDFJS.createObjectURL = (function createObjectURLClosure() {
  // Blob/createObjectURL is not available, falling back to data schema.
  var digits =
    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  return function createObjectURL(data, contentType) {
    if (!PDFJS.disableCreateObjectURL &&
        typeof URL !== 'undefined' && URL.createObjectURL) {
      var blob = PDFJS.createBlob(data, contentType);
      return URL.createObjectURL(blob);
    }

    var buffer = 'data:' + contentType + ';base64,';
    for (var i = 0, ii = data.length; i < ii; i += 3) {
      var b1 = data[i] & 0xFF;
      var b2 = data[i + 1] & 0xFF;
      var b3 = data[i + 2] & 0xFF;
      var d1 = b1 >> 2, d2 = ((b1 & 3) << 4) | (b2 >> 4);
      var d3 = i + 1 < ii ? ((b2 & 0xF) << 2) | (b3 >> 6) : 64;
      var d4 = i + 2 < ii ? (b3 & 0x3F) : 64;
      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
    }
    return buffer;
  };
})();

function MessageHandler(name, comObj) {
  this.name = name;
  this.comObj = comObj;
  this.callbackIndex = 1;
  this.postMessageTransfers = true;
  var callbacksCapabilities = this.callbacksCapabilities = {};
  var ah = this.actionHandler = {};

  ah['console_log'] = [function ahConsoleLog(data) {
    console.log.apply(console, data);
  }];
  ah['console_error'] = [function ahConsoleError(data) {
    console.error.apply(console, data);
  }];
  ah['_unsupported_feature'] = [function ah_unsupportedFeature(data) {
    UnsupportedManager.notify(data);
  }];

  comObj.onmessage = function messageHandlerComObjOnMessage(event) {
    var data = event.data;
    if (data.isReply) {
      var callbackId = data.callbackId;
      if (data.callbackId in callbacksCapabilities) {
        var callback = callbacksCapabilities[callbackId];
        delete callbacksCapabilities[callbackId];
        if ('error' in data) {
          callback.reject(data.error);
        } else {
          callback.resolve(data.data);
        }
      } else {
        error('Cannot resolve callback ' + callbackId);
      }
    } else if (data.action in ah) {
      var action = ah[data.action];
      if (data.callbackId) {
        Promise.resolve().then(function () {
          return action[0].call(action[1], data.data);
        }).then(function (result) {
          comObj.postMessage({
            isReply: true,
            callbackId: data.callbackId,
            data: result
          });
        }, function (reason) {
          comObj.postMessage({
            isReply: true,
            callbackId: data.callbackId,
            error: reason
          });
        });
      } else {
        action[0].call(action[1], data.data);
      }
    } else {
      error('Unknown action from worker: ' + data.action);
    }
  };
}

MessageHandler.prototype = {
  on: function messageHandlerOn(actionName, handler, scope) {
    var ah = this.actionHandler;
    if (ah[actionName]) {
      error('There is already an actionName called "' + actionName + '"');
    }
    ah[actionName] = [handler, scope];
  },
  /**
   * Sends a message to the comObj to invoke the action with the supplied data.
   * @param {String} actionName Action to call.
   * @param {JSON} data JSON data to send.
   * @param {Array} [transfers] Optional list of transfers/ArrayBuffers
   */
  send: function messageHandlerSend(actionName, data, transfers) {
    var message = {
      action: actionName,
      data: data
    };
    this.postMessage(message, transfers);
  },
  /**
   * Sends a message to the comObj to invoke the action with the supplied data.
   * Expects that other side will callback with the response.
   * @param {String} actionName Action to call.
   * @param {JSON} data JSON data to send.
   * @param {Array} [transfers] Optional list of transfers/ArrayBuffers.
   * @returns {Promise} Promise to be resolved with response data.
   */
  sendWithPromise:
    function messageHandlerSendWithPromise(actionName, data, transfers) {
    var callbackId = this.callbackIndex++;
    var message = {
      action: actionName,
      data: data,
      callbackId: callbackId
    };
    var capability = createPromiseCapability();
    this.callbacksCapabilities[callbackId] = capability;
    try {
      this.postMessage(message, transfers);
    } catch (e) {
      capability.reject(e);
    }
    return capability.promise;
  },
  /**
   * Sends raw message to the comObj.
   * @private
   * @param message {Object} Raw message.
   * @param transfers List of transfers/ArrayBuffers, or undefined.
   */
  postMessage: function (message, transfers) {
    if (transfers && this.postMessageTransfers) {
      this.comObj.postMessage(message, transfers);
    } else {
      this.comObj.postMessage(message);
    }
  }
};

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = JpxImage;
}

function loadJpegStream(id, imageUrl, objs) {
  var img = new Image();
  img.onload = (function loadJpegStream_onloadClosure() {
    objs.resolve(id, img);
  });
  img.onerror = (function loadJpegStream_onerrorClosure() {
    objs.resolve(id, null);
    warn('Error during JPEG image loading');
  });
  img.src = imageUrl;
}

/***/ }),

/***/ "./node_modules/OpenJPEG.js/dist/openJPEG-DynamicMemory-browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/OpenJPEG.js/dist/openJPEG-DynamicMemory-browser.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer) {/*! OpenJPEG.js - v0.10.1 - 2018-03-13 | (c) 2016 Chris Hafey | https://github.com/chafey/openjpeg */
var OpenJPEG = function(OpenJPEG) {
  OpenJPEG = OpenJPEG || {};

var Module=typeof OpenJPEG!=="undefined"?OpenJPEG:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}Module["arguments"]=[];Module["thisProgram"]="./this.program";Module["quit"]=(function(status,toThrow){throw toThrow});Module["preRun"]=[];Module["postRun"]=[];var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;if(Module["ENVIRONMENT"]){if(Module["ENVIRONMENT"]==="WEB"){ENVIRONMENT_IS_WEB=true}else if(Module["ENVIRONMENT"]==="WORKER"){ENVIRONMENT_IS_WORKER=true}else if(Module["ENVIRONMENT"]==="NODE"){ENVIRONMENT_IS_NODE=true}else if(Module["ENVIRONMENT"]==="SHELL"){ENVIRONMENT_IS_SHELL=true}else{throw new Error("Module['ENVIRONMENT'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.")}}else{ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&"function"==="function"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER}if(ENVIRONMENT_IS_NODE){var nodeFS;var nodePath;Module["read"]=function shell_read(filename,binary){var ret;ret=tryParseAsDataURI(filename);if(!ret){if(!nodeFS)nodeFS=__webpack_require__(/*! fs */ "./node_modules/node-libs-browser/mock/empty.js");if(!nodePath)nodePath=__webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");filename=nodePath["normalize"](filename);ret=nodeFS["readFileSync"](filename)}return binary?ret:ret.toString()};Module["readBinary"]=function readBinary(filename){var ret=Module["read"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}Module["arguments"]=process["argv"].slice(2);process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));process["on"]("unhandledRejection",(function(reason,p){process["exit"](1)}));Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){Module["read"]=function shell_read(f){var data=tryParseAsDataURI(f);if(data){return intArrayToString(data)}return read(f)}}Module["readBinary"]=function readBinary(f){var data;data=tryParseAsDataURI(f);if(data){return data}if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof quit==="function"){Module["quit"]=(function(status,toThrow){quit(status)})}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function shell_read(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}};if(ENVIRONMENT_IS_WORKER){Module["readBinary"]=function readBinary(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}}}Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror()};xhr.onerror=onerror;xhr.send(null)};if(typeof arguments!="undefined"){Module["arguments"]=arguments}Module["setWindowTitle"]=(function(title){document.title=title})}Module["print"]=typeof console!=="undefined"?console.log.bind(console):typeof print!=="undefined"?print:null;Module["printErr"]=typeof printErr!=="undefined"?printErr:typeof console!=="undefined"&&console.warn.bind(console)||Module["print"];Module.print=Module["print"];Module.printErr=Module["printErr"];for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var STACK_ALIGN=16;function staticAlloc(size){assert(!staticSealed);var ret=STATICTOP;STATICTOP=STATICTOP+size+15&-16;return ret}function dynamicAlloc(size){assert(DYNAMICTOP_PTR);var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;HEAP32[DYNAMICTOP_PTR>>2]=end;if(end>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){HEAP32[DYNAMICTOP_PTR>>2]=ret;return 0}}return ret}function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;var ret=size=Math.ceil(size/factor)*factor;return ret}function getNativeTypeSize(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return 4}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;Module.printErr(text)}}var jsCallStartIndex=1;var functionPointers=new Array(0);var funcWrappers={};function dynCall(sig,ptr,args){if(args&&args.length){return Module["dynCall_"+sig].apply(null,[ptr].concat(args))}else{return Module["dynCall_"+sig].call(null,ptr)}}var GLOBAL_BASE=8;var ABORT=0;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];assert(func,"Cannot call unknown function "+ident+", make sure it is exported");return func}var JSfuncs={"stackSave":(function(){stackSave()}),"stackRestore":(function(){stackRestore()}),"arrayToC":(function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};function ccall(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0){stackRestore(stack)}return ret}function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for getValue: "+type)}return null}var ALLOC_STATIC=2;var ALLOC_NONE=4;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[typeof _malloc==="function"?_malloc:staticAlloc,stackAlloc,staticAlloc,dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var stop;ptr=ret;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return UTF8ToString(ptr)}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}}function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function demangle(func){return func}function demangleAll(text){var regex=/__Z[\w\d_]+/g;return text.replace(regex,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}var WASM_PAGE_SIZE=65536;var ASMJS_PAGE_SIZE=16777216;var MIN_TOTAL_MEMORY=16777216;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBuffer(buf){Module["buffer"]=buffer=buf}function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE,STATICTOP,staticSealed;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;staticSealed=false;function abortOnCannotGrowMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}if(!Module["reallocBuffer"])Module["reallocBuffer"]=(function(size){var ret;try{if(ArrayBuffer.transfer){ret=ArrayBuffer.transfer(buffer,size)}else{var oldHEAP8=HEAP8;ret=new ArrayBuffer(size);var temp=new Int8Array(ret);temp.set(oldHEAP8)}}catch(e){return false}var success=_emscripten_replace_memory(ret);if(!success)return false;return ret});function enlargeMemory(){var PAGE_MULTIPLE=Module["usingWasm"]?WASM_PAGE_SIZE:ASMJS_PAGE_SIZE;var LIMIT=2147483648-PAGE_MULTIPLE;if(HEAP32[DYNAMICTOP_PTR>>2]>LIMIT){return false}var OLD_TOTAL_MEMORY=TOTAL_MEMORY;TOTAL_MEMORY=Math.max(TOTAL_MEMORY,MIN_TOTAL_MEMORY);while(TOTAL_MEMORY<HEAP32[DYNAMICTOP_PTR>>2]){if(TOTAL_MEMORY<=536870912){TOTAL_MEMORY=alignUp(2*TOTAL_MEMORY,PAGE_MULTIPLE)}else{TOTAL_MEMORY=Math.min(alignUp((3*TOTAL_MEMORY+2147483648)/4,PAGE_MULTIPLE),LIMIT)}}var replacement=Module["reallocBuffer"](TOTAL_MEMORY);if(!replacement||replacement.byteLength!=TOTAL_MEMORY){TOTAL_MEMORY=OLD_TOTAL_MEMORY;return false}updateGlobalBuffer(replacement);updateGlobalBufferViews();return true}var byteLength;try{byteLength=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,"byteLength").get);byteLength(new ArrayBuffer(4))}catch(e){byteLength=(function(buffer){return buffer.byteLength})}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;if(TOTAL_MEMORY<TOTAL_STACK)Module.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");if(Module["buffer"]){buffer=Module["buffer"]}else{{buffer=new ArrayBuffer(TOTAL_MEMORY)}Module["buffer"]=buffer}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}HEAP32[0]=1668509029;HEAP16[1]=25459;if(HEAPU8[2]!==115||HEAPU8[3]!==99)throw"Runtime error: expected the system to be little-endian!";function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func)}else{Module["dynCall_vi"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_round=Math.round;var Math_min=Math.min;var Math_max=Math.max;var Math_clz32=Math.clz32;var Math_trunc=Math.trunc;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};var memoryInitializer=null;var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}STATIC_BASE=GLOBAL_BASE;STATICTOP=STATIC_BASE+26352;__ATINIT__.push();memoryInitializer="data:application/octet-stream;base64,";var tempDoublePtr=STATICTOP;STATICTOP+=16;function ___lock(){}var SYSCALLS={varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall145(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doReadv(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function flush_NO_FILESYSTEM(){var fflush=Module["_fflush"];if(fflush)fflush(0);var printChar=___syscall146.printChar;if(!printChar)return;var buffers=___syscall146.buffers;if(buffers[1].length)printChar(1,10);if(buffers[2].length)printChar(2,10)}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;if(!___syscall146.buffers){___syscall146.buffers=[null,[],[]];___syscall146.printChar=(function(stream,curr){var buffer=___syscall146.buffers[stream];assert(buffer);if(curr===0||curr===10){(stream===1?Module["print"]:Module["printErr"])(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}})}for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){___syscall146.printChar(stream,HEAPU8[ptr+j])}ret+=len}return ret}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_STATIC);function ___unlock(){}var _llvm_ceil_f32=Math_ceil;var _llvm_floor_f32=Math_floor;var _llvm_floor_f64=Math_floor;var _llvm_pow_f64=Math_pow;function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}DYNAMICTOP_PTR=staticAlloc(4);STACK_BASE=STACKTOP=alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;staticSealed=true;var ASSERTIONS=false;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,"Character code "+chr+" ("+String.fromCharCode(chr)+")  at offset "+i+" not in 0x00-0xFF.")}chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}var decodeBase64=typeof atob==="function"?atob:(function(input){var keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output});function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE==="boolean"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,"base64")}catch(_){buf=new Buffer(s,"base64")}return new Uint8Array(buf.buffer,buf.byteOffset,buf.byteLength)}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error("Converting base64 string to bytes failed.")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}function invoke_di(index,a1){try{return Module["dynCall_di"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_ii(index,a1){try{return Module["dynCall_ii"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iii(index,a1,a2){try{return Module["dynCall_iii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiii(index,a1,a2,a3){try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){try{return Module["dynCall_iiiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiii(index,a1,a2,a3,a4,a5){try{return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7){try{return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){try{return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_vi(index,a1){try{Module["dynCall_vi"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_vii(index,a1,a2){try{Module["dynCall_vii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_viii(index,a1,a2,a3){try{Module["dynCall_viii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module["dynCall_viiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;Module["setThrew"](1,0)}}Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity,"byteLength":byteLength};Module.asmLibraryArg={"abort":abort,"assert":assert,"enlargeMemory":enlargeMemory,"getTotalMemory":getTotalMemory,"abortOnCannotGrowMemory":abortOnCannotGrowMemory,"invoke_di":invoke_di,"invoke_ii":invoke_ii,"invoke_iii":invoke_iii,"invoke_iiii":invoke_iiii,"invoke_iiiii":invoke_iiiii,"invoke_iiiiii":invoke_iiiiii,"invoke_iiiiiii":invoke_iiiiiii,"invoke_iiiiiiii":invoke_iiiiiiii,"invoke_iiiiiiiiiiii":invoke_iiiiiiiiiiii,"invoke_vi":invoke_vi,"invoke_vii":invoke_vii,"invoke_viii":invoke_viii,"invoke_viiii":invoke_viiii,"___lock":___lock,"___setErrNo":___setErrNo,"___syscall140":___syscall140,"___syscall145":___syscall145,"___syscall146":___syscall146,"___syscall221":___syscall221,"___syscall5":___syscall5,"___syscall54":___syscall54,"___syscall6":___syscall6,"___unlock":___unlock,"_emscripten_memcpy_big":_emscripten_memcpy_big,"_llvm_ceil_f32":_llvm_ceil_f32,"_llvm_floor_f32":_llvm_floor_f32,"_llvm_floor_f64":_llvm_floor_f64,"_llvm_pow_f64":_llvm_pow_f64,"flush_NO_FILESYSTEM":flush_NO_FILESYSTEM,"DYNAMICTOP_PTR":DYNAMICTOP_PTR,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"cttz_i8":cttz_i8};// EMSCRIPTEN_START_ASM
var asm=(/** @suppress {uselessCode} */ function(global,env,buffer) {
"almost asm";var a=global.Int8Array;var b=new a(buffer);var c=global.Int16Array;var d=new c(buffer);var e=global.Int32Array;var f=new e(buffer);var g=global.Uint8Array;var h=new g(buffer);var i=global.Uint16Array;var j=new i(buffer);var k=global.Uint32Array;var l=new k(buffer);var m=global.Float32Array;var n=new m(buffer);var o=global.Float64Array;var p=new o(buffer);var q=global.byteLength;var r=env.DYNAMICTOP_PTR|0;var s=env.tempDoublePtr|0;var t=env.ABORT|0;var u=env.STACKTOP|0;var v=env.STACK_MAX|0;var w=env.cttz_i8|0;var x=0;var y=0;var z=0;var A=0;var B=global.NaN,C=global.Infinity;var D=0,E=0,F=0,G=0,H=0.0;var I=0;var J=global.Math.floor;var K=global.Math.abs;var L=global.Math.sqrt;var M=global.Math.pow;var N=global.Math.cos;var O=global.Math.sin;var P=global.Math.tan;var Q=global.Math.acos;var R=global.Math.asin;var S=global.Math.atan;var T=global.Math.atan2;var U=global.Math.exp;var V=global.Math.log;var W=global.Math.ceil;var X=global.Math.imul;var Y=global.Math.min;var Z=global.Math.max;var _=global.Math.clz32;var $=env.abort;var aa=env.assert;var ba=env.enlargeMemory;var ca=env.getTotalMemory;var da=env.abortOnCannotGrowMemory;var ea=env.invoke_di;var fa=env.invoke_ii;var ga=env.invoke_iii;var ha=env.invoke_iiii;var ia=env.invoke_iiiii;var ja=env.invoke_iiiiii;var ka=env.invoke_iiiiiii;var la=env.invoke_iiiiiiii;var ma=env.invoke_iiiiiiiiiiii;var na=env.invoke_vi;var oa=env.invoke_vii;var pa=env.invoke_viii;var qa=env.invoke_viiii;var ra=env.___lock;var sa=env.___setErrNo;var ta=env.___syscall140;var ua=env.___syscall145;var va=env.___syscall146;var wa=env.___syscall221;var xa=env.___syscall5;var ya=env.___syscall54;var za=env.___syscall6;var Aa=env.___unlock;var Ba=env._emscripten_memcpy_big;var Ca=env._llvm_ceil_f32;var Da=env._llvm_floor_f32;var Ea=env._llvm_floor_f64;var Fa=env._llvm_pow_f64;var Ga=env.flush_NO_FILESYSTEM;var Ha=0.0;function Ia(newBuffer){if(q(newBuffer)&16777215||q(newBuffer)<=16777215||q(newBuffer)>2147483648)return false;b=new a(newBuffer);d=new c(newBuffer);f=new e(newBuffer);h=new g(newBuffer);j=new i(newBuffer);l=new k(newBuffer);n=new m(newBuffer);p=new o(newBuffer);buffer=newBuffer;return true}
// EMSCRIPTEN_START_FUNCS
function Wa(a){a=a|0;var b=0;b=u;u=u+a|0;u=u+15&-16;return b|0}function Xa(){return u|0}function Ya(a){a=a|0;u=a}function Za(a,b){a=a|0;b=b|0;u=a;v=b}function _a(a,b){a=a|0;b=b|0;if(!x){x=a;y=b}}function $a(a){a=a|0;I=a}function ab(){return I|0}function bb(a,b,c,d,e,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0;p=u;u=u+8272|0;q=p+16|0;n=p+12|0;m=p;f[n>>2]=0;o=Wb((f[a>>2]|0)==1375686655?0:2)|0;pc(o,1,0)|0;qc(o,2,0)|0;oc(o,3,0)|0;mc(q);f[m>>2]=a;f[m+4>>2]=a;f[m+8>>2]=b;m=uc(m,1)|0;if(!(rc(o,q)|0)){Si(4211)|0;jb(m);Zb(o);q=1;u=p;return q|0}if(!(hc(m,o,n)|0)){Si(4263)|0;jb(m);Zb(o);Qb(f[n>>2]|0);q=1;u=p;return q|0}if(!(Xb(o,m,f[n>>2]|0)|0)){Si(4313)|0;Zb(o);jb(m);Qb(f[n>>2]|0);q=1;u=p;return q|0}a=f[n>>2]|0;f[e>>2]=f[a+8>>2];f[g>>2]=f[a+12>>2];f[h>>2]=f[a+16>>2];b=a+24|0;q=f[b>>2]|0;f[j>>2]=f[q+24>>2];f[k>>2]=f[q+32>>2];f[i>>2]=f[q+28>>2];f[l>>2]=f[a+20>>2];a=X(X(f[e>>2]<<2,f[g>>2]|0)|0,f[h>>2]|0)|0;f[d>>2]=a;k=sh(a)|0;f[c>>2]=k;switch(f[h>>2]|0){case 1:{hj(k|0,f[(f[b>>2]|0)+44>>2]|0,a|0)|0;break}case 3:{j=X(f[g>>2]|0,f[e>>2]|0)|0;if((j|0)>0){i=f[b>>2]|0;b=f[i+44>>2]|0;l=f[i+96>>2]|0;i=f[i+148>>2]|0;a=0;do{q=a*3|0;f[k+(q<<2)>>2]=f[b+(a<<2)>>2];f[k+(q+1<<2)>>2]=f[l+(a<<2)>>2];f[k+(q+2<<2)>>2]=f[i+(a<<2)>>2];a=a+1|0}while((a|0)<(j|0))}break}default:{}}jb(m);Zb(o);Qb(f[n>>2]|0);q=0;u=p;return q|0}function cb(a,b,c,d,e,g,i,k,l,m){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;i=i|0;k=k|0;l=l|0;m=m|0;var o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0;w=u;u=u+18880|0;t=w+160|0;o=w+16|0;v=w;nc(t);f[t+18200>>2]=0;f[t+4788>>2]=1;f[t+20>>2]=1;a:do if(!e)switch(d|0){case 0:case 100:{n[t+4792>>2]=0.0;break a}default:{n[t+5192>>2]=+(d|0);f[t+28>>2]=1;break a}}else n[t+4792>>2]=+(e|0);while(0);f[o+24>>2]=c;f[o+28>>2]=c;f[o+32>>2]=0;f[o>>2]=1;f[o+4>>2]=1;f[o+8>>2]=a;f[o+12>>2]=b;f[o+60>>2]=c;f[o+64>>2]=c;f[o+68>>2]=0;f[o+36>>2]=1;f[o+40>>2]=1;f[o+44>>2]=a;f[o+48>>2]=b;f[o+96>>2]=c;f[o+100>>2]=c;f[o+104>>2]=0;f[o+72>>2]=1;f[o+76>>2]=1;f[o+80>>2]=a;f[o+84>>2]=b;f[o+132>>2]=c;f[o+136>>2]=c;f[o+140>>2]=0;f[o+108>>2]=1;f[o+112>>2]=1;f[o+116>>2]=a;f[o+120>>2]=b;s=Pb(4,o,1)|0;if(!s){m=0;u=w;return m|0}if((c|0)==16){if((b|0)>0&(a|0)>0){q=f[s+24>>2]|0;e=f[q+200>>2]|0;c=f[q+44>>2]|0;p=f[q+96>>2]|0;q=f[q+148>>2]|0;o=0;do{r=X(o,a)|0;d=0;do{x=d+r|0;y=x<<2;f[c+(x<<2)>>2]=j[g+(y<<1)>>1];f[p+(x<<2)>>2]=j[g+((y|1)<<1)>>1];f[q+(x<<2)>>2]=j[g+((y|2)<<1)>>1];f[e+(x<<2)>>2]=j[g+((y|3)<<1)>>1];d=d+1|0}while((d|0)!=(a|0));o=o+1|0}while((o|0)!=(b|0))}}else if((b|0)>0&(a|0)>0){q=f[s+24>>2]|0;e=f[q+200>>2]|0;c=f[q+44>>2]|0;p=f[q+96>>2]|0;q=f[q+148>>2]|0;o=0;do{r=X(o,a)|0;d=0;do{y=d+r|0;x=y<<2;f[c+(y<<2)>>2]=h[g+x>>0];f[p+(y<<2)>>2]=h[g+(x|1)>>0];f[q+(y<<2)>>2]=h[g+(x|2)>>0];f[e+(y<<2)>>2]=h[g+(x|3)>>0];d=d+1|0}while((d|0)!=(a|0));o=o+1|0}while((o|0)!=(b|0))}f[s>>2]=0;f[s+4>>2]=0;f[s+8>>2]=a;f[s+12>>2]=b;if((k|0)>0){f[s+28>>2]=i;f[s+32>>2]=k}pc(0,1,0)|0;qc(0,2,0)|0;oc(0,3,0)|0;e=Vb(2)|0;pc(e,1,0)|0;qc(e,2,0)|0;oc(e,3,0)|0;sc(e,t,s)|0;d=sh(67108864)|0;f[v>>2]=d;o=v+4|0;f[o>>2]=d;f[v+8>>2]=67108864;d=uc(v,0)|0;if(!d){y=0;u=w;return y|0}if(!(tc(e,s,d)|0)){jb(d);Zb(e);Qb(s);y=0;u=w;return y|0}if(!(bc(e,d)|0)){jb(d);Zb(e);Qb(s);y=0;u=w;return y|0}if(!(cc(e,d)|0)){jb(d);Zb(e);Qb(s);y=0;u=w;return y|0}else{x=f[v>>2]|0;y=(f[o>>2]|0)-x|0;v=sh(y)|0;f[l>>2]=v;hj(v|0,x|0,y|0)|0;f[m>>2]=y;jb(d);Zb(e);Qb(s);y=1;u=w;return y|0}return 0}function db(){return xc()|0}function eb(a,b){a=a|0;b=b|0;return}function fb(a,b){a=a|0;b=b|0;return}function gb(a,b){a=a|0;b=b|0;var c=0;b=u;u=u+16|0;c=b;f[c>>2]=a;Pi(4200,c)|0;u=b;return}function hb(a,b){a=a|0;b=b|0;var c=0;c=Ic(1,72)|0;if(!c){c=0;return c|0}f[c+64>>2]=a;a=Hc(a)|0;f[c+32>>2]=a;if(!a){Mc(c);c=0;return c|0}else{f[c+36>>2]=a;b=(b|0)==0;a=c+68|0;f[a>>2]=f[a>>2]|(b?1:2);f[c+40>>2]=b?29:30;f[c+44>>2]=b?31:32;f[c+16>>2]=4;f[c+20>>2]=5;f[c+24>>2]=6;f[c+28>>2]=7;return c|0}return 0}function ib(a){a=a|0;var b=0,c=0;b=Ic(1,72)|0;if(!b){c=0;return c|0}f[b+64>>2]=1048576;c=Hc(1048576)|0;f[b+32>>2]=c;if(!c){Mc(b);c=0;return c|0}else{f[b+36>>2]=c;c=(a|0)==0;a=b+68|0;f[a>>2]=f[a>>2]|(c?1:2);f[b+40>>2]=c?29:30;f[b+44>>2]=c?31:32;f[b+16>>2]=4;f[b+20>>2]=5;f[b+24>>2]=6;f[b+28>>2]=7;c=b;return c|0}return 0}function jb(a){a=a|0;var b=0;if(!a)return;b=f[a+4>>2]|0;if(b|0)Sa[b&7](f[a>>2]|0);b=a+32|0;Mc(f[b>>2]|0);f[b>>2]=0;Mc(a);return}function kb(a,b){a=a|0;b=b|0;if(!a)return;if(!(f[a+68>>2]&2))return;f[a+16>>2]=b;return}function lb(a,b){a=a|0;b=b|0;if(!a)return;f[a+28>>2]=b;return}function mb(a,b){a=a|0;b=b|0;if(!a)return;f[a+24>>2]=b;return}function nb(a,b,c){a=a|0;b=b|0;c=c|0;if(!a)return;f[a>>2]=b;f[a+4>>2]=c;return}function ob(a,b,c){a=a|0;b=b|0;c=c|0;if(!a)return;a=a+8|0;f[a>>2]=b;f[a+4>>2]=c;return}function pb(a,b){a=a|0;b=b|0;if(!a)return;if(!(f[a+68>>2]&1))return;f[a+20>>2]=b;return}function qb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=u;u=u+16|0;o=p+8|0;k=p;n=a+68|0;if(f[n>>2]&8|0){o=-1;a=-1;I=o;u=p;return a|0}j=a+32|0;e=f[j>>2]|0;m=a+36|0;f[m>>2]=e;h=a+48|0;g=f[h>>2]|0;do if(g){i=a+20|0;while(1){g=Ma[f[i>>2]&63](e,g,f[a>>2]|0)|0;if((g|0)==-1)break;e=(f[m>>2]|0)+g|0;f[m>>2]=e;g=(f[h>>2]|0)-g|0;f[h>>2]=g;if(!g){l=6;break}}if((l|0)==6){e=f[j>>2]|0;break}f[n>>2]=f[n>>2]|8;Mb(d,4,4360,k)|0;f[n>>2]=f[n>>2]|8;f[h>>2]=0;o=-1;a=-1;I=o;u=p;return a|0}while(0);f[m>>2]=e;a:do if((c|0)>0|(c|0)==0&b>>>0>0){j=a+24|0;g=0;e=0;while(1){h=Ma[f[j>>2]&63](b,c,f[a>>2]|0)|0;i=I;if((h|0)==-1&(i|0)==-1)break;b=_i(b|0,c|0,h|0,i|0)|0;c=I;g=Zi(h|0,i|0,g|0,e|0)|0;e=I;if(!((c|0)>0|(c|0)==0&b>>>0>0))break a}Mb(d,4,4412,o)|0;f[n>>2]=f[n>>2]|8;a=a+56|0;o=a;o=Zi(f[o>>2]|0,f[o+4>>2]|0,g|0,e|0)|0;f[a>>2]=o;f[a+4>>2]=I;a=(g|0)!=0|(e|0)!=0;o=a?e:-1;a=a?g:-1;I=o;u=p;return a|0}else{g=0;e=0}while(0);o=a+56|0;a=o;a=Zi(f[a>>2]|0,f[a+4>>2]|0,g|0,e|0)|0;f[o>>2]=a;f[o+4>>2]=I;o=e;a=g;I=o;u=p;return a|0}function rb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;m=u;u=u+16|0;l=m;e=a+48|0;g=f[e>>2]|0;if(g>>>0>=b>>>0){l=a+36|0;f[l>>2]=(f[l>>2]|0)+b;f[e>>2]=g-b;l=a+56|0;a=l;a=Zi(f[a>>2]|0,f[a+4>>2]|0,b|0,c|0)|0;f[l>>2]=a;f[l+4>>2]=I;l=c;a=b;I=l;u=m;return a|0}k=a+68|0;if(f[k>>2]&4|0){l=a+36|0;f[l>>2]=(f[l>>2]|0)+g;f[e>>2]=0;a=a+56|0;l=a;l=Zi(f[l>>2]|0,f[l+4>>2]|0,g|0,0)|0;f[a>>2]=l;f[a+4>>2]=I;a=(g|0)!=0;l=a?0:-1;a=a?g:-1;I=l;u=m;return a|0}if(!g){g=0;e=0}else{f[a+36>>2]=f[a+32>>2];b=_i(b|0,c|0,g|0,0)|0;f[e>>2]=0;e=0;c=I}a:do if((c|0)>0|(c|0)==0&b>>>0>0){j=a+24|0;while(1){h=Ma[f[j>>2]&63](b,c,f[a>>2]|0)|0;i=I;if((h|0)==-1&(i|0)==-1)break;b=_i(b|0,c|0,h|0,i|0)|0;c=I;g=Zi(h|0,i|0,g|0,e|0)|0;e=I;if(!((c|0)>0|(c|0)==0&b>>>0>0))break a}Mb(d,4,4386,l)|0;f[k>>2]=f[k>>2]|4;a=a+56|0;l=a;l=Zi(f[l>>2]|0,f[l+4>>2]|0,g|0,e|0)|0;f[a>>2]=l;f[a+4>>2]=I;a=(g|0)!=0|(e|0)!=0;l=a?e:-1;a=a?g:-1;I=l;u=m;return a|0}while(0);l=a+56|0;a=l;a=Zi(f[a>>2]|0,f[a+4>>2]|0,g|0,e|0)|0;f[l>>2]=a;f[l+4>>2]=I;l=e;a=g;I=l;u=m;return a|0}function sb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;n=u;u=u+16|0;i=n;k=a+32|0;e=f[k>>2]|0;l=a+36|0;f[l>>2]=e;m=a+48|0;g=f[m>>2]|0;do if(!g)g=a;else{h=a+20|0;while(1){g=Ma[f[h>>2]&63](e,g,f[a>>2]|0)|0;if((g|0)==-1)break;e=(f[l>>2]|0)+g|0;f[l>>2]=e;g=(f[m>>2]|0)-g|0;f[m>>2]=g;if(!g){j=6;break}}if((j|0)==6){g=a;e=f[k>>2]|0;break}m=a+68|0;f[m>>2]=f[m>>2]|8;Mb(d,4,4360,i)|0;f[m>>2]=f[m>>2]|8;m=0;u=n;return m|0}while(0);f[l>>2]=e;f[m>>2]=0;if(!(Ma[f[a+28>>2]&63](b,c,f[g>>2]|0)|0)){m=a+68|0;f[m>>2]=f[m>>2]|8;m=0;u=n;return m|0}else{m=a+56|0;f[m>>2]=b;f[m+4>>2]=c;m=1;u=n;return m|0}return 0}function tb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0;f[a+36>>2]=f[a+32>>2];f[a+48>>2]=0;g=(Ma[f[a+28>>2]&63](b,c,f[a>>2]|0)|0)==0;d=a+68|0;e=f[d>>2]|0;if(g){f[d>>2]=e|4;g=0;return g|0}else{f[d>>2]=e&-5;g=a+56|0;f[g>>2]=b;f[g+4>>2]=c;g=1;return g|0}return 0}function ub(a,b,c){a=a|0;b=b|0;c=c|0;return -1}function vb(a,b,c){a=a|0;b=b|0;c=c|0;return -1}function wb(a,b,c){a=a|0;b=b|0;c=c|0;I=-1;return -1}function xb(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function yb(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0;h=u;u=u+16|0;e=h;f[e>>2]=c;if(!d){u=h;return}g=0;c=e+d|0;while(1){c=c+-1|0;b[a>>0]=b[c>>0]|0;g=g+1|0;if((g|0)==(d|0))break;else a=a+1|0}u=h;return}function zb(a,c,d){a=a|0;c=c|0;d=d|0;var e=0;f[c>>2]=0;if(!d)return;e=c+d|0;c=a;a=0;while(1){e=e+-1|0;b[e>>0]=b[c>>0]|0;a=a+1|0;if((a|0)==(d|0))break;else c=c+1|0}return}function Ab(a,c){a=a|0;c=+c;var d=0,e=0,g=0;p[s>>3]=c;d=f[s>>2]|0;e=f[s+4>>2]|0;g=ej(d|0,e|0,56)|0;b[a>>0]=g;g=ej(d|0,e|0,48)|0;b[a+1>>0]=g;g=ej(d|0,e|0,40)|0;b[a+2>>0]=g;b[a+3>>0]=e;g=ej(d|0,e|0,24)|0;b[a+4>>0]=g;g=ej(d|0,e|0,16)|0;b[a+5>>0]=g;e=ej(d|0,e|0,8)|0;b[a+6>>0]=e;b[a+7>>0]=d;return}function Bb(a,c){a=a|0;c=c|0;var d=0;d=c+8|0;b[d+-1>>0]=b[a>>0]|0;b[d+-2>>0]=b[a+1>>0]|0;b[d+-3>>0]=b[a+2>>0]|0;b[d+-4>>0]=b[a+3>>0]|0;b[d+-5>>0]=b[a+4>>0]|0;b[d+-6>>0]=b[a+5>>0]|0;b[d+-7>>0]=b[a+6>>0]|0;b[c>>0]=b[a+7>>0]|0;return}function Cb(a,c){a=a|0;c=+c;var d=0;d=(n[s>>2]=c,f[s>>2]|0);b[a>>0]=d>>>24;b[a+1>>0]=d>>>16;b[a+2>>0]=d>>>8;b[a+3>>0]=d;return}function Db(a,c){a=a|0;c=c|0;var d=0;d=c+4|0;b[d+-1>>0]=b[a>>0]|0;b[d+-2>>0]=b[a+1>>0]|0;b[d+-3>>0]=b[a+2>>0]|0;b[c>>0]=b[a+3>>0]|0;return}function Eb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;s=u;u=u+16|0;r=s+8|0;q=s;p=a+48|0;e=f[p>>2]|0;if(e>>>0>=c>>>0){r=a+36|0;hj(b|0,f[r>>2]|0,c|0)|0;f[r>>2]=(f[r>>2]|0)+c;f[p>>2]=(f[p>>2]|0)-c;r=a+56|0;q=r;q=Zi(f[q>>2]|0,f[q+4>>2]|0,c|0,0)|0;f[r>>2]=q;f[r+4>>2]=I;r=c;u=s;return r|0}o=a+68|0;if(f[o>>2]&4|0){r=a+36|0;hj(b|0,f[r>>2]|0,e|0)|0;q=f[p>>2]|0;f[r>>2]=(f[r>>2]|0)+q;r=a+56|0;d=r;q=Zi(f[d>>2]|0,f[d+4>>2]|0,q|0,0)|0;f[r>>2]=q;f[r+4>>2]=I;f[p>>2]=0;r=e|0?e:-1;u=s;return r|0}if(!e){n=a+32|0;g=f[n>>2]|0;m=a+36|0;f[m>>2]=g;e=0}else{m=a+36|0;hj(b|0,f[m>>2]|0,e|0)|0;n=a+32|0;g=f[n>>2]|0;f[m>>2]=g;l=f[p>>2]|0;k=a+56|0;j=k;j=Zi(f[j>>2]|0,f[j+4>>2]|0,l|0,0)|0;f[k>>2]=j;f[k+4>>2]=I;f[p>>2]=0;c=c-l|0;b=b+l|0}k=a+64|0;l=a+16|0;j=a+56|0;while(1){h=f[k>>2]|0;i=f[l>>2]|0;if(c>>>0>=h>>>0){h=Ma[i&63](b,c,f[a>>2]|0)|0;f[p>>2]=h;if((h|0)==-1){g=16;break}e=h+e|0;if(h>>>0<c>>>0)g=h;else{g=19;break}}else{g=Ma[i&63](g,h,f[a>>2]|0)|0;f[p>>2]=g;if((g|0)==-1){g=11;break}if(g>>>0>=c>>>0){g=14;break}hj(b|0,f[m>>2]|0,g|0)|0;e=g+e|0;g=f[p>>2]|0}i=f[n>>2]|0;f[m>>2]=i;t=j;t=Zi(f[t>>2]|0,f[t+4>>2]|0,g|0,0)|0;h=j;f[h>>2]=t;f[h+4>>2]=I;f[p>>2]=0;c=c-g|0;b=b+g|0;g=i}if((g|0)==11){Mb(d,4,4386,q)|0;f[p>>2]=0;f[o>>2]=f[o>>2]|4;t=e|0?e:-1;u=s;return t|0}else if((g|0)==14){hj(b|0,f[m>>2]|0,c|0)|0;f[m>>2]=(f[m>>2]|0)+c;f[p>>2]=(f[p>>2]|0)-c;t=a+56|0;r=t;r=Zi(f[r>>2]|0,f[r+4>>2]|0,c|0,0)|0;f[t>>2]=r;f[t+4>>2]=I;t=e+c|0;u=s;return t|0}else if((g|0)==16){Mb(d,4,4386,r)|0;f[p>>2]=0;f[o>>2]=f[o>>2]|4;t=e|0?e:-1;u=s;return t|0}else if((g|0)==19){t=a+56|0;r=t;r=Zi(f[r>>2]|0,f[r+4>>2]|0,h|0,0)|0;f[t>>2]=r;f[t+4>>2]=I;f[m>>2]=f[n>>2];f[p>>2]=0;t=e;u=s;return t|0}return 0}function Fb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0;s=u;u=u+16|0;p=s;n=a+68|0;if(f[n>>2]&8|0){r=-1;u=s;return r|0}o=a+64|0;r=a+48|0;j=f[r>>2]|0;e=(f[o>>2]|0)-j|0;do if(e>>>0<c>>>0){l=a+32|0;g=a+36|0;m=a+20|0;h=a+56|0;i=0;k=e;a:while(1){if(!k)e=f[l>>2]|0;else{hj(f[g>>2]|0,b|0,k|0)|0;e=f[l>>2]|0;f[g>>2]=e;j=(f[r>>2]|0)+k|0;f[r>>2]=j;v=h;v=Zi(f[v>>2]|0,f[v+4>>2]|0,k|0,0)|0;t=h;f[t>>2]=v;f[t+4>>2]=I;i=k+i|0;c=c-k|0;b=b+k|0}f[g>>2]=e;if(j){do{j=Ma[f[m>>2]&63](e,j,f[a>>2]|0)|0;if((j|0)==-1)break a;e=(f[g>>2]|0)+j|0;f[g>>2]=e;j=(f[r>>2]|0)-j|0;f[r>>2]=j}while((j|0)!=0);e=f[l>>2]|0}f[g>>2]=e;k=f[o>>2]|0;if(c>>>0<=k>>>0){q=5;break}else j=0}if((q|0)==5)break;f[n>>2]=f[n>>2]|8;Mb(d,4,4360,p)|0;v=-1;u=s;return v|0}else{e=a+36|0;i=0;h=a+56|0;g=e;e=f[e>>2]|0}while(0);hj(e|0,b|0,c|0)|0;f[g>>2]=(f[g>>2]|0)+c;f[r>>2]=(f[r>>2]|0)+c;t=h;t=Zi(f[t>>2]|0,f[t+4>>2]|0,c|0,0)|0;v=h;f[v>>2]=t;f[v+4>>2]=I;v=i+c|0;u=s;return v|0}function Gb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0;l=u;u=u+16|0;i=l;e=a+32|0;c=f[e>>2]|0;k=a+36|0;f[k>>2]=c;g=a+48|0;d=f[g>>2]|0;do if(d){h=a+20|0;while(1){d=Ma[f[h>>2]&63](c,d,f[a>>2]|0)|0;if((d|0)==-1)break;c=(f[k>>2]|0)+d|0;f[k>>2]=c;d=(f[g>>2]|0)-d|0;f[g>>2]=d;if(!d){j=6;break}}if((j|0)==6){c=f[e>>2]|0;break}k=a+68|0;f[k>>2]=f[k>>2]|8;Mb(b,4,4360,i)|0;k=0;u=l;return k|0}while(0);f[k>>2]=c;k=1;u=l;return k|0}function Hb(a){a=a|0;a=a+56|0;I=f[a+4>>2]|0;return f[a>>2]|0}function Ib(a){a=a|0;var b=0,c=0;c=a+8|0;b=f[c>>2]|0;c=f[c+4>>2]|0;if((b|0)==0&(c|0)==0){b=0;c=0;I=b;return c|0}a=a+56|0;c=_i(b|0,c|0,f[a>>2]|0,f[a+4>>2]|0)|0;b=I;I=b;return c|0}function Jb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=Na[f[a+40>>2]&63](a,b,c,d)|0;return d|0}function Kb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Na[f[a+44>>2]&63](a,b,c,d)|0}function Lb(a){a=a|0;return (f[a+28>>2]|0)!=7|0}function Mb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0;i=u;u=u+528|0;g=i;h=i+16|0;a:do if(a){switch(b|0){case 1:{b=a+12|0;break}case 2:{b=a+16|0;a=a+4|0;break}case 4:{b=a+20|0;a=a+8|0;break}default:{b=0;break a}}e=f[b>>2]|0;b=f[a>>2]|0;if(e)if(!c)b=1;else{ij(h|0,0,512)|0;f[g>>2]=d;Hi(h,512,c,g)|0;Ta[e&7](h,b);b=1}else b=0}else b=0;while(0);u=i;return b|0}function Nb(a){a=a|0;f[a>>2]=0;f[a+4>>2]=0;f[a+8>>2]=0;f[a+12>>2]=4;f[a+20>>2]=4;f[a+16>>2]=4;return}function Ob(a,b){a=a|0;b=b|0;return}function Pb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0;d=Ic(1,36)|0;if(!d){i=d;return i|0}f[d+20>>2]=c;h=d+16|0;f[h>>2]=a;e=Ic(1,a*52|0)|0;i=d+24|0;f[i>>2]=e;if(!e){c=f[d+28>>2]|0;if(c|0)Mc(c);Mc(d);i=0;return i|0}if(!a){i=d;return i|0}c=0;while(1){f[e+(c*52|0)>>2]=f[b+(c*36|0)>>2];f[e+(c*52|0)+4>>2]=f[b+(c*36|0)+4>>2];j=f[b+(c*36|0)+8>>2]|0;f[e+(c*52|0)+8>>2]=j;k=f[b+(c*36|0)+12>>2]|0;f[e+(c*52|0)+12>>2]=k;f[e+(c*52|0)+16>>2]=f[b+(c*36|0)+16>>2];f[e+(c*52|0)+20>>2]=f[b+(c*36|0)+20>>2];f[e+(c*52|0)+24>>2]=f[b+(c*36|0)+24>>2];f[e+(c*52|0)+28>>2]=f[b+(c*36|0)+28>>2];f[e+(c*52|0)+32>>2]=f[b+(c*36|0)+32>>2];j=Ic(X(k,j)|0,4)|0;f[e+(c*52|0)+44>>2]=j;c=c+1|0;if(!j)break;if(c>>>0>=a>>>0){g=22;break}e=f[i>>2]|0}if((g|0)==22)return d|0;c=f[i>>2]|0;if(c|0){e=f[h>>2]|0;if(e){a=0;while(1){c=f[c+(a*52|0)+44>>2]|0;if(c){Mc(c);e=f[h>>2]|0}c=a+1|0;if(c>>>0>=e>>>0)break;a=c;c=f[i>>2]|0}c=f[i>>2]|0}Mc(c)}c=f[d+28>>2]|0;if(c|0)Mc(c);Mc(d);k=0;return k|0}function Qb(a){a=a|0;var b=0,c=0,d=0,e=0,g=0;if(!a)return;e=a+24|0;b=f[e>>2]|0;if(b|0){g=a+16|0;c=f[g>>2]|0;if(c){d=0;while(1){b=f[b+(d*52|0)+44>>2]|0;if(b){Mc(b);c=f[g>>2]|0}b=d+1|0;if(b>>>0>=c>>>0)break;d=b;b=f[e>>2]|0}b=f[e>>2]|0}Mc(b)}b=f[a+28>>2]|0;if(b|0)Mc(b);Mc(a);return}function Rb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=Ic(1,36)|0;if(!d){b=d;return b|0}f[d+20>>2]=c;f[d+16>>2]=a;e=Ic(a,52)|0;f[d+24>>2]=e;if(!e){c=f[d+28>>2]|0;if(c|0)Mc(c);Mc(d);b=0;return b|0}else{if(!a){b=d;return b|0}else c=0;do{f[e+(c*52|0)>>2]=f[b+(c*36|0)>>2];f[e+(c*52|0)+4>>2]=f[b+(c*36|0)+4>>2];f[e+(c*52|0)+8>>2]=f[b+(c*36|0)+8>>2];f[e+(c*52|0)+12>>2]=f[b+(c*36|0)+12>>2];f[e+(c*52|0)+16>>2]=f[b+(c*36|0)+16>>2];f[e+(c*52|0)+20>>2]=f[b+(c*36|0)+20>>2];f[e+(c*52|0)+24>>2]=f[b+(c*36|0)+24>>2];f[e+(c*52|0)+32>>2]=f[b+(c*36|0)+32>>2];f[e+(c*52|0)+44>>2]=0;c=c+1|0}while((c|0)!=(a|0));return d|0}return 0}function Sb(){return Ic(1,36)|0}function Tb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;c=f[b+4>>2]|0;d=f[a>>2]|0;g=f[b+8>>2]|0;h=f[a+4>>2]|0;e=f[b+12>>2]|0;l=(X((f[b+24>>2]|0)+-1|0,e)|0)+c|0;i=f[b+16>>2]|0;j=(X((f[b+28>>2]|0)+-1|0,i)|0)+g|0;b=Zi(l|0,0,e|0,0)|0;b=0-I|b;e=f[a+8>>2]|0;i=Zi(j|0,0,i|0,0)|0;i=0-I|i;j=f[a+12>>2]|0;l=f[a+16>>2]|0;if(!l)return;k=(c>>>0>d>>>0?c:d)+-1|0;g=(g>>>0>h>>>0?g:h)+-1|0;e=(b>>>0<e>>>0?b:e)+-1|0;d=(i>>>0<j>>>0?i:j)+-1|0;c=0;b=f[a+24>>2]|0;while(1){h=f[b>>2]|0;j=((k+h|0)>>>0)/(h>>>0)|0;o=f[b+4>>2]|0;a=((g+o|0)>>>0)/(o>>>0)|0;i=f[b+40>>2]|0;n=fj(1,0,i|0)|0;m=I;h=Zi((((e+h|0)>>>0)/(h>>>0)|0)-j|0,0,-1,-1)|0;h=Zi(h|0,I|0,n|0,m|0)|0;h=ej(h|0,I|0,i|0)|0;o=Zi((((d+o|0)>>>0)/(o>>>0)|0)-a|0,0,-1,-1)|0;m=Zi(o|0,I|0,n|0,m|0)|0;i=ej(m|0,I|0,i|0)|0;f[b+8>>2]=h;f[b+12>>2]=i;f[b+16>>2]=j;f[b+20>>2]=a;c=c+1|0;if(c>>>0>=l>>>0)break;else b=b+52|0}return}function Ub(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0;f[b>>2]=f[a>>2];f[b+4>>2]=f[a+4>>2];f[b+8>>2]=f[a+8>>2];f[b+12>>2]=f[a+12>>2];j=b+24|0;d=f[j>>2]|0;i=b+16|0;if(!d)c=j;else{e=f[i>>2]|0;if(!e)c=j;else{c=0;while(1){d=f[d+(c*52|0)+44>>2]|0;if(d){Mc(d);e=f[i>>2]|0}c=c+1|0;if(c>>>0>=e>>>0)break;d=f[j>>2]|0}c=j;d=f[j>>2]|0}Mc(d);f[j>>2]=0}d=f[a+16>>2]|0;f[i>>2]=d;d=Hc(d*52|0)|0;f[c>>2]=d;if(!d){f[j>>2]=0;f[i>>2]=0;return}if(f[i>>2]|0){h=a+24|0;g=0;c=d;do{c=c+(g*52|0)|0;d=(f[h>>2]|0)+(g*52|0)|0;e=c+52|0;do{f[c>>2]=f[d>>2];c=c+4|0;d=d+4|0}while((c|0)<(e|0));c=f[j>>2]|0;f[c+(g*52|0)+44>>2]=0;g=g+1|0}while(g>>>0<(f[i>>2]|0)>>>0)}f[b+20>>2]=f[a+20>>2];e=a+32|0;c=f[e>>2]|0;g=b+32|0;f[g>>2]=c;if(!c){f[b+28>>2]=0;return}d=Hc(c)|0;c=b+28|0;f[c>>2]=d;if(!d){f[c>>2]=0;f[g>>2]=0;return}else{hj(d|0,f[a+28>>2]|0,f[e>>2]|0)|0;return}}function Vb(a){a=a|0;var b=0;b=Ic(1,84)|0;if(!b){b=0;return b|0}f[b+68>>2]=0;switch(a|0){case 0:{f[b+4>>2]=8;f[b+12>>2]=9;f[b>>2]=33;f[b+8>>2]=1;f[b+16>>2]=1;f[b+20>>2]=34;a=Pc()|0;f[b+40>>2]=a;if(!a){Mc(b);b=0;return b|0}break}case 2:{f[b+4>>2]=10;f[b+12>>2]=11;f[b>>2]=35;f[b+8>>2]=2;f[b+16>>2]=2;f[b+20>>2]=36;a=nf(0)|0;f[b+40>>2]=a;if(!a){Mc(b);b=0;return b|0}break}default:{Mc(b);b=0;return b|0}}Nb(b+44|0);return b|0}function Wb(a){a=a|0;var b=0;b=Ic(1,84)|0;if(!b){b=0;return b|0}f[b+68>>2]=1;switch(a|0){case 0:{f[b+72>>2]=13;f[b+76>>2]=2;f[b+80>>2]=3;f[b+4>>2]=37;f[b+16>>2]=12;f[b>>2]=38;f[b+20>>2]=1;f[b+24>>2]=5;f[b+8>>2]=1;f[b+12>>2]=3;f[b+28>>2]=1;f[b+32>>2]=1;f[b+36>>2]=13;a=Jd()|0;f[b+40>>2]=a;if(!a){Mc(b);b=0;return b|0}break}case 2:{f[b+72>>2]=14;f[b+76>>2]=4;f[b+80>>2]=5;f[b+4>>2]=39;f[b+16>>2]=14;f[b>>2]=40;f[b+8>>2]=2;f[b+12>>2]=4;f[b+20>>2]=2;f[b+24>>2]=6;f[b+28>>2]=2;f[b+32>>2]=2;f[b+36>>2]=15;a=nf(1)|0;f[b+40>>2]=a;if(!a){Mc(b);b=0;return b|0}break}default:{Mc(b);b=0;return b|0}}Nb(b+44|0);return b|0}function Xb(a,b,c){a=a|0;b=b|0;c=c|0;if(!((a|0)!=0&(b|0)!=0)){c=0;return c|0}if(!(f[a+68>>2]|0)){c=0;return c|0}c=Na[f[a+4>>2]&63](f[a+40>>2]|0,b,c,a+44|0)|0;return c|0}function Yb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if(!((a|0)!=0&(c|0)!=0&(e|0)!=0)){e=0;return e|0}if(!(f[a+68>>2]|0)){e=0;return e|0}e=Pa[f[a+12>>2]&7](f[a+40>>2]|0,b,c,d,e,a+44|0)|0;return e|0}function Zb(a){a=a|0;var b=0;if(!a)return;if(!(f[a+68>>2]|0)){b=a+40|0;Sa[f[a+16>>2]&7](f[b>>2]|0)}else{b=a+40|0;Sa[f[a+20>>2]&7](f[b>>2]|0)}f[b>>2]=0;Mc(a);return}function _b(a){a=a|0;var b=0;b=f[a>>2]|0;if(!b)return;Sc(b);f[a>>2]=0;return}function $b(a){a=a|0;var b=0,c=0;if(!a)return;b=f[a>>2]|0;c=f[b+48>>2]|0;if(c){Mc(c);b=f[a>>2]|0}Mc(b);f[a>>2]=0;return}function ac(a,b,c){a=a|0;b=b|0;c=c|0;if(!a)return;Ua[f[a+72>>2]&15](f[a+40>>2]|0,b,c);return}function bc(a,b){a=a|0;b=b|0;if(!((a|0)!=0&(b|0)!=0)){b=0;return b|0}if(f[a+68>>2]|0){b=0;return b|0}b=Ma[f[a+4>>2]&63](f[a+40>>2]|0,b,a+44|0)|0;return b|0}function cc(a,b){a=a|0;b=b|0;if(!((a|0)!=0&(b|0)!=0)){b=0;return b|0}if(f[a+68>>2]|0){b=0;return b|0}b=Ma[f[a+12>>2]&63](f[a+40>>2]|0,b,a+44|0)|0;return b|0}function dc(a,b){a=a|0;b=b|0;if(!((a|0)!=0&(b|0)!=0)){b=0;return b|0}if(!(f[a+68>>2]|0)){b=0;return b|0}b=Ma[f[a+16>>2]&63](f[a+40>>2]|0,b,a+44|0)|0;return b|0}function ec(a){a=a|0;if(!a){a=0;return a|0}a=Ka[f[a+80>>2]&15](f[a+40>>2]|0)|0;return a|0}function fc(a){a=a|0;if(!a){a=0;return a|0}a=Ka[f[a+76>>2]&15](f[a+40>>2]|0)|0;return a|0}function gc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(!((a|0)!=0&(b|0)!=0)){d=0;return d|0}if(!(f[a+68>>2]|0)){d=0;return d|0}d=Oa[f[a+32>>2]&3](f[a+40>>2]|0,b,c,a+44|0,d)|0;return d|0}function hc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=u;u=u+16|0;if(!((a|0)!=0&(b|0)!=0)){c=0;u=d;return c|0}if(!(f[b+68>>2]|0)){Mb(b+44|0,1,4520,d)|0;c=0;u=d;return c|0}else{c=Na[f[b>>2]&63](a,f[b+40>>2]|0,c,b+44|0)|0;u=d;return c|0}return 0}function ic(a,b,c,d,e,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;if(!((c|0)!=0&((a|0)!=0&(b|0)!=0&(d|0)!=0))){k=0;return k|0}if(!(f[a+68>>2]|0)){k=0;return k|0}k=Ra[f[a+8>>2]&3](f[a+40>>2]|0,c,d,e,g,h,i,j,k,b,a+44|0)|0;return k|0}function jc(a,c,e,g){a=a|0;c=c|0;e=e|0;g=g|0;var h=0,i=0,k=0;k=g<<2;i=X(k,g)|0;h=a+18704|0;g=j[h>>1]|0;d[h>>1]=(g&32768|0)==0?-32512:(g|256)&65535;f[a+5608>>2]=1;b[a+18690>>0]=2;h=Hc(i+k|0)|0;g=a+18696|0;f[g>>2]=h;if(!h){k=0;return k|0}hj(h|0,c|0,i|0)|0;hj((f[g>>2]|0)+i|0,e|0,k|0)|0;k=1;return k|0}function kc(a,b,c,d,e,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;if(!a){g=0;return g|0}if(!(f[a+68>>2]|0)){g=0;return g|0}g=Qa[f[a+28>>2]&3](f[a+40>>2]|0,b,c,d,e,g,a+44|0)|0;return g|0}function lc(a,b){a=a|0;b=b|0;if(!a){b=0;return b|0}b=Ma[f[a+36>>2]&63](f[a+40>>2]|0,b,a+44|0)|0;return b|0}function mc(a){a=a|0;if(!a)return;ij(a|0,0,8248)|0;f[a+8200>>2]=-1;f[a+8204>>2]=-1;f[a+8248>>2]=0;return}function nc(a){a=a|0;if(!a)return;ij(a|0,0,18708)|0;f[a+5592>>2]=6;f[a+18684>>2]=0;f[a+5596>>2]=64;f[a+5600>>2]=64;f[a+44>>2]=0;f[a+5612>>2]=-1;f[a+18188>>2]=1;f[a+18192>>2]=1;b[a+18688>>0]=0;f[a+18196>>2]=-1;f[a+18200>>2]=-1;n[a+4792>>2]=0.0;f[a+4788>>2]=0;f[a+20>>2]=0;f[a+24>>2]=0;f[a+28>>2]=0;f[a+18692>>2]=0;return}function oc(a,b,c){a=a|0;b=b|0;c=c|0;if(!a){c=0;return c|0}f[a+56>>2]=b;f[a+44>>2]=c;c=1;return c|0}function pc(a,b,c){a=a|0;b=b|0;c=c|0;if(!a){c=0;return c|0}f[a+64>>2]=b;f[a+52>>2]=c;c=1;return c|0}function qc(a,b,c){a=a|0;b=b|0;c=c|0;if(!a){c=0;return c|0}f[a+60>>2]=b;f[a+48>>2]=c;c=1;return c|0}function rc(a,b){a=a|0;b=b|0;var c=0;c=u;u=u+16|0;if(!((a|0)!=0&(b|0)!=0)){b=0;u=c;return b|0}if(!(f[a+68>>2]|0)){Mb(a+44|0,1,4439,c)|0;b=0;u=c;return b|0}else{Ta[f[a+24>>2]&7](f[a+40>>2]|0,b);b=1;u=c;return b|0}return 0}function sc(a,b,c){a=a|0;b=b|0;c=c|0;if(!((a|0)!=0&(b|0)!=0&(c|0)!=0)){c=0;return c|0}if(f[a+68>>2]|0){c=0;return c|0}c=Na[f[a+20>>2]&63](f[a+40>>2]|0,b,c,a+44|0)|0;return c|0}function tc(a,b,c){a=a|0;b=b|0;c=c|0;if(!((a|0)!=0&(c|0)!=0)){c=0;return c|0}if(f[a+68>>2]|0){c=0;return c|0}c=Na[f[a>>2]&63](f[a+40>>2]|0,c,b,a+44|0)|0;return c|0}function uc(a,b){a=a|0;b=b|0;var c=0;if(!a){c=0;return c|0}c=ib(b)|0;if(!c){c=0;return c|0}nb(c,a,0);ob(c,f[a+8>>2]|0,0);if(!b)pb(c,17);else kb(c,16);mb(c,18);lb(c,19);return c|0}function vc(a,b){a=a|0;b=b|0;return wc(a,1048576,b)|0}function wc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(!a){d=0;return d|0}d=Xh(a,(c|0)==0?4433:4436)|0;if(!d){d=0;return d|0}a=hb(b,c)|0;if(!a){ei(d)|0;d=0;return d|0}else{nb(a,d,6);ji(d,0,2)|0;c=Vi(d)|0;ji(d,0,0)|0;ob(a,c,((c|0)<0)<<31>>31);kb(a,20);pb(a,21);mb(a,22);lb(a,23);d=a;return d|0}return 0}function xc(){return 4427}function yc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if(!((c|0)!=0&((a|0)!=0&(e|0)!=0))){e=0;return e|0}if(f[a+68>>2]|0){e=0;return e|0}e=Pa[f[a+8>>2]&7](f[a+40>>2]|0,b,c,d,e,a+44|0)|0;return e|0}function zc(a,b,c){a=a|0;b=b|0;c=c|0;c=Qi(a,1,b,c)|0;return (c|0?c:-1)|0}function Ac(a,b,c){a=a|0;b=b|0;c=c|0;return Mh(a,1,b,c)|0}function Bc(a,b,c){a=a|0;b=b|0;c=c|0;c=(ji(c,a,1)|0)==0;I=c?b:-1;return (c?a:-1)|0}function Cc(a,b,c){a=a|0;b=b|0;c=c|0;return (ji(c,a,0)|0)==0|0}function Dc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=c+4|0;e=f[d>>2]|0;c=(f[c>>2]|0)+(f[c+8>>2]|0)-e|0;if(!c){e=-1;return e|0}b=c>>>0>b>>>0?b:c;hj(a|0,e|0,b|0)|0;f[d>>2]=(f[d>>2]|0)+b;e=b;return e|0}function Ec(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0;j=c+4|0;d=f[j>>2]|0;h=c+8|0;e=f[h>>2]|0;i=d-(f[c>>2]|0)|0;g=(e|0)==0?1:e;while(1)if((g-i|0)>>>0<b>>>0)g=g<<1;else break;if((g|0)!=(e|0)){d=Hc(g)|0;if(!d){j=-1;return j|0}e=f[c>>2]|0;if(e|0){hj(d|0,e|0,i|0)|0;Mc(f[c>>2]|0)}f[c>>2]=d;d=d+i|0;f[j>>2]=d;f[h>>2]=g}hj(d|0,a|0,b|0)|0;f[j>>2]=(f[j>>2]|0)+b;j=b;return j|0}function Fc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0;e=c+4|0;g=f[e>>2]|0;c=(f[c>>2]|0)+(f[c+8>>2]|0)-g|0;d=((c|0)<0)<<31>>31;if(!c){e=-1;g=-1;I=e;return g|0}h=(d|0)>(b|0)|(d|0)==(b|0)&c>>>0>a>>>0;f[e>>2]=g+a;e=h?b:d;g=h?a:c;I=e;return g|0}function Gc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=f[c+8>>2]|0;f[c+4>>2]=(f[c>>2]|0)+(0>(b|0)|0==(b|0)&d>>>0>a>>>0?a:d);return 1}function Hc(a){a=a|0;if(!a)a=0;else a=sh(a)|0;return a|0}function Ic(a,b){a=a|0;b=b|0;if((a|0)==0|(b|0)==0){b=0;return b|0}b=uh(a,b)|0;return b|0}function Jc(a){a=a|0;var b=0,c=0;c=u;u=u+16|0;b=c;do if(a)if(!(zh(b,16,a)|0)){a=f[b>>2]|0;break}else{f[b>>2]=0;a=0;break}else a=0;while(0);u=c;return a|0}function Kc(a){a=a|0;th(a);return}function Lc(a,b){a=a|0;b=b|0;if(!b)a=0;else a=vh(a,b)|0;return a|0}function Mc(a){a=a|0;th(a);return}function Nc(a){a=a|0;var b=0,c=0;b=696;while(1){c=f[b>>2]|0;if((c|0)==-1|(c|0)==(a|0))break;else b=b+12|0}return b+4|0}function Oc(a,b){a=a|0;b=b|0;if(!((a|0)!=0&(b|0)!=0))return;f[a+172>>2]=f[b+4>>2];f[a+168>>2]=f[b>>2];return}function Pc(){var a=0,c=0;a=Ic(1,208)|0;if(!a){a=0;return a|0}f[a>>2]=0;c=a+184|0;b[c>>0]=b[c>>0]&-3;c=Hc(1e3)|0;f[a+44>>2]=c;if(!c){Qc(a);c=0;return c|0}f[a+48>>2]=1e3;c=ig()|0;f[a+192>>2]=c;if(!c){Qc(a);c=0;return c|0}c=ig()|0;f[a+188>>2]=c;if(c|0){c=a;return c|0}Qc(a);c=0;return c|0}function Qc(a){a=a|0;var c=0,d=0,e=0,g=0,h=0,i=0;if(!a)return;if(!(f[a>>2]|0)){c=a+36|0;d=f[c>>2]|0;if(d|0){Mc(d);f[c>>2]=0}c=a+24|0;d=f[c>>2]|0;if(d|0){Mc(d);f[c>>2]=0;f[a+28>>2]=0}c=a+44|0;d=f[c>>2]|0;if(d|0){Mc(d);f[c>>2]=0;f[a+48>>2]=0}}else{c=a+12|0;d=f[c>>2]|0;if(d|0){Rc(d);Mc(f[c>>2]|0);f[c>>2]=0}c=a+16|0;d=f[c>>2]|0;if(d|0){Mc(d);f[c>>2]=0;f[a+20>>2]=0}}Qf(f[a+204>>2]|0);c=a+88|0;h=a+164|0;d=f[h>>2]|0;if(d|0){g=X(f[a+112>>2]|0,f[a+116>>2]|0)|0;if(g){e=0;while(1){Rc(d);e=e+1|0;if((e|0)==(g|0))break;else d=d+5640|0}d=f[h>>2]|0}Mc(d);f[h>>2]=0}h=a+124|0;d=f[h>>2]|0;if(d|0){i=a+120|0;e=f[i>>2]|0;if(e){g=0;while(1){d=f[d+(g<<3)>>2]|0;if(d){Mc(d);e=f[i>>2]|0}d=g+1|0;if(d>>>0>=e>>>0)break;g=d;d=f[h>>2]|0}d=f[h>>2]|0}f[i>>2]=0;Mc(d);f[h>>2]=0}i=a+144|0;Mc(f[i>>2]|0);f[i>>2]=0;f[a+128>>2]=0;i=a+108|0;Mc(f[i>>2]|0);f[i>>2]=0;if(!(b[a+184>>0]&2)){i=a+176|0;Mc(f[i>>2]|0);f[i>>2]=0}d=c+100|0;do{f[c>>2]=0;c=c+4|0}while((c|0)<(d|0));i=a+188|0;jg(f[i>>2]|0);f[i>>2]=0;jg(f[a+192>>2]|0);f[i>>2]=0;i=a+196|0;Sc(f[i>>2]|0);f[i>>2]=0;i=a+80|0;Qb(f[i>>2]|0);f[i>>2]=0;i=a+84|0;Qb(f[i>>2]|0);f[i>>2]=0;Mc(a);return}function Rc(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0,i=0;if(!a)return;e=a+5164|0;b=f[e>>2]|0;if(b|0){g=a+5160|0;c=f[g>>2]|0;if(c){d=0;while(1){b=f[b+(d<<3)>>2]|0;if(b){Mc(b);c=f[g>>2]|0}b=d+1|0;if(b>>>0>=c>>>0)break;d=b;b=f[e>>2]|0}b=f[e>>2]|0}f[g>>2]=0;Mc(b);f[e>>2]=0}b=a+5172|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0}b=a+5584|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0}b=a+5608|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0}b=a+5604|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0}b=a+5624|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0;f[a+5632>>2]=0;f[a+5628>>2]=0}i=a+5612|0;b=f[i>>2]|0;if(b|0){h=a+5616|0;c=f[h>>2]|0;if(c){g=0;while(1){d=b+12|0;e=f[d>>2]|0;if(e){Mc(e);f[d>>2]=0;c=f[h>>2]|0}g=g+1|0;if(g>>>0>=c>>>0)break;else b=b+20|0}b=f[i>>2]|0}Mc(b);f[i>>2]=0}b=a+5600|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0}b=a+5592|0;c=f[b>>2]|0;if(!c)return;Mc(c);f[b>>2]=0;f[a+5596>>2]=0;return}function Sc(a){a=a|0;var b=0,c=0,d=0,e=0,g=0;if(!a)return;b=a+28|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0}g=a+40|0;b=f[g>>2]|0;if(b|0){e=a+36|0;if(f[e>>2]|0){d=0;do{c=f[b+(d*40|0)+36>>2]|0;if(c){Mc(c);b=f[g>>2]|0;f[b+(d*40|0)+36>>2]=0}c=f[b+(d*40|0)+16>>2]|0;if(c){Mc(c);b=f[g>>2]|0;f[b+(d*40|0)+16>>2]=0}c=f[b+(d*40|0)+24>>2]|0;if(c){Mc(c);b=f[g>>2]|0;f[b+(d*40|0)+24>>2]=0}d=d+1|0}while(d>>>0<(f[e>>2]|0)>>>0)}Mc(b);f[g>>2]=0}Mc(a);return}function Tc(a,c,e,g){a=a|0;c=c|0;e=e|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,o=0,q=0.0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0.0;ia=u;u=u+320|0;ha=ia+296|0;ga=ia+288|0;fa=ia+280|0;ea=ia+272|0;da=ia+264|0;ca=ia+256|0;ba=ia+248|0;aa=ia+240|0;V=ia+232|0;U=ia+224|0;T=ia+216|0;S=ia+208|0;R=ia+200|0;Q=ia+192|0;P=ia+184|0;v=ia+176|0;t=ia+168|0;s=ia+160|0;r=ia+152|0;o=ia+144|0;I=ia+136|0;H=ia+128|0;N=ia+112|0;G=ia+104|0;F=ia+96|0;E=ia+88|0;D=ia+80|0;C=ia+72|0;A=ia+64|0;z=ia+56|0;y=ia+48|0;x=ia+32|0;w=ia+24|0;m=ia+16|0;k=ia+8|0;i=ia;L=ia+309|0;M=ia+300|0;if(!((a|0)!=0&(c|0)!=0&(e|0)!=0)){ha=0;u=ia;return ha|0}$=c+5592|0;h=f[$>>2]|0;if((h+-1|0)>>>0>32){f[i>>2]=h;f[i+4>>2]=33;Mb(g,1,4599,i)|0;ha=0;u=ia;return ha|0}Z=a+112|0;f[Z>>2]=1;_=a+116|0;f[_>>2]=1;K=c+18704|0;do if(!(d[K>>1]|0)){switch(f[c+18676>>2]|0){case 1:{h=1041666;i=1302083;j=3;Y=8;break}case 2:{h=520833;i=651041;j=3;Y=8;break}case 3:{h=1041666;i=1302083;j=4;Y=8;break}default:i=0}if((Y|0)==8){d[K>>1]=j;f[c+18700>>2]=i;f[c+18680>>2]=h;i=1}h=f[c+18684>>2]|0;a:do if((h|0)<4){switch(h|0){case 3:break;default:{Y=13;break a}}h=3;Y=12}else{if((h|0)<33024)switch(h|0){case 4:{h=4;Y=12;break a}default:{Y=13;break a}}switch(h|0){case 33024:break;default:{Y=13;break a}}h=-32512;Y=12}while(0);if((Y|0)==12)d[K>>1]=h;else if((Y|0)==13?(i|0)==0:0)break;Mb(g,2,4655,k)|0}while(0);B=c+18700|0;h=f[B>>2]|0;do if((h|0)<1){q=+n[c+4792+((f[c+4788>>2]|0)+-1<<2)>>2];if(q>0.0){W=f[e+24>>2]|0;m=X(f[W+8>>2]|0,f[e+16>>2]|0)|0;m=X(m,f[W+12>>2]|0)|0;ja=+((X(m,f[W+24>>2]|0)|0)>>>0);W=~~+J(+(ja/(q*8.0*+((f[W>>2]|0)>>>0)*+((f[W+4>>2]|0)>>>0))));f[B>>2]=W;break}else{f[B>>2]=0;break}}else{l=f[e+24>>2]|0;W=X(f[l+8>>2]|0,f[e+16>>2]|0)|0;W=X(W,f[l+12>>2]|0)|0;q=+((X(W,f[l+24>>2]|0)|0)>>>0);h=X(h<<3,f[l>>2]|0)|0;q=q/+((X(h,f[l+4>>2]|0)|0)>>>0);l=c+4788|0;h=f[l>>2]|0;if(h|0){k=0;i=0;do{j=c+4792+(k<<2)|0;if(+n[j>>2]<q){n[j>>2]=q;i=1;h=f[l>>2]|0}k=k+1|0}while(k>>>0<h>>>0);if(i|0)Mb(g,2,4792,m)|0}}while(0);h=d[K>>1]|0;b:do if((h+-3&65535)>=4){if(h<<16>>16==7){Mb(g,2,6952,o)|0;d[K>>1]=0;break}if((h+-256&65535)<524){Mb(g,2,7007,r)|0;d[K>>1]=0;break}if((h+-1024&65535)<1180){Mb(g,2,7055,s)|0;d[K>>1]=0;break}if(h<<16>>16<=-1)switch(h<<16>>16){case -32512:break b;case -32768:{Mb(g,2,7097,t)|0;d[K>>1]=0;break b}default:{Mb(g,2,7185,v)|0;d[K>>1]=0;break b}}}else{if((h+-5&65535)<2){Mb(g,2,4884,w)|0;d[K>>1]=0;break}f[c>>2]=0;f[c+12>>2]=1;f[c+16>>2]=1;b[c+18689>>0]=67;b[c+18688>>0]=1;f[c+4>>2]=0;f[c+8>>2]=0;f[c+18180>>2]=0;f[c+18184>>2]=0;f[c+5596>>2]=32;f[c+5600>>2]=32;f[c+5604>>2]=0;f[c+5612>>2]=-1;f[c+18188>>2]=1;f[c+18192>>2]=1;f[c+5608>>2]=1;i=c+4788|0;j=f[i>>2]|0;if((j|0)>1){ja=+n[c+4792+(j+-1<<2)>>2];f[x>>2]=j;p[x+8>>3]=ja;Mb(g,2,4946,x)|0;f[c+4792>>2]=f[c+4792+((f[i>>2]|0)+-1<<2)>>2];f[i>>2]=1;h=d[K>>1]|0}c:do switch(h<<16>>16){case 3:{h=f[$>>2]|0;if((h|0)>6){f[y>>2]=h+1;Mb(g,2,5119,y)|0;f[$>>2]=6;h=6}break}case 4:{h=f[$>>2]|0;if((h|0)<2){f[z>>2]=h+1;Mb(g,2,5265,z)|0;f[$>>2]=1;h=1;break c}if((h|0)>7){f[A>>2]=h+1;Mb(g,2,5419,A)|0;f[$>>2]=7;h=7}break}default:h=f[$>>2]|0}while(0);i=c+40|0;f[i>>2]=f[i>>2]|1;i=c+5620|0;f[i>>2]=h+-1;if((h|0)>1){h=0;do{f[c+5624+(h<<2)>>2]=256;f[c+5756+(h<<2)>>2]=256;h=h+1|0}while((h|0)<(f[i>>2]|0))}f[c+44>>2]=4;if((d[K>>1]|0)==4){h=f[$>>2]|0;f[c+96>>2]=1;f[c+48>>2]=0;f[c+52>>2]=0;f[c+56>>2]=1;W=h+-1|0;f[c+60>>2]=W;f[c+64>>2]=3;f[c+80>>2]=4;f[c+244>>2]=1;f[c+196>>2]=W;f[c+200>>2]=0;f[c+204>>2]=1;f[c+208>>2]=h;f[c+212>>2]=3;f[c+228>>2]=4;h=2}else h=0;f[c+4784>>2]=h;f[c+20>>2]=1;h=f[B>>2]|0;if((h|0)>=1){if((h|0)>1302083){Mb(g,2,5722,D)|0;f[B>>2]=1302083}}else{f[B>>2]=1302083;Mb(g,2,5573,C)|0}h=c+18680|0;i=f[h>>2]|0;if((i|0)>=1){if((i|0)>1041666){Mb(g,2,6044,F)|0;f[h>>2]=1041666}}else{f[h>>2]=1041666;Mb(g,2,5895,E)|0}h=f[e+16>>2]|0;i=f[e+24>>2]|0;k=f[i+8>>2]|0;j=X(k,h)|0;m=f[i+12>>2]|0;j=X(j,m)|0;ja=+((X(j,f[i+24>>2]|0)|0)>>>0);j=X(f[B>>2]<<3,f[i>>2]|0)|0;ja=ja/+((X(j,f[i+4>>2]|0)|0)>>>0);n[c+4792>>2]=ja;j=d[K>>1]|0;d:do if((h|0)==3){h=f[i+28>>2]|0;l=f[i+32>>2]|0;if(!(l|(h|0)!=12)){h=f[i+80>>2]|0;l=f[i+84>>2]|0;if(!(l|(h|0)!=12)){h=f[i+132>>2]|0;i=f[i+136>>2]|0;if(!(i|(h|0)!=12))switch(j<<16>>16){case 3:{if(!(k>>>0>2048|m>>>0>1080))break b;f[H>>2]=k;f[H+4>>2]=m;Mb(g,2,6616,H)|0;break d}case 4:{if(!(k>>>0>4096|m>>>0>2160))break b;f[I>>2]=k;f[I+4>>2]=m;Mb(g,2,6787,I)|0;break d}default:break b}else{m=2;l=i}}else m=1}else m=0;b[L>>0]=b[6383]|0;b[L+1>>0]=b[6384]|0;b[L+2>>0]=b[6385]|0;b[L+3>>0]=b[6386]|0;b[L+4>>0]=b[6387]|0;b[L+5>>0]=b[6388]|0;b[L+6>>0]=b[6389]|0;i=M;j=6390;k=i+9|0;do{b[i>>0]=b[j>>0]|0;i=i+1|0;j=j+1|0}while((i|0)<(k|0));f[N>>2]=m;f[N+4>>2]=h;f[N+8>>2]=l|0?L:M;Mb(g,2,6399,N)|0}else{f[G>>2]=h;Mb(g,2,6217,G)|0}while(0);d[K>>1]=0}while(0);f[a+168>>2]=f[c+18680>>2];W=a+88|0;d[W>>1]=d[K>>1]|0;N=a+181|0;L=b[N>>0]&-2|f[c+20>>2]&1;b[N>>0]=L;M=c+24|0;L=(f[M>>2]&255)<<1&2|L&-3;b[N>>0]=L;b[N>>0]=L&-5|(f[c+28>>2]&255)<<2&4;do if(f[M>>2]|0?(O=c+32|0,f[O>>2]|0):0){h=X((f[c+4788>>2]|0)*12|0,f[$>>2]|0)|0;i=Hc(h)|0;f[a+176>>2]=i;if(i|0){hj(i|0,f[O>>2]|0,h|0)|0;break}Mb(g,1,7244,P)|0;ha=0;u=ia;return ha|0}while(0);k=a+100|0;f[k>>2]=f[c+12>>2];l=a+104|0;f[l>>2]=f[c+16>>2];j=a+92|0;f[j>>2]=f[c+4>>2];m=a+96|0;f[m>>2]=f[c+8>>2];i=c+36|0;h=f[i>>2]|0;do if(!h){h=xc()|0;i=Hc((Kh(h)|0)+29|0)|0;f[a+108>>2]=i;if(i|0){f[S>>2]=7421;f[S+4>>2]=h;Li(i,7416,S)|0;break}Mb(g,1,7370,R)|0;ha=0;u=ia;return ha|0}else{h=Hc((Kh(h)|0)+1|0)|0;f[a+108>>2]=h;if(h|0){Ji(h,f[i>>2]|0)|0;break}Mb(g,1,7316,Q)|0;ha=0;u=ia;return ha|0}while(0);h=(f[e+8>>2]|0)-(f[j>>2]|0)|0;if(!(f[c>>2]|0)){f[k>>2]=h;f[l>>2]=(f[e+12>>2]|0)-(f[m>>2]|0)}else{S=f[k>>2]|0;f[Z>>2]=(h+-1+S|0)/(S|0)|0;S=f[l>>2]|0;f[_>>2]=((f[e+12>>2]|0)+-1-(f[m>>2]|0)+S|0)/(S|0)|0}if(b[c+18688>>0]|0){b[a+180>>0]=b[c+18689>>0]|0;b[N>>0]=b[N>>0]|8}S=Ic(X(f[_>>2]|0,f[Z>>2]|0)|0,5640)|0;M=a+164|0;f[M>>2]=S;if(!S){Mb(g,1,7450,T)|0;ha=0;u=ia;return ha|0}L=c+4784|0;A=f[L>>2]|0;do if(A|0){w=c+48|0;B=f[$>>2]|0;C=f[e+16>>2]|0;D=f[c+4788>>2]|0;E=X(C,B)|0;F=Ic(X(E,D)|0,4)|0;if(!F){Mb(g,1,7504,U)|0;break}h=f[w>>2]|0;r=c+60|0;j=f[r>>2]|0;if(h>>>0<j>>>0){o=X(h,C)|0;s=c+52|0;t=c+64|0;v=c+56|0;i=f[t>>2]|0;while(1){k=f[s>>2]|0;if(k>>>0<i>>>0){m=k+o|0;j=f[v>>2]|0;while(1){if(!j)j=0;else{i=m;l=0;while(1){f[F+(i<<2)>>2]=1;l=l+1|0;j=f[v>>2]|0;if(l>>>0>=j>>>0)break;else i=i+E|0}i=f[t>>2]|0}k=k+1|0;if(k>>>0>=i>>>0)break;else m=m+1|0}j=f[r>>2]|0}h=h+1|0;if(h>>>0>=j>>>0)break;else o=o+C|0}}if(A>>>0>1){t=1;do{h=w;w=w+148|0;x=f[h+8>>2]|0;v=h+156|0;l=f[v>>2]|0;x=l>>>0>x>>>0?x:0;i=f[w>>2]|0;y=h+160|0;j=f[y>>2]|0;if(i>>>0<j>>>0){o=X(i,C)|0;z=h+152|0;r=h+164|0;s=X(x,E)|0;h=f[r>>2]|0;while(1){k=f[z>>2]|0;if(k>>>0<h>>>0){m=k+o|0;while(1){if(x>>>0<l>>>0){h=m+s|0;j=x;while(1){f[F+(h<<2)>>2]=1;j=j+1|0;l=f[v>>2]|0;if(j>>>0>=l>>>0)break;else h=h+E|0}h=f[r>>2]|0}k=k+1|0;if(k>>>0>=h>>>0)break;else m=m+1|0}j=f[y>>2]|0}i=i+1|0;if(i>>>0>=j>>>0)break;else o=o+C|0}}t=t+1|0}while((t|0)!=(A|0))}if(!((D|0)==0|(B|0)==0|(C|0)==0)){h=0;m=0;o=0;while(1){j=0;l=m;while(1){k=0;i=l;while(1){h=h|(f[F+(i<<2)>>2]|0)!=1;k=k+1|0;if((k|0)==(C|0))break;else i=i+1|0}j=j+1|0;if((j|0)==(B|0))break;else l=l+C|0}o=o+1|0;if((o|0)==(D|0))break;else m=m+E|0}if(h|0)Mb(g,1,7552,V)|0}Mc(F)}while(0);e:do if(X(f[_>>2]|0,f[Z>>2]|0)|0){x=c+4788|0;y=c+40|0;z=c+44|0;A=c+18690|0;B=e+16|0;i=c+18696|0;C=e+24|0;D=c+5596|0;E=c+5600|0;F=c+5604|0;G=c+5608|0;H=c+5612|0;I=c+5616|0;K=c+5620|0;w=0;f:while(1){o=f[M>>2]|0;r=o+(w*5640|0)|0;V=f[x>>2]|0;j=o+(w*5640|0)+8|0;f[j>>2]=V;g:do if(V|0){if(((d[W>>1]|0)+-3&65535)<4)h=0;else{h=0;while(1){V=(b[N>>0]&4)==0;f[(V?o+(w*5640|0)+20+(h<<2)|0:o+(w*5640|0)+5184+(h<<2)|0)>>2]=f[(V?c+4792+(h<<2)|0:c+5192+(h<<2)|0)>>2];h=h+1|0;if(h>>>0>=(f[j>>2]|0)>>>0)break g}}do{if(b[N>>0]&4)f[o+(w*5640|0)+5184+(h<<2)>>2]=f[c+5192+(h<<2)>>2];f[o+(w*5640|0)+20+(h<<2)>>2]=f[c+4792+(h<<2)>>2];h=h+1|0}while(h>>>0<(f[j>>2]|0)>>>0)}while(0);f[r>>2]=f[y>>2];f[o+(w*5640|0)+4>>2]=f[z>>2];m=o+(w*5640|0)+16|0;f[m>>2]=b[A>>0];h=o+(w*5640|0)+5636|0;j=b[h>>0]|0;b[h>>0]=j&-5;if(!(f[L>>2]|0))h=0;else{b[h>>0]=j|4;k=f[L>>2]|0;if(!k)h=0;else{l=w+1|0;h=0;j=0;do{if((l|0)==(f[c+48+(j*148|0)+48>>2]|0)){f[o+(w*5640|0)+424+(h*148|0)>>2]=f[c+48+(h*148|0)>>2];f[o+(w*5640|0)+424+(h*148|0)+4>>2]=f[c+48+(h*148|0)+4>>2];f[o+(w*5640|0)+424+(h*148|0)+8>>2]=f[c+48+(h*148|0)+8>>2];f[o+(w*5640|0)+424+(h*148|0)+12>>2]=f[c+48+(h*148|0)+12>>2];f[o+(w*5640|0)+424+(h*148|0)+16>>2]=f[c+48+(h*148|0)+16>>2];f[o+(w*5640|0)+424+(h*148|0)+32>>2]=f[c+48+(h*148|0)+32>>2];f[o+(w*5640|0)+424+(h*148|0)+48>>2]=f[c+48+(h*148|0)+48>>2];h=h+1|0}j=j+1|0}while(j>>>0<k>>>0)}h=h+-1|0}f[o+(w*5640|0)+420>>2]=h;V=Ic(f[B>>2]|0,1080)|0;v=o+(w*5640|0)+5584|0;f[v>>2]=V;if(!V){Y=141;break}do if(f[i>>2]|0){j=f[B>>2]|0;j=X(j<<2,j)|0;k=Hc(j)|0;l=(f[i>>2]|0)+j|0;if(!k){Y=144;break f}f[m>>2]=2;h=Hc(j)|0;f[o+(w*5640|0)+5608>>2]=h;if(!h){Y=146;break f}hj(h|0,f[i>>2]|0,j|0)|0;hj(k|0,f[i>>2]|0,j|0)|0;h=Hc(j)|0;j=o+(w*5640|0)+5604|0;f[j>>2]=h;if(!h){Y=148;break f}if(!(Ng(k,h,f[B>>2]|0)|0)){Y=150;break f}h=Hc(f[B>>2]<<3)|0;f[o+(w*5640|0)+5600>>2]=h;if(!h){Y=152;break f}Af(h,f[B>>2]|0,f[j>>2]|0);Mc(k);j=f[B>>2]|0;if(j|0){k=f[v>>2]|0;h=0;do{f[k+(h*1080|0)+1076>>2]=f[l+(h<<2)>>2];h=h+1|0}while(h>>>0<j>>>0)}if(!(Uc(r,e)|0)){Y=158;break f}if(f[B>>2]|0){r=0;Y=172}}else{h:do if((f[m>>2]|0)==1){h=f[B>>2]|0;if(h>>>0<=2){k=h;break}j=f[C>>2]|0;h=f[j>>2]|0;do if((h|0)==(f[j+52>>2]|0)){if((h|0)!=(f[j+104>>2]|0))break;h=f[j+4>>2]|0;if((h|0)!=(f[j+56>>2]|0))break;if((h|0)==(f[j+108>>2]|0)){Y=166;break h}}while(0);Mb(g,2,7948,ha)|0;f[m>>2]=0;Y=166}else Y=166;while(0);if((Y|0)==166){Y=0;k=f[B>>2]|0}if(!k)break;j=f[C>>2]|0;h=0;do{if(!(f[j+(h*52|0)+32>>2]|0))f[(f[v>>2]|0)+(h*1080|0)+1076>>2]=1<<(f[j+(h*52|0)+24>>2]|0)+-1;h=h+1|0}while(h>>>0<k>>>0);r=0;Y=172}while(0);if((Y|0)==172)while(1){Y=0;s=f[v>>2]|0;t=s+(r*1080|0)|0;k=f[y>>2]&1;f[t>>2]=k;l=f[$>>2]|0;m=s+(r*1080|0)+4|0;f[m>>2]=l;h=f[D>>2]|0;if((h|0)>1){j=h;h=0;while(1){h=h+1|0;if(j>>>0>3)j=j>>>1;else break}}else h=0;f[s+(r*1080|0)+8>>2]=h;h=f[E>>2]|0;if((h|0)>1){j=h;h=0;while(1){h=h+1|0;if(j>>>0>3)j=j>>>1;else break}}else h=0;f[s+(r*1080|0)+12>>2]=h;f[s+(r*1080|0)+16>>2]=f[F>>2];V=f[G>>2]|0;f[s+(r*1080|0)+20>>2]=(V|0)==0&1;f[s+(r*1080|0)+24>>2]=V|0?2:0;f[s+(r*1080|0)+804>>2]=2;if((r|0)==(f[H>>2]|0))h=f[I>>2]|0;else h=0;f[s+(r*1080|0)+808>>2]=h;do if(!k){if(!l)break;else h=0;do{f[s+(r*1080|0)+812+(h<<2)>>2]=15;f[s+(r*1080|0)+944+(h<<2)>>2]=15;h=h+1|0}while(h>>>0<(f[m>>2]|0)>>>0)}else{if((l|0)>0)o=0;else break;while(1){m=l;l=l+-1|0;h=f[K>>2]|0;do if((o|0)<(h|0)){h=f[c+5624+(o<<2)>>2]|0;do if((h|0)<1)h=1;else{if((h|0)==1){h=0;break}else{j=h;h=0}while(1){h=h+1|0;if(j>>>0>3)j=j>>>1;else break}}while(0);f[s+(r*1080|0)+812+(l<<2)>>2]=h;h=f[c+5756+(o<<2)>>2]|0;if((h|0)<1){h=1;break}if((h|0)==1){h=0;break}else{j=h;h=0}while(1){h=h+1|0;if(j>>>0>3)j=j>>>1;else break}}else{V=h+-1|0;j=o-V|0;h=f[c+5624+(V<<2)>>2]>>j;j=f[c+5756+(V<<2)>>2]>>j;do if((h|0)<1)h=1;else{if((h|0)==1){h=0;break}else{k=h;h=0}while(1){h=h+1|0;if(k>>>0>3)k=k>>>1;else break}}while(0);f[s+(r*1080|0)+812+(l<<2)>>2]=h;if((j|0)<1){h=1;break}if((j|0)==1){h=0;break}else h=0;while(1){h=h+1|0;if(j>>>0>3)j=j>>>1;else break}}while(0);f[s+(r*1080|0)+944+(l<<2)>>2]=h;if((m|0)<=1)break;else o=o+1|0}}while(0);Ig(t,f[(f[C>>2]|0)+(r*52|0)+24>>2]|0);r=r+1|0;if(r>>>0>=(f[B>>2]|0)>>>0)break;else Y=172}w=w+1|0;if(w>>>0>=(X(f[_>>2]|0,f[Z>>2]|0)|0)>>>0)break e}if((Y|0)==141){Mb(g,1,7591,aa)|0;ha=0;u=ia;return ha|0}else if((Y|0)==144){Mb(g,1,7655,ba)|0;ha=0;u=ia;return ha|0}else if((Y|0)==146){Mc(k);Mb(g,1,7698,ca)|0;ha=0;u=ia;return ha|0}else if((Y|0)==148){Mc(k);Mb(g,1,7756,da)|0;ha=0;u=ia;return ha|0}else if((Y|0)==150){Mc(k);Mb(g,1,7816,ea)|0;ha=0;u=ia;return ha|0}else if((Y|0)==152){Mc(k);Mb(g,1,7864,fa)|0;ha=0;u=ia;return ha|0}else if((Y|0)==158){Mb(g,1,7914,ga)|0;ha=0;u=ia;return ha|0}}else i=c+18696|0;while(0);h=f[i>>2]|0;if(!h){ha=1;u=ia;return ha|0}Mc(h);f[i>>2]=0;ha=1;u=ia;return ha|0}function Uc(a,c){a=a|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0;if((f[a+16>>2]|0)!=2){a=1;return a|0}l=a+5604|0;r=a+5616|0;e=f[r>>2]|0;m=a+5620|0;do if(f[l>>2]|0){do if((e|0)==(f[m>>2]|0)){e=e+10|0;f[m>>2]=e;d=a+5612|0;e=Lc(f[d>>2]|0,e*20|0)|0;if(e|0){f[d>>2]=e;q=f[r>>2]|0;ij(e+(q*20|0)|0,0,((f[m>>2]|0)-q|0)*20|0)|0;e=f[r>>2]|0;break}Mc(f[d>>2]|0);f[d>>2]=0;f[m>>2]=0;f[r>>2]=0;a=0;return a|0}else d=a+5612|0;while(0);j=f[d>>2]|0;g=j+(e*20|0)|0;k=j+(e*20|0)+12|0;d=f[k>>2]|0;if(d|0){Mc(d);f[k>>2]=0}f[j+(e*20|0)+8>>2]=1;f[j+(e*20|0)+4>>2]=1;f[g>>2]=2;d=f[c+16>>2]|0;d=X(d,d)|0;h=d<<2;i=Hc(h)|0;f[k>>2]=i;if(!i){a=0;return a|0}else{Ua[f[768+(f[g>>2]<<2)>>2]&15](f[l>>2]|0,i,d);f[j+(e*20|0)+16>>2]=h;e=(f[r>>2]|0)+1|0;f[r>>2]=e;h=2;break}}else{h=1;g=0}while(0);do if((e|0)==(f[m>>2]|0)){e=e+10|0;f[m>>2]=e;d=a+5612|0;e=Lc(f[d>>2]|0,e*20|0)|0;if(e|0){f[d>>2]=e;q=f[r>>2]|0;e=e+(q*20|0)|0;ij(e|0,0,((f[m>>2]|0)-q|0)*20|0)|0;g=(g|0)==0?0:e+-20|0;e=f[r>>2]|0;break}Mc(f[d>>2]|0);f[d>>2]=0;f[m>>2]=0;f[r>>2]=0;a=0;return a|0}else d=a+5612|0;while(0);m=f[d>>2]|0;q=m+(e*20|0)|0;o=m+(e*20|0)+12|0;d=f[o>>2]|0;if(d|0){Mc(d);f[o>>2]=0}p=h+1|0;f[m+(e*20|0)+8>>2]=h;f[m+(e*20|0)+4>>2]=2;f[q>>2]=2;c=c+16|0;j=f[c>>2]|0;k=j<<2;l=Hc(k)|0;f[o>>2]=l;if(!l){a=0;return a|0}l=Hc(k)|0;if(!l){Mc(f[o>>2]|0);f[o>>2]=0;a=0;return a|0}if(j|0){d=0;h=f[a+5584>>2]|0;i=l;while(1){n[i>>2]=+(f[h+1076>>2]|0);d=d+1|0;if((d|0)==(j|0))break;else{h=h+1080|0;i=i+4|0}}}Ua[f[768+(f[q>>2]<<2)>>2]&15](l,f[o>>2]|0,j);Mc(l);f[m+(e*20|0)+16>>2]=k;f[r>>2]=(f[r>>2]|0)+1;i=a+5628|0;d=f[i>>2]|0;h=a+5632|0;do if((d|0)==(f[h>>2]|0)){d=d+10|0;f[h>>2]=d;e=a+5624|0;d=Lc(f[e>>2]|0,d*20|0)|0;if(d|0){f[e>>2]=d;a=f[i>>2]|0;ij(d+(a*20|0)|0,0,((f[h>>2]|0)-a|0)*20|0)|0;d=f[i>>2]|0;break}Mc(f[e>>2]|0);f[e>>2]=0;f[h>>2]=0;f[i>>2]=0;a=0;return a|0}else e=a+5624|0;while(0);a=f[e>>2]|0;f[a+(d*20|0)+8>>2]=g;r=a+(d*20|0)+16|0;b[r>>0]=b[r>>0]|1;f[a+(d*20|0)+4>>2]=f[c>>2];f[a+(d*20|0)>>2]=p;f[a+(d*20|0)+12>>2]=q;f[i>>2]=(f[i>>2]|0)+1;a=1;return a|0}function Vc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(!c)return;d=0;while(1){yb(b,~~+n[a>>2]>>>0,2);d=d+1|0;if((d|0)==(c|0))break;else{a=a+4|0;b=b+2|0}}return}function Wc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(!c)return;d=0;while(1){yb(b,~~+n[a>>2]>>>0,4);d=d+1|0;if((d|0)==(c|0))break;else{a=a+4|0;b=b+4|0}}return}function Xc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(!c)return;d=0;while(1){Cb(b,+n[a>>2]);d=d+1|0;if((d|0)==(c|0))break;else{a=a+4|0;b=b+4|0}}return}function Yc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(!c)return;d=0;while(1){Ab(b,+n[a>>2]);d=d+1|0;if((d|0)==(c|0))break;else{a=a+4|0;b=b+8|0}}return}function Zc(a,b,c){a=a|0;b=b|0;c=c|0;return 1}function _c(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0;j=Sb()|0;k=b+80|0;f[k>>2]=j;if(!j){k=0;return k|0}e=b+192|0;if(kg(f[e>>2]|0,24,d)|0?kg(f[e>>2]|0,25,d)|0:0){i=f[e>>2]|0;j=lg(i)|0;e=mg(i)|0;if(j){g=1;h=0;while(1){if(!g)g=0;else g=(Ma[f[e>>2]&63](b,a,d)|0)!=0;h=h+1|0;if((h|0)==(j|0))break;else{e=e+4|0;g=g&1}}ng(i);if(!g){Qb(f[k>>2]|0);f[k>>2]=0;k=0;return k|0}}else ng(i);e=b+188|0;if(kg(f[e>>2]|0,26,d)|0?kg(f[e>>2]|0,27,d)|0:0){i=f[e>>2]|0;j=lg(i)|0;e=mg(i)|0;if(j){g=1;h=0;while(1){if(!g)g=0;else g=(Ma[f[e>>2]&63](b,a,d)|0)!=0;h=h+1|0;if((h|0)==(j|0))break;else{e=e+4|0;g=g&1}}ng(i);if(!g){Qb(f[k>>2]|0);f[k>>2]=0;k=0;return k|0}}else ng(i);e=Sb()|0;f[c>>2]=e;if(!e){k=0;return k|0}Ub(f[k>>2]|0,e);g=X(f[b+116>>2]|0,f[b+112>>2]|0)|0;i=b+196|0;f[(f[i>>2]|0)+36>>2]=g;g=Ic(g,40)|0;e=f[i>>2]|0;f[e+40>>2]=g;if(!g){k=0;return k|0}if(!(f[e+36>>2]|0)){k=1;return k|0}h=0;while(1){f[g+(h*40|0)+28>>2]=100;f[g+(h*40|0)+20>>2]=0;k=Ic(100,24)|0;e=f[i>>2]|0;g=f[e+40>>2]|0;f[g+(h*40|0)+24>>2]=k;h=h+1|0;if(!k){e=0;g=30;break}if(h>>>0>=(f[e+36>>2]|0)>>>0){e=1;g=30;break}}if((g|0)==30)return e|0}Qb(f[k>>2]|0);f[k>>2]=0;k=0;return k|0}Qb(f[k>>2]|0);f[k>>2]=0;k=0;return k|0}function $c(a,b,c){a=a|0;b=b|0;c=c|0;return 1}function ad(a,b,c){a=a|0;b=b|0;c=c|0;return (f[a+8>>2]|0)==0&(f[a+188>>2]|0)!=0&(f[a+192>>2]|0)!=0&1|0}function bd(a,c,e){a=a|0;c=c|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;X=u;u=u+224|0;W=X+200|0;T=X+192|0;S=X+184|0;P=X+176|0;O=X+168|0;N=X+160|0;M=X+152|0;L=X+144|0;K=X+136|0;H=X+128|0;G=X+120|0;F=X+112|0;E=X+104|0;D=X+96|0;C=X+88|0;B=X+80|0;A=X+72|0;z=X+64|0;y=X+56|0;x=X+48|0;w=X+40|0;J=X+32|0;o=X+24|0;n=X+16|0;m=X+8|0;R=X;g=X+216|0;h=X+212|0;t=X+208|0;v=X+204|0;V=a+8|0;f[V>>2]=1;a:do if((Eb(c,g,2,e)|0)==2?(zb(g,h,2),(f[h>>2]|0)==65359):0){f[V>>2]=2;l=Hb(c)|0;l=Zi(l|0,I|0,-2,-1)|0;k=I;U=a+196|0;h=f[U>>2]|0;f[h>>2]=l;f[h+4>>2]=k;h=R;f[h>>2]=l;f[h+4>>2]=k;Mb(e,4,8053,R)|0;h=f[U>>2]|0;k=f[h>>2]|0;l=h+24|0;g=f[l>>2]|0;j=h+32|0;i=f[j>>2]|0;do if((g+1|0)>>>0>i>>>0){s=~~(+(i>>>0)+100.0)>>>0;f[j>>2]=s;g=h+28|0;h=Lc(f[g>>2]|0,s*24|0)|0;if(!h){Mc(f[g>>2]|0);f[g>>2]=0;f[j>>2]=0;f[l>>2]=0;Mb(e,1,8090,m)|0;break a}else{f[g>>2]=h;g=f[l>>2]|0;break}}else h=f[h+28>>2]|0;while(0);d[h+(g*24|0)>>1]=-177;r=dj(0,k|0,32)|0;s=h+(g*24|0)+8|0;f[s>>2]=r;f[s+4>>2]=I;f[h+(g*24|0)+16>>2]=2;f[l>>2]=g+1;s=a+16|0;if((Eb(c,f[s>>2]|0,2,e)|0)!=2){Mb(e,1,8150,o)|0;W=0;u=X;return W|0}zb(f[s>>2]|0,t,2);j=f[t>>2]|0;if((j|0)!=65424){r=a+20|0;i=0;h=0;g=0;b:do{if(j>>>0<65280){Q=14;break}else k=784;while(1){l=f[k>>2]|0;m=(l|0)==0;if(m|(l|0)==(j|0))break;else k=k+12|0}if(m){Mb(e,2,8219,w)|0;q=2;c:while(1){while(1){if((Eb(c,f[s>>2]|0,2,e)|0)!=2){Q=20;break b}zb(f[s>>2]|0,R,2);j=f[R>>2]|0;if(j>>>0>=65280){p=784;break}}while(1){k=f[p>>2]|0;if((k|0)==0|(k|0)==(j|0))break;else p=p+12|0}if(!(f[p+4>>2]&f[V>>2])){Q=24;break b}if((k|0)>=65424){Q=99;break}switch(k|0){case 0:break;default:break c}q=q+2|0}if((Q|0)==99){Q=0;switch(k|0){case 65424:{Q=26;break b}default:{}}}k=f[U>>2]|0;n=Hb(c)|0;n=n-q|0;o=k+24|0;j=f[o>>2]|0;m=k+32|0;l=f[m>>2]|0;if((j+1|0)>>>0>l>>>0){l=~~(+(l>>>0)+100.0)>>>0;f[m>>2]=l;j=k+28|0;k=Lc(f[j>>2]|0,l*24|0)|0;if(!k){Q=31;break}f[j>>2]=k;j=f[o>>2]|0}else k=f[k+28>>2]|0;d[k+(j*24|0)>>1]=0;m=k+(j*24|0)+8|0;f[m>>2]=n;f[m+4>>2]=((n|0)<0)<<31>>31;f[k+(j*24|0)+16>>2]=q;f[o>>2]=j+1;k=f[p>>2]|0;f[t>>2]=k;if((k|0)==65424)break;else j=784;while(1){l=f[j>>2]|0;if((l|0)==0|(l|0)==(k|0)){m=j;break}else j=j+12|0}}else m=k;g=(l|0)==65361?1:g;h=(l|0)==65362?1:h;i=(l|0)==65372?1:i;if(!(f[m+4>>2]&f[V>>2])){Q=37;break}if((Eb(c,f[s>>2]|0,2,e)|0)!=2){Q=39;break}zb(f[s>>2]|0,v,2);k=(f[v>>2]|0)+-2|0;f[v>>2]=k;j=f[s>>2]|0;if(k>>>0>(f[r>>2]|0)>>>0){j=Lc(j,k)|0;if(!j){Q=42;break}f[s>>2]=j;k=f[v>>2]|0;f[r>>2]=k}j=Eb(c,j,k,e)|0;if((j|0)!=(f[v>>2]|0)){Q=45;break}if(!(Na[f[m+8>>2]&63](a,f[s>>2]|0,j,e)|0)){Q=47;break}l=f[U>>2]|0;n=f[m>>2]|0;o=Hb(c)|0;p=f[v>>2]|0;o=-4-p+o|0;p=p+4|0;q=l+24|0;j=f[q>>2]|0;m=l+32|0;k=f[m>>2]|0;if((j+1|0)>>>0>k>>>0){k=~~(+(k>>>0)+100.0)>>>0;f[m>>2]=k;j=l+28|0;k=Lc(f[j>>2]|0,k*24|0)|0;if(!k){Q=52;break}f[j>>2]=k;j=f[q>>2]|0}else k=f[l+28>>2]|0;d[k+(j*24|0)>>1]=n;n=k+(j*24|0)+8|0;f[n>>2]=o;f[n+4>>2]=((o|0)<0)<<31>>31;f[k+(j*24|0)+16>>2]=p;f[q>>2]=j+1;if((Eb(c,f[s>>2]|0,2,e)|0)!=2){Q=54;break}zb(f[s>>2]|0,t,2);j=f[t>>2]|0}while((j|0)!=65424);switch(Q|0){case 14:{f[J>>2]=j;Mb(e,1,8168,J)|0;W=0;u=X;return W|0}case 20:{Mb(e,1,8150,x)|0;Q=33;break}case 24:{Mb(e,1,8235,y)|0;Q=33;break}case 26:{f[t>>2]=65424;break}case 31:{Mc(f[j>>2]|0);f[j>>2]=0;f[m>>2]=0;f[o>>2]=0;Mb(e,1,8090,z)|0;Q=33;break}case 37:{Mb(e,1,8235,B)|0;W=0;u=X;return W|0}case 39:{Mb(e,1,8150,C)|0;W=0;u=X;return W|0}case 42:{Mc(f[s>>2]|0);f[s>>2]=0;f[r>>2]=0;Mb(e,1,8333,D)|0;W=0;u=X;return W|0}case 45:{Mb(e,1,8150,E)|0;W=0;u=X;return W|0}case 47:{Mb(e,1,8367,F)|0;W=0;u=X;return W|0}case 52:{Mc(f[j>>2]|0);f[j>>2]=0;f[m>>2]=0;f[q>>2]=0;Mb(e,1,8090,G)|0;W=0;u=X;return W|0}case 54:{Mb(e,1,8150,H)|0;W=0;u=X;return W|0}}if((Q|0)==33){Mb(e,1,8278,A)|0;W=0;u=X;return W|0}if(g|0){if(!h){Mb(e,1,8472,L)|0;W=0;u=X;return W|0}if(!i){Mb(e,1,8518,M)|0;W=0;u=X;return W|0}d:do if(b[a+184>>0]&1){r=a+120|0;g=f[r>>2]|0;do if(g){o=a+124|0;m=0;h=0;n=0;e:while(1){i=f[o>>2]|0;k=f[i+(n<<3)>>2]|0;if(!k)i=m;else{i=f[i+(n<<3)+4>>2]|0;j=m>>>0<i>>>0;l=i-m|0;i=j?0:m-i|0;if(!((l|0)==0|j^1)){g=j?k+m|0:k;while(1){if(l>>>0<4){Q=72;break e}zb(g,R,4);g=g+4|0;M=l+-4|0;j=f[R>>2]|0;h=j+h|0;k=M>>>0<j>>>0;i=k?j-M|0:i;l=k?0:M-j|0;if(!l)break;else g=k?g:g+j|0}g=f[r>>2]|0}}n=n+1|0;if(n>>>0>=g>>>0)break;else m=i}if((Q|0)==72){Mb(e,1,8564,N)|0;break}if(!i)Q=76;else Mb(e,1,8595,O)|0}else{h=0;Q=76}while(0);f:do if((Q|0)==76){i=Hc(h)|0;o=a+144|0;f[o>>2]=i;if(!i){Mb(e,1,8618,P)|0;break}p=a+132|0;f[p>>2]=h;j=f[r>>2]|0;q=a+124|0;do if(j){g=f[q>>2]|0;n=0;k=0;m=0;h=g;g:while(1){l=f[h+(n<<3)>>2]|0;if(!l)i=m;else{h=f[h+(n<<3)+4>>2]|0;g=(f[o>>2]|0)+k|0;h:do if(m>>>0<h>>>0){hj(g|0,l|0,m|0)|0;i=h-m|0;g=k+m|0;if(!i){i=0;break}h=l+m|0;while(1){if(i>>>0<4){Q=91;break g}zb(h,R,4);k=h+4|0;j=i+-4|0;h=f[R>>2]|0;i=(f[o>>2]|0)+g|0;if(j>>>0<h>>>0)break;hj(i|0,k|0,h|0)|0;h=f[R>>2]|0;i=j-h|0;g=h+g|0;if(!i){i=0;break h}else h=k+h|0}hj(i|0,k|0,j|0)|0;i=(f[R>>2]|0)-j|0;g=j+g|0}else{hj(g|0,l|0,h|0)|0;i=m-h|0;g=h+k|0}while(0);Mc(f[(f[q>>2]|0)+(n<<3)>>2]|0);h=f[q>>2]|0;f[h+(n<<3)>>2]=0;f[h+(n<<3)+4>>2]=0;k=g;j=f[r>>2]|0;g=h}n=n+1|0;if(n>>>0>=j>>>0){Q=93;break}else m=i}if((Q|0)==91){Mb(e,1,8564,S)|0;break f}else if((Q|0)==93){i=f[o>>2]|0;h=f[p>>2]|0;break}}else g=f[q>>2]|0;while(0);f[a+128>>2]=i;f[a+152>>2]=h;f[r>>2]=0;Mc(g);f[q>>2]=0;break d}while(0);Mb(e,1,8656,T)|0;W=0;u=X;return W|0}while(0);Mb(e,4,8682,W)|0;e=Hb(c)|0;W=(f[U>>2]|0)+8|0;f[W>>2]=e+-2;f[W+4>>2]=0;f[V>>2]=8;W=1;u=X;return W|0}}Mb(e,1,8426,K)|0;W=0;u=X;return W|0}while(0);Mb(e,1,8126,n)|0;W=0;u=X;return W|0}function cd(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;G=u;u=u+16|0;F=G;D=f[a+80>>2]|0;E=a+88|0;p=X(f[a+112>>2]|0,f[a+116>>2]|0)|0;s=f[D+16>>2]|0;q=s*1080|0;r=f[a+12>>2]|0;s=X(s<<2,s)|0;a:do if(p|0){t=r+5604|0;v=r+5620|0;w=r+5612|0;x=r+5616|0;y=r+5632|0;z=r+5624|0;A=r+5584|0;n=f[a+164>>2]|0;o=0;b:while(1){j=n+5584|0;B=f[j>>2]|0;hj(n|0,r|0,5640)|0;c=n+5636|0;b[c>>0]=b[c>>0]&-4;f[n+5168>>2]=0;c=n+5604|0;f[c>>2]=0;k=n+5620|0;f[k>>2]=0;C=n+5612|0;f[C>>2]=0;l=n+5632|0;f[l>>2]=0;m=n+5624|0;f[m>>2]=0;f[j>>2]=B;if(f[t>>2]|0){e=Hc(s)|0;f[c>>2]=e;if(!e){c=0;e=25;break}hj(e|0,f[t>>2]|0,s|0)|0}c=(f[v>>2]|0)*20|0;e=Hc(c)|0;f[C>>2]=e;if(!e){c=0;e=25;break}hj(e|0,f[w>>2]|0,c|0)|0;c=f[x>>2]|0;if(c|0){h=f[C>>2]|0;i=f[w>>2]|0;j=0;while(1){g=i+12|0;if(f[g>>2]|0){c=i+16|0;e=Hc(f[c>>2]|0)|0;f[h+12>>2]=e;if(!e){c=0;e=25;break b}hj(e|0,f[g>>2]|0,f[c>>2]|0)|0;c=f[x>>2]|0}f[k>>2]=(f[k>>2]|0)+1;j=j+1|0;if(j>>>0>=c>>>0)break;else{h=h+20|0;i=i+20|0}}}c=(f[y>>2]|0)*20|0;e=Hc(c)|0;f[m>>2]=e;if(!e){c=0;e=25;break}hj(e|0,f[z>>2]|0,c|0)|0;f[l>>2]=f[y>>2];i=f[y>>2]|0;if(i|0){h=f[z>>2]|0;e=f[m>>2]|0;g=0;while(1){c=f[h+8>>2]|0;if(c|0)f[e+8>>2]=(f[C>>2]|0)+(((c-(f[w>>2]|0)|0)/20|0)*20|0);c=f[h+12>>2]|0;if(c|0)f[e+12>>2]=(f[C>>2]|0)+(((c-(f[w>>2]|0)|0)/20|0)*20|0);g=g+1|0;if(g>>>0>=i>>>0)break;else{h=h+20|0;e=e+20|0}}}hj(B|0,f[A>>2]|0,q|0)|0;o=o+1|0;if(o>>>0>=p>>>0)break a;else n=n+5640|0}if((e|0)==25){u=G;return c|0}}while(0);e=Lf(1)|0;c=a+204|0;f[c>>2]=e;if(!e){d=0;u=G;return d|0}if(Pf(e,D,E)|0){d=1;u=G;return d|0}Qf(f[c>>2]|0);f[c>>2]=0;Mb(d,1,8019,F)|0;d=0;u=G;return d|0}function dd(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;var g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;B=u;u=u+112|0;z=B+88|0;w=B+80|0;x=B+72|0;v=B+64|0;r=B+56|0;q=B+48|0;m=B+40|0;k=B+32|0;j=B+24|0;g=B+16|0;s=B+100|0;t=B+96|0;y=B+92|0;f[t>>2]=0;A=a+200|0;if((d|0)!=8){Mb(e,1,11669,B)|0;Mb(e,1,11669,B+8|0)|0;A=0;u=B;return A|0}zb(c,A,2);zb(c+2|0,s,4);zb(c+6|0,y,1);zb(c+7|0,t,1);l=f[A>>2]|0;c=f[a+112>>2]|0;if(l>>>0>=(X(f[a+116>>2]|0,c)|0)>>>0){f[g>>2]=l;Mb(e,1,11695,g)|0;A=0;u=B;return A|0}d=f[a+164>>2]|0;p=(l>>>0)%(c>>>0)|0;o=(l>>>0)/(c>>>0)|0;c=f[s>>2]|0;do if((c+-1|0)>>>0<13){if((c|0)==12){f[j>>2]=12;Mb(e,2,11719,j)|0;c=f[s>>2]|0;break}f[k>>2]=c;Mb(e,1,11756,k)|0;A=0;u=B;return A|0}while(0);if(!c){Mb(e,4,11817,m)|0;f[a+72>>2]=1}c=f[t>>2]|0;do if(!c){c=f[d+(l*5640|0)+5588>>2]|0;if(c|0){i=c;n=18}}else{i=c+((h[a+76>>0]|0)>>>4&1)|0;f[t>>2]=i;d=d+(l*5640|0)+5588|0;g=f[d>>2]|0;c=f[y>>2]|0;if((g+-1|0)>>>0<c>>>0){f[q>>2]=c;f[q+4>>2]=g;Mb(e,1,11928,q)|0;f[a+72>>2]=1;A=0;u=B;return A|0}if(c>>>0<i>>>0){f[d>>2]=i;n=18;break}f[r>>2]=c;f[r+4>>2]=i;Mb(e,1,12027,r)|0;f[a+72>>2]=1;A=0;u=B;return A|0}while(0);if((n|0)==18?(i|0)==((f[y>>2]|0)+1|0):0){r=a+76|0;b[r>>0]=b[r>>0]|1}f[a+24>>2]=(f[a+72>>2]|0)==0?(f[s>>2]|0)+-12|0:0;f[a+8>>2]=16;c=f[a+60>>2]|0;if((c|0)==-1)if((p>>>0>=(f[a+28>>2]|0)>>>0?p>>>0<(f[a+36>>2]|0)>>>0:0)?o>>>0>=(f[a+32>>2]|0)>>>0:0)c=(o>>>0>=(f[a+40>>2]|0)>>>0&1)<<2&255;else c=4;else c=((f[A>>2]|0)!=(c|0)&1)<<2&255;j=a+76|0;b[j>>0]=b[j>>0]&-5|c;j=a+196|0;c=f[j>>2]|0;if(!c){A=1;u=B;return A|0}i=f[A>>2]|0;c=f[c+40>>2]|0;f[c+(i*40|0)>>2]=i;g=f[y>>2]|0;f[c+(i*40|0)+12>>2]=g;d=f[t>>2]|0;if(d|0){f[c+(i*40|0)+4>>2]=d;f[c+(i*40|0)+8>>2]=d;c=f[c+(i*40|0)+16>>2]|0;if(!c){z=Ic(d,24)|0;f[(f[(f[j>>2]|0)+40>>2]|0)+((f[A>>2]|0)*40|0)+16>>2]=z;if(z|0){A=1;u=B;return A|0}Mb(e,1,12135,v)|0;A=0;u=B;return A|0}c=Lc(c,d*24|0)|0;d=(f[(f[j>>2]|0)+40>>2]|0)+((f[A>>2]|0)*40|0)+16|0;if(!c){Mc(f[d>>2]|0);f[(f[(f[j>>2]|0)+40>>2]|0)+((f[A>>2]|0)*40|0)+16>>2]=0;Mb(e,1,12135,x)|0;A=0;u=B;return A|0}else{f[d>>2]=c;A=1;u=B;return A|0}}do if(!(f[c+(i*40|0)+16>>2]|0)){f[c+(i*40|0)+8>>2]=10;x=Ic(10,24)|0;c=f[(f[j>>2]|0)+40>>2]|0;d=f[A>>2]|0;f[c+(d*40|0)+16>>2]=x;if(x|0){i=d;g=f[y>>2]|0;break}f[c+(d*40|0)+8>>2]=0;Mb(e,1,12135,w)|0;A=0;u=B;return A|0}while(0);d=c+(i*40|0)+8|0;if(g>>>0<(f[d>>2]|0)>>>0){A=1;u=B;return A|0}y=g+1|0;f[d>>2]=y;c=Lc(f[c+(i*40|0)+16>>2]|0,y*24|0)|0;d=(f[(f[j>>2]|0)+40>>2]|0)+((f[A>>2]|0)*40|0)+16|0;if(!c){Mc(f[d>>2]|0);y=f[(f[j>>2]|0)+40>>2]|0;A=f[A>>2]|0;f[y+(A*40|0)+16>>2]=0;f[y+(A*40|0)+8>>2]=0;Mb(e,1,12135,z)|0;A=0;u=B;return A|0}else{f[d>>2]=c;A=1;u=B;return A|0}return 0}function ed(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=u;u=u+64|0;o=r+48|0;p=r+40|0;j=r+32|0;m=r+52|0;i=r+56|0;f[m>>2]=d;q=a+80|0;k=f[q>>2]|0;n=a+8|0;if((f[n>>2]|0)==16)l=(f[a+164>>2]|0)+((f[a+200>>2]|0)*5640|0)|0;else l=f[a+12>>2]|0;g=l+5636|0;h=b[g>>0]|0;if(h&1){Mb(e,1,11436,r)|0;q=0;u=r;return q|0}b[g>>0]=h|1;if(d>>>0<5){Mb(e,1,11500,r+8|0)|0;q=0;u=r;return q|0}zb(c,l,1);if((f[l>>2]|0)>>>0>7){Mb(e,1,11526,r+16|0)|0;q=0;u=r;return q|0}zb(c+1|0,i,1);i=f[i>>2]|0;g=l+4|0;f[g>>2]=i;if((i|0)>4){Mb(e,1,11560,r+24|0)|0;f[g>>2]=-1}g=l+8|0;zb(c+2|0,g,2);g=f[g>>2]|0;if((g+-1|0)>>>0>65534){f[j>>2]=g;Mb(e,1,11601,j)|0;q=0;u=r;return q|0}j=f[a+172>>2]|0;f[l+12>>2]=(j|0)==0?g:j;zb(c+4|0,l+16|0,1);j=c+5|0;f[m>>2]=d+-5;i=f[k+16>>2]|0;if(i|0){c=f[l>>2]&1;h=f[l+5584>>2]|0;g=0;do{f[h+(g*1080|0)>>2]=c;g=g+1|0}while(g>>>0<i>>>0)}if(!(Fd(a,0,j,m,e)|0)){Mb(e,1,11500,p)|0;q=0;u=r;return q|0}if(f[m>>2]|0){Mb(e,1,11500,o)|0;q=0;u=r;return q|0}if((f[n>>2]|0)==16)g=(f[a+164>>2]|0)+((f[a+200>>2]|0)*5640|0)|0;else g=f[a+12>>2]|0;g=f[g+5584>>2]|0;k=g+4|0;h=f[k>>2]|0;l=h<<2;if((f[(f[q>>2]|0)+16>>2]|0)>>>0<=1){q=1;u=r;return q|0}a=g+8|0;e=g+12|0;m=g+16|0;n=g+20|0;o=g+812|0;p=g+944|0;f[g+1084>>2]=h;i=f[a>>2]|0;f[g+1088>>2]=i;c=f[e>>2]|0;f[g+1092>>2]=c;j=f[m>>2]|0;f[g+1096>>2]=j;d=f[n>>2]|0;f[g+1100>>2]=d;hj(g+1892|0,o|0,l|0)|0;hj(g+2024|0,p|0,l|0)|0;if((f[(f[q>>2]|0)+16>>2]|0)>>>0<=2){q=1;u=r;return q|0}f[g+2164>>2]=h;f[g+2168>>2]=i;f[g+2172>>2]=c;f[g+2176>>2]=j;f[g+2180>>2]=d;hj(g+2972|0,o|0,l|0)|0;hj(g+3104|0,p|0,l|0)|0;if((f[(f[q>>2]|0)+16>>2]|0)>>>0>3)h=3;else{q=1;u=r;return q|0}while(1){i=f[a>>2]|0;c=f[e>>2]|0;j=f[m>>2]|0;d=f[n>>2]|0;f[g+3244>>2]=f[k>>2];f[g+3248>>2]=i;f[g+3252>>2]=c;f[g+3256>>2]=j;f[g+3260>>2]=d;hj(g+4052|0,o|0,l|0)|0;hj(g+4184|0,p|0,l|0)|0;h=h+1|0;if(h>>>0>=(f[(f[q>>2]|0)+16>>2]|0)>>>0){g=1;break}else g=g+1080|0}u=r;return g|0}function fd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0;k=u;u=u+48|0;i=k+28|0;j=k+32|0;f[i>>2]=c;if((f[a+8>>2]|0)==16)h=(f[a+164>>2]|0)+((f[a+200>>2]|0)*5640|0)|0;else h=f[a+12>>2]|0;g=(f[a+80>>2]|0)+16|0;e=(f[g>>2]|0)>>>0<257?1:2;if(e>>>0>=c>>>0){Mb(d,1,10929,k)|0;j=0;u=k;return j|0}f[i>>2]=c+-1-e;zb(b,j,e);b=b+e|0;c=f[j>>2]|0;if(c>>>0>=(f[g>>2]|0)>>>0){Mb(d,1,10955,k+8|0)|0;j=0;u=k;return j|0}zb(b,(f[h+5584>>2]|0)+(c*1080|0)|0,1);if(!(Fd(a,f[j>>2]|0,b+1|0,i,d)|0)){Mb(d,1,10929,k+16|0)|0;j=0;u=k;return j|0}if(!(f[i>>2]|0)){j=1;u=k;return j|0}Mb(d,1,10929,k+24|0)|0;j=0;u=k;return j|0}function gd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0;k=u;u=u+32|0;j=k+8|0;h=k+20|0;i=f[(f[a+80>>2]|0)+16>>2]|0;e=i>>>0<257?1:2;if((e+2|0)!=(c|0)){Mb(d,1,10846,k)|0;j=0;u=k;return j|0}if((f[a+8>>2]|0)==16)g=(f[a+164>>2]|0)+((f[a+200>>2]|0)*5640|0)|0;else g=f[a+12>>2]|0;zb(b,h,e);c=b+e|0;zb(c,k+16|0,1);a=f[h>>2]|0;if(a>>>0<i>>>0){zb(c+1|0,(f[g+5584>>2]|0)+(a*1080|0)+808|0,1);j=1;u=k;return j|0}else{f[j>>2]=a;f[j+4>>2]=i;Mb(d,1,10872,j)|0;j=0;u=k;return j|0}return 0}function hd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0;h=u;u=u+16|0;e=h+12|0;f[e>>2]=c;if(!(Ed(a,0,b,e,d)|0)){Mb(d,1,10820,h)|0;g=0;u=h;return g|0}if(f[e>>2]|0){Mb(d,1,10820,h+8|0)|0;g=0;u=h;return g|0}if((f[a+8>>2]|0)==16)b=(f[a+164>>2]|0)+((f[a+200>>2]|0)*5640|0)|0;else b=f[a+12>>2]|0;b=f[b+5584>>2]|0;d=a+80|0;if((f[(f[d>>2]|0)+16>>2]|0)>>>0<=1){g=1;u=h;return g|0}e=b+24|0;a=b+804|0;g=b+28|0;c=1;while(1){f[b+1104>>2]=f[e>>2];f[b+1884>>2]=f[a>>2];hj(b+1108|0,g|0,776)|0;c=c+1|0;if(c>>>0>=(f[(f[d>>2]|0)+16>>2]|0)>>>0){b=1;break}else b=b+1080|0}u=h;return b|0}function id(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;o=u;u=u+48|0;n=o+32|0;m=o+24|0;l=o+16|0;g=o+8|0;e=o;k=o+36|0;i=o+40|0;f[k>>2]=c;j=a+80|0;do if((f[(f[j>>2]|0)+16>>2]|0)>>>0<257){if(c|0){zb(b,i,1);e=-1;h=1;break}Mb(d,1,10473,e)|0;n=0;u=o;return n|0}else{if(c>>>0>=2){zb(b,i,2);e=-2;h=2;break}Mb(d,1,10473,g)|0;n=0;u=o;return n|0}while(0);f[k>>2]=e+c;g=f[i>>2]|0;e=f[(f[j>>2]|0)+16>>2]|0;if(g>>>0>=e>>>0){f[l>>2]=g;f[l+4>>2]=e;Mb(d,1,10499,l)|0;n=0;u=o;return n|0}if(!(Ed(a,g,b+h|0,k,d)|0)){Mb(d,1,10473,m)|0;n=0;u=o;return n|0}if(!(f[k>>2]|0)){n=1;u=o;return n|0}Mb(d,1,10473,n)|0;n=0;u=o;return n|0}function jd(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=u;u=u+16|0;i=p+8|0;n=p+12|0;o=f[(f[a+80>>2]|0)+16>>2]|0;m=o>>>0<257?1:2;g=(m<<1)+5|0;if(((d>>>0)%(g>>>0)|0|0)!=0|g>>>0>d>>>0){Mb(e,1,10429,p)|0;o=0;u=p;return o|0}if((f[a+8>>2]|0)==16)l=(f[a+164>>2]|0)+((f[a+200>>2]|0)*5640|0)|0;else l=f[a+12>>2]|0;a=l+5636|0;h=b[a>>0]|0;if(!(h&4))k=0;else k=(f[l+420>>2]|0)+1|0;j=k+((d>>>0)/(g>>>0)|0)|0;if(j>>>0>31){f[i>>2]=j;Mb(e,1,10455,i)|0;o=0;u=p;return o|0}b[a>>0]=h|4;if(k>>>0<j>>>0){h=l+8|0;a=c;d=k;g=l+424+(k*148|0)|0;while(1){zb(a,g,1);a=a+1|0;zb(a,g+4|0,m);a=a+m|0;k=g+8|0;zb(a,k,2);i=f[k>>2]|0;c=f[h>>2]|0;f[k>>2]=i>>>0<c>>>0?i:c;a=a+2|0;zb(a,g+12|0,1);a=a+1|0;k=g+16|0;zb(a,k,m);a=a+m|0;zb(a,n,1);f[g+36>>2]=f[n>>2];c=f[k>>2]|0;f[k>>2]=c>>>0<o>>>0?c:o;d=d+1|0;if(d>>>0>=j>>>0)break;else{a=a+1|0;g=g+148|0}}}f[l+420>>2]=j+-1;o=1;u=p;return o|0}function kd(a,c,e,g){a=a|0;c=c|0;e=e|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0;N=u;u=u+160|0;M=N+144|0;H=N+136|0;G=N+128|0;F=N+120|0;E=N+112|0;D=N+104|0;z=N+96|0;y=N+80|0;s=N+72|0;p=N+64|0;o=N+56|0;r=N+48|0;q=N+32|0;k=N+24|0;j=N+16|0;h=N+152|0;w=N+148|0;K=f[a+80>>2]|0;L=a+88|0;if(e>>>0<36){Mb(g,1,9677,N)|0;g=0;u=N;return g|0}J=e+-36|0;n=(J>>>0)/3|0;if((J>>>0)%3|0|0){Mb(g,1,9677,N+8|0)|0;g=0;u=N;return g|0}zb(c,h,2);d[L>>1]=f[h>>2];x=K+8|0;zb(c+2|0,x,4);C=K+12|0;zb(c+6|0,C,4);zb(c+10|0,K,4);m=K+4|0;zb(c+14|0,m,4);v=a+100|0;zb(c+18|0,v,4);B=a+104|0;zb(c+22|0,B,4);t=a+92|0;zb(c+26|0,t,4);A=a+96|0;zb(c+30|0,A,4);zb(c+34|0,h,2);i=c+36|0;e=f[h>>2]|0;if(e>>>0>=16385){f[j>>2]=e;Mb(g,1,9705,j)|0;g=0;u=N;return g|0}e=e&65535;J=K+16|0;f[J>>2]=e;if((e|0)!=(n|0)){f[k>>2]=e;f[k+4>>2]=n;Mb(g,1,9766,k)|0;g=0;u=N;return g|0}k=f[K>>2]|0;l=f[x>>2]|0;if(k>>>0<l>>>0){j=f[m>>2]|0;c=f[C>>2]|0;if(j>>>0<c>>>0){h=f[v>>2]|0;e=f[B>>2]|0;if(h)if(!e)e=0;else{if((4294967295/(l>>>0)|0)>>>0<c>>>0){f[o>>2]=l;f[o+4>>2]=c;Mb(g,1,10007,o)|0;g=0;u=N;return g|0}l=f[t>>2]|0;q=Zi(l|0,0,h|0,0)|0;o=I;m=f[A>>2]|0;r=Zi(m|0,0,e|0,0)|0;if(l>>>0<=k>>>0?m>>>0<=j>>>0&(0-o|q)>>>0>k>>>0&(0-I|r)>>>0>j>>>0:0){e=Ic(n,52)|0;n=K+24|0;f[n>>2]=e;if(!e){f[J>>2]=0;Mb(g,1,10093,s)|0;g=0;u=N;return g|0}a:do if(f[J>>2]|0){l=a+168|0;k=e;j=0;while(1){zb(i,w,1);c=f[w>>2]|0;e=k+24|0;f[e>>2]=(c&127)+1;f[k+32>>2]=c>>>7;zb(i+1|0,w,1);f[k>>2]=f[w>>2];zb(i+2|0,w,1);c=f[w>>2]|0;f[k+4>>2]=c;h=f[k>>2]|0;if((c+-1|0)>>>0>254|(h+-1|0)>>>0>254){e=26;break}c=f[e>>2]|0;if(c>>>0>38){e=28;break}f[k+36>>2]=0;f[k+40>>2]=f[l>>2];e=j+1|0;if(e>>>0<(f[J>>2]|0)>>>0){k=k+52|0;i=i+3|0;j=e}else break a}if((e|0)==26){f[y>>2]=j;f[y+4>>2]=h;f[y+8>>2]=c;Mb(g,1,10141,y)|0}else if((e|0)==28){f[z>>2]=j;f[z+4>>2]=c;Mb(g,1,10246,z)|0}g=0;u=N;return g|0}while(0);l=f[t>>2]|0;k=f[v>>2]|0;i=((f[x>>2]|0)+-1-l+k|0)/(k|0)|0;f[a+112>>2]=i;j=f[A>>2]|0;h=f[B>>2]|0;e=((f[C>>2]|0)+-1-j+h|0)/(h|0)|0;f[a+116>>2]=e;if(!((e|0)==0|(i|0)==0)?i>>>0<=(65535/(e>>>0)|0)>>>0:0){m=X(i,e)|0;c=a+28|0;if(!(b[a+76>>0]&2)){f[c>>2]=0;f[a+32>>2]=0;f[a+36>>2]=i;c=a+40|0}else{f[c>>2]=(((f[c>>2]|0)-l|0)>>>0)/(k>>>0)|0;e=a+32|0;f[e>>2]=(((f[e>>2]|0)-j|0)>>>0)/(h>>>0)|0;e=a+36|0;f[e>>2]=((f[e>>2]|0)+-1-l+k|0)/(k|0)|0;e=a+40|0;c=e;e=((f[e>>2]|0)+-1-j+h|0)/(h|0)|0}f[c>>2]=e;D=Ic(m,5640)|0;j=a+164|0;f[j>>2]=D;if(!D){Mb(g,1,10093,E)|0;g=0;u=N;return g|0}E=Ic(f[J>>2]|0,1080)|0;i=a+12|0;f[(f[i>>2]|0)+5584>>2]=E;if(!(f[(f[i>>2]|0)+5584>>2]|0)){Mb(g,1,10093,F)|0;g=0;u=N;return g|0}e=Ic(10,20)|0;f[(f[i>>2]|0)+5612>>2]=e;e=f[i>>2]|0;if(!(f[e+5612>>2]|0)){Mb(g,1,10093,G)|0;g=0;u=N;return g|0}f[e+5620>>2]=10;e=Ic(10,20)|0;f[(f[i>>2]|0)+5624>>2]=e;e=f[i>>2]|0;if(!(f[e+5624>>2]|0)){Mb(g,1,10093,H)|0;g=0;u=N;return g|0}f[e+5632>>2]=10;h=f[J>>2]|0;if(h|0){c=f[n>>2]|0;e=0;do{if(!(f[c+(e*52|0)+32>>2]|0))f[(f[(f[i>>2]|0)+5584>>2]|0)+(e*1080|0)+1076>>2]=1<<(f[c+(e*52|0)+24>>2]|0)+-1;e=e+1|0}while(e>>>0<h>>>0)}b:do if(m|0){e=f[j>>2]|0;H=Ic(h,1080)|0;f[e+5584>>2]=H;if(H|0){c=0;while(1){c=c+1|0;if(c>>>0>=m>>>0)break b;H=Ic(f[J>>2]|0,1080)|0;f[e+11224>>2]=H;if(!H)break;else e=e+5640|0}}Mb(g,1,10093,M)|0;g=0;u=N;return g|0}while(0);f[a+8>>2]=4;Tb(K,L);g=1;u=N;return g|0}f[D>>2]=i;f[D+4>>2]=e;Mb(g,1,10346,D)|0;g=0;u=N;return g|0}Mb(g,1,10049,p)|0;g=0;u=N;return g|0}f[r>>2]=h;f[r+4>>2]=e;Mb(g,1,9946,r)|0;g=0;u=N;return g|0}else e=j}else{c=f[C>>2]|0;e=f[m>>2]|0}a=_i(l|0,0,k|0,0)|0;K=I;L=_i(c|0,0,e|0,0)|0;M=q;f[M>>2]=a;f[M+4>>2]=K;M=q+8|0;f[M>>2]=L;f[M+4>>2]=I;Mb(g,1,9880,q)|0;g=0;u=N;return g|0}function ld(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=u;u=u+32|0;a=e+12|0;if(c>>>0<2){Mb(d,1,9651,e)|0;d=0;u=e;return d|0}zb(b,e+16|0,1);zb(b+1|0,a,1);b=f[a>>2]|0;if(!(((c+-2|0)>>>0)%(((b>>>5&2)+2+(b>>>4&3)|0)>>>0)|0)){d=1;u=e;return d|0}Mb(d,1,9651,e+8|0)|0;d=0;u=e;return d|0}function md(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;b=u;u=u+16|0;if(!c){Mb(d,1,9625,b)|0;a=0}else a=1;u=b;return a|0}function nd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0;j=u;u=u+32|0;i=j+8|0;h=j+12|0;if(!c){Mb(d,1,9599,j)|0;d=0;u=j;return d|0}zb(b,j+16|0,1);g=c+-1|0;if(!g){d=1;u=j;return d|0}else{e=0;a=b;c=0}do{a=a+1|0;zb(a,h,1);b=f[h>>2]|0;e=(b&128|0)==0?0:(b&127|e)<<7;c=c+1|0}while((c|0)!=(g|0));if(!e){d=1;u=j;return d|0}Mb(d,1,9599,i)|0;d=0;u=j;return d|0}function od(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;o=u;u=u+48|0;n=o+32|0;j=o+24|0;h=o+16|0;g=o+8|0;l=o+36|0;if(d>>>0<2){Mb(e,1,9551,o)|0;n=0;u=o;return n|0}m=a+184|0;b[m>>0]=b[m>>0]|1;zb(c,l,1);m=c+1|0;k=d+-1|0;i=a+124|0;d=f[i>>2]|0;do if(d){g=a+120|0;c=f[l>>2]|0;if((f[g>>2]|0)>>>0<=c>>>0){a=c+1|0;c=Lc(d,a<<3)|0;if(c|0){f[i>>2]=c;d=f[g>>2]|0;ij(c+(d<<3)|0,0,a-d<<3|0)|0;f[g>>2]=a;d=f[i>>2]|0;break}Mb(e,1,8618,h)|0;n=0;u=o;return n|0}}else{c=(f[l>>2]|0)+1|0;d=Ic(c,8)|0;f[i>>2]=d;if(d|0){f[a+120>>2]=c;break}Mb(e,1,8618,g)|0;n=0;u=o;return n|0}while(0);c=f[l>>2]|0;if(f[d+(c<<3)>>2]|0){f[j>>2]=c;Mb(e,1,9577,j)|0;n=0;u=o;return n|0}a=Hc(k)|0;d=f[i>>2]|0;c=f[l>>2]|0;f[d+(c<<3)>>2]=a;if(!a){Mb(e,1,8618,n)|0;n=0;u=o;return n|0}else{f[d+(c<<3)+4>>2]=k;hj(a|0,m|0,k|0)|0;n=1;u=o;return n|0}return 0}function pd(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=u;u=u+48|0;p=q+40|0;m=q+32|0;j=q+24|0;i=q+16|0;o=q+44|0;if(d>>>0<2){Mb(e,1,9364,q)|0;p=0;u=q;return p|0}if(b[a+184>>0]&1){Mb(e,1,9390,q+8|0)|0;p=0;u=q;return p|0}h=f[a+164>>2]|0;g=f[a+200>>2]|0;n=h+(g*5640|0)+5636|0;b[n>>0]=b[n>>0]|2;zb(c,o,1);n=c+1|0;l=d+-1|0;k=h+(g*5640|0)+5164|0;c=f[k>>2]|0;do if(c){g=h+(g*5640|0)+5160|0;a=f[o>>2]|0;if((f[g>>2]|0)>>>0<=a>>>0){d=a+1|0;a=Lc(c,d<<3)|0;if(a|0){f[k>>2]=a;c=f[g>>2]|0;ij(a+(c<<3)|0,0,d-c<<3|0)|0;f[g>>2]=d;c=f[k>>2]|0;break}Mb(e,1,9491,j)|0;p=0;u=q;return p|0}}else{a=(f[o>>2]|0)+1|0;c=Ic(a,8)|0;f[k>>2]=c;if(c|0){f[h+(g*5640|0)+5160>>2]=a;break}Mb(e,1,9491,i)|0;p=0;u=q;return p|0}while(0);a=f[o>>2]|0;if(f[c+(a<<3)>>2]|0){f[m>>2]=a;Mb(e,1,9529,m)|0;p=0;u=q;return p|0}d=Hc(l)|0;c=f[k>>2]|0;a=f[o>>2]|0;f[c+(a<<3)>>2]=d;if(!d){Mb(e,1,9491,p)|0;p=0;u=q;return p|0}else{f[c+(a<<3)+4>>2]=l;hj(d|0,n|0,l|0)|0;p=1;u=q;return p|0}return 0}function qd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;b=u;u=u+16|0;if((f[(f[a+80>>2]|0)+16>>2]<<2|0)==(c|0)){d=1;u=b;return d|0}Mb(d,1,9338,b)|0;d=0;u=b;return d|0}function rd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return 1}function sd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=u;u=u+48|0;q=r+40|0;p=r+32|0;k=r+24|0;o=r+44|0;if((f[a+8>>2]|0)==16)i=(f[a+164>>2]|0)+((f[a+200>>2]|0)*5640|0)|0;else i=f[a+12>>2]|0;if(c>>>0<2){Mb(d,1,9170,r)|0;q=0;u=r;return q|0}zb(b,o,2);if(f[o>>2]|0){Mb(d,2,9196,r+8|0)|0;q=1;u=r;return q|0}if(c>>>0<7){Mb(d,1,9170,r+16|0)|0;q=0;u=r;return q|0}zb(b+2|0,o,2);m=b+4|0;n=f[o>>2]&255;j=i+5612|0;e=f[j>>2]|0;l=i+5616|0;a=f[l>>2]|0;a:do if(!a){g=e;h=0}else{g=e;h=0;do{if((f[g+8>>2]|0)==(n|0))break a;g=g+20|0;h=h+1|0}while(h>>>0<a>>>0)}while(0);if((h|0)==(a|0)){g=i+5620|0;do if((a|0)==(f[g>>2]|0)){a=a+10|0;f[g>>2]=a;a=Lc(e,a*20|0)|0;if(a|0){f[j>>2]=a;e=f[l>>2]|0;ij(a+(e*20|0)|0,0,((f[g>>2]|0)-e|0)*20|0)|0;e=f[j>>2]|0;a=f[l>>2]|0;break}Mc(f[j>>2]|0);f[j>>2]=0;f[g>>2]=0;f[l>>2]=0;Mb(d,1,9256,k)|0;q=0;u=r;return q|0}while(0);f[l>>2]=a+1;g=e+(a*20|0)|0}h=g+12|0;a=f[h>>2]|0;if(a|0){Mc(a);f[h>>2]=0}f[g+8>>2]=n;n=f[o>>2]|0;f[g+4>>2]=n>>>8&3;f[g>>2]=n>>>10&3;zb(m,o,2);if(f[o>>2]|0){Mb(d,2,9294,p)|0;q=1;u=r;return q|0}a=c+-6|0;e=Hc(a)|0;f[h>>2]=e;if(!e){Mb(d,1,9170,q)|0;q=0;u=r;return q|0}else{hj(e|0,b+6|0,a|0)|0;f[g+16>>2]=a;q=1;u=r;return q|0}return 0}function td(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0;i=u;u=u+32|0;e=i+16|0;h=i+12|0;a=a+80|0;g=f[(f[a>>2]|0)+16>>2]|0;if((g+2|0)!=(c|0)){Mb(d,1,9144,i)|0;h=0;u=i;return h|0}zb(b,e,2);if((f[e>>2]|0)!=(g|0)){Mb(d,1,9144,i+8|0)|0;h=0;u=i;return h|0}if(!g){h=1;u=i;return h|0}d=0;c=b+2|0;a=f[(f[a>>2]|0)+24>>2]|0;while(1){zb(c,h,1);b=f[h>>2]|0;f[a+32>>2]=b>>>7&1;f[a+24>>2]=(b&127)+1;d=d+1|0;if((d|0)==(g|0)){a=1;break}else{c=c+1|0;a=a+52|0}}u=i;return a|0}function ud(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;K=u;u=u+144|0;J=K+120|0;I=K+112|0;H=K+104|0;G=K+96|0;F=K+88|0;E=K+80|0;D=K+72|0;C=K+64|0;B=K+56|0;A=K+48|0;o=K+40|0;n=K+32|0;l=K+24|0;v=K+136|0;w=K+132|0;x=K+128|0;y=K+124|0;if((f[a+8>>2]|0)==16)p=(f[a+164>>2]|0)+((f[a+200>>2]|0)*5640|0)|0;else p=f[a+12>>2]|0;if(d>>>0<2){Mb(e,1,8804,K)|0;J=0;u=K;return J|0}zb(c,v,2);if(f[v>>2]|0){Mb(e,2,8830,K+8|0)|0;J=1;u=K;return J|0}if(d>>>0<7){Mb(e,1,8804,K+16|0)|0;J=0;u=K;return J|0}zb(c+2|0,w,1);m=c+3|0;k=p+5624|0;g=f[k>>2]|0;z=p+5628|0;a=f[z>>2]|0;a:do if(!a){i=g;h=0}else{j=f[w>>2]|0;i=g;h=0;do{if((f[i>>2]|0)==(j|0))break a;i=i+20|0;h=h+1|0}while(h>>>0<a>>>0)}while(0);if((h|0)==(a|0)){h=p+5632|0;do if((a|0)==(f[h>>2]|0)){a=a+10|0;f[h>>2]=a;a=Lc(g,a*20|0)|0;if(a|0){f[k>>2]=a;g=f[z>>2]|0;ij(a+(g*20|0)|0,0,((f[h>>2]|0)-g|0)*20|0)|0;g=f[k>>2]|0;a=f[z>>2]|0;break}Mc(f[k>>2]|0);f[k>>2]=0;f[h>>2]=0;f[z>>2]=0;Mb(e,1,8876,l)|0;J=0;u=K;return J|0}while(0);t=1;h=g+(a*20|0)|0}else{t=0;h=i}f[h>>2]=f[w>>2];zb(m,v,2);if(f[v>>2]|0){Mb(e,2,8830,n)|0;J=1;u=K;return J|0}zb(c+5|0,x,2);g=f[x>>2]|0;if(g>>>0>1){Mb(e,2,8914,o)|0;J=1;u=K;return J|0}a=d+-7|0;b:do if(g){q=h+4|0;r=h+16|0;s=h+8|0;d=h+12|0;o=p+5612|0;n=p+5616|0;l=c+7|0;m=0;c:while(1){if(a>>>0<3){g=27;break}zb(l,v,1);if((f[v>>2]|0)!=1){g=29;break}zb(l+1|0,y,2);g=a+-3|0;i=f[y>>2]|0;j=(i>>>15)+1|0;i=i&32767;f[q>>2]=i;h=(X(j,i)|0)+2|0;if(g>>>0<h>>>0){g=31;break}a=l+3|0;k=g-h|0;if(i){g=0;do{zb(a,v,j);if((f[v>>2]|0)!=(g|0)){g=34;break c}a=a+j|0;g=g+1|0}while(g>>>0<(f[q>>2]|0)>>>0)}zb(a,y,2);g=a+2|0;h=f[y>>2]|0;i=(h>>>15)+1|0;h=h&32767;f[y>>2]=h;if((h|0)!=(f[q>>2]|0)){g=37;break}a=(X(i,h)|0)+3|0;if(k>>>0<a>>>0){g=39;break}a=k-a|0;if(h){h=0;do{zb(g,v,i);if((f[v>>2]|0)!=(h|0)){g=42;break c}g=g+i|0;h=h+1|0}while(h>>>0<(f[q>>2]|0)>>>0)}zb(g,v,3);l=g+3|0;i=f[v>>2]|0;b[r>>0]=(i>>>16^1)&1|b[r>>0]&-2;f[s>>2]=0;f[d>>2]=0;j=i&255;f[w>>2]=j;if(j|0){k=f[n>>2]|0;if(!k){g=50;break}g=f[o>>2]|0;h=0;while(1){if((f[g+8>>2]|0)==(j|0))break;h=h+1|0;if(h>>>0>=k>>>0){g=50;break c}else g=g+20|0}f[s>>2]=g}i=i>>>8&255;f[w>>2]=i;if(i|0){j=f[n>>2]|0;if(!j){g=57;break}g=f[o>>2]|0;h=0;while(1){if((f[g+8>>2]|0)==(i|0))break;h=h+1|0;if(h>>>0>=j>>>0){g=57;break c}else g=g+20|0}f[d>>2]=g}m=m+1|0;if(m>>>0>=(f[x>>2]|0)>>>0)break b}if((g|0)==27){Mb(e,1,8804,A)|0;J=0;u=K;return J|0}else if((g|0)==29){Mb(e,2,8958,B)|0;J=1;u=K;return J|0}else if((g|0)==31){Mb(e,1,8804,C)|0;J=0;u=K;return J|0}else if((g|0)==34){Mb(e,2,9024,D)|0;J=1;u=K;return J|0}else if((g|0)==37){Mb(e,2,9078,E)|0;J=1;u=K;return J|0}else if((g|0)==39){Mb(e,1,8804,F)|0;J=0;u=K;return J|0}else if((g|0)==42){Mb(e,2,9024,G)|0;J=1;u=K;return J|0}else if((g|0)==50){Mb(e,1,8804,H)|0;J=0;u=K;return J|0}else if((g|0)==57){Mb(e,1,8804,I)|0;J=0;u=K;return J|0}}while(0);if(a|0){Mb(e,1,8804,J)|0;J=0;u=K;return J|0}if(!t){J=1;u=K;return J|0}f[z>>2]=(f[z>>2]|0)+1;J=1;u=K;return J|0}function vd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=u;u=u+32|0;m=r+24|0;p=r+20|0;q=a+80|0;e=f[q>>2]|0;if((f[a+8>>2]|0)==16)g=(f[a+164>>2]|0)+((f[a+200>>2]|0)*5640|0)|0;else g=f[a+12>>2]|0;if(!c){Mb(d,1,8723,r)|0;q=0;u=r;return q|0}zb(b,p,1);a=f[p>>2]|0;if(a>>>0>1){Mb(d,2,8749,r+8|0)|0;q=1;u=r;return q|0}if((a+1|0)!=(c|0)){Mb(d,2,8723,r+16|0)|0;q=0;u=r;return q|0}l=g+5584|0;e=f[e+16>>2]|0;if(e|0){c=f[l>>2]|0;d=0;while(1){f[c+1076>>2]=0;d=d+1|0;if(d>>>0>=e>>>0)break;else c=c+1080|0}}k=g+5604|0;c=f[k>>2]|0;if(c){Mc(c);f[k>>2]=0;a=f[p>>2]|0}if(!a){q=1;u=r;return q|0}j=g+5624|0;i=g+5628|0;h=0;while(1){b=b+1|0;zb(b,m,1);a=f[q>>2]|0;e=f[j>>2]|0;if((f[i>>2]|0?(f[e>>2]|0)==(f[m>>2]|0):0)?(n=f[e+4>>2]|0,o=a+16|0,(n|0)==(f[o>>2]|0)):0){a=f[e+8>>2]|0;if(a|0){c=X(n,n)|0;g=X(f[1036+(f[a>>2]<<2)>>2]|0,c)|0;if((f[a+16>>2]|0)!=(g|0)){a=0;c=32;break}d=Hc(c<<2)|0;f[k>>2]=d;if(!d){a=0;c=32;break}Ua[f[1052+(f[a>>2]<<2)>>2]&15](f[a+12>>2]|0,d,c)}a=f[e+12>>2]|0;if(a|0){c=f[o>>2]|0;g=X(c,f[1036+(f[a>>2]<<2)>>2]|0)|0;if((f[a+16>>2]|0)!=(g|0)){a=0;c=32;break}g=Hc(c<<2)|0;if(!g){a=0;c=32;break}Ua[f[1068+(f[a>>2]<<2)>>2]&15](f[a+12>>2]|0,g,c);e=f[o>>2]|0;if(e|0){a=g;c=f[l>>2]|0;d=0;while(1){f[c+1076>>2]=f[a>>2];d=d+1|0;if((d|0)==(e|0))break;else{a=a+4|0;c=c+1080|0}}}Mc(g)}}h=h+1|0;if(h>>>0>=(f[p>>2]|0)>>>0){a=1;c=32;break}}if((c|0)==32){u=r;return a|0}return 0}function wd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0;g=u;u=u+16|0;e=g;if(!c){u=g;return}d=0;while(1){zb(a,e,2);f[b>>2]=f[e>>2];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+2|0}}u=g;return}function xd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0;g=u;u=u+16|0;e=g;if(!c){u=g;return}d=0;while(1){zb(a,e,4);f[b>>2]=f[e>>2];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+4|0}}u=g;return}function yd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0;g=u;u=u+16|0;e=g;if(!c){u=g;return}d=0;while(1){Db(a,e);f[b>>2]=~~+n[e>>2];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+4|0}}u=g;return}function zd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0;g=u;u=u+16|0;e=g;if(!c){u=g;return}d=0;while(1){Bb(a,e);f[b>>2]=~~+p[e>>3];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+8|0}}u=g;return}function Ad(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0;g=u;u=u+16|0;e=g;if(!c){u=g;return}d=0;while(1){zb(a,e,2);n[b>>2]=+((f[e>>2]|0)>>>0);d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+2|0}}u=g;return}function Bd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0;g=u;u=u+16|0;e=g;if(!c){u=g;return}d=0;while(1){zb(a,e,4);n[b>>2]=+((f[e>>2]|0)>>>0);d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+4|0}}u=g;return}function Cd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0;g=u;u=u+16|0;e=g;if(!c){u=g;return}d=0;while(1){Db(a,e);f[b>>2]=f[e>>2];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+4|0}}u=g;return}function Dd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=u;u=u+16|0;e=f;if(!c){u=f;return}d=0;while(1){Bb(a,e);n[b>>2]=+p[e>>3];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+8|0}}u=f;return}function Ed(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;m=u;u=u+32|0;h=m+8|0;j=m+20|0;if((f[a+8>>2]|0)==16)a=(f[a+164>>2]|0)+((f[a+200>>2]|0)*5640|0)|0;else a=f[a+12>>2]|0;l=f[a+5584>>2]|0;a=f[d>>2]|0;if(!a){Mb(e,1,10568,m)|0;b=0;u=m;return b|0}f[d>>2]=a+-1;zb(c,j,1);c=c+1|0;a=f[j>>2]|0;g=a&31;i=l+(b*1080|0)+24|0;f[i>>2]=g;f[l+(b*1080|0)+804>>2]=a>>>5;do if((g|0)==1){a=1;k=8}else{a=(f[d>>2]|0)>>>((g|0)!=0&1);if(a>>>0>97){f[h>>2]=a;f[h+4>>2]=97;f[h+8>>2]=97;Mb(e,2,10604,h)|0;g=f[i>>2]|0}e=(a|0)==0;if(g|0)if(e){a=0;k=20;break}else{k=8;break}if(!e){g=0;while(1){zb(c,j,1);if(g>>>0<97){f[l+(b*1080|0)+28+(g<<3)>>2]=(f[j>>2]|0)>>>3;f[l+(b*1080|0)+28+(g<<3)+4>>2]=0}g=g+1|0;if((g|0)==(a|0))break;else c=c+1|0}}a=(f[d>>2]|0)-a|0}while(0);if((k|0)==8){g=0;while(1){zb(c,j,2);if(g>>>0<97){k=f[j>>2]|0;f[l+(b*1080|0)+28+(g<<3)>>2]=k>>>11;f[l+(b*1080|0)+28+(g<<3)+4>>2]=k&2047}g=g+1|0;if((g|0)==(a|0)){k=20;break}else c=c+2|0}}if((k|0)==20)a=(f[d>>2]|0)-(a<<1)|0;f[d>>2]=a;if((f[i>>2]|0)!=1){b=1;u=m;return b|0}c=l+(b*1080|0)+28|0;g=l+(b*1080|0)+32|0;a=1;do{d=(f[c>>2]|0)-(((a+-1|0)>>>0)/3|0)|0;f[l+(b*1080|0)+28+(a<<3)>>2]=(d|0)>0?d:0;f[l+(b*1080|0)+28+(a<<3)+4>>2]=f[g>>2];a=a+1|0}while((a|0)!=97);a=1;u=m;return a|0}function Fd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=u;u=u+64|0;o=q+48|0;k=q+40|0;j=q+16|0;i=q+8|0;n=q+52|0;h=a+8|0;if((f[h>>2]|0)==16)g=(f[a+164>>2]|0)+((f[a+200>>2]|0)*5640|0)|0;else g=f[a+12>>2]|0;l=f[g+5584>>2]|0;if((f[d>>2]|0)>>>0<5){Mb(e,1,11008,q)|0;d=0;u=q;return d|0}m=l+(b*1080|0)+4|0;zb(c,m,1);g=(f[m>>2]|0)+1|0;f[m>>2]=g;if(g>>>0>33){f[i>>2]=g;f[i+4>>2]=33;Mb(e,1,11043,i)|0;d=0;u=q;return d|0}if((f[a+168>>2]|0)>>>0>=g>>>0){f[j>>2]=b;Mb(e,1,11120,j)|0;f[h>>2]=f[h>>2]|32768;d=0;u=q;return d|0}i=l+(b*1080|0)+8|0;zb(c+1|0,i,1);f[i>>2]=(f[i>>2]|0)+2;h=l+(b*1080|0)+12|0;zb(c+2|0,h,1);j=(f[h>>2]|0)+2|0;f[h>>2]=j;i=f[i>>2]|0;if(j>>>0>10|i>>>0>10|(i+j|0)>>>0>12){Mb(e,1,11278,q+24|0)|0;d=0;u=q;return d|0}j=l+(b*1080|0)+16|0;zb(c+3|0,j,1);if(f[j>>2]&192|0){Mb(e,1,11346,q+32|0)|0;d=0;u=q;return d|0}zb(c+4|0,l+(b*1080|0)+20|0,1);g=(f[d>>2]|0)+-5|0;f[d>>2]=g;a=f[m>>2]|0;if(!(f[l+(b*1080|0)>>2]&1)){if(!a){d=1;u=q;return d|0}else g=0;do{f[l+(b*1080|0)+812+(g<<2)>>2]=15;f[l+(b*1080|0)+944+(g<<2)>>2]=15;g=g+1|0}while(g>>>0<(f[m>>2]|0)>>>0);g=1;u=q;return g|0}if(g>>>0<a>>>0){Mb(e,1,11008,k)|0;d=0;u=q;return d|0}do if(!a)a=0;else{i=0;h=c+5|0;while(1){zb(h,n,1);h=h+1|0;g=f[n>>2]|0;if(i|0?g>>>0<16|(g&15|0)==0:0)break;f[l+(b*1080|0)+812+(i<<2)>>2]=g&15;f[l+(b*1080|0)+944+(i<<2)>>2]=g>>>4;i=i+1|0;a=f[m>>2]|0;if(i>>>0>=a>>>0){p=24;break}}if((p|0)==24){g=f[d>>2]|0;break}Mb(e,1,11413,o)|0;d=0;u=q;return d|0}while(0);f[d>>2]=g-a;d=1;u=q;return d|0}function Gd(a,c,e,g,h,i,j,k,l,m,n){a=a|0;c=c|0;e=e|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0;Ca=u;u=u+256|0;Ba=Ca+200|0;Aa=Ca+192|0;ya=Ca+184|0;xa=Ca+176|0;ta=Ca+168|0;sa=Ca+160|0;ra=Ca+152|0;qa=Ca+144|0;pa=Ca+136|0;oa=Ca+128|0;ma=Ca+120|0;la=Ca+112|0;ka=Ca+104|0;ja=Ca+96|0;ia=Ca+88|0;ha=Ca+80|0;ga=Ca+72|0;fa=Ca+64|0;ea=Ca+56|0;da=Ca+48|0;wa=Ca+40|0;va=Ca+32|0;ua=Ca+24|0;na=Ca+16|0;ca=Ca+8|0;ba=Ca;C=Ca+240|0;D=Ca+236|0;E=Ca+232|0;F=Ca+228|0;H=Ca+224|0;J=Ca+220|0;K=Ca+216|0;L=Ca+212|0;M=Ca+208|0;f[L>>2]=65424;za=a+8|0;switch(f[za>>2]|0){case 256:{f[L>>2]=65497;o=a+76|0;break}case 8:{o=a+76|0;if(!(b[o>>0]&1)){N=a+164|0;O=a+200|0;P=a+72|0;Q=a+24|0;R=a+196|0;S=a+112|0;V=a+116|0;W=C+2|0;Y=C+6|0;Z=C+7|0;_=a+16|0;$=a+20|0;aa=a+64|0;p=65424;a:do{b:do if((p|0)!=65427){while(1){A=Ib(m)|0;if((A|0)==0&(I|0)==0){B=50;break}if((Eb(m,f[_>>2]|0,2,n)|0)!=2){B=8;break a}zb(f[_>>2]|0,M,2);if((f[M>>2]|0)>>>0<2){B=10;break a}if((f[L>>2]|0)==32896?(A=Ib(m)|0,(A|0)==0&(I|0)==0):0){B=50;break}r=f[za>>2]|0;p=f[M>>2]|0;if(r&16|0)f[Q>>2]=-2-p+(f[Q>>2]|0);q=p+-2|0;f[M>>2]=q;p=f[L>>2]|0;z=784;while(1){A=f[z>>2]|0;if((A|0)==0|(A|0)==(p|0))break;else z=z+12|0}if(!(f[z+4>>2]&r)){B=18;break a}if(q>>>0>(f[$>>2]|0)>>>0){A=Ib(m)|0;y=I;if((y|0)<0|(y|0)==0&A>>>0<q>>>0){B=22;break a}p=Lc(f[_>>2]|0,f[M>>2]|0)|0;if(!p){B=24;break a}f[_>>2]=p;q=f[M>>2]|0;f[$>>2]=q}else p=f[_>>2]|0;p=Eb(m,p,q,n)|0;if((p|0)!=(f[M>>2]|0)){B=27;break a}q=f[z+8>>2]|0;if(!q){B=29;break a}if(!(Na[q&63](a,f[_>>2]|0,p,n)|0)){B=31;break a}v=f[O>>2]|0;t=f[R>>2]|0;w=f[z>>2]|0;x=Hb(m)|0;y=f[M>>2]|0;x=x-y+-4|0;y=y+4|0;t=t+40|0;s=f[t>>2]|0;p=f[s+(v*40|0)+20>>2]|0;q=s+(v*40|0)+28|0;r=f[q>>2]|0;if((p+1|0)>>>0>r>>>0){r=~~(+(r>>>0)+100.0)>>>0;f[q>>2]=r;q=Lc(f[s+(v*40|0)+24>>2]|0,r*24|0)|0;r=f[t>>2]|0;p=r+(v*40|0)+24|0;if(!q){B=39;break a}f[p>>2]=q;t=r;p=f[r+(v*40|0)+20>>2]|0}else{t=s;q=f[s+(v*40|0)+24>>2]|0}d[q+(p*24|0)>>1]=w;A=q+(p*24|0)+8|0;f[A>>2]=x;f[A+4>>2]=((x|0)<0)<<31>>31;f[q+(p*24|0)+16>>2]=y;f[t+(v*40|0)+20>>2]=p+1;if((w|0)==65424?(G=f[t+(v*40|0)+16>>2]|0,G|0):0){A=G+((f[t+(v*40|0)+12>>2]|0)*24|0)|0;f[A>>2]=x;f[A+4>>2]=0}do if((f[z>>2]|0)==65424){p=Hb(m)|0;p=-4-(f[M>>2]|0)+p|0;A=aa;z=f[A+4>>2]|0;if(!((z|0)<0|((z|0)==0?(f[A>>2]|0)>>>0<p>>>0:0)))break;A=aa;f[A>>2]=p;f[A+4>>2]=0}while(0);if(b[o>>0]&4)break;if((Eb(m,f[_>>2]|0,2,n)|0)!=2){B=48;break a}zb(f[_>>2]|0,L,2);if((f[L>>2]|0)==65427)break b}if((B|0)==50){B=0;f[za>>2]=64;break}A=Jb(m,f[Q>>2]|0,0,n)|0;if(!((I|0)==0?(A|0)==(f[Q>>2]|0):0)){B=45;break a}f[L>>2]=65427}while(0);A=Ib(m)|0;if((A|0)==0&(I|0)==0?(f[za>>2]|0)==64:0){B=114;break}p=b[o>>0]|0;if(!(p&4)){q=f[N>>2]|0;r=f[O>>2]|0;if(!(f[P>>2]|0)){p=f[Q>>2]|0;if(p>>>0>1){p=p+-2|0;B=57}}else{p=Ib(m)|0;p=Zi(p|0,I|0,-2,0)|0;B=57}if((B|0)==57){B=0;f[Q>>2]=p}A=q+(r*5640|0)+5592|0;z=q+(r*5640|0)+5596|0;do if(!p)x=1;else{y=Ib(m)|0;x=I;if((x|0)<0|(x|0)==0&y>>>0<p>>>0)Mb(n,2,12386,ia)|0;p=f[A>>2]|0;if(!p){y=Hc(f[Q>>2]|0)|0;f[A>>2]=y;if(!y){B=66;break a}else{x=0;break}}p=Lc(p,(f[Q>>2]|0)+(f[z>>2]|0)|0)|0;if(!p){B=64;break a}f[A>>2]=p;x=0}while(0);p=f[R>>2]|0;if(p|0){Da=Hb(m)|0;r=I;y=Zi(Da|0,r|0,-2,-1)|0;t=p+40|0;s=f[t>>2]|0;v=f[O>>2]|0;w=f[s+(v*40|0)+12>>2]|0;q=f[s+(v*40|0)+16>>2]|0;p=q+(w*24|0)+8|0;f[p>>2]=y;f[p+4>>2]=I;p=Zi(Da|0,r|0,f[Q>>2]|0,0)|0;w=q+(w*24|0)+16|0;f[w>>2]=p;f[w+4>>2]=I;w=(f[Q>>2]|0)+2|0;p=f[s+(v*40|0)+20>>2]|0;q=s+(v*40|0)+28|0;r=f[q>>2]|0;if((p+1|0)>>>0>r>>>0){r=~~(+(r>>>0)+100.0)>>>0;f[q>>2]=r;q=Lc(f[s+(v*40|0)+24>>2]|0,r*24|0)|0;r=f[t>>2]|0;p=r+(v*40|0)+24|0;if(!q){B=73;break}f[p>>2]=q;t=r;p=f[r+(v*40|0)+20>>2]|0}else{t=s;q=f[s+(v*40|0)+24>>2]|0}d[q+(p*24|0)>>1]=-109;y=dj(0,y|0,32)|0;Da=q+(p*24|0)+8|0;f[Da>>2]=y;f[Da+4>>2]=I;f[q+(p*24|0)+16>>2]=w;f[t+(v*40|0)+20>>2]=p+1}if(!x)p=Eb(m,(f[A>>2]|0)+(f[z>>2]|0)|0,f[Q>>2]|0,n)|0;else p=0;f[za>>2]=(p|0)!=(f[Q>>2]|0)?64:8;f[z>>2]=(f[z>>2]|0)+p;p=b[o>>0]|0;if((p&9)==1){b[o>>0]=p|8;q=f[O>>2]|0;do if((Lb(m)|0)!=0?(T=Hb(m)|0,U=I,!((T|0)==-1&(U|0)==-1)):0){while(1){if((Eb(m,C,2,n)|0)!=2){B=80;break}zb(C,D,2);if((f[D>>2]|0)!=65424){B=82;break}if((Eb(m,C,2,n)|0)!=2){B=84;break}zb(C,E,2);if((f[E>>2]|0)!=10){B=86;break}f[E>>2]=8;p=Eb(m,C,8,n)|0;if((p|0)!=(f[E>>2]|0)){B=88;break}if((p|0)!=8){B=90;break}zb(C,F,2);zb(W,H,4);zb(Y,J,1);zb(Z,K,1);if((f[F>>2]|0)==(q|0)){B=96;break}p=f[H>>2]|0;if(p>>>0<14){B=93;break}Da=p+-12|0;f[H>>2]=Da;Da=Jb(m,Da,0,n)|0;if(!((I|0)==0?(Da|0)==(f[H>>2]|0):0)){B=95;break}}if((B|0)==80){B=0;p=(Kb(m,T,U,n)|0)!=0;q=0;break}else if((B|0)==82){B=0;p=(Kb(m,T,U,n)|0)!=0;q=0;break}else if((B|0)==84){B=0;Mb(n,1,8150,la)|0;p=0;q=0;break}else if((B|0)==86){B=0;Mb(n,1,12203,ma)|0;p=0;q=0;break}else if((B|0)==88){B=0;Mb(n,1,8150,oa)|0;p=0;q=0;break}else if((B|0)==90){B=0;Mb(n,1,11669,pa)|0;p=0;q=0;break}else if((B|0)==93){B=0;p=(Kb(m,T,U,n)|0)!=0;q=0;break}else if((B|0)==95){B=0;p=(Kb(m,T,U,n)|0)!=0;q=0;break}else if((B|0)==96){B=0;q=(f[J>>2]|0)==(f[K>>2]|0)&1;p=(Kb(m,T,U,n)|0)!=0;break}}else{p=1;q=0}while(0);if(!p){B=98;break}if(q|0){q=X(f[V>>2]|0,f[S>>2]|0)|0;b[o>>0]=b[o>>0]&-18|16;if(q|0){r=f[N>>2]|0;p=0;do{s=r+(p*5640|0)+5588|0;t=f[s>>2]|0;if(t|0)f[s>>2]=t+1;p=p+1|0}while((p|0)!=(q|0))}Mb(n,2,12521,ra)|0}}if(!(b[o>>0]&1)){if((Eb(m,f[_>>2]|0,2,n)|0)!=2){B=108;break}zb(f[_>>2]|0,L,2)}}else{b[o>>0]=p&-6;f[za>>2]=8;if((Eb(m,f[_>>2]|0,2,n)|0)!=2){B=112;break}zb(f[_>>2]|0,L,2)}p=f[L>>2]|0}while((p|0)!=65497&(b[o>>0]&1)==0);switch(B|0){case 8:{Mb(n,1,8150,ba)|0;Da=0;u=Ca;return Da|0}case 10:{Mb(n,1,12203,ca)|0;Da=0;u=Ca;return Da|0}case 18:{Mb(n,1,8235,na)|0;Da=0;u=Ca;return Da|0}case 22:{Mb(n,1,12229,ua)|0;Da=0;u=Ca;return Da|0}case 24:{Mc(f[_>>2]|0);f[_>>2]=0;f[$>>2]=0;Mb(n,1,8333,va)|0;Da=0;u=Ca;return Da|0}case 27:{Mb(n,1,8150,wa)|0;Da=0;u=Ca;return Da|0}case 29:{Mb(n,1,12274,da)|0;Da=0;u=Ca;return Da|0}case 31:{f[ea>>2]=f[L>>2];Mb(n,1,12303,ea)|0;Da=0;u=Ca;return Da|0}case 39:{Mc(f[p>>2]|0);Da=f[t>>2]|0;f[Da+(v*40|0)+24>>2]=0;f[Da+(v*40|0)+28>>2]=0;f[Da+(v*40|0)+20>>2]=0;Mb(n,1,12350,fa)|0;Da=0;u=Ca;return Da|0}case 45:{Mb(n,1,8150,ga)|0;Da=0;u=Ca;return Da|0}case 48:{Mb(n,1,8150,ha)|0;Da=0;u=Ca;return Da|0}case 64:{Mc(f[A>>2]|0);f[A>>2]=0;B=66;break}case 73:{Mc(f[p>>2]|0);Da=f[t>>2]|0;f[Da+(v*40|0)+24>>2]=0;f[Da+(v*40|0)+28>>2]=0;f[Da+(v*40|0)+20>>2]=0;Mb(n,1,12350,ka)|0;Da=0;u=Ca;return Da|0}case 98:{Mb(n,1,12475,qa)|0;Da=0;u=Ca;return Da|0}case 108:{Mb(n,1,8150,sa)|0;Da=0;u=Ca;return Da|0}case 112:{Mb(n,1,8150,ta)|0;Da=0;u=Ca;return Da|0}case 114:{p=f[L>>2]|0;break}}if((B|0)==66){Mb(n,1,12441,ja)|0;Da=0;u=Ca;return Da|0}if((p|0)==65497?(f[za>>2]|0)!=256:0){f[a+200>>2]=0;f[za>>2]=256}}break}default:{Da=0;u=Ca;return Da|0}}if(!(b[o>>0]&1)){q=X(f[a+112>>2]|0,f[a+116>>2]|0)|0;s=f[a+164>>2]|0;r=a+200|0;o=f[r>>2]|0;c:do if(o>>>0<q>>>0){p=s+(o*5640|0)|0;while(1){if(f[p+5592>>2]|0)break c;o=o+1|0;f[r>>2]=o;if(o>>>0<q>>>0)p=p+5640|0;else break}}while(0);if((o|0)==(q|0)){f[l>>2]=0;Da=1;u=Ca;return Da|0}}else{o=a+200|0;r=o;s=f[a+164>>2]|0;o=f[o>>2]|0}if(b[s+(o*5640|0)+5636>>0]&2){B=s+(o*5640|0)+5160|0;t=f[B>>2]|0;if(!t)p=0;else{v=f[s+(o*5640|0)+5164>>2]|0;q=0;p=0;do{p=(f[v+(q<<3)+4>>2]|0)+p|0;q=q+1|0}while((q|0)!=(t|0))}Da=Hc(p)|0;A=s+(o*5640|0)+5172|0;f[A>>2]=Da;if(!Da){Mb(n,1,9491,xa)|0;Mb(n,1,12562,ya)|0;Da=0;u=Ca;return Da|0}z=s+(o*5640|0)+5180|0;f[z>>2]=p;q=f[B>>2]|0;y=s+(o*5640|0)+5164|0;if(!q)p=f[y>>2]|0;else{p=f[y>>2]|0;x=0;v=0;w=p;while(1){t=f[w+(x<<3)>>2]|0;if(!t)t=w;else{hj((f[A>>2]|0)+v|0,t|0,f[w+(x<<3)+4>>2]|0)|0;t=f[y>>2]|0;v=(f[t+(x<<3)+4>>2]|0)+v|0;Mc(f[t+(x<<3)>>2]|0);t=f[y>>2]|0;f[t+(x<<3)>>2]=0;f[t+(x<<3)+4>>2]=0;q=f[B>>2]|0;p=t}x=x+1|0;if(x>>>0>=q>>>0)break;else w=t}}f[B>>2]=0;Mc(p);f[y>>2]=0;f[s+(o*5640|0)+5168>>2]=f[A>>2];f[s+(o*5640|0)+5176>>2]=f[z>>2]}o=a+204|0;if(!(Wf(f[o>>2]|0,f[r>>2]|0,n)|0)){Mb(n,1,8019,Aa)|0;Da=0;u=Ca;return Da|0}else{Da=X(f[a+112>>2]|0,f[a+116>>2]|0)|0;f[Ba>>2]=(f[r>>2]|0)+1;f[Ba+4>>2]=Da;Mb(n,4,12588,Ba)|0;f[c>>2]=f[r>>2];f[l>>2]=1;Da=Xf(f[o>>2]|0)|0;f[e>>2]=Da;Da=f[f[(f[o>>2]|0)+20>>2]>>2]|0;f[g>>2]=f[Da>>2];f[h>>2]=f[Da+4>>2];f[i>>2]=f[Da+8>>2];f[j>>2]=f[Da+12>>2];f[k>>2]=f[Da+16>>2];f[za>>2]=f[za>>2]|128;Da=1;u=Ca;return Da|0}return 0}function Hd(a,c,d,e,g,h){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=u;u=u+48|0;p=s+28|0;q=s+32|0;r=a+8|0;if(!(f[r>>2]&128)){r=0;u=s;return r|0}n=a+200|0;if((f[n>>2]|0)!=(c|0)){r=0;u=s;return r|0}i=f[a+164>>2]|0;j=i+(c*5640|0)|0;o=i+(c*5640|0)+5592|0;k=f[o>>2]|0;if(!k){Rc(j);r=0;u=s;return r|0}l=a+204|0;m=i+(c*5640|0)+5596|0;if(!(Zf(f[l>>2]|0,k,f[m>>2]|0,c,f[a+196>>2]|0,h)|0)){Rc(j);f[r>>2]=f[r>>2]|32768;Mb(h,1,12627,s)|0;r=0;u=s;return r|0}if(!(_f(f[l>>2]|0,d,e)|0)){r=0;u=s;return r|0}i=f[o>>2]|0;if(i|0){Mc(i);f[o>>2]=0;f[m>>2]=0}a=a+76|0;b[a>>0]=b[a>>0]&-2;f[r>>2]=f[r>>2]&-129;a=Ib(g)|0;o=f[r>>2]|0;if((o|0)==256|(a|0)==0&(I|0)==0&(o|0)==64){r=1;u=s;return r|0}if((Eb(g,q,2,h)|0)!=2){Mb(h,2,12646,s+8|0)|0;r=1;u=s;return r|0}zb(q,p,2);switch(f[p>>2]|0){case 65497:{f[n>>2]=0;f[r>>2]=256;r=1;u=s;return r|0}case 65424:{r=1;u=s;return r|0}default:if((Ib(g)|0)==0&(I|0)==0){f[r>>2]=64;Mb(h,2,12690,s+16|0)|0;r=1;u=s;return r|0}else{Mb(h,1,12720,s+24|0)|0;r=0;u=s;return r|0}}return 0}function Id(a,c,d,e,g,h,i){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0;z=u;u=u+112|0;y=z+96|0;x=z+88|0;w=z+80|0;v=z+72|0;t=z+64|0;s=z+56|0;q=z+48|0;n=z+40|0;m=z+32|0;l=z+24|0;k=z+16|0;p=f[a+80>>2]|0;if((f[a+8>>2]|0)!=8){Mb(i,1,12752,z)|0;y=0;u=z;return y|0}if(!(e|d|g|h)){Mb(i,4,12831,z+8|0)|0;f[a+28>>2]=0;f[a+32>>2]=0;f[a+36>>2]=f[a+112>>2];f[a+40>>2]=f[a+116>>2];y=1;u=z;return y|0}r=p+8|0;j=f[r>>2]|0;if(j>>>0<d>>>0){f[k>>2]=d;f[k+4>>2]=j;Mb(i,1,12900,k)|0;y=0;u=z;return y|0}j=f[p>>2]|0;if(j>>>0>d>>>0){f[l>>2]=d;f[l+4>>2]=j;Mb(i,2,12987,l)|0;f[a+28>>2]=0;d=f[p>>2]|0}else f[a+28>>2]=((d-(f[a+92>>2]|0)|0)>>>0)/((f[a+100>>2]|0)>>>0)|0;f[c>>2]=d;o=p+12|0;d=f[o>>2]|0;if(d>>>0<e>>>0){f[m>>2]=e;f[m+4>>2]=d;Mb(i,1,13075,m)|0;y=0;u=z;return y|0}k=p+4|0;d=f[k>>2]|0;if(d>>>0>e>>>0){f[n>>2]=e;f[n+4>>2]=d;Mb(i,2,13160,n)|0;f[a+32>>2]=0;d=f[k>>2]|0}else{f[a+32>>2]=((e-(f[a+96>>2]|0)|0)>>>0)/((f[a+104>>2]|0)>>>0)|0;d=e}l=c+4|0;f[l>>2]=d;d=f[p>>2]|0;if(d>>>0>g>>>0){f[q>>2]=g;f[q+4>>2]=d;Mb(i,1,13246,q)|0;y=0;u=z;return y|0}d=f[r>>2]|0;if(d>>>0<g>>>0){f[s>>2]=g;f[s+4>>2]=d;Mb(i,2,13335,s)|0;f[a+36>>2]=f[a+112>>2];g=f[r>>2]|0}else{s=f[a+100>>2]|0;f[a+36>>2]=(g+-1-(f[a+92>>2]|0)+s|0)/(s|0)|0}j=c+8|0;f[j>>2]=g;g=f[k>>2]|0;if(g>>>0>h>>>0){f[t>>2]=h;f[t+4>>2]=g;Mb(i,1,13423,t)|0;y=0;u=z;return y|0}g=f[o>>2]|0;if(g>>>0<h>>>0){f[v>>2]=h;f[v+4>>2]=g;Mb(i,2,13513,v)|0;f[a+40>>2]=f[a+116>>2];h=f[o>>2]|0}else{v=f[a+104>>2]|0;f[a+40>>2]=(h+-1-(f[a+96>>2]|0)+v|0)/(v|0)|0}v=c+12|0;f[v>>2]=h;t=a+76|0;b[t>>0]=b[t>>0]|2;t=f[c+16>>2]|0;a=f[c>>2]|0;a:do if(t){d=f[l>>2]|0;s=d+-1|0;g=f[j>>2]|0;q=g+-1|0;r=a+-1|0;p=0;o=f[c+24>>2]|0;while(1){c=f[o>>2]|0;n=(r+c|0)/(c|0)|0;f[o+16>>2]=n;j=f[o+4>>2]|0;k=(s+j|0)/(j|0)|0;f[o+20>>2]=k;c=(q+c|0)/(c|0)|0;l=f[o+40>>2]|0;m=fj(1,0,l|0)|0;e=I;c=Zi(c|0,((c|0)<0)<<31>>31|0,-1,-1)|0;c=Zi(c|0,I|0,m|0,e|0)|0;c=dj(c|0,I|0,l|0)|0;n=Zi(n|0,((n|0)<0)<<31>>31|0,-1,-1)|0;n=Zi(n|0,I|0,m|0,e|0)|0;n=dj(n|0,I|0,l|0)|0;n=c-n|0;if((n|0)<0){j=29;break}h=f[v>>2]|0;c=(j+-1+h|0)/(j|0)|0;f[o+8>>2]=n;c=Zi(c|0,((c|0)<0)<<31>>31|0,-1,-1)|0;c=Zi(c|0,I|0,m|0,e|0)|0;c=dj(c|0,I|0,l|0)|0;k=Zi(k|0,((k|0)<0)<<31>>31|0,-1,-1)|0;k=Zi(k|0,I|0,m|0,e|0)|0;k=dj(k|0,I|0,l|0)|0;k=c-k|0;if((k|0)<0){j=31;break}f[o+12>>2]=k;j=p+1|0;if(j>>>0<t>>>0){p=j;o=o+52|0}else break a}if((j|0)==29){f[w>>2]=p;f[w+4>>2]=n;Mb(i,1,13602,w)|0;y=0;u=z;return y|0}else if((j|0)==31){f[x>>2]=p;f[x+4>>2]=k;Mb(i,1,13671,x)|0;y=0;u=z;return y|0}}else{d=f[l>>2]|0;g=f[j>>2]|0;h=f[v>>2]|0}while(0);f[y>>2]=a;f[y+4>>2]=d;f[y+8>>2]=g;f[y+12>>2]=h;Mb(i,4,13740,y)|0;y=1;u=z;return y|0}function Jd(){var a=0,c=0,d=0;a=Ic(1,208)|0;if(!a){c=0;return c|0}f[a>>2]=1;c=a+184|0;b[c>>0]=b[c>>0]|2;c=Ic(1,5640)|0;f[a+12>>2]=c;if(!c){Qc(a);c=0;return c|0}c=Ic(1,1e3)|0;f[a+16>>2]=c;if(!c){Qc(a);c=0;return c|0}f[a+20>>2]=1e3;f[a+60>>2]=-1;c=a+64|0;f[c>>2]=0;f[c+4>>2]=0;c=Ic(1,48)|0;do if(c|0){f[c+32>>2]=100;f[c+24>>2]=0;d=Ic(100,24)|0;f[c+28>>2]=d;if(!d){Mc(c);break}f[c+40>>2]=0;f[a+196>>2]=c;d=ig()|0;f[a+192>>2]=d;if(!d){Qc(a);d=0;return d|0}d=ig()|0;f[a+188>>2]=d;if(d|0){d=a;return d|0}Qc(a);d=0;return d|0}while(0);f[a+196>>2]=0;Qc(a);d=0;return d|0}function Kd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0;x=u;u=u+128|0;w=x+104|0;v=x+72|0;t=x+64|0;q=x+40|0;o=x+24|0;l=x+16|0;k=x+8|0;i=x;if(b&384|0){Mh(13778,11,1,c)|0;u=x;return}if(b&1|0?(h=f[a+80>>2]|0,h|0):0)Ld(h,0,c);if(b&2|0?(e=a+80|0,f[e>>2]|0):0){Mh(13790,36,1,c)|0;h=f[a+96>>2]|0;f[i>>2]=f[a+92>>2];f[i+4>>2]=h;ki(c,13827,i)|0;i=f[a+104>>2]|0;f[k>>2]=f[a+100>>2];f[k+4>>2]=i;ki(c,13845,k)|0;k=f[a+116>>2]|0;f[l>>2]=f[a+112>>2];f[l+4>>2]=k;ki(c,13863,l)|0;Md(f[a+12>>2]|0,f[(f[e>>2]|0)+16>>2]|0,c);Mh(13879,2,1,c)|0}if((b&8|0?(m=X(f[a+112>>2]|0,f[a+116>>2]|0)|0,n=a+80|0,g=f[n>>2]|0,!((g|0)==0|(m|0)==0)):0)?(d=f[a+164>>2]|0,Md(d,f[g+16>>2]|0,c),(m|0)!=1):0){e=1;do{d=d+5640|0;Md(d,f[(f[n>>2]|0)+16>>2]|0,c);e=e+1|0}while((e|0)!=(m|0))}if(!(b&16)){u=x;return}h=f[a+196>>2]|0;Mh(13882,37,1,c)|0;b=h;m=f[b+4>>2]|0;e=h+8|0;n=f[e>>2]|0;e=f[e+4>>2]|0;g=o;f[g>>2]=f[b>>2];f[g+4>>2]=m;g=o+8|0;f[g>>2]=n;f[g+4>>2]=e;ki(c,13920,o)|0;Mh(13987,17,1,c)|0;g=h+28|0;e=f[g>>2]|0;a:do if(e|0?(p=h+24|0,f[p>>2]|0):0){d=0;while(1){m=e+(d*24|0)+8|0;b=f[m>>2]|0;m=f[m+4>>2]|0;o=f[e+(d*24|0)+16>>2]|0;f[q>>2]=j[e+(d*24|0)>>1];n=q+8|0;f[n>>2]=b;f[n+4>>2]=m;f[q+16>>2]=o;ki(c,14005,q)|0;d=d+1|0;if(d>>>0>=(f[p>>2]|0)>>>0)break a;e=f[g>>2]|0}}while(0);Mh(14036,4,1,c)|0;k=h+40|0;g=f[k>>2]|0;if(g|0?(s=h+36|0,r=f[s>>2]|0,r|0):0){d=0;e=0;do{d=(f[g+(e*40|0)+4>>2]|0)+d|0;e=e+1|0}while((e|0)!=(r|0));if(d|0){Mh(14041,16,1,c)|0;if(f[s>>2]|0){i=0;d=f[k>>2]|0;do{h=f[d+(i*40|0)+4>>2]|0;f[t>>2]=i;f[t+4>>2]=h;ki(c,14058,t)|0;d=f[k>>2]|0;g=f[d+(i*40|0)+16>>2]|0;b:do if((h|0)!=0&(g|0)!=0){e=0;d=g;while(1){n=d+(e*24|0)|0;m=f[n>>2]|0;n=f[n+4>>2]|0;p=d+(e*24|0)+8|0;o=f[p>>2]|0;p=f[p+4>>2]|0;r=d+(e*24|0)+16|0;q=f[r>>2]|0;r=f[r+4>>2]|0;f[v>>2]=e;d=v+8|0;f[d>>2]=m;f[d+4>>2]=n;d=v+16|0;f[d>>2]=o;f[d+4>>2]=p;d=v+24|0;f[d>>2]=q;f[d+4>>2]=r;ki(c,14094,v)|0;e=e+1|0;d=f[k>>2]|0;if((e|0)==(h|0))break b;d=f[d+(i*40|0)+16>>2]|0}}while(0);g=f[d+(i*40|0)+24>>2]|0;c:do if((g|0)!=0?(f[d+(i*40|0)+20>>2]|0)!=0:0){e=0;d=g;while(1){q=d+(e*24|0)+8|0;p=f[q>>2]|0;q=f[q+4>>2]|0;r=f[d+(e*24|0)+16>>2]|0;f[w>>2]=j[d+(e*24|0)>>1];d=w+8|0;f[d>>2]=p;f[d+4>>2]=q;f[w+16>>2]=r;ki(c,14005,w)|0;e=e+1|0;d=f[k>>2]|0;if(e>>>0>=(f[d+(i*40|0)+20>>2]|0)>>>0)break c;d=f[d+(i*40|0)+24>>2]|0}}while(0);i=i+1|0}while(i>>>0<(f[s>>2]|0)>>>0)}Mh(14036,4,1,c)|0}}Mh(13879,2,1,c)|0;u=x;return}function Ld(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;m=u;u=u+64|0;l=m+48|0;k=m+40|0;i=m+32|0;h=m+16|0;g=m;j=m+52|0;if(!c){Mh(14492,13,1,d)|0;b[j>>0]=9;e=1}else{Mh(14455,36,1,f[665]|0)|0;e=0}b[j+e>>0]=0;n=f[a>>2]|0;e=f[a+4>>2]|0;f[g>>2]=j;f[g+4>>2]=n;f[g+8>>2]=e;ki(d,14506,g)|0;e=f[a+8>>2]|0;g=f[a+12>>2]|0;f[h>>2]=j;f[h+4>>2]=e;f[h+8>>2]=g;ki(d,14523,h)|0;h=a+16|0;g=f[h>>2]|0;f[i>>2]=j;f[i+4>>2]=g;ki(d,14540,i)|0;g=a+24|0;if(!(f[g>>2]|0)){Mh(13879,2,1,d)|0;u=m;return}if(!(f[h>>2]|0)){Mh(13879,2,1,d)|0;u=m;return}else e=0;do{f[k>>2]=j;f[k+4>>2]=e;ki(d,14556,k)|0;Nd((f[g>>2]|0)+(e*52|0)|0,c,d);f[l>>2]=j;ki(d,14576,l)|0;e=e+1|0}while(e>>>0<(f[h>>2]|0)>>>0);Mh(13879,2,1,d)|0;u=m;return}function Md(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0;w=u;u=u+128|0;t=w+120|0;s=w+112|0;r=w+104|0;q=w+96|0;p=w+88|0;o=w+80|0;n=w+72|0;m=w+64|0;l=w+56|0;k=w+48|0;j=w+40|0;i=w+32|0;h=w+24|0;g=w+16|0;e=w+8|0;d=w;if(!a){u=w;return}Mh(14160,17,1,c)|0;f[d>>2]=f[a>>2];ki(c,14178,d)|0;f[e>>2]=f[a+4>>2];ki(c,14191,e)|0;f[g>>2]=f[a+8>>2];ki(c,14203,g)|0;f[h>>2]=f[a+16>>2];ki(c,14220,h)|0;if((b|0)>0){g=a+5584|0;e=0;do{h=f[g>>2]|0;f[i>>2]=e;ki(c,14231,i)|0;f[j>>2]=f[h+(e*1080|0)>>2];ki(c,14245,j)|0;d=h+(e*1080|0)+4|0;f[k>>2]=f[d>>2];ki(c,14259,k)|0;f[l>>2]=f[h+(e*1080|0)+8>>2];ki(c,14282,l)|0;f[m>>2]=f[h+(e*1080|0)+12>>2];ki(c,14298,m)|0;f[n>>2]=f[h+(e*1080|0)+16>>2];ki(c,14314,n)|0;f[o>>2]=f[h+(e*1080|0)+20>>2];ki(c,14331,o)|0;Mh(14346,23,1,c)|0;if(f[d>>2]|0){a=0;do{x=f[h+(e*1080|0)+944+(a<<2)>>2]|0;f[p>>2]=f[h+(e*1080|0)+812+(a<<2)>>2];f[p+4>>2]=x;ki(c,14370,p)|0;a=a+1|0}while(a>>>0<(f[d>>2]|0)>>>0)}Ri(10,c)|0;x=h+(e*1080|0)+24|0;f[q>>2]=f[x>>2];ki(c,14379,q)|0;f[r>>2]=f[h+(e*1080|0)+804>>2];ki(c,14394,r)|0;Mh(14411,20,1,c)|0;if((f[x>>2]|0)!=1){a=(f[d>>2]|0)*3|0;if((a|0)>2){d=a+-2|0;v=8}}else{d=1;v=8}if((v|0)==8){v=0;a=0;do{x=f[h+(e*1080|0)+28+(a<<3)>>2]|0;f[s>>2]=f[h+(e*1080|0)+28+(a<<3)+4>>2];f[s+4>>2]=x;ki(c,14370,s)|0;a=a+1|0}while((a|0)!=(d|0))}Ri(10,c)|0;f[t>>2]=f[h+(e*1080|0)+808>>2];ki(c,14432,t)|0;Mh(14449,5,1,c)|0;e=e+1|0}while((e|0)!=(b|0))}Mh(14036,4,1,c)|0;u=w;return}function Nd(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0;k=u;u=u+48|0;j=k+24|0;i=k+16|0;h=k;g=k+32|0;e=(c|0)!=0;if(e){Mh(14581,41,1,f[665]|0)|0;c=0}else{b[g>>0]=9;b[g+1>>0]=9;c=2}b[g+c>>0]=0;l=f[a>>2]|0;c=f[a+4>>2]|0;f[h>>2]=g;f[h+4>>2]=l;f[h+8>>2]=c;ki(d,14623,h)|0;h=f[a+24>>2]|0;f[i>>2]=g;f[i+4>>2]=h;ki(d,14640,i)|0;i=f[a+32>>2]|0;f[j>>2]=g;f[j+4>>2]=i;ki(d,14652,j)|0;if(!e){u=k;return}Mh(13879,2,1,d)|0;u=k;return}function Od(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0;l=u;u=u+16|0;d=l;c=a+80|0;j=f[(f[c>>2]|0)+16>>2]|0;b=Ic(1,56)|0;f[d>>2]=b;if(!b){k=0;u=l;return k|0}c=f[(f[c>>2]|0)+16>>2]|0;f[b+24>>2]=c;f[b>>2]=f[a+92>>2];f[b+4>>2]=f[a+96>>2];f[b+8>>2]=f[a+100>>2];f[b+12>>2]=f[a+104>>2];f[b+16>>2]=f[a+112>>2];f[b+20>>2]=f[a+116>>2];f[b+52>>2]=0;a=f[a+12>>2]|0;f[b+32>>2]=f[a>>2];f[b+36>>2]=f[a+4>>2];f[b+40>>2]=f[a+8>>2];f[b+44>>2]=f[a+16>>2];c=Ic(c,1080)|0;i=b+48|0;f[i>>2]=c;if(!c){$b(d);k=0;u=l;return k|0}if(!j){k=b;u=l;return k|0}h=a+5584|0;a=0;while(1){g=f[h>>2]|0;f[c+(a*1080|0)+4>>2]=f[g+(a*1080|0)>>2];d=g+(a*1080|0)+4|0;e=f[d>>2]|0;f[c+(a*1080|0)+8>>2]=e;f[c+(a*1080|0)+12>>2]=f[g+(a*1080|0)+8>>2];f[c+(a*1080|0)+16>>2]=f[g+(a*1080|0)+12>>2];f[c+(a*1080|0)+20>>2]=f[g+(a*1080|0)+16>>2];f[c+(a*1080|0)+24>>2]=f[g+(a*1080|0)+20>>2];if(e>>>0<33){hj(c+(a*1080|0)+948|0,g+(a*1080|0)+944|0,e|0)|0;hj(c+(a*1080|0)+816|0,g+(a*1080|0)+812|0,f[d>>2]|0)|0}e=f[g+(a*1080|0)+24>>2]|0;f[c+(a*1080|0)+28>>2]=e;f[c+(a*1080|0)+808>>2]=f[g+(a*1080|0)+804>>2];if((e|0)!=1){d=(f[d>>2]|0)*3|0;if((d+-3|0)>>>0<96){e=d+-2|0;k=10}}else{e=1;k=10}if((k|0)==10){k=0;d=0;do{f[c+(a*1080|0)+32+(d<<2)>>2]=f[g+(a*1080|0)+28+(d<<3)+4>>2];f[c+(a*1080|0)+420+(d<<2)>>2]=f[g+(a*1080|0)+28+(d<<3)>>2];d=d+1|0}while((d|0)!=(e|0))}f[c+(a*1080|0)+812>>2]=f[g+(a*1080|0)+808>>2];a=a+1|0;if((a|0)==(j|0))break;c=f[i>>2]|0}u=l;return b|0}function Pd(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0;b=Ic(1,48)|0;if(!b){k=0;return k|0}h=a+196|0;c=f[h>>2]|0;j=c;k=f[j+4>>2]|0;a=b;f[a>>2]=f[j>>2];f[a+4>>2]=k;a=c+8|0;k=f[a+4>>2]|0;j=b+8|0;f[j>>2]=f[a>>2];f[j+4>>2]=k;j=c+16|0;k=f[j+4>>2]|0;a=b+16|0;f[a>>2]=f[j>>2];f[a+4>>2]=k;c=f[c+24>>2]|0;a=b+24|0;f[a>>2]=c;c=Hc(c*24|0)|0;k=b+28|0;f[k>>2]=c;if(!c){Mc(b);k=0;return k|0}d=f[(f[h>>2]|0)+28>>2]|0;if(!d){Mc(c);f[k>>2]=0}else hj(c|0,d|0,(f[a>>2]|0)*24|0)|0;a=f[(f[h>>2]|0)+36>>2]|0;g=b+36|0;f[g>>2]=a;a=Ic(a,40)|0;j=b+40|0;f[j>>2]=a;if(!a){Mc(f[k>>2]|0);Mc(b);k=0;return k|0}c=f[(f[h>>2]|0)+40>>2]|0;if(!c){Mc(a);f[j>>2]=0;k=b;return k|0}if(!(f[g>>2]|0)){k=b;return k|0}c=f[c+20>>2]|0;f[a+20>>2]=c;c=Hc(c*24|0)|0;a=f[j>>2]|0;f[a+24>>2]=c;a:do if(!c)d=0;else{d=0;while(1){e=f[(f[(f[h>>2]|0)+40>>2]|0)+(d*40|0)+24>>2]|0;if(!e){Mc(c);a=f[j>>2]|0;f[a+(d*40|0)+24>>2]=0}else{hj(c|0,e|0,(f[a+(d*40|0)+20>>2]|0)*24|0)|0;a=f[j>>2]|0}c=f[(f[(f[h>>2]|0)+40>>2]|0)+(d*40|0)+4>>2]|0;f[a+(d*40|0)+4>>2]=c;c=Hc(c*24|0)|0;a=f[j>>2]|0;f[a+(d*40|0)+16>>2]=c;if(!c)break;e=f[(f[(f[h>>2]|0)+40>>2]|0)+(d*40|0)+16>>2]|0;if(!e){Mc(c);a=f[j>>2]|0;f[a+(d*40|0)+16>>2]=0}else{hj(c|0,e|0,(f[a+(d*40|0)+4>>2]|0)*24|0)|0;a=f[j>>2]|0}f[a+(d*40|0)+32>>2]=0;f[a+(d*40|0)+36>>2]=0;d=d+1|0;if(d>>>0>=(f[g>>2]|0)>>>0){i=28;break}c=f[(f[(f[h>>2]|0)+40>>2]|0)+(d*40|0)+20>>2]|0;f[a+(d*40|0)+20>>2]=c;c=Hc(c*24|0)|0;a=f[j>>2]|0;f[a+(d*40|0)+24>>2]=c;if(!c)break a}if((i|0)==28)return b|0;if(d){c=0;do{Mc(f[a+(c*40|0)+24>>2]|0);Mc(f[(f[j>>2]|0)+(c*40|0)+16>>2]|0);c=c+1|0;a=f[j>>2]|0}while((c|0)!=(d|0))}Mc(a);Mc(f[k>>2]|0);Mc(b);k=0;return k|0}while(0);if(d){c=0;do{Mc(f[a+(c*40|0)+24>>2]|0);c=c+1|0;a=f[j>>2]|0}while((c|0)!=(d|0))}Mc(a);Mc(f[k>>2]|0);Mc(b);k=0;return k|0}function Qd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0;if(!c){c=0;return c|0}e=Sb()|0;k=a+84|0;f[k>>2]=e;if(!e){c=0;return c|0}Ub(c,e);i=a+188|0;kg(f[i>>2]|0,28,d)|0;i=f[i>>2]|0;j=lg(i)|0;e=mg(i)|0;if(j){g=1;h=0;while(1){if(!g)g=0;else g=(Ma[f[e>>2]&63](a,b,d)|0)!=0;h=h+1|0;if((h|0)==(j|0))break;else{e=e+4|0;g=g&1}}ng(i);if(!g){c=a+80|0;Qb(f[c>>2]|0);f[c>>2]=0;c=0;return c|0}}else ng(i);i=f[c+16>>2]|0;if(!i){c=1;return c|0}h=f[(f[k>>2]|0)+24>>2]|0;g=f[c+24>>2]|0;e=0;do{f[g+(e*52|0)+36>>2]=f[h+(e*52|0)+36>>2];c=h+(e*52|0)+44|0;f[g+(e*52|0)+44>>2]=f[c>>2];f[c>>2]=0;e=e+1|0}while(e>>>0<i>>>0);e=1;return e|0}function Rd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=u;u=u+80|0;v=C+32|0;w=C+24|0;B=C+16|0;A=C+8|0;o=C+64|0;z=C+60|0;p=C+56|0;q=C+52|0;r=C+48|0;s=C+44|0;t=C+40|0;k=C+36|0;f[o>>2]=1;d=Hc(1e3)|0;if(!d){Mb(c,1,14664,C)|0;B=0;u=C;return B|0}x=a+116|0;y=a+112|0;l=a+204|0;m=a+84|0;n=a+8|0;j=0;e=1e3;while(1){if(!(Gd(a,z,p,q,r,s,t,k,o,b,c)|0)){e=5;break}if(!(f[o>>2]|0)){e=17;break}i=f[p>>2]|0;if(i>>>0>e>>>0){e=Lc(d,i)|0;if(!e){e=9;break}else{d=e;h=i}}else h=e;g=f[z>>2]|0;if(!(Hd(a,g,d,i,b,c)|0)){e=11;break}e=g+1|0;i=X(f[y>>2]|0,f[x>>2]|0)|0;f[w>>2]=e;f[w+4>>2]=i;Mb(c,4,14768,w)|0;i=f[l>>2]|0;if(!(Sd(f[(f[f[i+20>>2]>>2]|0)+20>>2]|0,f[i+24>>2]|0,d,f[(f[m>>2]|0)+24>>2]|0)|0)){e=13;break}f[v>>2]=e;Mb(c,4,14798,v)|0;i=Ib(b)|0;if((i|0)==0&(I|0)==0?(f[n>>2]|0)==64:0){e=17;break}j=j+1|0;if((j|0)==(X(f[y>>2]|0,f[x>>2]|0)|0)){e=17;break}else e=h}if((e|0)==5){Mc(d);B=0;u=C;return B|0}else if((e|0)==9){Mc(d);B=X(f[y>>2]|0,f[x>>2]|0)|0;f[A>>2]=(f[z>>2]|0)+1;f[A+4>>2]=B;Mb(c,1,14699,A)|0;B=0;u=C;return B|0}else if((e|0)==11){Mc(d);A=X(f[y>>2]|0,f[x>>2]|0)|0;f[B>>2]=g+1;f[B+4>>2]=A;Mb(c,1,14739,B)|0;B=0;u=C;return B|0}else if((e|0)==13){Mc(d);B=0;u=C;return B|0}else if((e|0)==17){Mc(d);B=1;u=C;return B|0}return 0}function Sd(a,c,e,g){a=a|0;c=c|0;e=e|0;g=g|0;var i=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;E=c+16|0;if(!(f[E>>2]|0)){E=1;return E|0}D=0;C=f[c+24>>2]|0;while(1){l=g+44|0;c=f[l>>2]|0;m=g+8|0;if(!c){c=f[m>>2]|0;k=g+12|0;i=f[k>>2]|0;if(!i){e=0;a=66;break}if(c>>>0>(4294967295/(i>>>0)|0)>>>0){e=0;a=66;break}c=Ic(X(i,c)|0,4)|0;f[l>>2]=c;if(!c){e=0;a=66;break}}else k=g+12|0;o=C+36|0;f[g+36>>2]=f[o>>2];v=f[C+24>>2]|0;t=f[a+24>>2]|0;o=f[o>>2]|0;v=(v>>>3)+((v&7|0)!=0&1)|0;w=(v|0)==3;n=f[t+(o*136|0)+8>>2]|0;i=f[t+(o*136|0)>>2]|0;y=n-i|0;s=f[t+(o*136|0)+12>>2]|0;o=f[t+(o*136|0)+4>>2]|0;t=s-o|0;l=f[g+16>>2]|0;p=f[g+40>>2]|0;q=fj(1,0,p|0)|0;B=I;l=Zi(l|0,0,-1,-1)|0;l=Zi(l|0,I|0,q|0,B|0)|0;l=ej(l|0,I|0,p|0)|0;A=Zi(f[g+20>>2]|0,0,-1,-1)|0;B=Zi(A|0,I|0,q|0,B|0)|0;p=ej(B|0,I|0,p|0)|0;B=f[m>>2]|0;m=B+l|0;k=f[k>>2]|0;q=k+p|0;do if(i>>>0<=l>>>0){i=l-i|0;if(n>>>0>m>>>0){A=B;x=i;r=0;u=n-m|0;break}else{A=y-i|0;x=i;r=0;u=0;break}}else{z=n>>>0>m>>>0;u=m-i|0;A=z?u:y;x=0;r=i-l|0;u=z?y-u|0:0}while(0);do if(o>>>0<=p>>>0){i=p-o|0;if(s>>>0>q>>>0){z=k;n=i;l=0;i=s-q|0;break}else{z=t-i|0;n=i;l=0;i=0;break}}else{s=s>>>0>q>>>0;i=q-o|0;z=s?i:t;n=0;l=o-p|0;i=s?t-i|0:0}while(0);if((x|u|A|i|n|z|0)<0){e=0;a=66;break}m=X(n,y)|0;k=m+x|0;p=x+u|0;q=(X(i,y)|0)-x|0;l=c+((X(B,l)|0)+r<<2)|0;switch((w?4:v)&1073741823|0){case 1:{i=e+k|0;c=(z|0)!=0;do if(!(f[C+32>>2]|0))if(c){if(!A){e=e+(u+m+(X(p,z+-1|0)|0)+(x<<1))|0;break}o=A+u+m+(X(A+x+u|0,z+-1|0)|0)+(x<<1)|0;n=0;c=i;while(1){m=c+A|0;k=0;i=l;while(1){f[i>>2]=h[c>>0];k=k+1|0;if((k|0)==(A|0))break;else{c=c+1|0;i=i+4|0}}n=n+1|0;if((n|0)==(z|0))break;else{c=m+p|0;l=l+(B<<2)|0}}e=e+o|0}else e=i;else if(c){if(!A){e=e+(u+m+(X(p,z+-1|0)|0)+(x<<1))|0;break}o=A+u+m+(X(A+x+u|0,z+-1|0)|0)+(x<<1)|0;c=i;k=0;while(1){n=c+A|0;m=0;i=l;while(1){f[i>>2]=b[c>>0];m=m+1|0;if((m|0)==(A|0))break;else{c=c+1|0;i=i+4|0}}k=k+1|0;if((k|0)==(z|0))break;else{c=n+p|0;l=l+(B<<2)|0}}e=e+o|0}else e=i;while(0);e=e+q|0;break}case 2:{c=e+(k<<1)|0;i=(z|0)!=0;do if(!(f[C+32>>2]|0))if(i){if(!A){e=e+((X(n<<1,y)|0)+(X(p<<1,z+-1|0)|0)+(x<<2)+(u<<1))|0;break}e=e+((X(A+p<<1,z+-1|0)|0)+(x<<2)+(A+u+m<<1))|0;n=0;while(1){m=c+(A<<1)|0;k=0;i=l;while(1){f[i>>2]=j[c>>1];k=k+1|0;if((k|0)==(A|0))break;else{c=c+2|0;i=i+4|0}}n=n+1|0;if((n|0)==(z|0))break;else{c=m+(p<<1)|0;l=l+(B<<2)|0}}}else e=c;else if(i){if(!A){e=e+((X(n<<1,y)|0)+(X(p<<1,z+-1|0)|0)+(x<<2)+(u<<1))|0;break}e=e+((X(A+p<<1,z+-1|0)|0)+(x<<2)+(A+u+m<<1))|0;n=0;while(1){m=c+(A<<1)|0;i=0;k=l;while(1){f[k>>2]=d[c>>1];i=i+1|0;if((i|0)==(A|0))break;else{c=c+2|0;k=k+4|0}}n=n+1|0;if((n|0)==(z|0))break;else{c=m+(p<<1)|0;l=l+(B<<2)|0}}}else e=c;while(0);e=e+(q<<1)|0;break}case 4:{c=e+(k<<2)|0;do if(!z)e=c;else{if(!A){e=e+((X(n<<2,y)|0)+(X(p<<2,z+-1|0)|0)+(x<<3)+(u<<2))|0;break}e=e+((X(A+p<<2,z+-1|0)|0)+(x<<3)+(A+u+m<<2))|0;n=0;while(1){m=c+(A<<2)|0;i=0;k=l;while(1){f[k>>2]=f[c>>2];i=i+1|0;if((i|0)==(A|0))break;else{c=c+4|0;k=k+4|0}}n=n+1|0;if((n|0)==(z|0))break;else{c=m+(p<<2)|0;l=l+(B<<2)|0}}}while(0);e=e+(q<<2)|0;break}default:{}}D=D+1|0;if(D>>>0>=(f[E>>2]|0)>>>0){e=1;a=66;break}else{a=a+52|0;g=g+52|0;C=C+52|0}}if((a|0)==66)return e|0;return 0}function Td(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0;s=u;u=u+16|0;i=s+8|0;if(!c){Mb(d,1,14842,s)|0;r=0;u=s;return r|0}h=f[a+112>>2]|0;g=X(f[a+116>>2]|0,h)|0;if(g>>>0<=e>>>0){f[i>>2]=e;f[i+4>>2]=g+-1;Mb(d,1,14880,i)|0;r=0;u=s;return r|0}r=(e>>>0)%(h>>>0)|0;q=(e>>>0)/(h>>>0)|0;h=a+100|0;g=X(f[h>>2]|0,r)|0;i=a+92|0;g=g+(f[i>>2]|0)|0;f[c>>2]=g;p=a+80|0;j=f[f[p>>2]>>2]|0;g=g>>>0<j>>>0?j:g;f[c>>2]=g;r=X(f[h>>2]|0,r+1|0)|0;i=r+(f[i>>2]|0)|0;r=c+8|0;f[r>>2]=i;h=f[(f[p>>2]|0)+8>>2]|0;i=i>>>0>h>>>0?h:i;f[r>>2]=i;r=a+104|0;h=X(f[r>>2]|0,q)|0;j=a+96|0;h=h+(f[j>>2]|0)|0;n=c+4|0;f[n>>2]=h;o=f[(f[p>>2]|0)+4>>2]|0;h=h>>>0<o>>>0?o:h;f[n>>2]=h;q=X(f[r>>2]|0,q+1|0)|0;j=q+(f[j>>2]|0)|0;q=c+12|0;f[q>>2]=j;r=f[(f[p>>2]|0)+12>>2]|0;j=j>>>0>r>>>0?r:j;f[q>>2]=j;q=c+24|0;r=c+16|0;n=f[r>>2]|0;if(n|0){o=f[(f[p>>2]|0)+24>>2]|0;m=g+-1|0;l=h+-1|0;k=i+-1|0;i=j+-1|0;g=0;h=f[q>>2]|0;while(1){j=f[o+(g*52|0)+40>>2]|0;f[h+40>>2]=j;z=f[h>>2]|0;y=(m+z|0)/(z|0)|0;f[h+16>>2]=y;t=f[h+4>>2]|0;x=(l+t|0)/(t|0)|0;f[h+20>>2]=x;z=(k+z|0)/(z|0)|0;t=(i+t|0)/(t|0)|0;w=fj(1,0,j|0)|0;v=I;z=Zi(z|0,((z|0)<0)<<31>>31|0,-1,-1)|0;z=Zi(z|0,I|0,w|0,v|0)|0;z=dj(z|0,I|0,j|0)|0;y=Zi(y|0,((y|0)<0)<<31>>31|0,-1,-1)|0;y=Zi(y|0,I|0,w|0,v|0)|0;y=dj(y|0,I|0,j|0)|0;f[h+8>>2]=z-y;t=Zi(t|0,((t|0)<0)<<31>>31|0,-1,-1)|0;t=Zi(t|0,I|0,w|0,v|0)|0;t=dj(t|0,I|0,j|0)|0;x=Zi(x|0,((x|0)<0)<<31>>31|0,-1,-1)|0;v=Zi(x|0,I|0,w|0,v|0)|0;j=dj(v|0,I|0,j|0)|0;f[h+12>>2]=t-j;g=g+1|0;if(g>>>0>=n>>>0)break;else h=h+52|0}}l=a+84|0;g=f[l>>2]|0;if(g|0)Qb(g);g=Sb()|0;f[l>>2]=g;if(!g){z=0;u=s;return z|0}Ub(c,g);f[a+60>>2]=e;j=a+188|0;kg(f[j>>2]|0,29,d)|0;j=f[j>>2]|0;k=lg(j)|0;g=mg(j)|0;if(k){h=1;i=0;while(1){if(!h)h=0;else h=(Ma[f[g>>2]&63](a,b,d)|0)!=0;i=i+1|0;if((i|0)==(k|0))break;else{g=g+4|0;h=h&1}}ng(j);if(!h){Qb(f[p>>2]|0);f[p>>2]=0;z=0;u=s;return z|0}}else ng(j);g=f[r>>2]|0;if(!g){z=1;u=s;return z|0}k=0;j=f[(f[l>>2]|0)+24>>2]|0;i=f[q>>2]|0;while(1){f[i+(k*52|0)+36>>2]=f[j+(k*52|0)+36>>2];h=f[i+(k*52|0)+44>>2]|0;if(!h)h=j;else{Mc(h);h=f[(f[l>>2]|0)+24>>2]|0;i=f[q>>2]|0;g=f[r>>2]|0}z=h+(k*52|0)+44|0;f[i+(k*52|0)+44>>2]=f[z>>2];f[z>>2]=0;k=k+1|0;if(k>>>0>=g>>>0){g=1;break}else j=h}u=s;return g|0}function Ud(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;E=u;u=u+96|0;A=E+56|0;z=E+48|0;y=E+40|0;C=E+32|0;B=E+24|0;j=E+16|0;i=E+8|0;q=E+92|0;r=E+88|0;s=E+84|0;t=E+80|0;v=E+76|0;w=E+72|0;x=E+68|0;o=E+64|0;f[q>>2]=1;d=Hc(1e3)|0;if(!d){Mb(c,1,14941,E)|0;D=0;u=E;return D|0}p=a+196|0;e=f[p>>2]|0;g=f[e+40>>2]|0;a:do if(!g){g=X(f[a+116>>2]|0,f[a+112>>2]|0)|0;f[e+36>>2]=g;g=Ic(g,40)|0;e=f[p>>2]|0;f[e+40>>2]=g;b:do if(g|0){if(f[e+36>>2]|0){h=0;do{f[g+(h*40|0)+28>>2]=100;f[g+(h*40|0)+20>>2]=0;n=Ic(100,24)|0;e=f[p>>2]|0;g=f[e+40>>2]|0;f[g+(h*40|0)+24>>2]=n;h=h+1|0;if(!n)break b}while(h>>>0<(f[e+36>>2]|0)>>>0)}e=f[a+60>>2]|0;if(!g)break a;else{h=e;D=11;break a}}while(0);Mc(d);D=0;u=E;return D|0}else{h=f[a+60>>2]|0;D=11}while(0);if((D|0)==11)if(f[g+16>>2]|0){if(!(f[g+(h*40|0)+4>>2]|0)){n=a+64|0;n=Zi(f[n>>2]|0,f[n+4>>2]|0,2,0)|0;if(!(tb(b,n,I,c)|0)){Mb(c,1,14979,i)|0;Mc(d);D=0;u=E;return D|0}}else{n=f[g+(h*40|0)+16>>2]|0;n=Zi(f[n>>2]|0,f[n+4>>2]|0,2,0)|0;if(!(tb(b,n,I,c)|0)){Mb(c,1,14979,j)|0;Mc(d);D=0;u=E;return D|0}}e=a+8|0;if((f[e>>2]|0)==256){f[e>>2]=8;e=h}else e=h}else e=h;c:do if(Gd(a,r,s,t,v,w,x,o,q,b,c)|0){j=a+116|0;k=a+112|0;l=a+204|0;m=a+84|0;n=e+1|0;g=1e3;while(1){if(!(f[q>>2]|0))break;h=f[s>>2]|0;if(h>>>0>g>>>0){g=Lc(d,h)|0;if(!g){D=25;break}else{d=g;g=h}}i=f[r>>2]|0;if(!(Hd(a,i,d,h,b,c)|0)){D=27;break}h=i+1|0;F=X(f[k>>2]|0,f[j>>2]|0)|0;f[C>>2]=h;f[C+4>>2]=F;Mb(c,4,14768,C)|0;F=f[l>>2]|0;if(!(Sd(f[(f[f[F+20>>2]>>2]|0)+20>>2]|0,f[F+24>>2]|0,d,f[(f[m>>2]|0)+24>>2]|0)|0)){D=29;break}f[y>>2]=h;Mb(c,4,14798,y)|0;if((i|0)==(e|0)){D=31;break}f[A>>2]=h;f[A+4>>2]=n;Mb(c,2,15007,A)|0;if(!(Gd(a,r,s,t,v,w,x,o,q,b,c)|0))break c}if((D|0)==25){Mc(d);F=X(f[k>>2]|0,f[j>>2]|0)|0;f[B>>2]=(f[r>>2]|0)+1;f[B+4>>2]=F;Mb(c,1,14699,B)|0;F=0;u=E;return F|0}else if((D|0)==27){Mc(d);F=0;u=E;return F|0}else if((D|0)==29){Mc(d);F=0;u=E;return F|0}else if((D|0)==31){F=(f[p>>2]|0)+8|0;F=Zi(f[F>>2]|0,f[F+4>>2]|0,2,0)|0;if(!(tb(b,F,I,c)|0)){Mb(c,1,14979,z)|0;Mc(d);F=0;u=E;return F|0}}Mc(d);F=1;u=E;return F|0}while(0);Mc(d);F=0;u=E;return F|0}function Vd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0;k=u;u=u+16|0;j=k;f[a+168>>2]=b;e=f[a+80>>2]|0;a:do if((((e|0)!=0?(i=f[e+24>>2]|0,(i|0)!=0):0)?(h=a+12|0,d=f[h>>2]|0,(d|0)!=0):0)?(g=f[d+5584>>2]|0,(g|0)!=0):0){d=f[e+16>>2]|0;if(!d)a=1;else{if((f[g+4>>2]|0)>>>0>b>>>0){a=0;do{f[i+(a*52|0)+40>>2]=b;a=a+1|0;if(a>>>0>=d>>>0){a=1;break a}}while((f[(f[(f[h>>2]|0)+5584>>2]|0)+(a*1080|0)+4>>2]|0)>>>0>b>>>0)}Mb(c,1,15074,j)|0;a=0}}else a=0;while(0);u=k;return a|0}function Wd(a,c,e){a=a|0;c=c|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0;Q=u;u=u+48|0;O=Q+32|0;N=Q+24|0;M=Q+16|0;L=Q+8|0;K=Q;G=a+204|0;g=f[G>>2]|0;H=a+116|0;I=a+112|0;J=X(f[I>>2]|0,f[H>>2]|0)|0;A=(J|0)==1;if(!J){P=1;u=Q;return P|0}B=a+200|0;C=a+12|0;D=a+164|0;E=a+8|0;F=g+20|0;z=g+24|0;y=0;m=0;g=0;a:while(1){if((f[B>>2]|0)!=(y|0)){P=5;break}w=y;y=y+1|0;x=X(f[H>>2]|0,f[I>>2]|0)|0;f[L>>2]=y;f[L+4>>2]=x;Mb(e,4,15187,L)|0;f[C>>2]=0;x=f[G>>2]|0;f[x+12>>2]=f[(f[D>>2]|0)+(w*5640|0)+5588>>2];f[E>>2]=0;if(!(Uf(x,f[B>>2]|0,e)|0))break;h=f[G>>2]|0;l=f[(f[h+24>>2]|0)+16>>2]|0;if(l)if(A){j=f[(f[f[F>>2]>>2]|0)+20>>2]|0;k=f[(f[z>>2]|0)+24>>2]|0;i=0;do{f[j+(i*52|0)+32>>2]=f[k+(i*52|0)+44>>2];f[j+(i*52|0)+36>>2]=0;i=i+1|0}while(i>>>0<l>>>0)}else{i=0;do{if(!(Tf((f[(f[f[F>>2]>>2]|0)+20>>2]|0)+(i*52|0)|0)|0)){P=14;break a}i=i+1|0;h=f[G>>2]|0}while(i>>>0<(f[(f[h+24>>2]|0)+16>>2]|0)>>>0)}x=$f(h)|0;if(!A){if(x>>>0>g>>>0){g=Lc(m,x)|0;if(!g){P=20;break}else{h=g;g=x}}else h=m;i=f[G>>2]|0;w=i+24|0;j=f[w>>2]|0;if(f[j+16>>2]|0){v=i+20|0;i=h;t=0;do{p=f[(f[f[v>>2]>>2]|0)+20>>2]|0;n=f[j+24>>2]|0;R=f[n+(t*52|0)+24>>2]|0;R=(R>>>3)+((R&7|0)!=0&1)|0;l=f[p+(t*52|0)+8>>2]|0;m=f[p+(t*52|0)>>2]|0;r=l-m|0;o=f[p+(t*52|0)+12>>2]|0;p=f[p+(t*52|0)+4>>2]|0;s=o-p|0;T=f[j>>2]|0;S=f[n+(t*52|0)>>2]|0;k=f[n+(t*52|0)+4>>2]|0;q=(S+~T+(f[j+8>>2]|0)|0)/(S|0)|0;k=m-((T+-1+S|0)/(S|0)|0)+(X(q,p-(((f[j+4>>2]|0)+-1+k|0)/(k|0)|0)|0)|0)|0;k=(f[n+(t*52|0)+44>>2]|0)+(k<<2)|0;b:do switch(((R|0)==3?4:R)&1073741823|0){case 1:{j=(r|0)==0|(s|0)==0;if(!(f[n+(t*52|0)+32>>2]|0)){if(j)break b;p=o+-1-p|0;n=0;o=i;while(1){j=0;l=o;m=k;while(1){b[l>>0]=f[m>>2];j=j+1|0;if((j|0)==(r|0))break;else{l=l+1|0;m=m+4|0}}n=n+1|0;if((n|0)==(s|0))break;else{o=o+r|0;k=k+(q<<2)|0}}i=i+(r+(X(p,r)|0))|0;break b}else{if(j)break b;p=o+-1-p|0;o=i;j=k;k=0;while(1){l=0;m=o;n=j;while(1){b[m>>0]=f[n>>2];l=l+1|0;if((l|0)==(r|0))break;else{m=m+1|0;n=n+4|0}}k=k+1|0;if((k|0)==(s|0))break;else{o=o+r|0;j=j+(q<<2)|0}}i=i+(r+(X(p,r)|0))|0;break b}}case 2:{j=(r|0)==0|(s|0)==0;if(!(f[n+(t*52|0)+32>>2]|0)){if(j)break b;n=l-m<<1;p=n+(X(o+-1-p|0,n)|0)|0;n=i;o=0;while(1){j=0;l=n;m=k;while(1){d[l>>1]=f[m>>2];j=j+1|0;if((j|0)==(r|0))break;else{l=l+2|0;m=m+4|0}}o=o+1|0;if((o|0)==(s|0))break;else{n=n+(r<<1)|0;k=k+(q<<2)|0}}i=i+p|0;break b}else{if(j)break b;n=l-m<<1;p=n+(X(o+-1-p|0,n)|0)|0;n=i;o=0;while(1){j=n;l=0;m=k;while(1){d[j>>1]=f[m>>2];l=l+1|0;if((l|0)==(r|0))break;else{j=j+2|0;m=m+4|0}}o=o+1|0;if((o|0)==(s|0))break;else{n=n+(r<<1)|0;k=k+(q<<2)|0}}i=i+p|0;break b}}case 4:{if(!((r|0)==0|(s|0)==0)){n=l-m<<2;p=n+(X(o+-1-p|0,n)|0)|0;n=i;o=0;while(1){j=n;l=0;m=k;while(1){f[j>>2]=f[m>>2];l=l+1|0;if((l|0)==(r|0))break;else{j=j+4|0;m=m+4|0}}o=o+1|0;if((o|0)==(s|0))break;else{n=n+(r<<2)|0;k=k+(q<<2)|0}}i=i+p|0}break}default:{}}while(0);t=t+1|0;j=f[w>>2]|0}while(t>>>0<(f[j+16>>2]|0)>>>0);i=f[G>>2]|0}if(!(ag(i,h,x)|0)){P=61;break}}else h=m;if(!(Xd(a,c,e)|0)){P=63;break}if(y>>>0>=J>>>0){P=65;break}else m=h}if((P|0)==5)Mb(e,1,15150,K)|0;else if((P|0)==14){Mb(e,1,15208,M)|0;if(!m){T=0;u=Q;return T|0}Mc(m);T=0;u=Q;return T|0}else if((P|0)==20){if(m|0)Mc(m);Mb(e,1,15246,N)|0;T=0;u=Q;return T|0}else if((P|0)==61){Mb(e,1,15285,O)|0;Mc(h);T=0;u=Q;return T|0}else if((P|0)==63){if(!h){T=0;u=Q;return T|0}Mc(h);T=0;u=Q;return T|0}else if((P|0)==65){if(!h){T=1;u=Q;return T|0}Mc(h);T=1;u=Q;return T|0}if(!m){T=0;u=Q;return T|0}Mc(m);T=0;u=Q;return T|0}function Xd(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;H=u;u=u+32|0;D=H+16|0;s=H+8|0;k=H;C=H+20|0;F=f[a+40>>2]|0;G=a+36|0;m=f[G>>2]|0;n=a+204|0;j=f[n>>2]|0;f[j+16>>2]=0;z=a+8|0;f[z>>2]=0;yb(m,65424,2);yb(m+2|0,10,2);E=a+200|0;yb(m+4|0,f[E>>2]|0,2);A=a+12|0;yb(m+10|0,f[A>>2]|0,1);B=a+164|0;yb(m+11|0,f[(f[B>>2]|0)+((f[E>>2]|0)*5640|0)+5588>>2]|0,1);f[C>>2]=12;g=m+12|0;e=F+-12|0;l=a+88|0;if(((d[l>>1]|0)+-3&65535)>=4?(h=f[B>>2]|0,i=f[E>>2]|0,(f[h+(i*5640|0)+420>>2]|0)!=0):0){f[C>>2]=0;Yd(f[(f[a+80>>2]|0)+16>>2]|0,h,i,g,C);y=f[C>>2]|0;h=y+12|0;g=g+y|0;e=e-y|0}else h=12;f[C>>2]=0;yb(g,65427,2);f[j+4>>2]=f[z>>2];f[j+8>>2]=f[A>>2];if(!(f[A>>2]|0))f[(f[f[j+20>>2]>>2]|0)+840>>2]=0;f[C>>2]=0;if(!(Yf(j,f[E>>2]|0,g+2|0,C,e+-4|0,0)|0)){Mb(c,1,15332,k)|0;G=0;u=H;return G|0}e=(f[C>>2]|0)+2|0;f[C>>2]=e;e=e+h|0;yb(m+6|0,e,4);if(((d[l>>1]|0)+-3&65535)<4){y=a+28|0;yb(f[y>>2]|0,f[E>>2]|0,1);x=(f[y>>2]|0)+1|0;f[y>>2]=x;yb(x,e,4);f[y>>2]=(f[y>>2]|0)+4}h=m+e|0;y=F-e|0;v=f[n>>2]|0;w=a+88|0;q=f[B>>2]|0;r=f[E>>2]|0;l=Zd(w,0,r)|0;x=a+8|0;f[A>>2]=(f[A>>2]|0)+1;a:do if(l>>>0>1){m=v+4|0;n=v+8|0;o=v+20|0;p=a+28|0;j=h;g=y;e=0;k=1;while(1){f[x>>2]=k;f[C>>2]=0;yb(j,65424,2);yb(j+2|0,10,2);yb(j+4|0,f[E>>2]|0,2);yb(j+10|0,f[A>>2]|0,1);yb(j+11|0,f[(f[B>>2]|0)+((f[E>>2]|0)*5640|0)+5588>>2]|0,1);h=j+12|0;f[C>>2]=0;yb(h,65427,2);f[m>>2]=f[z>>2];f[n>>2]=f[A>>2];if(!(f[A>>2]|0))f[(f[f[o>>2]>>2]|0)+840>>2]=0;f[C>>2]=0;if(!(Yf(v,f[E>>2]|0,j+14|0,C,g+-16|0,0)|0))break;i=f[C>>2]|0;I=i+2|0;f[C>>2]=I;h=h+I|0;e=e+12+I|0;g=g+-12+(-2-i)|0;i=i+14|0;yb(j+6|0,i,4);if(((d[w>>1]|0)+-3&65535)<4){yb(f[p>>2]|0,f[E>>2]|0,1);I=(f[p>>2]|0)+1|0;f[p>>2]=I;yb(I,i,4);f[p>>2]=(f[p>>2]|0)+4}f[A>>2]=(f[A>>2]|0)+1;k=k+1|0;if(k>>>0>=l>>>0){t=12;break a}else j=h}Mb(c,1,15332,s)|0}else{g=y;e=0;t=12}while(0);b:do if((t|0)==12){o=q+(r*5640|0)+420|0;c:do if(f[o>>2]|0){p=v+16|0;q=v+4|0;r=v+8|0;s=v+20|0;n=a+28|0;m=1;d:while(1){f[p>>2]=m;l=Zd(w,m,f[E>>2]|0)|0;if(l){k=0;while(1){f[x>>2]=k;f[C>>2]=0;yb(h,65424,2);yb(h+2|0,10,2);yb(h+4|0,f[E>>2]|0,2);yb(h+10|0,f[A>>2]|0,1);yb(h+11|0,f[(f[B>>2]|0)+((f[E>>2]|0)*5640|0)+5588>>2]|0,1);i=h+12|0;f[C>>2]=0;yb(i,65427,2);f[q>>2]=f[z>>2];f[r>>2]=f[A>>2];if(!(f[A>>2]|0))f[(f[f[s>>2]>>2]|0)+840>>2]=0;f[C>>2]=0;if(!(Yf(v,f[E>>2]|0,h+14|0,C,g+-16|0,0)|0))break d;I=f[C>>2]|0;j=I+2|0;f[C>>2]=j;e=e+12+j|0;j=i+j|0;g=g+-12+(-2-I)|0;i=I+14|0;yb(h+6|0,i,4);if(((d[w>>1]|0)+-3&65535)<4){yb(f[n>>2]|0,f[E>>2]|0,1);I=(f[n>>2]|0)+1|0;f[n>>2]=I;yb(I,i,4);f[n>>2]=(f[n>>2]|0)+4}f[A>>2]=(f[A>>2]|0)+1;k=k+1|0;if(k>>>0>=l>>>0){h=j;break}else h=j}}m=m+1|0;if(m>>>0>(f[o>>2]|0)>>>0)break c}Mb(c,1,15332,D)|0;break b}while(0);I=e-y+F|0;if((Fb(b,f[G>>2]|0,I,c)|0)!=(I|0)){I=0;u=H;return I|0}f[E>>2]=(f[E>>2]|0)+1;I=1;u=H;return I|0}while(0);I=0;u=H;return I|0}function Yd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;g=f[b+(c*5640|0)+5584>>2]|0;l=(f[b+(c*5640|0)+420>>2]|0)+1|0;i=a>>>0<257?1:2;k=X(l,(i<<1)+5|0)|0;j=k+4|0;yb(d,65375,2);yb(d+2|0,k+2|0,2);if(!l){f[e>>2]=j;return}k=b+(c*5640|0)+8|0;h=g+4|0;b=b+(c*5640|0)+424|0;c=0;g=d+4|0;while(1){yb(g,f[b>>2]|0,1);g=g+1|0;yb(g,f[b+4>>2]|0,i);g=g+i|0;o=b+8|0;yb(g,f[o>>2]|0,2);g=g+2|0;m=b+12|0;yb(g,f[m>>2]|0,1);g=g+1|0;d=b+16|0;yb(g,f[d>>2]|0,i);g=g+i|0;yb(g,f[b+36>>2]|0,1);p=f[o>>2]|0;n=f[k>>2]|0;f[o>>2]=(p|0)<(n|0)?p:n;o=f[m>>2]|0;n=f[h>>2]|0;f[m>>2]=(o|0)<(n|0)?o:n;m=f[d>>2]|0;f[d>>2]=(m|0)<(a|0)?m:a;c=c+1|0;if((c|0)==(l|0))break;else{b=b+148|0;g=g+1|0}}f[e>>2]=j;return}function Zd(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0;i=f[a+76>>2]|0;e=f[i+(d*5640|0)+4>>2]|0;j=696;while(1){m=f[j>>2]|0;if((m|0)==-1|(m|0)==(e|0))break;else j=j+12|0}if(!(b[a+93>>0]&8)){a=1;return a|0}m=h[a+92>>0]|0;g=i+(d*5640|0)+424+(c*148|0)+92|0;k=i+(d*5640|0)+424+(c*148|0)+88|0;l=i+(d*5640|0)+424+(c*148|0)+96|0;i=i+(d*5640|0)+424+(c*148|0)+84|0;c=b[j+4>>0]|0;switch(c|0){case 67:{e=g;n=8;break}case 82:{e=k;n=8;break}case 80:{e=l;n=8;break}case 76:{e=i;n=8;break}default:e=1}if((n|0)==8)e=f[e>>2]|0;if((m|0)!=(c|0)){d=b[j+5>>0]|0;switch(d|0){case 67:{c=g;n=16;break}case 82:{c=k;n=16;break}case 80:{c=l;n=16;break}case 76:{c=i;n=16;break}default:{}}if((n|0)==16)e=X(f[c>>2]|0,e)|0;if((m|0)!=(d|0)){d=b[j+6>>0]|0;switch(d|0){case 67:{c=g;n=22;break}case 82:{c=k;n=22;break}case 80:{c=l;n=22;break}case 76:{c=i;n=22;break}default:{}}if((n|0)==22)e=X(f[c>>2]|0,e)|0;if((m|0)!=(d|0)){c=b[j+7>>0]|0;switch(c|0){case 67:{n=28;break}case 82:{g=k;n=28;break}case 80:{g=l;n=28;break}case 76:{g=i;n=28;break}default:{}}if((n|0)==28)e=X(f[g>>2]|0,e)|0;if((m|0)==(c|0))g=3;else{a=e;return a|0}}else g=2}else g=1}else g=0;f[a+84>>2]=g;a=e;return a|0}function _d(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,g=0,h=0,i=0,j=0;e=a+188|0;if(!(kg(f[e>>2]|0,30,c)|0)){j=0;return j|0}if(((d[a+88>>1]|0)+-3&65535)<4?(kg(f[e>>2]|0,31,c)|0)==0:0){j=0;return j|0}if(!(kg(f[e>>2]|0,32,c)|0)){j=0;return j|0}if(!(kg(f[e>>2]|0,33,c)|0)){j=0;return j|0}if(!(kg(f[e>>2]|0,34,c)|0)){j=0;return j|0}j=f[e>>2]|0;i=lg(j)|0;e=mg(j)|0;if(!i)e=1;else{g=e;e=1;h=0;while(1){if(!e)e=0;else e=(Ma[f[g>>2]&63](a,b,c)|0)!=0;e=e&1;h=h+1|0;if((h|0)==(i|0))break;else g=g+4|0}}ng(j);j=e;return j|0}function $d(a,b,c){a=a|0;b=b|0;c=c|0;a=a+44|0;yb(f[a>>2]|0,65497,2);if((Fb(b,f[a>>2]|0,2,c)|0)!=2){c=0;return c|0}c=(Gb(b,c)|0)!=0&1;return c|0}function ae(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0;g=(f[a+32>>2]|0)*5|0;i=a+16|0;i=Zi(f[i>>2]|0,f[i+4>>2]|0,6,0)|0;h=I;d=Hb(b)|0;e=I;if(!(Kb(b,i,h,c)|0)){i=0;return i|0}if((Fb(b,f[a+24>>2]|0,g,c)|0)!=(g|0)){i=0;return i|0}i=(Kb(b,d,e,c)|0)!=0&1;return i|0}function be(a,b,c){a=a|0;b=b|0;c=c|0;a=f[a+196>>2]|0;if(!a)return 1;b=Hb(b)|0;c=a;c=_i(b|0,I|0,f[c>>2]|0,f[c+4>>2]|0)|0;b=a+16|0;f[b>>2]=c;f[b+4>>2]=I;return 1}function ce(a,b,c){a=a|0;b=b|0;c=c|0;b=a+204|0;Qf(f[b>>2]|0);f[b>>2]=0;b=a+24|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0;f[a+28>>2]=0}c=a+36|0;b=f[c>>2]|0;if(!b){a=a+40|0;f[a>>2]=0;return 1}Mc(b);f[c>>2]=0;a=a+40|0;f[a>>2]=0;return 1}function de(a,b,c){a=a|0;b=b|0;c=c|0;b=a+44|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0}f[a+48>>2]=0;return 1}function ee(a,b,c,e){a=a|0;b=b|0;c=c|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0;l=u;u=u+16|0;g=Sb()|0;k=a+80|0;f[k>>2]=g;if(!g){Mb(e,1,15352,l)|0;e=0;u=l;return e|0}Ub(c,g);i=f[c+24>>2]|0;if(i|0?(j=f[c+16>>2]|0,j|0):0){g=0;do{c=i+(g*52|0)+44|0;h=f[c>>2]|0;if(h|0){f[(f[(f[k>>2]|0)+24>>2]|0)+(g*52|0)+44>>2]=h;f[c>>2]=0}g=g+1|0}while(g>>>0<j>>>0)}g=a+192|0;if(!(kg(f[g>>2]|0,35,e)|0)){e=0;u=l;return e|0}if(!(kg(f[g>>2]|0,36,e)|0)){e=0;u=l;return e|0}if(!(kg(f[g>>2]|0,37,e)|0)){e=0;u=l;return e|0}i=f[g>>2]|0;j=lg(i)|0;g=mg(i)|0;if(j){c=1;h=0;while(1){if(!c)c=0;else c=(Ma[f[g>>2]&63](a,b,e)|0)!=0;h=h+1|0;if((h|0)==(j|0))break;else{g=g+4|0;c=c&1}}ng(i);if(!c){e=0;u=l;return e|0}}else ng(i);g=a+188|0;if(!(kg(f[g>>2]|0,38,e)|0)){e=0;u=l;return e|0}if(!(kg(f[g>>2]|0,39,e)|0)){e=0;u=l;return e|0}if(!(kg(f[g>>2]|0,40,e)|0)){e=0;u=l;return e|0}if(!(kg(f[g>>2]|0,41,e)|0)){e=0;u=l;return e|0}if(!(kg(f[g>>2]|0,42,e)|0)){e=0;u=l;return e|0}if(!(kg(f[g>>2]|0,43,e)|0)){e=0;u=l;return e|0}if(!(kg(f[g>>2]|0,44,e)|0)){e=0;u=l;return e|0}c=a+88|0;if(((d[c>>1]|0)+-3&65535)<4){if(!(kg(f[g>>2]|0,45,e)|0)){e=0;u=l;return e|0}if((d[c>>1]|0)==4?(kg(f[g>>2]|0,46,e)|0)==0:0){e=0;u=l;return e|0}}if(!(kg(f[g>>2]|0,47,e)|0)){e=0;u=l;return e|0}if(f[a+108>>2]|0?(kg(f[g>>2]|0,48,e)|0)==0:0){e=0;u=l;return e|0}if(d[c>>1]&256?(kg(f[g>>2]|0,49,e)|0)==0:0){e=0;u=l;return e|0}if(f[a+196>>2]|0?(kg(f[g>>2]|0,50,e)|0)==0:0){e=0;u=l;return e|0}if(!(kg(f[g>>2]|0,51,e)|0)){e=0;u=l;return e|0}if(!(kg(f[g>>2]|0,52,e)|0)){e=0;u=l;return e|0}j=f[g>>2]|0;i=lg(j)|0;g=mg(j)|0;if(!i)g=1;else{c=g;g=1;h=0;while(1){if(!g)g=0;else g=(Ma[f[c>>2]&63](a,b,e)|0)!=0;g=g&1;h=h+1|0;if((h|0)==(i|0))break;else c=c+4|0}}ng(j);e=g;u=l;return e|0}function fe(a,b,c){a=a|0;b=b|0;c=c|0;return 1}function ge(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=u;u=u+32|0;d=(f[a+8>>2]|0)==0&(f[a+188>>2]|0)!=0&(f[a+192>>2]|0)!=0&1;b=(f[(f[(f[a+164>>2]|0)+5584>>2]|0)+4>>2]|0)+-1|0;if(b>>>0>31){Mb(c,1,16016,e)|0;c=0;u=e;return c|0}b=1<<b;if((f[a+100>>2]|0)>>>0<b>>>0){Mb(c,1,16016,e+8|0)|0;c=0;u=e;return c|0}if((f[a+104>>2]|0)>>>0>=b>>>0){c=d;u=e;return c|0}Mb(c,1,16016,e+16|0)|0;c=0;u=e;return c|0}function he(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,g=0,h=0,i=0,j=0;if((d[a+88>>1]&-32256)<<16>>16!=-32256){j=1;return j|0}i=X(f[a+112>>2]|0,f[a+116>>2]|0)|0;if(!i){j=1;return j|0}j=a+80|0;g=f[a+164>>2]|0;b=1;h=0;while(1){if((f[g+16>>2]|0)==2){b=b&(f[g+5608>>2]|0)!=0;e=f[(f[j>>2]|0)+16>>2]|0;if(e){c=0;a=f[g+5584>>2]|0;while(1){b=(f[a+20>>2]&1^1)&b;c=c+1|0;if(c>>>0>=e>>>0)break;else a=a+1080|0}}}h=h+1|0;if((h|0)==(i|0))break;else g=g+5640|0}return b|0}function ie(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0;h=a+88|0;i=a+32|0;j=f[a+80>>2]|0;g=X(f[a+116>>2]|0,f[a+112>>2]|0)|0;f[i>>2]=0;if(!g)return 1;a=f[a+164>>2]|0;d=0;while(1){Jf(j,h,d);e=a+420|0;b=0;c=0;do{k=Zd(h,b,d)|0;f[i>>2]=(f[i>>2]|0)+k;c=k+c|0;b=b+1|0}while(b>>>0<=(f[e>>2]|0)>>>0);f[a+5588>>2]=c;d=d+1|0;if((d|0)==(g|0))break;else a=a+5640|0}return 1}function je(a,b,c){a=a|0;b=b|0;c=c|0;a=f[a+44>>2]|0;yb(a,65359,2);return (Fb(b,a,2,c)|0)==2|0}function ke(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,k=0,l=0,m=0,n=0,o=0;o=u;u=u+16|0;h=o;i=f[a+80>>2]|0;m=i+16|0;k=(f[m>>2]|0)*3|0;n=k+40|0;g=f[i+24>>2]|0;e=a+48|0;l=a+44|0;d=f[l>>2]|0;do if(n>>>0>(f[e>>2]|0)>>>0){d=Lc(d,n)|0;if(d|0){f[l>>2]=d;f[e>>2]=n;break}Mc(f[l>>2]|0);f[l>>2]=0;f[e>>2]=0;Mb(c,1,15978,h)|0;n=0;u=o;return n|0}while(0);yb(d,65361,2);yb(d+2|0,k+38|0,2);yb(d+4|0,j[a+88>>1]|0,2);yb(d+6|0,f[i+8>>2]|0,4);yb(d+10|0,f[i+12>>2]|0,4);yb(d+14|0,f[i>>2]|0,4);yb(d+18|0,f[i+4>>2]|0,4);yb(d+22|0,f[a+100>>2]|0,4);yb(d+26|0,f[a+104>>2]|0,4);yb(d+30|0,f[a+92>>2]|0,4);yb(d+34|0,f[a+96>>2]|0,4);yb(d+38|0,f[m>>2]|0,2);if(f[m>>2]|0){d=d+40|0;e=0;while(1){yb(d,(f[g+24>>2]|0)+-1+(f[g+32>>2]<<7)|0,1);yb(d+1|0,f[g>>2]|0,1);yb(d+2|0,f[g+4>>2]|0,1);e=e+1|0;if(e>>>0>=(f[m>>2]|0)>>>0)break;else{g=g+52|0;d=d+3|0}}}n=(Fb(b,f[l>>2]|0,n,c)|0)==(n|0)&1;u=o;return n|0}function le(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=u;u=u+32|0;p=q+16|0;o=q+8|0;i=q;j=q+20|0;k=a+164|0;l=f[k>>2]|0;m=a+200|0;n=f[m>>2]|0;d=f[l+(n*5640|0)+5584>>2]|0;if(!(f[d>>2]&1))g=5;else g=(f[d+4>>2]|0)+5|0;h=g+9|0;f[j>>2]=h;e=a+48|0;a=a+44|0;d=f[a>>2]|0;do if(h>>>0>(f[e>>2]|0)>>>0){d=Lc(d,h)|0;if(d|0){f[a>>2]=d;f[e>>2]=h;break}Mc(f[a>>2]|0);f[a>>2]=0;f[e>>2]=0;Mb(c,1,15913,i)|0;p=0;u=q;return p|0}while(0);yb(d,65362,2);yb(d+2|0,g+7|0,2);yb(d+4|0,f[l+(n*5640|0)>>2]|0,1);yb(d+5|0,f[l+(n*5640|0)+4>>2]|0,1);yb(d+6|0,f[l+(n*5640|0)+8>>2]|0,2);yb(d+8|0,f[l+(n*5640|0)+16>>2]|0,1);f[j>>2]=g;if(!(Ae(f[k>>2]|0,f[m>>2]|0,d+9|0,j,c)|0)){Mb(c,1,15952,o)|0;p=0;u=q;return p|0}if(!(f[j>>2]|0)){p=(Fb(b,f[a>>2]|0,h,c)|0)==(h|0)&1;u=q;return p|0}else{Mb(c,1,15952,p)|0;p=0;u=q;return p|0}return 0}function me(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;o=u;u=u+32|0;n=o+16|0;m=o+8|0;i=o;k=o+20|0;l=a+200|0;j=a+164|0;d=f[(f[j>>2]|0)+((f[l>>2]|0)*5640|0)+5584>>2]|0;e=f[d+24>>2]|0;if((e|0)==1)d=1;else d=((f[d+4>>2]|0)*3|0)+-2|0;g=(e|0)==0?d+1|0:d<<1|1;h=g+4|0;f[k>>2]=h;e=a+48|0;a=a+44|0;d=f[a>>2]|0;do if(h>>>0>(f[e>>2]|0)>>>0){d=Lc(d,h)|0;if(d|0){f[a>>2]=d;f[e>>2]=h;break}Mc(f[a>>2]|0);f[a>>2]=0;f[e>>2]=0;Mb(c,1,15848,i)|0;n=0;u=o;return n|0}while(0);yb(d,65372,2);yb(d+2|0,g+2|0,2);f[k>>2]=g;if(!(ze(f[j>>2]|0,f[l>>2]|0,0,d+4|0,k,c)|0)){Mb(c,1,15887,m)|0;n=0;u=o;return n|0}if(!(f[k>>2]|0)){n=(Fb(b,f[a>>2]|0,h,c)|0)==(h|0)&1;u=o;return n|0}else{Mb(c,1,15887,n)|0;n=0;u=o;return n|0}return 0}function ne(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0;w=u;u=u+16|0;t=w;q=w+4|0;r=a+80|0;d=f[(f[r>>2]|0)+16>>2]|0;if(d>>>0<=1){v=1;u=w;return v|0}n=a+164|0;o=a+200|0;s=a+48|0;m=a+44|0;l=1;a=d;while(1){e=f[n>>2]|0;h=f[o>>2]|0;g=f[e+(h*5640|0)+5584>>2]|0;i=f[g+(l*1080|0)>>2]|0;a:do if((((((f[g>>2]|0)==(i|0)?(p=f[g+4>>2]|0,(p|0)==(f[g+(l*1080|0)+4>>2]|0)):0)?(f[g+8>>2]|0)==(f[g+(l*1080|0)+8>>2]|0):0)?(f[g+12>>2]|0)==(f[g+(l*1080|0)+12>>2]|0):0)?(f[g+16>>2]|0)==(f[g+(l*1080|0)+16>>2]|0):0)?(f[g+20>>2]|0)==(f[g+(l*1080|0)+20>>2]|0):0){if(p){d=0;do{if((f[g+812+(d<<2)>>2]|0)!=(f[g+(l*1080|0)+812+(d<<2)>>2]|0)){v=13;break a}if((f[g+944+(d<<2)>>2]|0)!=(f[g+(l*1080|0)+944+(d<<2)>>2]|0)){v=13;break a}d=d+1|0}while(d>>>0<p>>>0)}}else v=13;while(0);if((v|0)==13){v=0;if(!(i&1))d=5;else d=(f[g+(l*1080|0)+4>>2]|0)+5|0;k=d+(a>>>0<257?6:7)|0;d=f[m>>2]|0;if(k>>>0>(f[s>>2]|0)>>>0){d=Lc(d,k)|0;if(!d){v=17;break}f[m>>2]=d;f[s>>2]=k;j=f[n>>2]|0;h=f[o>>2]|0;g=f[j+(h*5640|0)+5584>>2]|0;a=f[(f[r>>2]|0)+16>>2]|0;i=f[g+(l*1080|0)>>2]|0}else j=e;e=a>>>0<257?1:2;if(!(i&1))a=5;else a=(f[g+(l*1080|0)+4>>2]|0)+5|0;yb(d,65363,2);yb(d+2|0,e+3+a|0,2);i=d+4|0;yb(i,l,e);i=i+e|0;yb(i,f[(f[j+(h*5640|0)+5584>>2]|0)+(l*1080|0)>>2]|0,1);f[q>>2]=a;Ae(f[n>>2]|0,f[o>>2]|0,i+1|0,q,c)|0;if((Fb(b,f[m>>2]|0,k,c)|0)!=(k|0)){a=0;v=24;break}a=f[(f[r>>2]|0)+16>>2]|0}l=l+1|0;if(l>>>0>=a>>>0){a=1;v=24;break}}if((v|0)==17){Mc(f[m>>2]|0);f[m>>2]=0;f[s>>2]=0;Mb(c,1,15774,t)|0;v=0;u=w;return v|0}else if((v|0)==24){u=w;return a|0}return 0}
function oe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=u;u=u+16|0;r=t;o=t+4|0;p=a+80|0;d=f[(f[p>>2]|0)+16>>2]|0;if(d>>>0<=1){s=1;u=t;return s|0}m=a+164|0;n=a+200|0;q=a+48|0;l=a+44|0;k=1;a=d;while(1){i=f[(f[m>>2]|0)+((f[n>>2]|0)*5640|0)+5584>>2]|0;g=f[i+24>>2]|0;h=f[i+(k*1080|0)+24>>2]|0;a:do if((g|0)==(h|0)?(f[i+804>>2]|0)==(f[i+(k*1080|0)+804>>2]|0):0){if((g|0)!=1){j=(f[i+4>>2]|0)*3|0;d=j+-2|0;if((j|0)!=((f[i+(k*1080|0)+4>>2]|0)*3|0)){s=14;break}if(!d)break;else e=d}else e=1;d=0;do{if((f[i+28+(d<<3)>>2]|0)!=(f[i+(k*1080|0)+28+(d<<3)>>2]|0)){s=14;break a}d=d+1|0}while(d>>>0<e>>>0);if(g){d=0;do{if((f[i+28+(d<<3)+4>>2]|0)!=(f[i+(k*1080|0)+28+(d<<3)+4>>2]|0)){s=14;break a}d=d+1|0}while(d>>>0<e>>>0)}}else s=14;while(0);if((s|0)==14){s=0;if((h|0)==1)d=1;else d=((f[i+(k*1080|0)+4>>2]|0)*3|0)+-2|0;j=((h|0)==0?d+1|0:d<<1|1)+5+(a>>>0>256&1)|0;a=f[l>>2]|0;if(j>>>0>(f[q>>2]|0)>>>0){a=Lc(a,j)|0;if(!a){s=18;break}f[l>>2]=a;f[q>>2]=j;d=f[(f[m>>2]|0)+((f[n>>2]|0)*5640|0)+5584>>2]|0;e=f[d+(k*1080|0)+24>>2]|0;g=a}else{e=h;d=i;g=a}if((e|0)==1)a=1;else a=((f[d+(k*1080|0)+4>>2]|0)*3|0)+-2|0;d=(e|0)==0?a+1|0:a<<1|1;f[o>>2]=d+6;yb(g,65373,2);a=g+2|0;if((f[(f[p>>2]|0)+16>>2]|0)>>>0<257){yb(a,d+3|0,2);yb(g+4|0,k,1);a=5}else{yb(a,d+4|0,2);yb(g+4|0,k,2);a=6}f[o>>2]=d;ze(f[m>>2]|0,f[n>>2]|0,k,g+a|0,o,c)|0;if((Fb(b,f[l>>2]|0,j,c)|0)!=(j|0)){a=0;s=28;break}a=f[(f[p>>2]|0)+16>>2]|0}k=k+1|0;if(k>>>0>=a>>>0){a=1;s=28;break}}if((s|0)==18){Mc(f[l>>2]|0);f[l>>2]=0;f[q>>2]=0;Mb(c,1,15702,r)|0;s=0;u=t;return s|0}else if((s|0)==28){u=t;return a|0}return 0}function pe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0;k=u;u=u+16|0;g=k;i=(f[a+32>>2]|0)*5|0;j=i+6|0;e=a+48|0;h=a+44|0;d=f[h>>2]|0;do if(j>>>0>(f[e>>2]|0)>>>0){d=Lc(d,j)|0;if(d|0){f[h>>2]=d;f[e>>2]=j;break}Mc(f[h>>2]|0);f[h>>2]=0;f[e>>2]=0;Mb(c,1,15663,g)|0;j=0;u=k;return j|0}while(0);g=Hb(b)|0;a=a+16|0;f[a>>2]=g;f[a+4>>2]=I;yb(d,65365,2);yb(d+2|0,i+4|0,2);yb(d+4|0,0,1);yb(d+5|0,80,1);j=(Fb(b,f[h>>2]|0,j,c)|0)==(j|0)&1;u=k;return j|0}function qe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=u;u=u+16|0;j=p;o=p+4|0;f[o>>2]=0;k=a+164|0;e=f[k>>2]|0;l=a+200|0;d=f[l>>2]|0;i=a+80|0;g=f[(f[i>>2]|0)+16>>2]|0;n=(X(g>>>0<257?7:9,(f[e+(d*5640|0)+420>>2]|0)+1|0)|0)+4|0;h=a+48|0;m=a+44|0;a=f[m>>2]|0;do if(n>>>0>(f[h>>2]|0)>>>0){a=Lc(a,n)|0;if(a|0){f[m>>2]=a;f[h>>2]=n;g=f[(f[i>>2]|0)+16>>2]|0;e=f[k>>2]|0;d=f[l>>2]|0;break}Mc(f[m>>2]|0);f[m>>2]=0;f[h>>2]=0;Mb(c,1,15624,j)|0;o=0;u=p;return o|0}while(0);Yd(g,e,d,a,o);o=(Fb(b,f[m>>2]|0,n,c)|0)==(n|0)&1;u=p;return o|0}function re(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0;j=a+164|0;k=a+80|0;e=f[k>>2]|0;d=f[e+16>>2]|0;if(!d){k=1;return k|0}i=a+44|0;g=0;h=f[(f[j>>2]|0)+5584>>2]|0;a=e;while(1){if(f[h+808>>2]|0){a=f[(f[j>>2]|0)+5584>>2]|0;d=d>>>0<257?1:2;e=d+6|0;l=f[i>>2]|0;yb(l,65374,2);yb(l+2|0,d|4,2);l=l+4|0;yb(l,g,d);d=l+d|0;yb(d,0,1);yb(d+1|0,f[a+(g*1080|0)+808>>2]|0,1);if((Fb(b,f[i>>2]|0,e,c)|0)!=(e|0)){a=0;d=7;break}a=f[k>>2]|0}g=g+1|0;d=f[a+16>>2]|0;if(g>>>0>=d>>>0){a=1;d=7;break}else h=h+1080|0}if((d|0)==7)return a|0;return 0}function se(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0;k=u;u=u+16|0;g=k;h=f[a+108>>2]|0;i=Kh(h)|0;j=i+6|0;e=a+48|0;d=a+44|0;a=f[d>>2]|0;do if(j>>>0>(f[e>>2]|0)>>>0){a=Lc(a,j)|0;if(a|0){f[d>>2]=a;f[e>>2]=j;break}Mc(f[d>>2]|0);f[d>>2]=0;f[e>>2]=0;Mb(c,1,15581,g)|0;j=0;u=k;return j|0}while(0);yb(a,65380,2);yb(a+2|0,i+4|0,2);yb(a+4|0,1,2);hj(a+6|0,h|0,i|0)|0;j=(Fb(b,f[d>>2]|0,j,c)|0)==(j|0)&1;u=k;return j|0}function te(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0;x=u;u=u+32|0;v=x+24|0;r=x+16|0;n=x+8|0;g=x;h=f[a+80>>2]|0;j=h+16|0;i=f[j>>2]|0;k=i+6|0;t=a+48|0;w=a+44|0;e=f[w>>2]|0;do if(k>>>0>(f[t>>2]|0)>>>0){e=Lc(e,k)|0;if(e|0){f[w>>2]=e;f[t>>2]=k;break}Mc(f[w>>2]|0);f[w>>2]=0;f[t>>2]=0;Mb(d,1,15425,g)|0;d=0;u=x;return d|0}while(0);yb(e,65400,2);yb(e+2|0,i+4|0,2);yb(e+4|0,f[j>>2]|0,2);if(f[j>>2]|0){h=f[h+24>>2]|0;e=e+6|0;g=0;while(1){yb(e,(f[h+24>>2]|0)+-1|f[h+32>>2]<<7,1);g=g+1|0;if(g>>>0>=(f[j>>2]|0)>>>0)break;else{h=h+52|0;e=e+1|0}}}if((Fb(c,f[w>>2]|0,k,d)|0)!=(k|0)){d=0;u=x;return d|0}o=a+164|0;m=f[o>>2]|0;p=a+200|0;l=f[p>>2]|0;i=m+(l*5640|0)+5616|0;a:do if(f[i>>2]|0){g=f[m+(l*5640|0)+5612>>2]|0;h=0;while(1){j=g+16|0;k=f[j>>2]|0;a=k+10|0;e=f[w>>2]|0;if(a>>>0>(f[t>>2]|0)>>>0){e=Lc(e,a)|0;if(!e)break;f[w>>2]=e;f[t>>2]=a}yb(e,65396,2);yb(e+2|0,k+8|0,2);yb(e+4|0,0,2);yb(e+6|0,f[g+4>>2]<<8|f[g+8>>2]&255|f[g>>2]<<10,2);yb(e+8|0,0,2);hj(e+10|0,f[g+12>>2]|0,f[j>>2]|0)|0;if((Fb(c,f[w>>2]|0,a,d)|0)!=(a|0)){q=0;s=41;break}h=h+1|0;if(h>>>0>=(f[i>>2]|0)>>>0)break a;else g=g+20|0}if((s|0)==41){u=x;return q|0}Mc(f[w>>2]|0);f[w>>2]=0;f[t>>2]=0;Mb(d,1,15464,n)|0;d=0;u=x;return d|0}while(0);n=m+(l*5640|0)+5628|0;b:do if(f[n>>2]|0){a=f[m+(l*5640|0)+5624>>2]|0;l=0;while(1){k=a+4|0;g=f[k>>2]|0;i=g>>>0>255;j=i?2:1;i=i?32768:0;g=X(j,g<<1)|0;m=g+19|0;e=f[w>>2]|0;if(m>>>0>(f[t>>2]|0)>>>0){e=Lc(e,m)|0;if(!e)break;f[w>>2]=e;f[t>>2]=m}yb(e,65397,2);yb(e+2|0,g+17|0,2);yb(e+4|0,0,2);yb(e+6|0,f[a>>2]|0,1);yb(e+7|0,0,2);yb(e+9|0,1,2);yb(e+11|0,1,1);yb(e+12|0,f[k>>2]|i,2);e=e+14|0;if(!(f[k>>2]|0))g=0;else{h=0;do{yb(e,h,j);e=e+j|0;h=h+1|0;g=f[k>>2]|0}while(h>>>0<g>>>0)}yb(e,g|i,2);e=e+2|0;if(!(f[k>>2]|0))h=e;else{g=0;do{yb(e,g,j);e=e+j|0;g=g+1|0}while(g>>>0<(f[k>>2]|0)>>>0);h=e}e=((b[a+16>>0]&1^1)&255)<<16;g=f[a+8>>2]|0;if(g)e=f[g+8>>2]|e;g=f[a+12>>2]|0;if(g)e=f[g+8>>2]<<8|e;yb(h,e,3);if((Fb(c,f[w>>2]|0,m,d)|0)!=(m|0)){q=0;s=41;break}l=l+1|0;if(l>>>0>=(f[n>>2]|0)>>>0)break b;else a=a+20|0}if((s|0)==41){u=x;return q|0}Mc(f[w>>2]|0);f[w>>2]=0;f[t>>2]=0;Mb(d,1,15503,r)|0;d=0;u=x;return d|0}while(0);j=f[o>>2]|0;i=f[p>>2]|0;k=j+(i*5640|0)+5628|0;g=f[k>>2]|0;a=g+5|0;e=f[w>>2]|0;do if(a>>>0>(f[t>>2]|0)>>>0){e=Lc(e,a)|0;if(e|0){f[w>>2]=e;f[t>>2]=a;break}Mc(f[w>>2]|0);f[w>>2]=0;f[t>>2]=0;Mb(d,1,15542,v)|0;d=0;u=x;return d|0}while(0);yb(e,65399,2);yb(e+2|0,g+3|0,2);yb(e+4|0,f[k>>2]|0,1);if(f[k>>2]|0){h=0;g=f[j+(i*5640|0)+5624>>2]|0;e=e+5|0;while(1){yb(e,f[g>>2]|0,1);h=h+1|0;if(h>>>0>=(f[k>>2]|0)>>>0)break;else{g=g+20|0;e=e+1|0}}}d=(Fb(c,f[w>>2]|0,a,d)|0)==(a|0)&1;u=x;return d|0}function ue(a,b,c){a=a|0;b=b|0;c=c|0;b=Hb(b)|0;c=(f[a+196>>2]|0)+8|0;f[c>>2]=b;f[c+4>>2]=I;return 1}function ve(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=u;u=u+16|0;b=Lf(0)|0;d=a+204|0;f[d>>2]=b;if(!b){Mb(c,1,15385,e)|0;c=0;u=e;return c|0}if(Pf(b,f[a+80>>2]|0,a+88|0)|0){c=1;u=e;return c|0}Qf(f[d>>2]|0);f[d>>2]=0;c=0;u=e;return c|0}function we(a,c,e){a=a|0;c=c|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0.0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0.0,w=0.0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0.0,G=0,H=0,J=0.0,K=0.0,L=0.0,M=0.0,N=0,O=0,P=0,Q=0,R=0,S=0;P=a+80|0;E=f[P>>2]|0;S=a+164|0;h=f[S>>2]|0;O=E+24|0;D=f[O>>2]|0;g=f[D>>2]|0;e=f[D+4>>2]|0;G=E+16|0;D=X(f[D+24>>2]|0,f[G>>2]|0)|0;C=Hb(c)|0;Q=a+116|0;c=f[Q>>2]|0;R=a+112|0;i=f[R>>2]|0;F=(+(C>>>0)+4294967296.0*+(I|0))/+((X(i,c)|0)>>>0);C=(b[a+181>>0]&8)==0?1:2;if(c|0){s=a+92|0;u=a+100|0;x=a+96|0;y=a+104|0;z=E+4|0;A=E+8|0;B=E+12|0;w=+((X(g<<3,e)|0)>>>0);p=0;g=i;e=i;while(1){o=p;p=p+1|0;if(!e){r=c;q=g;e=0}else{l=0;do{v=+Ja[C&3](h);k=f[h+8>>2]|0;v=v/+(k>>>0);r=f[s>>2]|0;g=f[u>>2]|0;j=(X(g,l)|0)+r|0;e=f[E>>2]|0;e=(j|0)>(e|0)?j:e;j=f[x>>2]|0;i=f[y>>2]|0;q=(X(i,o)|0)+j|0;c=f[z>>2]|0;c=(q|0)>(c|0)?q:c;l=l+1|0;r=(X(g,l)|0)+r|0;g=f[A>>2]|0;g=(r|0)<(g|0)?r:g;j=(X(i,p)|0)+j|0;i=f[B>>2]|0;i=(j|0)<(i|0)?j:i;j=h+20|0;m=+n[j>>2];if(m>0.0){t=+((X(X(g-e|0,D)|0,i-c|0)|0)>>>0)/(m*w)-v;n[j>>2]=t}if(k>>>0>1){m=+((X(X(g-e|0,D)|0,i-c|0)|0)>>>0);e=h+24|0;c=1;while(1){t=+n[e>>2];if(t>0.0)n[e>>2]=m/(t*w)-v;c=c+1|0;if(c>>>0>=k>>>0)break;else e=e+4|0}}h=h+5640|0;e=f[R>>2]|0}while(l>>>0<e>>>0);r=f[Q>>2]|0;q=e}if(p>>>0>=r>>>0)break;else{g=q;c=r}}if(r|0?(K=F+2.0,q|0):0){l=0;e=f[S>>2]|0;while(1){o=0;p=e;k=e+16|0;while(1){e=p+20|0;m=+n[e>>2];if(m>0.0?(w=m-F,n[e>>2]=w,w<30.0):0)n[e>>2]=30.0;c=p+24|0;e=f[p+8>>2]|0;j=e+-1|0;m=+n[c>>2];h=m>0.0;if(j>>>0>1){i=k+(e<<2)|0;g=1;e=h;do{if(e?(w=m-F,n[c>>2]=w,M=+n[c+-4>>2],w<M+10.0):0)n[c>>2]=M+20.0;c=c+4|0;g=g+1|0;m=+n[c>>2];e=m>0.0}while((g|0)!=(j|0));if(e){H=i;J=m;N=25}}else if(h){H=c;J=m;N=25}if((N|0)==25?(N=0,w=J-K,n[H>>2]=w,L=+n[H+-4>>2],w<L+10.0):0)n[H>>2]=L+20.0;p=p+5640|0;o=o+1|0;if(o>>>0>=q>>>0)break;else k=k+5640|0}l=l+1|0;if(l>>>0>=r>>>0)break;else e=p}}}h=f[G>>2]|0;if(!h)u=0;else{i=(f[a+100>>2]|0)+-1|0;j=(f[a+104>>2]|0)+-1|0;g=0;e=f[O>>2]|0;c=0;while(1){O=f[e>>2]|0;N=f[e+4>>2]|0;O=X(((j+N|0)>>>0)/(N>>>0)|0,((i+O|0)>>>0)/(O>>>0)|0)|0;g=(X(O,f[e+24>>2]|0)|0)+g|0;c=c+1|0;if(c>>>0>=h>>>0)break;else e=e+52|0}u=~~(+(g>>>0)*.1625)>>>0}o=f[(f[P>>2]|0)+16>>2]|0;r=o+-1|0;e=f[S>>2]|0;s=X(f[Q>>2]|0,f[R>>2]|0)|0;p=(s|0)==0;if(p)h=0;else{c=0;g=0;h=e;while(1){S=f[h+5588>>2]|0;c=c>>>0>S>>>0?c:S;g=g+1|0;if((g|0)==(s|0))break;else h=h+5640|0}h=c*12|0}q=a+88|0;if(((d[q>>1]|0)+-3&65535)>=4){if((o|0)==0|p){g=6;c=6}else{i=0;c=0;do{k=f[e+(i*5640|0)+5584>>2]|0;j=0;do{if(!(f[k+(j*1080|0)>>2]&1))g=5;else g=(f[k+(j*1080|0)+4>>2]|0)+5|0;c=c>>>0>g>>>0?c:g;j=j+1|0}while((j|0)!=(o|0));i=i+1|0}while((i|0)!=(s|0));c=c+6|0;j=0;g=0;do{l=f[e+(j*5640|0)+5584>>2]|0;k=0;do{if(!(f[l+(k*1080|0)>>2]&1))i=5;else i=(f[l+(k*1080|0)+4>>2]|0)+5|0;g=g>>>0>i>>>0?g:i;k=k+1|0}while((k|0)!=(o|0));j=j+1|0}while((j|0)!=(s|0));g=g+6|0}h=(X(g+c|0,r)|0)+h|0}if(p)e=13;else{g=0;c=0;while(1){S=f[e+420>>2]|0;g=g>>>0>S>>>0?g:S;c=c+1|0;if((c|0)==(s|0))break;else e=e+5640|0}e=(g*9|0)+13|0}S=h+u+e|0;f[a+40>>2]=S;S=Hc(S)|0;f[a+36>>2]=S;if(!S){a=0;return a|0}if(((d[q>>1]|0)+-3&65535)>=4){a=1;return a|0}e=Hc((f[a+32>>2]|0)*5|0)|0;f[a+24>>2]=e;if(!e){a=0;return a|0}f[a+28>>2]=e;a=1;return a|0}function xe(a){a=a|0;return 0.0}function ye(a){a=a|0;return +(+((((f[a+5588>>2]|0)*14|0)+-14|0)>>>0))}function ze(a,b,c,d,e,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0;m=u;u=u+16|0;j=m+8|0;i=m;k=f[a+(b*5640|0)+5584>>2]|0;b=f[k+(c*1080|0)+24>>2]|0;do if((b|0)!=1){a=(f[k+(c*1080|0)+4>>2]|0)*3|0;h=a+-2|0;if(!b){a=a+-1|0;if((f[e>>2]|0)>>>0<a>>>0){Mb(g,1,15741,i)|0;e=0;u=m;return e|0}else{yb(d,f[k+(c*1080|0)+804>>2]<<5,1);if(!h)break;else b=0;do{d=d+1|0;yb(d,f[k+(c*1080|0)+28+(b<<3)>>2]<<3,1);b=b+1|0}while((b|0)!=(h|0))}}else l=7}else{h=1;b=1;l=7}while(0);if((l|0)==7){a=h<<1|1;if((f[e>>2]|0)>>>0<a>>>0){Mb(g,1,15741,j)|0;e=0;u=m;return e|0}yb(d,(f[k+(c*1080|0)+804>>2]<<5)+b|0,1);if(h){d=d+1|0;b=0;while(1){yb(d,(f[k+(c*1080|0)+28+(b<<3)>>2]<<11)+(f[k+(c*1080|0)+28+(b<<3)+4>>2]|0)|0,2);b=b+1|0;if((b|0)==(h|0))break;else d=d+2|0}}}f[e>>2]=(f[e>>2]|0)-a;e=1;u=m;return e|0}function Ae(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0;i=u;u=u+16|0;g=f[a+(b*5640|0)+5584>>2]|0;if((f[d>>2]|0)>>>0<5){Mb(e,1,15813,i)|0;d=0;u=i;return d|0}h=g+4|0;yb(c,(f[h>>2]|0)+-1|0,1);yb(c+1|0,(f[g+8>>2]|0)+-2|0,1);yb(c+2|0,(f[g+12>>2]|0)+-2|0,1);yb(c+3|0,f[g+16>>2]|0,1);yb(c+4|0,f[g+20>>2]|0,1);a=(f[d>>2]|0)+-5|0;f[d>>2]=a;if(!(f[g>>2]&1)){d=1;u=i;return d|0}b=f[h>>2]|0;if(a>>>0<b>>>0){Mb(e,1,15813,i+8|0)|0;d=0;u=i;return d|0}if(!b)b=0;else{a=c+5|0;c=0;while(1){yb(a,(f[g+944+(c<<2)>>2]<<4)+(f[g+812+(c<<2)>>2]|0)|0,1);c=c+1|0;b=f[h>>2]|0;if(c>>>0>=b>>>0)break;else a=a+1|0}a=f[d>>2]|0}f[d>>2]=a-b;d=1;u=i;return d|0}function Be(a,b,c,d,e,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;o=u;u=u+48|0;m=o+40|0;n=o+32|0;l=o+24|0;j=o+16|0;h=o+8|0;i=a+200|0;if((f[i>>2]|0)!=(b|0)){Mb(g,1,15150,o)|0;f[j>>2]=b;Mb(g,1,16086,j)|0;u=o;return 0}k=X(f[a+116>>2]|0,f[a+112>>2]|0)|0;f[h>>2]=b+1;f[h+4>>2]=k;Mb(g,4,15187,h)|0;f[a+12>>2]=0;k=a+204|0;h=f[k>>2]|0;f[h+12>>2]=f[(f[a+164>>2]|0)+(b*5640|0)+5588>>2];f[a+8>>2]=0;if(!(Uf(h,f[i>>2]|0,g)|0)){f[j>>2]=b;Mb(g,1,16086,j)|0;u=o;return 0}h=f[k>>2]|0;a:do if(f[(f[h+24>>2]|0)+16>>2]|0){i=0;while(1){if(!(Tf((f[(f[f[h+20>>2]>>2]|0)+20>>2]|0)+(i*52|0)|0)|0))break;i=i+1|0;h=f[k>>2]|0;if(i>>>0>=(f[(f[h+24>>2]|0)+16>>2]|0)>>>0)break a}Mb(g,1,15208,l)|0;n=0;u=o;return n|0}while(0);if(!(ag(h,c,d)|0)){Mb(g,1,15285,n)|0;n=0;u=o;return n|0}if(Xd(a,e,g)|0){n=1;u=o;return n|0}f[m>>2]=b;Mb(g,1,16143,m)|0;n=0;u=o;return n|0}function Ce(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0;i=u;u=u+16|0;if(!c){c=0;u=i;return c|0}if(!(Qd(f[a>>2]|0,b,c,d)|0)){Mb(d,1,16201,i)|0;c=0;u=i;return c|0}if(f[a+128>>2]|0){c=1;u=i;return c|0}h=a+108|0;if(!(De(c,h,d)|0)){c=0;u=i;return c|0}b=f[a+48>>2]|0;switch(b|0){case 16:{f[c+20>>2]=1;break}case 17:{f[c+20>>2]=2;break}case 18:{f[c+20>>2]=3;break}case 24:{f[c+20>>2]=4;break}default:f[c+20>>2]=(b|0)==12?5:-1}g=a+120|0;b=f[g>>2]|0;do if(b|0){if(f[b+12>>2]|0){Ee(c,h);break}Mc(f[b+4>>2]|0);Mc(f[(f[g>>2]|0)+8>>2]|0);Mc(f[f[g>>2]>>2]|0);b=f[g>>2]|0;e=f[b+12>>2]|0;if(e){Mc(e);b=f[g>>2]|0}Mc(b);f[g>>2]=0}while(0);if(f[a+116>>2]|0)Fe(c,h,d);b=f[h>>2]|0;if(!b){c=1;u=i;return c|0}f[c+28>>2]=b;f[c+32>>2]=f[a+112>>2];f[h>>2]=0;c=1;u=i;return c|0}function De(a,c,e){a=a|0;c=c|0;e=e|0;var g=0,i=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;B=u;u=u+80|0;A=B+72|0;z=B+64|0;y=B+56|0;x=B+48|0;w=B+40|0;v=B+32|0;t=B+24|0;q=B+16|0;n=B+8|0;m=B;g=f[c+8>>2]|0;a:do if(!g)g=f[c+12>>2]|0;else{p=f[g>>2]|0;o=d[g+4>>1]|0;i=f[a+16>>2]|0;g=f[c+12>>2]|0;if((g|0)!=0?(f[g+12>>2]|0)!=0:0)i=h[g+18>>0]|0;b:do if(!(o<<16>>16)){if(!i)break a}else{l=0;c:while(1){c=l&65535;k=j[p+(c*6|0)>>1]|0;if(i>>>0<=k>>>0){l=14;break}c=d[p+(c*6|0)+4>>1]|0;switch(c<<16>>16){case 0:case -1:break;default:{c=(c&65535)+-1|0;if(c>>>0>=i>>>0){l=17;break c}}}l=l+1<<16>>16;if((l&65535)>=(o&65535)){l=8;break}}if((l|0)==8)while(1){i=i+-1|0;c=0;do{if((i|0)==(j[p+((c&65535)*6|0)>>1]|0))break;c=c+1<<16>>16}while((c&65535)<(o&65535));if(c<<16>>16==o<<16>>16)break b;if(!i)break a;else l=8}else if((l|0)==14){f[m>>2]=k;f[m+4>>2]=i;Mb(e,1,16331,m)|0;A=0;u=B;return A|0}else if((l|0)==17){f[n>>2]=c;f[n+4>>2]=i;Mb(e,1,16331,n)|0;A=0;u=B;return A|0}}while(0);Mb(e,1,16368,q)|0;A=0;u=B;return A|0}while(0);if(!g){A=1;u=B;return A|0}s=f[g+12>>2]|0;if(!s){A=1;u=B;return A|0}o=b[g+18>>0]|0;r=o&255;q=o<<24>>24==0;if(q)g=1;else{l=a+16|0;g=1;k=0;c=0;do{c=j[s+(c<<2)>>1]|0;i=f[l>>2]|0;if(i>>>0<=c>>>0){f[t>>2]=c;f[t+4>>2]=i;Mb(e,1,16331,t)|0;g=0}k=k+1<<16>>16;c=k&65535}while(c>>>0<r>>>0)}p=Ic(r,4)|0;if(!p){Mb(e,1,16401,v)|0;A=0;u=B;return A|0}if(!q){m=0;n=0;do{i=b[s+(n<<2)+3>>0]|0;k=i&255;do if((i&255)<(o&255)){l=p+(k<<2)|0;c=b[s+(n<<2)+2>>0]|0;if((f[l>>2]|0)!=0&c<<24>>24==1){f[x>>2]=k;Mb(e,1,16474,x)|0;g=0;break}if(c<<24>>24!=0|i<<24>>24==0){f[l>>2]=1;break}else{f[y>>2]=n;f[y+4>>2]=k;Mb(e,1,16505,y)|0;g=0;break}}else{f[w>>2]=k;Mb(e,1,16418,w)|0;g=0}while(0);m=m+1<<16>>16;n=m&65535}while(n>>>0<r>>>0);if(!q){i=0;c=0;do{if((f[p+(c<<2)>>2]|0)==0?(b[s+(c<<2)+2>>0]|0)!=0:0){f[z>>2]=c;Mb(e,1,16541,z)|0;g=0}i=i+1<<16>>16;c=i&65535}while(c>>>0<r>>>0)}}if(!g){Mc(p);A=0;u=B;return A|0}d:do if(!((f[a+16>>2]|0)!=1|q)){c=0;g=0;while(1){c=c+1<<16>>16;if(!(f[p+(g<<2)>>2]|0))break;g=c&65535;if(g>>>0>=r>>>0)break d}f[A>>2]=g;Mb(e,2,16579,A)|0;g=0;c=0;do{b[s+(c<<2)+2>>0]=1;b[s+(c<<2)+3>>0]=g;g=g+1<<16>>16;c=g&65535}while(c>>>0<r>>>0)}while(0);Mc(p);A=1;u=B;return A|0}function Ee(a,c){a=a|0;c=c|0;var e=0,g=0,i=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=c+12|0;c=f[w>>2]|0;m=f[c+8>>2]|0;n=f[c+4>>2]|0;r=f[c>>2]|0;q=f[c+12>>2]|0;c=b[c+18>>0]|0;s=a+24|0;t=f[s>>2]|0;u=c&255;v=Hc(u*52|0)|0;if(!v)return;o=c<<24>>24==0;if(!o){k=0;l=0;do{c=d[q+(l<<2)>>1]|0;if(!(b[q+(l<<2)+2>>0]|0)){c=c&65535;e=v+(l*52|0)|0;g=t+(c*52|0)|0;i=e+52|0;do{f[e>>2]=f[g>>2];e=e+4|0;g=g+4|0}while((e|0)<(i|0))}else{c=c&65535;e=v+((h[q+(l<<2)+3>>0]|0)*52|0)|0;g=t+(c*52|0)|0;i=e+52|0;do{f[e>>2]=f[g>>2];e=e+4|0;g=g+4|0}while((e|0)<(i|0))}i=Hc(X(f[t+(c*52|0)+8>>2]<<2,f[t+(c*52|0)+12>>2]|0)|0)|0;f[v+(l*52|0)+44>>2]=i;if(!i){p=7;break}f[v+(l*52|0)+24>>2]=h[m+l>>0];f[v+(l*52|0)+32>>2]=h[n+l>>0];k=k+1<<16>>16;l=k&65535}while(l>>>0<u>>>0);if((p|0)==7){Mc(v);return}m=j[(f[w>>2]|0)+16>>1]|0;n=m+-1|0;if(!o){i=0;c=0;do{k=f[t+((j[q+(c<<2)>>1]|0)*52|0)+44>>2]|0;g=h[q+(c<<2)+3>>0]|0;l=X(f[v+(g*52|0)+12>>2]|0,f[v+(g*52|0)+8>>2]|0)|0;if(!(b[q+(c<<2)+2>>0]|0)){e=f[v+(c*52|0)+44>>2]|0;if(l|0){c=0;do{f[e+(c<<2)>>2]=f[k+(c<<2)>>2];c=c+1|0}while((c|0)!=(l|0))}}else{e=f[v+(g*52|0)+44>>2]|0;if(l|0){c=0;do{p=f[k+(c<<2)>>2]|0;p=r+((X((p|0)<0?0:(p|0)<(m|0)?p:n,u)|0)+g<<2)|0;f[e+(c<<2)>>2]=f[p>>2];c=c+1|0}while((c|0)!=(l|0))}}i=i+1<<16>>16;c=i&65535}while(c>>>0<u>>>0)}}g=a+16|0;i=f[g>>2]|0;if(i|0){e=0;c=0;do{c=f[t+(c*52|0)+44>>2]|0;if(c|0)Mc(c);e=e+1<<16>>16;c=e&65535}while(i>>>0>c>>>0)}Mc(t);f[s>>2]=v;f[g>>2]=u;Mc(f[(f[w>>2]|0)+4>>2]|0);Mc(f[(f[w>>2]|0)+8>>2]|0);Mc(f[f[w>>2]>>2]|0);c=f[w>>2]|0;e=f[c+12>>2]|0;if(e){Mc(e);c=f[w>>2]|0}Mc(c);f[w>>2]=0;return}function Fe(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;B=u;u=u+80|0;y=B+8|0;x=B;w=B+16|0;A=b+8|0;e=f[A>>2]|0;b=f[e>>2]|0;v=d[e+4>>1]|0;if(v<<16>>16){t=a+16|0;m=a+24|0;s=v&65535;q=1;r=0;while(1){n=d[b+(r*6|0)>>1]|0;o=n&65535;a=f[t>>2]|0;a:do if(a>>>0>o>>>0){e=d[b+(r*6|0)+4>>1]|0;switch(e<<16>>16){case -1:case 0:{d[(f[m>>2]|0)+(o*52|0)+48>>1]=d[b+(r*6|0)+2>>1]|0;break a}default:{}}p=(e&65535)+65535&65535;l=e+-1<<16>>16;j=l&65535;if(a>>>0<=j>>>0){f[y>>2]=j;f[y+4>>2]=a;Mb(c,2,16290,y)|0;break}k=b+(r*6|0)+2|0;if(n<<16>>16!=l<<16>>16?(d[k>>1]|0)==0:0){e=f[m>>2]|0;a=e+(o*52|0)|0;g=w;h=a;i=g+52|0;do{f[g>>2]=f[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=a;h=e+(j*52|0)|0;i=g+52|0;do{f[g>>2]=f[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=(f[m>>2]|0)+(j*52|0)|0;h=w;i=g+52|0;do{f[g>>2]=f[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));if((v&65535)>(r+1&65535)){g=q;do{a=b+(g*6|0)|0;e=d[a>>1]|0;if(e<<16>>16!=n<<16>>16){if(e<<16>>16==l<<16>>16){e=n;z=14}}else{e=p;z=14}if((z|0)==14){z=0;d[a>>1]=e}g=g+1|0}while(v<<16>>16!=(g&65535)<<16>>16)}}d[(f[m>>2]|0)+(o*52|0)+48>>1]=d[k>>1]|0}else{f[x>>2]=o;f[x+4>>2]=a;Mb(c,2,16250,x)|0}while(0);r=r+1|0;if((r|0)==(s|0))break;else q=q+1|0}b=f[A>>2]|0;e=b;b=f[b>>2]|0}if(!b){z=e;Mc(z);f[A>>2]=0;u=B;return}else{Mc(b);z=f[A>>2]|0;Mc(z);f[A>>2]=0;u=B;return}}function Ge(a,c){a=a|0;c=c|0;Oc(f[a>>2]|0,c);b[a+124>>0]=0;f[a+128>>2]=f[c+8248>>2]&1;return}function He(a,c,e,g){a=a|0;c=c|0;e=e|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0;x=u;u=u+80|0;v=x+64|0;s=x+56|0;o=x+48|0;r=x+40|0;q=x+32|0;p=x+24|0;if(!((a|0)!=0&(c|0)!=0&(e|0)!=0)){c=0;u=x;return c|0}t=e+16|0;if(((f[t>>2]|0)+-1|0)>>>0>16383){Mb(g,1,16630,x)|0;c=0;u=x;return c|0}if(!(Tc(f[a>>2]|0,c,e,g)|0)){c=0;u=x;return c|0}f[a+56>>2]=1785737760;f[a+60>>2]=0;f[a+64>>2]=1;h=Hc(4)|0;f[a+68>>2]=h;if(!h){Mb(g,1,16699,x+8|0)|0;c=0;u=x;return c|0}f[h>>2]=1785737760;m=f[t>>2]|0;f[a+20>>2]=m;m=Hc(m*12|0)|0;f[a+72>>2]=m;if(!m){Mb(g,1,16699,x+16|0)|0;c=0;u=x;return c|0}f[a+16>>2]=(f[e+12>>2]|0)-(f[e+4>>2]|0);f[a+12>>2]=(f[e+8>>2]|0)-(f[e>>2]|0);w=e+24|0;n=f[w>>2]|0;i=f[n+24>>2]|0;j=f[n+32>>2]|0;k=a+24|0;f[k>>2]=i+-1+(j<<7);l=f[t>>2]|0;if(l>>>0>1){h=1;do{if((i|0)!=(f[n+(h*52|0)+24>>2]|0))f[k>>2]=255;h=h+1|0}while(h>>>0<l>>>0)}f[a+28>>2]=7;f[a+32>>2]=0;f[a+36>>2]=0;if(l|0?(f[m+8>>2]=i+-1+(j<<7),(l|0)!=1):0){h=1;do{f[m+(h*12|0)+8>>2]=(f[n+(h*52|0)+24>>2]|0)+-1+(f[n+(h*52|0)+32>>2]<<7);h=h+1|0}while(h>>>0<l>>>0)}h=e+32|0;i=f[h>>2]|0;j=a+40|0;a:do if(!i){f[j>>2]=1;switch(f[e+20>>2]|0){case 1:{f[a+48>>2]=16;break a}case 2:{f[a+48>>2]=17;break a}case 3:{f[a+48>>2]=18;break a}default:break a}}else{f[j>>2]=2;f[a+48>>2]=0;f[a+112>>2]=i;l=Ic(1,i)|0;f[a+108>>2]=l;hj(l|0,f[e+28>>2]|0,f[h>>2]|0)|0;b[a+124>>0]=1;l=f[t>>2]|0}while(0);b:do if(l|0){j=f[w>>2]|0;k=0;h=0;i=0;do{e=(d[j+(i*52|0)+48>>1]|0)==0;h=h+((e^1)&1)|0;k=e?k:i;i=i+1|0}while(i>>>0<l>>>0);switch(h|0){case 0:break b;case 1:break;default:{Mb(g,2,16995,o)|0;break b}}switch(f[a+48>>2]|0){case 18:case 16:{h=3;break}case 17:{h=1;break}default:{Mb(g,2,16745,p)|0;break b}}if(l>>>0<=h>>>0){Mb(g,2,16819,q)|0;break}if(k>>>0<h>>>0){Mb(g,2,16912,r)|0;break}r=Hc(8)|0;i=a+116|0;f[i>>2]=r;if(!r){Mb(g,1,17060,s)|0;c=0;u=x;return c|0}k=Hc((f[t>>2]|0)*6|0)|0;i=f[i>>2]|0;f[i>>2]=k;if(!k){Mb(g,1,17060,v)|0;c=0;u=x;return c|0}j=f[t>>2]|0;d[i+4>>1]=j;i=0;do{d[k+(i*6|0)>>1]=i;d[k+(i*6|0)+2>>1]=0;v=i;i=i+1|0;d[k+(v*6|0)+4>>1]=i}while((i|0)!=(h|0));if(h>>>0<j>>>0){i=f[w>>2]|0;do{w=(d[i+(h*52|0)+48>>1]|0)==0;d[k+(h*6|0)>>1]=h;d[k+(h*6|0)+2>>1]=w?-1:1;d[k+(h*6|0)+4>>1]=w<<31>>31;h=h+1|0}while(h>>>0<j>>>0)}}while(0);f[a+52>>2]=0;f[a+44>>2]=0;f[a+96>>2]=f[c+18692>>2];c=1;u=x;return c|0}function Ie(a,b,c){a=a|0;b=b|0;c=c|0;return Wd(f[a>>2]|0,b,c)|0}function Je(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0;d=a+8|0;if(!(kg(f[d>>2]|0,53,c)|0)){c=0;return c|0}h=f[d>>2]|0;i=lg(h)|0;d=mg(h)|0;if(i){e=1;g=0;while(1){if(!e)e=0;else e=(Ma[f[d>>2]&63](a,b,c)|0)!=0;g=g+1|0;if((g|0)==(i|0))break;else{d=d+4|0;e=e&1}}ng(h);if(!e){c=0;return c|0}}else ng(h);c=Zc(f[a>>2]|0,b,c)|0;return c|0}function Ke(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0;J=u;u=u+192|0;D=J+152|0;C=J+144|0;B=J+136|0;A=J+128|0;z=J+120|0;x=J+88|0;w=J+80|0;v=J+64|0;t=J+48|0;F=J+40|0;E=J+32|0;H=J+24|0;y=J+16|0;s=J+8|0;n=J+176|0;o=J+168|0;p=J+156|0;d=Ic(1,1024)|0;if(!d){Mb(c,1,17104,J)|0;H=0;u=J;return H|0}q=n+4|0;r=p+4|0;G=a+100|0;l=d;k=1024;a:while(1){if((Eb(b,n,8,c)|0)!=8)break;b:while(1){zb(n,p,4);zb(q,r,4);switch(f[p>>2]|0){case 0:{d=Ib(b)|0;m=I;if((m|0)>0|(m|0)==0&d>>>0>4294967287){m=6;break a}f[p>>2]=d+8;h=8;break}case 1:{if((Eb(b,n,8,c)|0)!=8){m=12;break a}zb(n,o,4);if(f[o>>2]|0){m=10;break a}zb(q,p,4);h=16;break}default:h=8}g=f[r>>2]|0;if((g|0)==1785737827){m=14;break a}i=f[p>>2]|0;if(!i){m=18;break a}if(i>>>0<h>>>0){m=20;break a}c:do if((g|0)<1718909296)if((g|0)<1668112752)if((g|0)<1667523942){switch(g|0){case 1651532643:break;default:{m=43;break c}}e=1124;m=30;break}else{switch(g|0){case 1667523942:break;default:{m=43;break c}}e=1148;m=30;break}else if((g|0)<1668246642){switch(g|0){case 1668112752:break;default:{m=43;break c}}e=1140;m=30;break}else{switch(g|0){case 1668246642:break;default:{m=43;break c}}e=1116;m=30;break}else{if((g|0)<1783636e3)if((g|0)<1768449138)switch(g|0){case 1718909296:{m=27;break b}default:{m=43;break c}}else switch(g|0){case 1768449138:{e=1108;m=30;break c}default:{m=43;break c}}if((g|0)<1785737832)switch(g|0){case 1783636e3:{d=1084;m=29;break b}default:{m=43;break c}}if((g|0)<1885564018)switch(g|0){case 1785737832:{m=28;break b}default:{m=43;break c}}switch(g|0){case 1885564018:break;default:{m=43;break c}}e=1132;m=30}while(0);if((m|0)==30){m=0;d=i-h|0;f[t>>2]=g>>>24;f[t+4>>2]=g>>>16&255;f[t+8>>2]=g>>>8&255;f[t+12>>2]=g&255;Mb(c,2,17288,t)|0;if(f[G>>2]&4|0){j=e;g=d;break}j=f[r>>2]|0;f[v>>2]=j>>>24;f[v+4>>2]=j>>>16&255;f[v+8>>2]=j>>>8&255;f[v+12>>2]=j&255;Mb(c,2,17339,v)|0;f[G>>2]=f[G>>2]|2147483647;j=Jb(b,d,0,c)|0;if(!((j|0)==(d|0)&(I|0)==0)){m=32;break a}}else if((m|0)==43){m=0;d=i-h|0;e=f[G>>2]|0;if(!(e&1)){m=44;break a}if(!(e&2)){m=46;break a}f[G>>2]=e|2147483647;j=Jb(b,d,0,c)|0;if(!((j|0)==(d|0)&(I|0)==0)){m=49;break a}}if((Eb(b,n,8,c)|0)!=8)break a}if((m|0)==27){d=1092;m=29}else if((m|0)==28){d=1100;m=29}if((m|0)==29){m=0;j=d;g=i-h|0}i=Ib(b)|0;h=I;if((h|0)<0|(h|0)==0&i>>>0<g>>>0){m=34;break}if(g>>>0>k>>>0){d=Lc(l,g)|0;if(!d){m=37;break}else e=g}else{d=l;e=k}if((Eb(b,d,g,c)|0)!=(g|0)){m=39;break}if(!(Na[f[j+4>>2]&63](a,d,g,c)|0)){m=42;break}else{l=d;k=e}}switch(m|0){case 6:{Mb(c,1,17154,s)|0;break}case 10:{Mb(c,1,17154,y)|0;break}case 12:break;case 14:{d=f[G>>2]|0;if(!(d&4)){Mb(c,1,17196,H)|0;Mc(l);H=0;u=J;return H|0}else{f[G>>2]=d|8;Mc(l);H=1;u=J;return H|0}}case 18:{Mb(c,1,17224,E)|0;Mc(l);H=0;u=J;return H|0}case 20:{f[F>>2]=i;f[F+4>>2]=g;Mb(c,1,17262,F)|0;Mc(l);H=0;u=J;return H|0}case 32:{Mb(c,1,17405,w)|0;Mc(l);H=0;u=J;return H|0}case 34:{F=f[p>>2]|0;G=f[r>>2]|0;H=Ib(b)|0;f[x>>2]=F;f[x+4>>2]=G>>>24;f[x+8>>2]=G>>>16&255;f[x+12>>2]=G>>>8&255;f[x+16>>2]=G&255;f[x+20>>2]=g;f[x+24>>2]=H;Mb(c,1,17455,x)|0;Mc(l);H=0;u=J;return H|0}case 37:{Mc(l);Mb(c,1,17531,z)|0;H=0;u=J;return H|0}case 39:{Mb(c,1,17573,A)|0;Mc(d);H=0;u=J;return H|0}case 42:{Mc(d);H=0;u=J;return H|0}case 44:{Mb(c,1,17622,B)|0;Mc(l);H=0;u=J;return H|0}case 46:{Mb(c,1,17692,C)|0;Mc(l);H=0;u=J;return H|0}case 49:{Mb(c,1,17405,D)|0;Mc(l);H=0;u=J;return H|0}}Mc(l);H=1;u=J;return H|0}function Le(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0;h=u;u=u+48|0;g=h+32|0;e=a+72|0;if(f[e>>2]|0){Mb(d,2,18543,h)|0;g=1;u=h;return g|0}if((c|0)!=14){Mb(d,1,18591,h+8|0)|0;g=0;u=h;return g|0}zb(b,a+16|0,4);zb(b+4|0,a+12|0,4);c=a+20|0;zb(b+8|0,c,2);c=f[c>>2]|0;if((c+-1|0)>>>0>16383){Mb(d,1,18624,h+16|0)|0;g=0;u=h;return g|0}c=Ic(c,12)|0;f[e>>2]=c;if(!c){Mb(d,1,18661,h+24|0)|0;g=0;u=h;return g|0}zb(b+10|0,a+24|0,1);c=a+28|0;zb(b+11|0,c,1);c=f[c>>2]|0;if((c|0)!=7){f[g>>2]=c;Mb(d,4,18710,g)|0}zb(b+12|0,a+32|0,1);zb(b+13|0,a+36|0,1);g=1;u=h;return g|0}function Me(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0;y=u;u=u+96|0;i=y+48|0;o=y+40|0;l=y+32|0;k=y+24|0;j=y+16|0;m=y+80|0;n=y+76|0;r=y+72|0;p=y+68|0;s=y+64|0;q=y+60|0;t=y+56|0;v=y+52|0;if(d>>>0<3){Mb(e,1,18186,y)|0;x=0;u=y;return x|0}w=a+108|0;x=a+124|0;if(b[x>>0]|0){Mb(e,4,18218,y+8|0)|0;x=1;u=y;return x|0}h=a+40|0;zb(c,h,1);zb(c+1|0,a+52|0,1);zb(c+2|0,a+44|0,1);g=c+3|0;h=f[h>>2]|0;switch(h|0){case 1:{if(d>>>0<7){f[j>>2]=d;Mb(e,1,18327,j)|0;x=0;u=y;return x|0}h=a+48|0;if((d|0)!=7?(f[h>>2]|0)!=14:0){f[k>>2]=d;Mb(e,2,18327,k)|0}zb(g,h,4);i=c+7|0;if((f[h>>2]|0)==14){m=Hc(36)|0;if(!m){Mb(e,1,18363,l)|0;x=0;u=y;return x|0}f[m>>2]=14;f[t>>2]=0;f[s>>2]=0;f[r>>2]=0;f[q>>2]=0;f[p>>2]=0;f[n>>2]=0;f[v>>2]=4470064;g=m+4|0;f[g>>2]=1145390592;switch(d|0){case 35:{zb(i,n,4);zb(c+11|0,r,4);zb(c+15|0,p,4);zb(c+19|0,s,4);zb(c+23|0,q,4);zb(c+27|0,t,4);zb(c+31|0,v,4);f[g>>2]=0;c=f[n>>2]|0;l=f[p>>2]|0;k=f[q>>2]|0;j=f[r>>2]|0;i=f[s>>2]|0;h=f[t>>2]|0;g=f[v>>2]|0;break}case 7:{c=0;l=0;k=0;j=0;i=0;h=0;g=4470064;break}default:{f[o>>2]=d;Mb(e,2,18393,o)|0;c=0;l=0;k=0;j=0;i=0;h=0;g=4470064}}f[m+8>>2]=c;f[m+16>>2]=l;f[m+24>>2]=k;f[m+12>>2]=j;f[m+20>>2]=i;f[m+28>>2]=h;f[m+32>>2]=g;f[w>>2]=m;f[a+112>>2]=0}b[x>>0]=1;x=1;u=y;return x|0}case 2:{i=d+-3|0;h=a+112|0;f[h>>2]=i;a=Ic(1,i)|0;f[w>>2]=a;if(!a){f[h>>2]=0;x=0;u=y;return x|0}if((d|0)>3){h=0;while(1){zb(g,m,1);b[(f[w>>2]|0)+h>>0]=f[m>>2];h=h+1|0;if((h|0)==(i|0))break;else g=g+1|0}}b[x>>0]=1;x=1;u=y;return x|0}default:{if(h>>>0<=2){x=1;u=y;return x|0}f[i>>2]=h;Mb(e,4,18437,i)|0;x=1;u=y;return x|0}}return 0}function Ne(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0;i=u;u=u+16|0;g=i;e=f[a+24>>2]|0;if((e|0)!=255){f[g>>2]=e;Mb(d,2,18040,g)|0}h=a+20|0;if((f[h>>2]|0)!=(c|0)){Mb(d,1,18154,i+8|0)|0;h=0;u=i;return h|0}if(!c){h=1;u=i;return h|0}g=a+72|0;e=0;while(1){zb(b,(f[g>>2]|0)+(e*12|0)+8|0,1);e=e+1|0;if(e>>>0>=(f[h>>2]|0)>>>0){b=1;break}else b=b+1|0}u=i;return b|0}function Oe(a,c,e,g){a=a|0;c=c|0;e=e|0;g=g|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=u;u=u+16|0;i=r;q=r+12|0;j=a+120|0;if(e>>>0<3|(f[j>>2]|0)!=0){q=0;u=r;return q|0}zb(c,q,2);k=f[q>>2]|0;p=k&65535;if((p+-1|0)>>>0>1023){f[i>>2]=p;Mb(g,1,17957,i)|0;q=0;u=r;return q|0}zb(c+2|0,q,1);o=f[q>>2]&65535;if(!o){Mb(g,1,17995,r+8|0)|0;q=0;u=r;return q|0}if((o+3|0)>>>0>e>>>0){q=0;u=r;return q|0}m=Hc(X(p<<2,o)|0)|0;if(!m){q=0;u=r;return q|0}n=Hc(o)|0;if(!n){Mc(m);q=0;u=r;return q|0}l=Hc(o)|0;if(!l){Mc(m);Mc(n);q=0;u=r;return q|0}a=Hc(20)|0;if(!a){Mc(m);Mc(n);Mc(l);q=0;u=r;return q|0}f[a+4>>2]=l;f[a+8>>2]=n;f[a>>2]=m;d[a+16>>1]=k;b[a+18>>0]=f[q>>2];f[a+12>>2]=0;f[j>>2]=a;a=0;g=c+3|0;i=0;do{zb(g,q,1);g=g+1|0;b[n+i>>0]=(f[q>>2]&127)+1;b[l+i>>0]=(f[q>>2]|0)>>>7&1;a=a+1<<16>>16;i=a&65535}while(o>>>0>i>>>0);if(!p){q=1;u=r;return q|0}l=c;k=0;i=m;a=g;a:while(1){j=0;g=a;a=0;do{a=((h[n+a>>0]|0)+7|0)>>>3;a=a>>>0<4?a:4;if((g-l+a|0)>(e|0)){a=0;i=22;break a}zb(g,q,a);g=g+a|0;f[i>>2]=f[q>>2];i=i+4|0;j=j+1<<16>>16;a=j&65535}while(o>>>0>a>>>0);k=k+1<<16>>16;if(p>>>0<=(k&65535)>>>0){a=1;i=22;break}else a=g}if((i|0)==22){u=r;return a|0}return 0}function Pe(a,c,e,g){a=a|0;c=c|0;e=e|0;g=g|0;var h=0,i=0,j=0,k=0,l=0;l=u;u=u+32|0;k=l+20|0;j=a+120|0;a=f[j>>2]|0;if(!a){Mb(g,1,17847,l)|0;k=0;u=l;return k|0}if(f[a+12>>2]|0){Mb(g,1,17893,l+8|0)|0;k=0;u=l;return k|0}h=b[a+18>>0]|0;i=h&255;a=i<<2;if(a>>>0>e>>>0){Mb(g,1,17924,l+16|0)|0;k=0;u=l;return k|0}e=Hc(a)|0;if(!e){k=0;u=l;return k|0}if(h<<24>>24){a=c;h=0;while(1){zb(a,k,2);d[e+(h<<2)>>1]=f[k>>2];zb(a+2|0,k,1);b[e+(h<<2)+2>>0]=f[k>>2];zb(a+3|0,k,1);b[e+(h<<2)+3>>0]=f[k>>2];h=h+1|0;if((h|0)==(i|0))break;else a=a+4|0}}f[(f[j>>2]|0)+12>>2]=e;k=1;u=l;return k|0}function Qe(a,b,c,e){a=a|0;b=b|0;c=c|0;e=e|0;var g=0,h=0,i=0,k=0;k=u;u=u+32|0;i=k+20|0;h=a+116|0;if(f[h>>2]|0){i=0;u=k;return i|0}if(c>>>0<2){Mb(e,1,17753,k)|0;i=0;u=k;return i|0}zb(b,i,2);g=f[i>>2]|0;a=g&65535;if(!a){Mb(e,1,17786,k+8|0)|0;i=0;u=k;return i|0}if(((a*6|0)+2|0)>>>0>c>>>0){Mb(e,1,17753,k+16|0)|0;i=0;u=k;return i|0}g=Hc(g*6|0)|0;if(!g){i=0;u=k;return i|0}a=Hc(8)|0;f[h>>2]=a;if(!a){Mc(g);i=0;u=k;return i|0}f[a>>2]=g;e=f[i>>2]&65535;d[a+4>>1]=e;if(!(e<<16>>16)){i=1;u=k;return i|0}else a=0;do{e=a&65535;zb(b+2|0,i,2);d[g+(e*6|0)>>1]=f[i>>2];zb(b+4|0,i,2);b=b+6|0;d[g+(e*6|0)+2>>1]=f[i>>2];zb(b,i,2);d[g+(e*6|0)+4>>1]=f[i>>2];a=a+1<<16>>16}while((a&65535)<(j[(f[h>>2]|0)+4>>1]|0));b=1;u=k;return b|0}function Re(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0;g=u;u=u+32|0;e=g+20|0;a=a+100|0;if(f[a>>2]|0){Mb(d,1,19251,g)|0;e=0;u=g;return e|0}if((c|0)!=4){Mb(d,1,19305,g+8|0)|0;e=0;u=g;return e|0}zb(b,e,4);if((f[e>>2]|0)==218793738){f[a>>2]=f[a>>2]|1;e=1;u=g;return e|0}else{Mb(d,1,19339,g+16|0)|0;e=0;u=g;return e|0}return 0}function Se(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0;i=u;u=u+32|0;g=i+24|0;h=a+100|0;if((f[h>>2]|0)!=1){Mb(d,1,19132,i)|0;h=0;u=i;return h|0}if(c>>>0<8){Mb(d,1,19182,i+8|0)|0;h=0;u=i;return h|0}zb(b,a+56|0,4);zb(b+4|0,a+60|0,4);b=b+8|0;c=c+-8|0;if(c&3|0){Mb(d,1,19182,i+16|0)|0;h=0;u=i;return h|0}c=c>>>2;e=a+64|0;f[e>>2]=c;if(c|0){c=Ic(c,4)|0;f[a+68>>2]=c;if(!c){Mb(d,1,19218,g)|0;h=0;u=i;return h|0}if(f[e>>2]|0){a=a+68|0;c=0;while(1){zb(b,(f[a>>2]|0)+(c<<2)|0,4);c=c+1|0;if(c>>>0>=(f[e>>2]|0)>>>0)break;else b=b+4|0}}}f[h>>2]=f[h>>2]|2;h=1;u=i;return h|0}function Te(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0;z=u;u=u+96|0;t=z+72|0;s=z+64|0;r=z+56|0;q=z+48|0;y=z+40|0;x=z+32|0;w=z+24|0;v=z+16|0;p=z+8|0;m=z+80|0;n=z+76|0;o=a+100|0;if(!(f[o>>2]&2)){Mb(d,1,18800,z)|0;y=0;u=z;return y|0}l=a+104|0;f[l>>2]=0;do if(c|0){i=0;a:while(1){if(c>>>0<8){h=6;break}zb(b,m,4);e=f[m>>2]|0;zb(b+4|0,m,4);k=f[m>>2]|0;switch(e|0){case 0:{h=15;break a}case 1:{if(c>>>0<16){h=9;break a}zb(b+8|0,n,4);if(f[n>>2]|0){h=11;break a}zb(b+12|0,m,4);e=f[m>>2]|0;if(!e){h=13;break a}j=16;break}default:j=8}if(e>>>0<j>>>0){h=17;break}if(c>>>0<e>>>0){h=20;break}b:do if((k|0)<1668246642){if((k|0)<1667523942){switch(k|0){case 1651532643:break;default:{h=28;break b}}g=1124;h=27;break}if((k|0)<1668112752){switch(k|0){case 1667523942:break;default:{h=28;break b}}g=1148;h=27;break}else{switch(k|0){case 1668112752:break;default:{h=28;break b}}g=1140;h=27;break}}else{if((k|0)<1768449138){switch(k|0){case 1668246642:break;default:{h=28;break b}}g=1116;h=27;break}if((k|0)<1885564018)switch(k|0){case 1768449138:{g=1108;h=27;break b}default:{h=28;break b}}switch(k|0){case 1885564018:break;default:{h=28;break b}}g=1132;h=27}while(0);if((h|0)==27){if(!(Na[f[g+4>>2]&63](a,b+j|0,e-j|0,d)|0)){b=0;h=33;break}}else if((h|0)==28)f[l>>2]=f[l>>2]|2147483647;i=(k|0)==1768449138?1:i;c=c-e|0;if(!c){h=30;break}else b=b+e|0}if((h|0)==6)Mb(d,1,18845,p)|0;else if((h|0)==9)Mb(d,1,18885,v)|0;else if((h|0)==11)Mb(d,1,17154,w)|0;else if((h|0)==13)Mb(d,1,17224,x)|0;else if((h|0)==15)Mb(d,1,17224,y)|0;else if((h|0)==17)Mb(d,1,18929,q)|0;else if((h|0)==20){Mb(d,1,19001,s)|0;y=0;u=z;return y|0}else if((h|0)==30){if(!i)break;f[o>>2]=f[o>>2]|4;y=1;u=z;return y|0}else if((h|0)==33){u=z;return b|0}Mb(d,1,18958,r)|0;y=0;u=z;return y|0}while(0);Mb(d,1,19073,t)|0;y=0;u=z;return y|0}function Ue(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0;d=a+8|0;if(!(kg(f[d>>2]|0,54,c)|0)){i=0;return i|0}if(!(_d(f[a>>2]|0,b,c)|0)){i=0;return i|0}i=f[d>>2]|0;h=lg(i)|0;d=mg(i)|0;if(!h)d=1;else{e=d;d=1;g=0;while(1){if(!d)d=0;else d=(Ma[f[e>>2]&63](a,b,c)|0)!=0;d=d&1;g=g+1|0;if((g|0)==(h|0))break;else e=e+4|0}}ng(i);i=d;return i|0}function Ve(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0;h=u;u=u+32|0;d=h+24|0;e=Hb(b)|0;g=I;a=a+80|0;i=a;i=_i(e|0,g|0,f[i>>2]|0,f[i+4>>2]|0)|0;yb(d,i,4);yb(d+4|0,1785737827,4);if(!(Kb(b,f[a>>2]|0,f[a+4>>2]|0,c)|0)){Mb(c,1,19383,h)|0;i=0;u=h;return i|0}if((Fb(b,d,8,c)|0)!=8){Mb(c,1,19383,h+8|0)|0;i=0;u=h;return i|0}if(Kb(b,e,g,c)|0){i=1;u=h;return i|0}Mb(c,1,19383,h+16|0)|0;i=0;u=h;return i|0}function We(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0;e=a+4|0;if(!(kg(f[e>>2]|0,55,d)|0)){d=0;return d|0}i=f[e>>2]|0;j=lg(i)|0;e=mg(i)|0;if(j){g=1;h=0;while(1){if(!g)g=0;else g=(Ma[f[e>>2]&63](a,b,d)|0)!=0;h=h+1|0;if((h|0)==(j|0))break;else{e=e+4|0;g=g&1}}ng(i);if(!g){d=0;return d|0}}else ng(i);e=a+8|0;if(!(kg(f[e>>2]|0,56,d)|0)){d=0;return d|0}if(!(kg(f[e>>2]|0,57,d)|0)){d=0;return d|0}if(!(kg(f[e>>2]|0,58,d)|0)){d=0;return d|0}if(f[a+96>>2]|0?(kg(f[e>>2]|0,59,d)|0)==0:0){d=0;return d|0}if(!(kg(f[e>>2]|0,60,d)|0)){d=0;return d|0}i=f[e>>2]|0;j=lg(i)|0;e=mg(i)|0;if(j){g=1;h=0;while(1){if(!g)g=0;else g=(Ma[f[e>>2]&63](a,b,d)|0)!=0;h=h+1|0;if((h|0)==(j|0))break;else{e=e+4|0;g=g&1}}ng(i);if(!g){d=0;return d|0}}else ng(i);d=ee(f[a>>2]|0,b,c,d)|0;return d|0}function Xe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0;c=(f[a>>2]|0?(f[a+104>>2]|f[a+100>>2]|0)==0:0)&(f[a+8>>2]|0)!=0&(f[a+4>>2]|0)!=0&(f[a+64>>2]|0)!=0&(f[a+16>>2]|0)!=0&(f[a+12>>2]|0)!=0&1;e=f[a+20>>2]|0;if(!e){g=c;a=a+40|0;a=f[a>>2]|0;a=a+-1|0;a=a>>>0<2;a=a&1;b=Lb(b)|0;b=b&g;b=b&a;return b|0}g=f[a+72>>2]|0;d=0;do{c=c&(f[g+(d*12|0)+8>>2]&126)>>>0<38;d=d+1|0}while(d>>>0<e>>>0);a=a+40|0;a=f[a>>2]|0;a=a+-1|0;a=a>>>0<2;a=a&1;b=Lb(b)|0;b=b&c;b=b&a;return b|0}function Ye(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;a=u;u=u+16|0;d=a;yb(d,12,4);yb(d+4|0,1783636e3,4);yb(d+8|0,218793738,4);c=(Fb(b,d,12,c)|0)==12&1;u=a;return c|0}function Ze(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0;k=u;u=u+16|0;j=k+8|0;g=a+64|0;h=(f[g>>2]<<2)+16|0;i=Ic(1,h)|0;if(!i){Mb(c,1,19500,k)|0;j=0;u=k;return j|0}yb(i,h,4);yb(i+4|0,1718909296,4);yb(i+8|0,f[a+56>>2]|0,4);yb(i+12|0,f[a+60>>2]|0,4);e=i+16|0;if(f[g>>2]|0){d=a+68|0;a=0;do{yb(e,f[(f[d>>2]|0)+(a<<2)>>2]|0,4);a=a+1|0}while(a>>>0<(f[g>>2]|0)>>>0)}a=(Fb(b,i,h,c)|0)==(h|0);if(!a)Mb(c,1,19539,j)|0;Mc(i);j=a&1;u=k;return j|0}function _e(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;p=u;u=u+80|0;n=p+16|0;l=p+8|0;k=p;e=p+24|0;j=p+72|0;d=e;g=d+48|0;do{f[d>>2]=0;d=d+4|0}while((d|0)<(g|0));if((f[a+24>>2]|0)==255){f[e>>2]=1;d=3;g=2;h=1;i=4}else{d=2;g=1;h=0;i=1}f[e+(h*12|0)>>2]=i;f[e+(g*12|0)>>2]=2;if(!(f[a+116>>2]|0))o=d;else{f[e+(d*12|0)>>2]=3;o=d+1|0}yb(j+4|0,1785737832,4);d=8;g=0;h=e;while(1){i=h+8|0;q=La[f[h>>2]&7](a,i)|0;f[h+4>>2]=q;if(!q){m=7;break}d=(f[i>>2]|0)+d|0;g=g+1|0;if((g|0)>=(o|0))break;else h=h+12|0}if((m|0)==7){Mb(c,1,19414,k)|0;g=0;d=e;while(1){e=f[d+4>>2]|0;if(e|0)Mc(e);g=g+1|0;if((g|0)>=(o|0)){d=0;break}else d=d+12|0}u=p;return d|0}yb(j,d,4);a:do if((Fb(b,j,8,c)|0)==8){d=0;g=e;while(1){q=g+8|0;m=Fb(b,f[g+4>>2]|0,f[q>>2]|0,c)|0;if((m|0)!=(f[q>>2]|0))break;d=d+1|0;if((d|0)>=(o|0)){d=1;break a}else g=g+12|0}Mb(c,1,19457,n)|0;d=0}else{Mb(c,1,19457,l)|0;d=0}while(0);g=0;while(1){h=f[e+4>>2]|0;if(h|0)Mc(h);g=g+1|0;if((g|0)>=(o|0))break;else e=e+12|0}u=p;return d|0}function $e(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Hb(b)|0;a=a+88|0;f[a>>2]=d;f[a+4>>2]=I;c=Jb(b,24,0,c)|0;return (c|0)==24&(I|0)==0&1|0}function af(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Hb(b)|0;a=a+80|0;f[a>>2]=d;f[a+4>>2]=I;c=Jb(b,8,0,c)|0;return (c|0)==8&(I|0)==0&1|0}function bf(a,b){a=a|0;b=b|0;var c=0;c=Ic(1,22)|0;if(!c){c=0;return c|0}yb(c,22,4);yb(c+4|0,1768449138,4);yb(c+8|0,f[a+16>>2]|0,4);yb(c+12|0,f[a+12>>2]|0,4);yb(c+16|0,f[a+20>>2]|0,2);yb(c+18|0,f[a+24>>2]|0,1);yb(c+19|0,f[a+28>>2]|0,1);yb(c+20|0,f[a+32>>2]|0,1);yb(c+21|0,f[a+36>>2]|0,1);f[b>>2]=22;return c|0}function cf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0;e=a+20|0;g=(f[e>>2]|0)+8|0;h=Ic(1,g)|0;if(!h){h=0;return h|0}yb(h,g,4);yb(h+4|0,1651532643,4);if(f[e>>2]|0){d=a+72|0;a=0;c=h+8|0;while(1){yb(c,f[(f[d>>2]|0)+(a*12|0)+8>>2]|0,1);a=a+1|0;if(a>>>0>=(f[e>>2]|0)>>>0)break;else c=c+1|0}}f[b>>2]=g;return h|0}function df(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,i=0,j=0;c=a+40|0;switch(f[c>>2]|0){case 1:{i=15;break}case 2:{i=(f[a+112>>2]|0)+11|0;break}default:{j=0;return j|0}}j=Ic(1,i)|0;if(!j){j=0;return j|0}yb(j,i,4);yb(j+4|0,1668246642,4);yb(j+8|0,f[c>>2]|0,1);yb(j+9|0,f[a+52>>2]|0,1);yb(j+10|0,f[a+44>>2]|0,1);d=j+11|0;switch(f[c>>2]|0){case 1:{yb(d,f[a+48>>2]|0,4);break}case 2:{g=a+112|0;if(f[g>>2]|0){e=a+108|0;c=d;a=0;while(1){yb(c,h[(f[e>>2]|0)+a>>0]|0,1);a=a+1|0;if(a>>>0>=(f[g>>2]|0)>>>0)break;else c=c+1|0}}break}default:{}}f[b>>2]=i;return j|0}function ef(a,b){a=a|0;b=b|0;var c=0,e=0,g=0,h=0,i=0,k=0;h=a+116|0;i=((j[(f[h>>2]|0)+4>>1]|0)*6|0)+10|0;k=Hc(i)|0;if(!k){b=0;return b|0}yb(k,i,4);yb(k+4|0,1667523942,4);yb(k+8|0,j[(f[h>>2]|0)+4>>1]|0,2);a=f[h>>2]|0;if(d[a+4>>1]|0){e=k+10|0;g=0;c=0;while(1){yb(e,j[(f[a>>2]|0)+(c*6|0)>>1]|0,2);yb(e+2|0,j[(f[f[h>>2]>>2]|0)+(c*6|0)+2>>1]|0,2);yb(e+4|0,j[(f[f[h>>2]>>2]|0)+(c*6|0)+4>>1]|0,2);c=g+1<<16>>16;a=f[h>>2]|0;if((c&65535)>=(j[a+4>>1]|0))break;else{e=e+6|0;g=c;c=c&65535}}}f[b>>2]=i;b=k;return b|0}function ff(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0;i=b+8|0;if(!(kg(f[i>>2]|0,53,d)|0)){d=0;return d|0}j=f[b+4>>2]|0;k=lg(j)|0;e=mg(j)|0;if(k){g=1;h=0;while(1){if(!g)g=0;else g=(Ma[f[e>>2]&63](b,a,d)|0)!=0;h=h+1|0;if((h|0)==(k|0))break;else{e=e+4|0;g=g&1}}ng(j);if(!g){d=0;return d|0}}else ng(j);i=f[i>>2]|0;j=lg(i)|0;e=mg(i)|0;if(j){g=1;h=0;while(1){if(!g)g=0;else g=(Ma[f[e>>2]&63](b,a,d)|0)!=0;h=h+1|0;if((h|0)==(j|0))break;else{e=e+4|0;g=g&1}}ng(i);if(!g){d=0;return d|0}}else ng(i);d=_c(a,f[b>>2]|0,c,d)|0;return d|0}function gf(a,b,c,d,e,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;return Gd(f[a>>2]|0,b,c,d,e,g,h,i,j,k,l)|0}function hf(a,b,c,d,e,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;return Be(f[a>>2]|0,b,c,d,e,g)|0}function jf(a,b,c,d,e,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;return Hd(f[a>>2]|0,b,c,d,e,g)|0}function kf(a){a=a|0;var b=0,c=0,d=0;if(!a)return;Qc(f[a>>2]|0);f[a>>2]=0;b=a+72|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0}b=a+68|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0}c=a+108|0;b=f[c>>2]|0;if(b|0){Mc(b);f[c>>2]=0}d=a+116|0;b=f[d>>2]|0;if(b|0){c=f[b>>2]|0;if(c){Mc(c);b=f[d>>2]|0;f[b>>2]=0}Mc(b);f[d>>2]=0}d=a+120|0;b=f[d>>2]|0;if(b|0){c=f[b+12>>2]|0;if(c){Mc(c);b=f[d>>2]|0;f[b+12>>2]=0}c=f[b+4>>2]|0;if(c){Mc(c);b=f[d>>2]|0;f[b+4>>2]=0}c=f[b+8>>2]|0;if(c){Mc(c);b=f[d>>2]|0;f[b+8>>2]=0}c=f[b>>2]|0;if(c){Mc(c);b=f[d>>2]|0;f[b>>2]=0}Mc(b);f[d>>2]=0}b=a+4|0;c=f[b>>2]|0;if(c|0){jg(c);f[b>>2]=0}b=a+8|0;c=f[b>>2]|0;if(c|0){jg(c);f[b>>2]=0}Mc(a);return}function lf(a,b,c,d,e,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;return Id(f[a>>2]|0,b,c,d,e,g,h)|0}function mf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0;i=u;u=u+16|0;if(!c){c=0;u=i;return c|0}Mb(d,2,19580,i)|0;if(!(Td(f[a>>2]|0,b,c,d,e)|0)){Mb(d,1,16201,i+8|0)|0;c=0;u=i;return c|0}h=a+108|0;if(!(De(c,h,d)|0)){c=0;u=i;return c|0}b=f[a+48>>2]|0;switch(b|0){case 16:{f[c+20>>2]=1;break}case 17:{f[c+20>>2]=2;break}case 18:{f[c+20>>2]=3;break}case 24:{f[c+20>>2]=4;break}default:f[c+20>>2]=(b|0)==12?5:-1}g=a+120|0;b=f[g>>2]|0;do if(b|0){if(f[b+12>>2]|0){Ee(c,h);break}Mc(f[b+4>>2]|0);Mc(f[(f[g>>2]|0)+8>>2]|0);Mc(f[f[g>>2]>>2]|0);b=f[g>>2]|0;e=f[b+12>>2]|0;if(e){Mc(e);b=f[g>>2]|0}Mc(b);f[g>>2]=0}while(0);if(f[a+116>>2]|0)Fe(c,h,d);b=f[h>>2]|0;if(!b){c=1;u=i;return c|0}f[c+28>>2]=b;f[c+32>>2]=f[a+112>>2];f[h>>2]=0;c=1;u=i;return c|0}function nf(a){a=a|0;var c=0;c=Ic(1,136)|0;if(!c)return c|0;if(!a)a=Pc()|0;else a=Jd()|0;f[c>>2]=a;if(!a){kf(c);c=0;return c|0}a=c+108|0;f[a>>2]=0;f[a+4>>2]=0;f[a+8>>2]=0;f[a+12>>2]=0;b[a+16>>0]=0;a=ig()|0;f[c+4>>2]=a;if(!a){kf(c);c=0;return c|0}a=ig()|0;f[c+8>>2]=a;if(a|0)return c|0;kf(c);c=0;return c|0}function of(a,b,c){a=a|0;b=b|0;c=c|0;Kd(f[a>>2]|0,b,c);return}function pf(a){a=a|0;return Pd(f[a>>2]|0)|0}function qf(a){a=a|0;return Od(f[a>>2]|0)|0}function rf(a,b,c){a=a|0;b=b|0;c=c|0;return Vd(f[a>>2]|0,b,c)|0}function sf(){return 8}function tf(){return 32}function uf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0;if(!d)return;else e=0;do{l=a+(e<<2)|0;i=f[l>>2]|0;j=b+(e<<2)|0;h=f[j>>2]|0;g=c+(e<<2)|0;k=f[g>>2]|0;f[l>>2]=(h<<1)+i+k>>2;f[j>>2]=k-h;f[g>>2]=i-h;e=e+1|0}while((e|0)!=(d|0));return}function vf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0;if(!d)return;else e=0;do{k=a+(e<<2)|0;j=b+(e<<2)|0;h=f[j>>2]|0;g=c+(e<<2)|0;l=f[g>>2]|0;i=(f[k>>2]|0)-(l+h>>2)|0;f[k>>2]=i+l;f[j>>2]=i;f[g>>2]=i+h;e=e+1|0}while((e|0)!=(d|0));return}function wf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;if(!d)return;else e=0;do{o=a+(e<<2)|0;u=f[o>>2]|0;k=b+(e<<2)|0;t=f[k>>2]|0;g=c+(e<<2)|0;s=f[g>>2]|0;j=((u|0)<0)<<31>>31;q=Yi(u|0,j|0,2449,0)|0;q=Zi(q|0,I|0,4096,0)|0;q=ej(q|0,I|0,13)|0;i=((t|0)<0)<<31>>31;r=Yi(t|0,i|0,4809,0)|0;r=Zi(r|0,I|0,4096,0)|0;r=ej(r|0,I|0,13)|0;h=((s|0)<0)<<31>>31;p=Yi(s|0,h|0,934,0)|0;p=Zi(p|0,I|0,4096,0)|0;p=ej(p|0,I|0,13)|0;l=Yi(u|0,j|0,1382,0)|0;l=Zi(l|0,I|0,4096,0)|0;l=ej(l|0,I|0,13)|0;m=Yi(t|0,i|0,2714,0)|0;m=Zi(m|0,I|0,4096,0)|0;m=ej(m|0,I|0,13)|0;n=fj(s|0,h|0,12)|0;n=Zi(n|0,I|0,4096,0)|0;n=ej(n|0,I|0,13)|0;j=fj(u|0,j|0,12)|0;j=Zi(j|0,I|0,4096,0)|0;j=ej(j|0,I|0,13)|0;i=Yi(t|0,i|0,3430,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;h=Yi(s|0,h|0,666,0)|0;h=Zi(h|0,I|0,4096,0)|0;h=ej(h|0,I|0,13)|0;f[o>>2]=r+q+p;f[k>>2]=n-(m+l);f[g>>2]=j-i-h;e=e+1|0}while((e|0)!=(d|0));return}function xf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0.0,h=0.0,i=0,j=0.0,k=0;if(!d)return;else e=0;do{k=a+(e<<2)|0;h=+n[k>>2];i=b+(e<<2)|0;g=+n[i>>2];f=c+(e<<2)|0;j=+n[f>>2];n[k>>2]=h+j*1.4019999504089355;n[i>>2]=h-g*.3441300094127655-j*.714139997959137;n[f>>2]=h+g*1.7719999551773071;e=e+1|0}while((e|0)!=(d|0));return}function yf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0;g=X(d,d)|0;o=Hc(g+d<<2)|0;if(!o){b=0;return b|0}m=o+(d<<2)|0;if(g|0){e=a;a=0;while(1){f[m+(a<<2)>>2]=~~(+n[e>>2]*8192.0);a=a+1|0;if((a|0)==(g|0))break;else e=e+4|0}}a:do if(b|0){if(!d){e=0;while(1){e=e+1|0;if((e|0)==(b|0))break a}}else l=0;do{e=0;do{f[o+(e<<2)>>2]=f[f[c+(e<<2)>>2]>>2];e=e+1|0}while((e|0)!=(d|0));a=m;g=0;while(1){i=c+(g<<2)|0;j=f[i>>2]|0;f[j>>2]=0;e=0;h=a;k=0;while(1){p=f[h>>2]|0;q=f[o+(e<<2)>>2]|0;p=Yi(q|0,((q|0)<0)<<31>>31|0,p|0,((p|0)<0)<<31>>31|0)|0;p=Zi(p|0,I|0,4096,0)|0;p=ej(p|0,I|0,13)|0;k=k+p|0;f[j>>2]=k;e=e+1|0;if((e|0)==(d|0))break;else h=h+4|0}f[i>>2]=j+4;g=g+1|0;if((g|0)==(d|0))break;else a=a+(d<<2)|0}l=l+1|0}while((l|0)!=(b|0))}while(0);Mc(o);q=1;return q|0}function zf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0.0,l=0,m=0,o=0;o=Hc(d<<3)|0;if(!o){b=0;return b|0}m=o+(d<<2)|0;a:do if(b|0){if(!d){e=0;while(1){e=e+1|0;if((e|0)==(b|0))break a}}else l=0;do{e=0;do{f[o+(e<<2)>>2]=f[f[c+(e<<2)>>2]>>2];e=e+1|0}while((e|0)!=(d|0));g=a;i=0;while(1){j=m+(i<<2)|0;n[j>>2]=0.0;e=0;h=g;k=0.0;while(1){k=k+ +n[h>>2]*+n[o+(e<<2)>>2];n[j>>2]=k;e=e+1|0;if((e|0)==(d|0))break;else h=h+4|0}h=c+(i<<2)|0;j=f[h>>2]|0;f[h>>2]=j+4;n[j>>2]=k;i=i+1|0;if((i|0)==(d|0))break;else g=g+(d<<2)|0}l=l+1|0}while((l|0)!=(b|0))}while(0);Mc(o);b=1;return b|0}function Af(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0.0,h=0,i=0.0;if(!b)return;else f=0;do{h=a+(f<<3)|0;p[h>>3]=0.0;d=0;e=f;g=0.0;while(1){i=+n[c+(e<<2)>>2];g=g+i*i;d=d+1|0;if((d|0)==(b|0))break;else e=e+b|0}i=+L(+g);p[h>>3]=i;f=f+1|0}while((f|0)!=(b|0));return}function Bf(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;G=u;u=u+32|0;n=G+28|0;k=G+24|0;o=G+20|0;q=G+16|0;p=G+12|0;r=G+8|0;l=G+4|0;j=G;e=c+76|0;E=f[e>>2]|0;A=E+(d*5640|0)+420|0;F=(f[A>>2]|0)+1|0;m=a+16|0;B=Hc((f[m>>2]|0)*528|0)|0;if(!B){F=0;u=G;return F|0}C=Hc(f[m>>2]<<2)|0;if(!C){Mc(B);F=0;u=G;return F|0}e=Cf(a,f[e>>2]|0,d)|0;if(!e){Mc(B);Mc(C);F=0;u=G;return F|0}i=f[m>>2]|0;if(i|0){g=B;h=0;while(1){f[C+(h<<2)>>2]=g;h=h+1|0;if(h>>>0>=i>>>0)break;else g=g+528|0}}Df(a,c,d,o,q,p,r,l,j,k,n,C);D=f[k>>2]|0;x=X(f[m>>2]|0,D)|0;z=f[n>>2]|0;w=X(z,x)|0;h=e+4|0;f[h>>2]=0;y=E+(d*5640|0)+8|0;g=(f[y>>2]|0)+1|0;if(w>>>0<=(4294967295/(g>>>0)|0)>>>0?(v=Ic(X(g,w)|0,2)|0,f[h>>2]=v,v|0):0){g=f[e+196>>2]|0;v=f[a+24>>2]|0;t=f[o>>2]|0;f[e+200>>2]=t;s=f[p>>2]|0;f[e+204>>2]=s;p=f[q>>2]|0;f[e+208>>2]=p;o=f[r>>2]|0;f[e+212>>2]=o;f[e+20>>2]=1;f[e+16>>2]=D;f[e+12>>2]=x;f[e+8>>2]=w;m=f[e+192>>2]|0;if(m|0){l=v;c=g;j=0;while(1){g=f[c+12>>2]|0;h=f[C+(j<<2)>>2]|0;f[c>>2]=f[l>>2];f[c+4>>2]=f[l+4>>2];k=f[c+8>>2]|0;if(k|0){i=0;while(1){f[g>>2]=f[h>>2];f[g+4>>2]=f[h+4>>2];f[g+8>>2]=f[h+8>>2];f[g+12>>2]=f[h+12>>2];i=i+1|0;if(i>>>0>=k>>>0)break;else{g=g+16|0;h=h+16|0}}}j=j+1|0;if(j>>>0>=m>>>0)break;else{l=l+52|0;c=c+16|0}}}if(F>>>0>1){l=1;n=e;do{g=f[n+428>>2]|0;f[n+432>>2]=t;f[n+436>>2]=s;f[n+440>>2]=p;f[n+444>>2]=o;f[n+252>>2]=1;f[n+248>>2]=D;f[n+244>>2]=x;f[n+240>>2]=w;a=f[n+424>>2]|0;if(a|0){m=v;j=0;while(1){h=f[g+12>>2]|0;i=f[C+(j<<2)>>2]|0;f[g>>2]=f[m>>2];f[g+4>>2]=f[m+4>>2];k=f[g+8>>2]|0;if(k|0){c=0;while(1){f[h>>2]=f[i>>2];f[h+4>>2]=f[i+4>>2];f[h+8>>2]=f[i+8>>2];f[h+12>>2]=f[i+12>>2];c=c+1|0;if(c>>>0>=k>>>0)break;else{h=h+16|0;i=i+16|0}}}j=j+1|0;if(j>>>0>=a>>>0)break;else{m=m+52|0;g=g+16|0}}}f[n+236>>2]=f[n+4>>2];n=n+232|0;l=l+1|0}while((l|0)!=(F|0))}Mc(B);Mc(C);j=(f[A>>2]|0)+1|0;g=(j|0)==0;if(!(b[E+(d*5640|0)+5636>>0]&4)){if(g){F=e;u=G;return F|0}c=f[E+(d*5640|0)+4>>2]|0;i=f[y>>2]|0;g=0;h=e;while(1){f[h+80>>2]=c;f[h+40>>2]=1;f[h+44>>2]=0;f[h+48>>2]=0;f[h+64>>2]=0;f[h+68>>2]=0;f[h+56>>2]=z;f[h+60>>2]=f[h+192>>2];f[h+52>>2]=i;f[h+72>>2]=D;g=g+1|0;if((g|0)==(j|0))break;else h=h+232|0}u=G;return e|0}else{if(g){F=e;u=G;return F|0}g=E+(d*5640|0)+424|0;h=e;i=0;while(1){f[h+80>>2]=f[g+36>>2];f[h+40>>2]=1;f[h+44>>2]=f[g>>2];f[h+48>>2]=f[g+4>>2];f[h+64>>2]=0;f[h+68>>2]=0;f[h+56>>2]=f[g+12>>2];f[h+60>>2]=f[g+16>>2];f[h+52>>2]=f[g+8>>2];f[h+72>>2]=D;i=i+1|0;if((i|0)==(j|0))break;else{g=g+148|0;h=h+232|0}}u=G;return e|0}}Mc(B);Mc(C);g=f[h>>2]|0;if(g|0){Mc(g);f[h>>2]=0}if(F|0){l=e;m=0;while(1){n=l+196|0;g=f[n>>2]|0;if(g|0){k=l+192|0;h=f[k>>2]|0;if(h){j=0;while(1){i=g+12|0;c=f[i>>2]|0;if(c){Mc(c);f[i>>2]=0;h=f[k>>2]|0}j=j+1|0;if(j>>>0>=h>>>0)break;else g=g+16|0}g=f[n>>2]|0}Mc(g);f[n>>2]=0}m=m+1|0;if((m|0)==(F|0))break;else l=l+232|0}}Mc(e);F=0;u=G;return F|0}function Cf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0;l=(f[b+(c*5640|0)+420>>2]|0)+1|0;d=Ic(l,232)|0;if(!d){l=0;return l|0}if(!l){l=d;return l|0}j=a+16|0;i=b+(c*5640|0)+5584|0;g=d;h=0;a=f[j>>2]|0;a:while(1){b=Ic(a,16)|0;e=g+196|0;f[e>>2]=b;if(!b){a=5;break}k=f[j>>2]|0;f[g+192>>2]=k;b:do if(!k)a=0;else{a=(f[i>>2]|0)+4|0;k=Ic(f[a>>2]|0,16)|0;f[b+12>>2]=k;if(!k){a=19;break a}c=0;while(1){f[b+(c<<4)+8>>2]=f[a>>2];c=c+1|0;a=f[j>>2]|0;if(c>>>0>=a>>>0)break b;b=f[e>>2]|0;a=(f[i>>2]|0)+(c*1080|0)+4|0;k=Ic(f[a>>2]|0,16)|0;f[b+(c<<4)+12>>2]=k;if(!k){a=19;break a}}}while(0);h=h+1|0;if(h>>>0>=l>>>0){a=33;break}else g=g+232|0}if((a|0)==5){a=d+4|0;b=f[a>>2]|0;if(!b){i=d;j=0}else{Mc(b);f[a>>2]=0;i=d;j=0}while(1){k=i+196|0;a=f[k>>2]|0;if(a|0){h=i+192|0;b=f[h>>2]|0;if(b){g=0;while(1){c=a+12|0;e=f[c>>2]|0;if(e){Mc(e);f[c>>2]=0;b=f[h>>2]|0}g=g+1|0;if(g>>>0>=b>>>0)break;else a=a+16|0}a=f[k>>2]|0}Mc(a);f[k>>2]=0}j=j+1|0;if((j|0)==(l|0))break;else i=i+232|0}Mc(d);l=0;return l|0}else if((a|0)==19){a=d+4|0;b=f[a>>2]|0;if(!b){i=d;j=0}else{Mc(b);f[a>>2]=0;i=d;j=0}while(1){k=i+196|0;a=f[k>>2]|0;if(a|0){h=i+192|0;b=f[h>>2]|0;if(b){g=0;while(1){c=a+12|0;e=f[c>>2]|0;if(e){Mc(e);f[c>>2]=0;b=f[h>>2]|0}g=g+1|0;if(g>>>0>=b>>>0)break;else a=a+16|0}a=f[k>>2]|0}Mc(a);f[k>>2]=0}j=j+1|0;if((j|0)==(l|0))break;else i=i+232|0}Mc(d);l=0;return l|0}else if((a|0)==33)return d|0;return 0}function Df(a,b,c,d,e,g,h,i,j,k,l,m){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0;n=f[(f[b+76>>2]|0)+(c*5640|0)+5584>>2]|0;o=f[a+24>>2]|0;B=f[b+24>>2]|0;C=b+12|0;A=(X(f[C>>2]|0,(c>>>0)%(B>>>0)|0)|0)+(f[b+4>>2]|0)|0;z=f[a>>2]|0;f[d>>2]=A>>>0>z>>>0?A:z;A=Zi(f[C>>2]|0,0,A|0,0)|0;A=0-I|A;C=f[a+8>>2]|0;f[e>>2]=A>>>0<C>>>0?A:C;C=b+16|0;B=(X(f[C>>2]|0,(c>>>0)/(B>>>0)|0)|0)+(f[b+8>>2]|0)|0;A=f[a+4>>2]|0;f[g>>2]=B>>>0>A>>>0?B:A;B=Zi(f[C>>2]|0,0,B|0,0)|0;B=0-I|B;C=f[a+12>>2]|0;f[h>>2]=B>>>0<C>>>0?B:C;f[k>>2]=0;f[l>>2]=0;f[i>>2]=2147483647;f[j>>2]=2147483647;C=a+16|0;if(!(f[C>>2]|0))return;else z=0;while(1){u=f[m+(z<<2)>>2]|0;p=f[o>>2]|0;b=((f[d>>2]|0)+-1+p|0)/(p|0)|0;A=o+4|0;q=f[A>>2]|0;c=((f[g>>2]|0)+-1+q|0)/(q|0)|0;p=(p+-1+(f[e>>2]|0)|0)/(p|0)|0;q=(q+-1+(f[h>>2]|0)|0)/(q|0)|0;B=n+4|0;a=f[B>>2]|0;if(a>>>0>(f[l>>2]|0)>>>0){f[l>>2]=a;a=f[B>>2]|0}if(a|0){x=Zi(b|0,((b|0)<0)<<31>>31|0,-1,-1)|0;y=I;v=Zi(c|0,((c|0)<0)<<31>>31|0,-1,-1)|0;w=I;t=Zi(p|0,((p|0)<0)<<31>>31|0,-1,-1)|0;s=I;q=Zi(q|0,((q|0)<0)<<31>>31|0,-1,-1)|0;r=I;p=0;c=u;while(1){a=a+-1|0;b=f[n+812+(p<<2)>>2]|0;u=f[n+944+(p<<2)>>2]|0;f[c>>2]=b;f[c+4>>2]=u;F=f[o>>2]<<b+a;K=f[A>>2]<<u+a;G=f[i>>2]|0;f[i>>2]=(G|0)<(F|0)?G:F;F=f[j>>2]|0;f[j>>2]=(F|0)<(K|0)?F:K;K=fj(1,0,a|0)|0;F=I;G=Zi(x|0,y|0,K|0,F|0)|0;G=dj(G|0,I|0,a|0)|0;D=Zi(v|0,w|0,K|0,F|0)|0;D=dj(D|0,I|0,a|0)|0;J=Zi(t|0,s|0,K|0,F|0)|0;J=dj(J|0,I|0,a|0)|0;F=Zi(q|0,r|0,K|0,F|0)|0;F=dj(F|0,I|0,a|0)|0;K=fj(1,0,b|0)|0;H=I;E=Zi(J|0,((J|0)<0)<<31>>31|0,-1,-1)|0;H=Zi(E|0,I|0,K|0,H|0)|0;H=dj(H|0,I|0,b|0)|0;K=fj(1,0,u|0)|0;E=I;L=Zi(F|0,((F|0)<0)<<31>>31|0,-1,-1)|0;E=Zi(L|0,I|0,K|0,E|0)|0;E=dj(E|0,I|0,u|0)|0;b=(G|0)==(J|0)?0:(H<<b)-(G>>b<<b)>>b;u=(D|0)==(F|0)?0:(E<<u)-(D>>u<<u)>>u;f[c+8>>2]=b;f[c+12>>2]=u;b=X(u,b)|0;if(b>>>0>(f[k>>2]|0)>>>0)f[k>>2]=b;p=p+1|0;if(p>>>0>=(f[B>>2]|0)>>>0)break;else c=c+16|0}}z=z+1|0;if(z>>>0>=(f[C>>2]|0)>>>0)break;else{n=n+1080|0;o=o+52|0}}return}function Ef(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0;if(!a)return;c=a+4|0;d=f[c>>2]|0;if(d|0){Mc(d);f[c>>2]=0}if(b|0){j=a;k=0;while(1){l=j+196|0;c=f[l>>2]|0;if(c|0){i=j+192|0;d=f[i>>2]|0;if(d){h=0;while(1){e=c+12|0;g=f[e>>2]|0;if(g){Mc(g);f[e>>2]=0;d=f[i>>2]|0}h=h+1|0;if(h>>>0>=d>>>0)break;else c=c+16|0}c=f[l>>2]|0}Mc(c);f[l>>2]=0}k=k+1|0;if((k|0)==(b|0))break;else j=j+232|0}}Mc(a);return}function Ff(a,c,e,g){a=a|0;c=c|0;e=e|0;g=g|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;L=u;u=u+32|0;n=L+28|0;m=L+24|0;o=L+20|0;q=L+16|0;p=L+12|0;r=L+8|0;s=L+4|0;t=L;H=c+76|0;C=f[H>>2]|0;K=(f[C+(e*5640|0)+420>>2]|0)+1|0;G=a+16|0;D=Hc((f[G>>2]|0)*528|0)|0;if(!D){K=0;u=L;return K|0}E=Hc(f[G>>2]<<2)|0;if(!E){Mc(D);K=0;u=L;return K|0}i=Cf(a,f[H>>2]|0,e)|0;if(!i){Mc(D);Mc(E);K=0;u=L;return K|0}l=f[G>>2]|0;if(l|0){j=D;k=0;while(1){f[E+(k<<2)>>2]=j;k=k+1|0;if(k>>>0>=l>>>0)break;else j=j+528|0}}Df(a,c,e,o,q,p,r,s,t,m,n,E);J=f[m>>2]|0;x=X(f[G>>2]|0,J)|0;I=f[n>>2]|0;w=X(I,x)|0;b[i>>0]=(h[c+93>>0]|0)>>>3&1;F=Ic(X(f[C+(e*5640|0)+8>>2]|0,w)|0,2)|0;k=i+4|0;f[k>>2]=F;if(!F){Mc(D);Mc(E);j=f[k>>2]|0;if(j|0){Mc(j);f[k>>2]=0}if(K|0){o=i;p=0;while(1){q=o+196|0;j=f[q>>2]|0;if(j|0){a=o+192|0;k=f[a>>2]|0;if(k){n=0;while(1){l=j+12|0;m=f[l>>2]|0;if(m){Mc(m);f[l>>2]=0;k=f[a>>2]|0}n=n+1|0;if(n>>>0>=k>>>0)break;else j=j+16|0}j=f[q>>2]|0}Mc(j);f[q>>2]=0}p=p+1|0;if((p|0)==(K|0))break;else o=o+232|0}}Mc(i);K=0;u=L;return K|0}m=f[i+196>>2]|0;v=f[a+24>>2]|0;F=f[o>>2]|0;f[i+200>>2]=F;B=f[p>>2]|0;f[i+204>>2]=B;A=f[q>>2]|0;f[i+208>>2]=A;z=f[r>>2]|0;f[i+212>>2]=z;y=f[s>>2]|0;f[i+224>>2]=y;s=f[t>>2]|0;f[i+228>>2]=s;f[i+20>>2]=1;f[i+16>>2]=J;f[i+12>>2]=x;f[i+8>>2]=w;p=f[i+192>>2]|0;if(p|0){o=v;n=0;while(1){j=f[m+12>>2]|0;k=f[E+(n<<2)>>2]|0;f[m>>2]=f[o>>2];f[m+4>>2]=f[o+4>>2];a=f[m+8>>2]|0;if(a|0){l=0;while(1){f[j>>2]=f[k>>2];f[j+4>>2]=f[k+4>>2];f[j+8>>2]=f[k+8>>2];f[j+12>>2]=f[k+12>>2];l=l+1|0;if(l>>>0>=a>>>0)break;else{j=j+16|0;k=k+16|0}}}n=n+1|0;if(n>>>0>=p>>>0)break;else{o=o+52|0;m=m+16|0}}}if(K>>>0>1){o=1;q=i;do{j=f[q+428>>2]|0;f[q+432>>2]=F;f[q+436>>2]=B;f[q+440>>2]=A;f[q+444>>2]=z;f[q+456>>2]=y;f[q+460>>2]=s;f[q+252>>2]=1;f[q+248>>2]=J;f[q+244>>2]=x;f[q+240>>2]=w;r=f[q+424>>2]|0;if(r|0){p=v;n=0;while(1){k=f[j+12>>2]|0;l=f[E+(n<<2)>>2]|0;f[j>>2]=f[p>>2];f[j+4>>2]=f[p+4>>2];a=f[j+8>>2]|0;if(a|0){m=0;while(1){f[k>>2]=f[l>>2];f[k+4>>2]=f[l+4>>2];f[k+8>>2]=f[l+8>>2];f[k+12>>2]=f[l+12>>2];m=m+1|0;if(m>>>0>=a>>>0)break;else{k=k+16|0;l=l+16|0}}}n=n+1|0;if(n>>>0>=r>>>0)break;else{p=p+52|0;j=j+16|0}}}f[q+236>>2]=f[q+4>>2];q=q+232|0;o=o+1|0}while((o|0)!=(K|0))}Mc(D);Mc(E);do if(b[C+(e*5640|0)+5636>>0]&4){j=d[c>>1]|0;if((j&65535)>2){if(!((g|0)==1|(j&65535)<7))break}else if((g|0)!=1)break;Gf(f[H>>2]|0,e,F,A,B,z,J,y,s);K=i;u=L;return K|0}while(0);a=f[G>>2]|0;j=f[H>>2]|0;l=(f[j+(e*5640|0)+420>>2]|0)+1|0;if(!l){K=i;u=L;return K|0}m=f[j+(e*5640|0)+8>>2]|0;n=f[j+(e*5640|0)+4>>2]|0;k=0;j=j+(e*5640|0)+424|0;while(1){f[j+76>>2]=0;f[j+92>>2]=a;f[j+72>>2]=0;f[j+88>>2]=I;f[j+68>>2]=0;f[j+84>>2]=m;f[j+36>>2]=n;f[j+80>>2]=0;f[j+96>>2]=J;f[j+100>>2]=F;f[j+104>>2]=A;f[j+108>>2]=B;f[j+112>>2]=z;f[j+116>>2]=y;f[j+120>>2]=s;k=k+1|0;if((k|0)==(l|0))break;else j=j+148|0}u=L;return i|0}function Gf(a,b,c,d,e,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,l=0;l=(f[a+(b*5640|0)+420>>2]|0)+1|0;f[a+(b*5640|0)+500>>2]=f[a+(b*5640|0)+428>>2];f[a+(b*5640|0)+516>>2]=f[a+(b*5640|0)+440>>2];f[a+(b*5640|0)+496>>2]=f[a+(b*5640|0)+424>>2];f[a+(b*5640|0)+512>>2]=f[a+(b*5640|0)+436>>2];f[a+(b*5640|0)+508>>2]=f[a+(b*5640|0)+432>>2];f[a+(b*5640|0)+492>>2]=0;f[a+(b*5640|0)+460>>2]=f[a+(b*5640|0)+456>>2];f[a+(b*5640|0)+504>>2]=0;f[a+(b*5640|0)+520>>2]=h;f[a+(b*5640|0)+524>>2]=c;f[a+(b*5640|0)+528>>2]=d;f[a+(b*5640|0)+532>>2]=e;f[a+(b*5640|0)+536>>2]=g;f[a+(b*5640|0)+540>>2]=i;f[a+(b*5640|0)+544>>2]=j;if(l>>>0<=1)return;k=1;a=a+(b*5640|0)+572|0;while(1){f[a+76>>2]=f[a+4>>2];f[a+92>>2]=f[a+16>>2];f[a+72>>2]=f[a>>2];f[a+88>>2]=f[a+12>>2];b=f[a+8>>2]|0;f[a+84>>2]=b;f[a+36>>2]=f[a+32>>2];f[a+80>>2]=0;f[a+68>>2]=b>>>0>(f[a+-64>>2]|0)>>>0?b:0;f[a+96>>2]=h;f[a+100>>2]=c;f[a+104>>2]=d;f[a+108>>2]=e;f[a+112>>2]=g;f[a+116>>2]=i;f[a+120>>2]=j;k=k+1|0;if((k|0)==(l|0))break;else a=a+148|0}return}function Hf(a,c,e,g,h,i,j){a=a|0;c=c|0;e=e|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;V=f[c+76>>2]|0;Y=V+(e*5640|0)+424+(g*148|0)+36|0;W=Nc(f[Y>>2]|0)|0;f[a+(g*232|0)+40>>2]=1;X=a+(g*232|0)+44|0;f[a+(g*232|0)+80>>2]=f[Y>>2];do if(b[c+93>>0]&8){k=d[c>>1]|0;if((k&65535)>2){if(!((j|0)==1&(k&65535)>6|(k+-3&65535)<4))break}else if(!((j|0)==1|(k+-3&65535)<4))break;a:do if((i|0)<3){p=V+(e*5640|0)+424+(g*148|0)+72|0;q=V+(e*5640|0)+424+(g*148|0)+88|0;r=a+(g*232|0)+56|0;s=V+(e*5640|0)+424+(g*148|0)+76|0;t=a+(g*232|0)+48|0;u=V+(e*5640|0)+424+(g*148|0)+92|0;v=a+(g*232|0)+60|0;w=V+(e*5640|0)+424+(g*148|0)+68|0;x=a+(g*232|0)+64|0;y=V+(e*5640|0)+424+(g*148|0)+84|0;z=a+(g*232|0)+52|0;A=V+(e*5640|0)+424+(g*148|0)+80|0;B=a+(g*232|0)+68|0;C=V+(e*5640|0)+424+(g*148|0)+96|0;D=a+(g*232|0)+72|0;E=V+(e*5640|0)+424+(g*148|0)+100|0;F=a+(g*232|0)+96|0;G=V+(e*5640|0)+424+(g*148|0)+108|0;H=a+(g*232|0)+104|0;I=V+(e*5640|0)+424+(g*148|0)+104|0;J=a+(g*232|0)+100|0;K=V+(e*5640|0)+424+(g*148|0)+112|0;L=a+(g*232|0)+108|0;k=i;while(1){j=k;k=k+1|0;switch(b[W+k>>0]|0){case 82:{l=r;m=q;n=X;o=p;U=10;break}case 67:{l=v;m=u;n=t;o=s;U=10;break}case 76:{l=z;m=y;n=x;o=w;U=10;break}case 80:{if((f[Y>>2]|0)>>>0<2){l=D;m=C;n=B;o=A;U=10}else{f[F>>2]=f[E>>2];f[H>>2]=f[G>>2];l=L;m=K;n=J;o=I;U=10}break}default:{}}if((U|0)==10){U=0;f[n>>2]=f[o>>2];f[l>>2]=f[m>>2]}if((j|0)>=2)break a}}while(0);k=(i|0)>-1;if(!h){if(!k)return;m=V+(e*5640|0)+424+(g*148|0)+76|0;n=V+(e*5640|0)+424+(g*148|0)+132|0;o=a+(g*232|0)+48|0;p=a+(g*232|0)+60|0;q=V+(e*5640|0)+424+(g*148|0)+72|0;r=V+(e*5640|0)+424+(g*148|0)+128|0;s=a+(g*232|0)+56|0;t=V+(e*5640|0)+424+(g*148|0)+68|0;u=V+(e*5640|0)+424+(g*148|0)+124|0;v=a+(g*232|0)+64|0;w=a+(g*232|0)+52|0;x=V+(e*5640|0)+424+(g*148|0)+80|0;y=V+(e*5640|0)+424+(g*148|0)+136|0;z=a+(g*232|0)+68|0;A=a+(g*232|0)+72|0;B=V+(e*5640|0)+424+(g*148|0)+100|0;C=V+(e*5640|0)+424+(g*148|0)+140|0;D=V+(e*5640|0)+424+(g*148|0)+108|0;E=V+(e*5640|0)+424+(g*148|0)+144|0;F=a+(g*232|0)+96|0;G=V+(e*5640|0)+424+(g*148|0)+116|0;H=a+(g*232|0)+100|0;I=a+(g*232|0)+104|0;l=V+(e*5640|0)+424+(g*148|0)+120|0;j=a+(g*232|0)+108|0;k=i;while(1){b:do switch(b[W+k>>0]|0){case 67:{g=f[m>>2]|0;f[o>>2]=g;g=g+1|0;f[p>>2]=g;f[n>>2]=g;break}case 82:{g=f[q>>2]|0;f[X>>2]=g;g=g+1|0;f[s>>2]=g;f[r>>2]=g;break}case 76:{g=f[t>>2]|0;f[v>>2]=g;g=g+1|0;f[w>>2]=g;f[u>>2]=g;break}case 80:if((f[Y>>2]|0)>>>0<2){g=f[x>>2]|0;f[z>>2]=g;g=g+1|0;f[A>>2]=g;f[y>>2]=g;break b}else{g=f[B>>2]|0;i=f[D>>2]|0;f[F>>2]=g;e=f[G>>2]|0;e=e+g-((g>>>0)%(e>>>0)|0)|0;f[H>>2]=e;f[I>>2]=i;g=f[l>>2]|0;g=g+i-((i>>>0)%(g>>>0)|0)|0;f[j>>2]=g;f[C>>2]=e;f[E>>2]=g;break b}default:{}}while(0);if((k|0)>0)k=k+-1|0;else break}return}if(!k)return;P=V+(e*5640|0)+424+(g*148|0)+128|0;Q=V+(e*5640|0)+424+(g*148|0)+88|0;R=V+(e*5640|0)+424+(g*148|0)+72|0;S=a+(g*232|0)+56|0;T=V+(e*5640|0)+424+(g*148|0)+132|0;t=V+(e*5640|0)+424+(g*148|0)+92|0;u=V+(e*5640|0)+424+(g*148|0)+76|0;v=a+(g*232|0)+48|0;w=a+(g*232|0)+60|0;x=V+(e*5640|0)+424+(g*148|0)+124|0;y=V+(e*5640|0)+424+(g*148|0)+84|0;z=V+(e*5640|0)+424+(g*148|0)+68|0;A=a+(g*232|0)+64|0;B=a+(g*232|0)+52|0;C=V+(e*5640|0)+424+(g*148|0)+136|0;D=V+(e*5640|0)+424+(g*148|0)+96|0;E=V+(e*5640|0)+424+(g*148|0)+80|0;F=a+(g*232|0)+68|0;G=a+(g*232|0)+72|0;H=V+(e*5640|0)+424+(g*148|0)+140|0;I=V+(e*5640|0)+424+(g*148|0)+104|0;J=a+(g*232|0)+96|0;K=V+(e*5640|0)+424+(g*148|0)+116|0;L=a+(g*232|0)+100|0;h=V+(e*5640|0)+424+(g*148|0)+144|0;M=V+(e*5640|0)+424+(g*148|0)+112|0;N=a+(g*232|0)+104|0;O=V+(e*5640|0)+424+(g*148|0)+120|0;r=a+(g*232|0)+108|0;s=V+(e*5640|0)+424+(g*148|0)+100|0;q=V+(e*5640|0)+424+(g*148|0)+108|0;k=1;p=i;while(1){o=W+p|0;c:do switch(b[o>>0]|0){case 67:{j=w;l=T;m=(f[T>>2]|0)+-1|0;n=v;U=35;break}case 82:{j=S;l=P;m=(f[P>>2]|0)+-1|0;n=X;U=35;break}case 76:{j=B;l=x;m=(f[x>>2]|0)+-1|0;n=A;U=35;break}case 80:if((f[Y>>2]|0)>>>0<2){j=G;l=C;m=(f[C>>2]|0)+-1|0;n=F;U=35;break c}else{n=f[H>>2]|0;m=f[K>>2]|0;f[J>>2]=n-m-((n>>>0)%(m>>>0)|0);f[L>>2]=n;n=f[h>>2]|0;m=f[O>>2]|0;j=r;l=h;m=n-m-((n>>>0)%(m>>>0)|0)|0;n=N;U=35;break c}default:{}}while(0);if((U|0)==35){U=0;f[n>>2]=m;f[j>>2]=f[l>>2]}d:do if((k|0)==1)switch(b[o>>0]|0){case 82:{k=f[P>>2]|0;if((k|0)!=(f[Q>>2]|0)){f[X>>2]=k;k=k+1|0;f[S>>2]=k;f[P>>2]=k;k=0;break d}if(!(If(p+-1|0,c,e,g,W)|0)){k=0;break d}k=f[R>>2]|0;f[X>>2]=k;k=k+1|0;f[S>>2]=k;f[P>>2]=k;k=1;break d}case 67:{k=f[T>>2]|0;if((k|0)!=(f[t>>2]|0)){f[v>>2]=k;k=k+1|0;f[w>>2]=k;f[T>>2]=k;k=0;break d}if(!(If(p+-1|0,c,e,g,W)|0)){k=0;break d}k=f[u>>2]|0;f[v>>2]=k;k=k+1|0;f[w>>2]=k;f[T>>2]=k;k=1;break d}case 76:{k=f[x>>2]|0;if((k|0)!=(f[y>>2]|0)){f[A>>2]=k;k=k+1|0;f[B>>2]=k;f[x>>2]=k;k=0;break d}if(!(If(p+-1|0,c,e,g,W)|0)){k=0;break d}k=f[z>>2]|0;f[A>>2]=k;k=k+1|0;f[B>>2]=k;f[x>>2]=k;k=1;break d}case 80:{if((f[Y>>2]|0)>>>0<2){k=f[C>>2]|0;if((k|0)!=(f[D>>2]|0)){f[F>>2]=k;k=k+1|0;f[G>>2]=k;f[C>>2]=k;k=0;break d}if(!(If(p+-1|0,c,e,g,W)|0)){k=0;break d}k=f[E>>2]|0;f[F>>2]=k;k=k+1|0;f[G>>2]=k;f[C>>2]=k;k=1;break d}k=f[H>>2]|0;if(k>>>0<(f[I>>2]|0)>>>0){f[J>>2]=k;i=f[K>>2]|0;k=i+k-((k>>>0)%(i>>>0)|0)|0;f[L>>2]=k;f[H>>2]=k;k=0;break d}j=f[h>>2]|0;if(j>>>0<(f[M>>2]|0)>>>0){f[N>>2]=j;i=f[O>>2]|0;k=0;l=i+j|0;j=(j>>>0)%(i>>>0)|0}else{if(!(If(p+-1|0,c,e,g,W)|0)){k=0;break d}i=f[q>>2]|0;f[h>>2]=i;f[N>>2]=i;j=f[O>>2]|0;k=1;l=j+i|0;j=(i>>>0)%(j>>>0)|0}V=l-j|0;f[r>>2]=V;f[h>>2]=V;V=f[s>>2]|0;f[J>>2]=V;i=f[K>>2]|0;i=i+V-((V>>>0)%(i>>>0)|0)|0;f[L>>2]=i;f[H>>2]=i;break d}default:{k=1;break d}}while(0);if((p|0)>0)p=p+-1|0;else break}return}while(0);f[X>>2]=f[V+(e*5640|0)+424+(g*148|0)+72>>2];f[a+(g*232|0)+56>>2]=f[V+(e*5640|0)+424+(g*148|0)+88>>2];f[a+(g*232|0)+48>>2]=f[V+(e*5640|0)+424+(g*148|0)+76>>2];f[a+(g*232|0)+60>>2]=f[V+(e*5640|0)+424+(g*148|0)+92>>2];f[a+(g*232|0)+64>>2]=f[V+(e*5640|0)+424+(g*148|0)+68>>2];f[a+(g*232|0)+52>>2]=f[V+(e*5640|0)+424+(g*148|0)+84>>2];f[a+(g*232|0)+68>>2]=f[V+(e*5640|0)+424+(g*148|0)+80>>2];f[a+(g*232|0)+72>>2]=f[V+(e*5640|0)+424+(g*148|0)+96>>2];f[a+(g*232|0)+96>>2]=f[V+(e*5640|0)+424+(g*148|0)+100>>2];f[a+(g*232|0)+104>>2]=f[V+(e*5640|0)+424+(g*148|0)+108>>2];f[a+(g*232|0)+100>>2]=f[V+(e*5640|0)+424+(g*148|0)+104>>2];f[a+(g*232|0)+108>>2]=f[V+(e*5640|0)+424+(g*148|0)+112>>2];return}function If(a,c,d,e,g){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;var h=0,i=0,j=0;i=f[c+76>>2]|0;if((a|0)>-1)h=a;else{j=0;j=j&1;return j|0}a:while(1){switch(b[g+h>>0]|0){case 82:{j=3;break a}case 67:{j=5;break a}case 76:{j=7;break a}case 80:{j=9;break a}default:{}}h=h+-1|0}if((j|0)==3){if((f[i+(d*5640|0)+424+(e*148|0)+128>>2]|0)!=(f[i+(d*5640|0)+424+(e*148|0)+88>>2]|0)){j=1;j=j&1;return j|0}j=(If(a+-1|0,c,d,e,g)|0)!=0;j=j&1;return j|0}else if((j|0)==5){if((f[i+(d*5640|0)+424+(e*148|0)+132>>2]|0)!=(f[i+(d*5640|0)+424+(e*148|0)+92>>2]|0)){j=1;j=j&1;return j|0}j=(If(a+-1|0,c,d,e,g)|0)!=0;j=j&1;return j|0}else if((j|0)==7){if((f[i+(d*5640|0)+424+(e*148|0)+124>>2]|0)!=(f[i+(d*5640|0)+424+(e*148|0)+84>>2]|0)){j=1;j=j&1;return j|0}j=(If(a+-1|0,c,d,e,g)|0)!=0;j=j&1;return j|0}else if((j|0)==9){if((f[i+(d*5640|0)+424+(e*148|0)+36>>2]|0)>>>0<2){if((f[i+(d*5640|0)+424+(e*148|0)+136>>2]|0)!=(f[i+(d*5640|0)+424+(e*148|0)+96>>2]|0)){j=1;j=j&1;return j|0}j=(If(h+-1|0,c,d,e,g)|0)!=0;j=j&1;return j|0}if((f[i+(d*5640|0)+424+(e*148|0)+140>>2]|0)!=(f[i+(d*5640|0)+424+(e*148|0)+104>>2]|0)){j=1;j=j&1;return j|0}if((f[i+(d*5640|0)+424+(e*148|0)+144>>2]|0)!=(f[i+(d*5640|0)+424+(e*148|0)+112>>2]|0)){j=1;j=j&1;return j|0}j=(If(h+-1|0,c,d,e,g)|0)!=0;j=j&1;return j|0}return 0}function Jf(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;E=f[c+76>>2]|0;F=f[c+24>>2]|0;J=(d>>>0)%(F>>>0)|0;F=(d>>>0)/(F>>>0)|0;G=f[c+4>>2]|0;B=f[c+12>>2]|0;A=(X(B,J)|0)+G|0;H=f[a>>2]|0;H=(A|0)>(H|0)?A:H;G=(X(B,J+1|0)|0)+G|0;J=f[a+8>>2]|0;J=(G|0)<(J|0)?G:J;G=f[c+8>>2]|0;B=f[c+16>>2]|0;A=(X(B,F)|0)+G|0;D=f[a+4>>2]|0;D=(A|0)>(D|0)?A:D;G=(X(B,F+1|0)|0)+G|0;F=f[a+12>>2]|0;F=(G|0)<(F|0)?G:F;G=f[a+16>>2]|0;if(!G){l=0;k=2147483647;j=2147483647;e=0}else{y=H+-1|0;z=D+-1|0;A=J+-1|0;B=F+-1|0;k=2147483647;x=f[E+(d*5640|0)+5584>>2]|0;v=f[a+24>>2]|0;w=0;j=2147483647;l=0;e=0;while(1){s=f[v>>2]|0;c=(y+s|0)/(s|0)|0;t=f[v+4>>2]|0;a=(z+t|0)/(t|0)|0;g=(A+s|0)/(s|0)|0;h=(B+t|0)/(t|0)|0;u=f[x+4>>2]|0;if(u>>>0<=l>>>0){if(u)C=5}else{l=u;C=5}if((C|0)==5){C=0;q=Zi(c|0,((c|0)<0)<<31>>31|0,-1,-1)|0;r=I;o=Zi(a|0,((a|0)<0)<<31>>31|0,-1,-1)|0;p=I;m=Zi(g|0,((g|0)<0)<<31>>31|0,-1,-1)|0;n=I;h=Zi(h|0,((h|0)<0)<<31>>31|0,-1,-1)|0;i=I;L=f[x+812>>2]|0;g=f[x+944>>2]|0;K=u+-1|0;N=s<<K+L;c=t<<g+K;j=j>>>0<N>>>0?j:N;k=k>>>0<c>>>0?k:c;c=fj(1,0,K|0)|0;N=I;M=Zi(q|0,r|0,c|0,N|0)|0;M=dj(M|0,I|0,K|0)|0;a=Zi(o|0,p|0,c|0,N|0)|0;a=dj(a|0,I|0,K|0)|0;O=Zi(m|0,n|0,c|0,N|0)|0;O=dj(O|0,I|0,K|0)|0;N=Zi(h|0,i|0,c|0,N|0)|0;K=dj(N|0,I|0,K|0)|0;N=fj(1,0,L|0)|0;N=Zi(N|0,I|0,-1,-1)|0;N=Zi(N|0,I|0,O|0,((O|0)<0)<<31>>31|0)|0;N=dj(N|0,I|0,L|0)|0;c=fj(1,0,g|0)|0;c=Zi(c|0,I|0,-1,-1)|0;c=Zi(c|0,I|0,K|0,((K|0)<0)<<31>>31|0)|0;c=dj(c|0,I|0,g|0)|0;g=X((M|0)==(O|0)?0:(N<<L)-(M>>L<<L)>>L,(a|0)==(K|0)?0:(c<<g)-(a>>g<<g)>>g)|0;e=g>>>0>e>>>0?g:e;if(u>>>0>1){a=-1;g=1;while(1){L=f[x+812+(g<<2)>>2]|0;c=f[x+944+(g<<2)>>2]|0;M=a+-1+u|0;a=s<<M+L;N=t<<c+M;j=j>>>0<a>>>0?j:a;k=k>>>0<N>>>0?k:N;N=fj(1,0,M|0)|0;a=I;K=Zi(q|0,r|0,N|0,a|0)|0;K=dj(K|0,I|0,M|0)|0;O=Zi(o|0,p|0,N|0,a|0)|0;O=dj(O|0,I|0,M|0)|0;P=Zi(m|0,n|0,N|0,a|0)|0;P=dj(P|0,I|0,M|0)|0;a=Zi(h|0,i|0,N|0,a|0)|0;M=dj(a|0,I|0,M|0)|0;a=fj(1,0,L|0)|0;a=Zi(a|0,I|0,-1,-1)|0;a=Zi(a|0,I|0,P|0,((P|0)<0)<<31>>31|0)|0;a=dj(a|0,I|0,L|0)|0;N=fj(1,0,c|0)|0;N=Zi(N|0,I|0,-1,-1)|0;N=Zi(N|0,I|0,M|0,((M|0)<0)<<31>>31|0)|0;N=dj(N|0,I|0,c|0)|0;c=X((K|0)==(P|0)?0:(a<<L)-(K>>L<<L)>>L,(O|0)==(M|0)?0:(N<<c)-(O>>c<<c)>>c)|0;e=c>>>0>e>>>0?c:e;c=g+1|0;if(c>>>0<u>>>0){a=~g;g=c}else break}}}w=w+1|0;if(w>>>0>=G>>>0)break;else{x=x+1080|0;v=v+52|0}}}if(b[E+(d*5640|0)+5636>>0]&4){Gf(E,d,H,J,D,F,e,j,k);return}g=(f[E+(d*5640|0)+420>>2]|0)+1|0;if(!g)return;h=f[E+(d*5640|0)+8>>2]|0;i=f[E+(d*5640|0)+4>>2]|0;a=0;c=E+(d*5640|0)+424|0;while(1){f[c+76>>2]=0;f[c+92>>2]=G;f[c+72>>2]=0;f[c+88>>2]=l;f[c+68>>2]=0;f[c+84>>2]=h;f[c+36>>2]=i;f[c+80>>2]=0;f[c+96>>2]=e;f[c+100>>2]=H;f[c+104>>2]=J;f[c+108>>2]=D;f[c+112>>2]=F;f[c+116>>2]=j;f[c+120>>2]=k;a=a+1|0;if((a|0)==(g|0))break;else c=c+148|0}return}function Kf(a){a=a|0;var c=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0;switch(f[a+80>>2]|0){case 0:{c=a+40|0;if(!(f[c>>2]|0)){E=a+32|0;l=E;E=f[E>>2]|0;e=18}else{f[c>>2]=0;v=f[a+64>>2]|0;f[a+36>>2]=v;e=5}while(1){if((e|0)==5){if(v>>>0>=(f[a+52>>2]|0)>>>0){nb=0;e=153;break}z=f[a+44>>2]|0;f[a+28>>2]=z;e=7}else if((e|0)==18){j=E+1|0;f[l>>2]=j;h=l;e=14}while(1){if((e|0)==7){e=0;if(z>>>0>=(f[a+56>>2]|0)>>>0){e=21;break}A=f[a+48>>2]|0;p=a+24|0;f[p>>2]=A}else if((e|0)==14){if(j>>>0<(f[a+72>>2]|0)>>>0){e=16;break}F=a+24|0;n=F;F=f[F>>2]|0;e=19}while(1){if((e|0)==19){e=0;A=F+1|0;f[n>>2]=A;p=n}if(A>>>0>=(f[a+60>>2]|0)>>>0){e=20;break}B=f[a+196>>2]|0;C=f[a+28>>2]|0;if(C>>>0<(f[B+(A<<4)+8>>2]|0)>>>0)break;else{n=p;F=A;e=19}}if((e|0)==20){e=a+28|0;z=(f[e>>2]|0)+1|0;f[e>>2]=z;e=7;continue}c=f[B+(A<<4)+12>>2]|0;if(!(b[a>>0]|0)){mb=X(f[c+(C<<4)+12>>2]|0,f[c+(C<<4)+8>>2]|0)|0;f[a+72>>2]=mb}j=f[a+68>>2]|0;h=a+32|0;f[h>>2]=j;e=14}if((e|0)==16){e=0;D=X(f[a+8>>2]|0,f[a+36>>2]|0)|0;D=(X(f[a+12>>2]|0,f[a+28>>2]|0)|0)+D|0;D=D+(X(f[a+16>>2]|0,f[a+24>>2]|0)|0)|0;D=D+(X(f[a+20>>2]|0,j)|0)|0;D=(f[a+4>>2]|0)+(D<<1)|0;if(!(d[D>>1]|0))break;else{l=h;E=j;e=18;continue}}else if((e|0)==21){e=a+36|0;v=(f[e>>2]|0)+1|0;f[e>>2]=v;e=5;continue}}if((e|0)==153)return nb|0;d[D>>1]=1;a=1;return a|0}case 1:{c=a+40|0;if(!(f[c>>2]|0)){x=a+32|0;k=x;x=f[x>>2]|0;e=38}else{f[c>>2]=0;G=f[a+44>>2]|0;f[a+28>>2]=G;e=25}while(1){if((e|0)==25){if(G>>>0>=(f[a+56>>2]|0)>>>0){nb=0;e=153;break}r=f[a+64>>2]|0;f[a+36>>2]=r;e=27}else if((e|0)==38){i=x+1|0;f[k>>2]=i;g=k;e=34}while(1){if((e|0)==27){e=0;if(r>>>0>=(f[a+52>>2]|0)>>>0){e=41;break}s=f[a+48>>2]|0;o=a+24|0;f[o>>2]=s}else if((e|0)==34){if(i>>>0<(f[a+72>>2]|0)>>>0){e=36;break}y=a+24|0;m=y;y=f[y>>2]|0;e=39}while(1){if((e|0)==39){e=0;s=y+1|0;f[m>>2]=s;o=m}if(s>>>0>=(f[a+60>>2]|0)>>>0){e=40;break}t=f[a+196>>2]|0;u=f[a+28>>2]|0;if(u>>>0<(f[t+(s<<4)+8>>2]|0)>>>0)break;else{m=o;y=s;e=39}}if((e|0)==40){e=a+36|0;r=(f[e>>2]|0)+1|0;f[e>>2]=r;e=27;continue}c=f[t+(s<<4)+12>>2]|0;if(!(b[a>>0]|0)){mb=X(f[c+(u<<4)+12>>2]|0,f[c+(u<<4)+8>>2]|0)|0;f[a+72>>2]=mb}i=f[a+68>>2]|0;g=a+32|0;f[g>>2]=i;e=34}if((e|0)==36){e=0;w=X(f[a+8>>2]|0,f[a+36>>2]|0)|0;w=(X(f[a+12>>2]|0,f[a+28>>2]|0)|0)+w|0;w=w+(X(f[a+16>>2]|0,f[a+24>>2]|0)|0)|0;w=w+(X(f[a+20>>2]|0,i)|0)|0;w=(f[a+4>>2]|0)+(w<<1)|0;if(!(d[w>>1]|0))break;else{k=g;x=i;e=38;continue}}else if((e|0)==41){e=a+28|0;G=(f[e>>2]|0)+1|0;f[e>>2]=G;e=25;continue}}if((e|0)==153)return nb|0;d[w>>1]=1;a=1;return a|0}case 2:{c=a+40|0;if(!(f[c>>2]|0)){lb=a+36|0;Ta=lb;lb=f[lb>>2]|0;e=75}else{f[c>>2]=0;p=a+224|0;f[p>>2]=0;q=a+228|0;f[q>>2]=0;r=f[a+192>>2]|0;if(r|0){s=f[a+196>>2]|0;o=0;e=0;c=0;do{j=f[s+(o<<4)+8>>2]|0;if(j){k=f[s+(o<<4)+12>>2]|0;l=f[s+(o<<4)>>2]|0;m=f[s+(o<<4)+4>>2]|0;n=j+-1|0;Ra=l<<(f[k>>2]|0)+n;Sa=m<<(f[k+4>>2]|0)+n;e=(e|0)==0?Ra:e>>>0<Ra>>>0?e:Ra;c=(c|0)==0?Sa:c>>>0<Sa>>>0?c:Sa;if((j|0)!=1){h=-1;i=1;while(1){g=n+h|0;Sa=l<<g+(f[k+(i<<4)>>2]|0);g=m<<(f[k+(i<<4)+4>>2]|0)+g;e=(e|0)==0?Sa:e>>>0<Sa>>>0?e:Sa;c=(c|0)==0?g:c>>>0<g>>>0?c:g;g=i+1|0;if(g>>>0<j>>>0){h=~i;i=g}else break}}f[p>>2]=e;f[q>>2]=c}o=o+1|0}while((o|0)!=(r|0))}if(!(b[a>>0]|0)){f[a+104>>2]=f[a+204>>2];f[a+96>>2]=f[a+200>>2];f[a+108>>2]=f[a+212>>2];f[a+100>>2]=f[a+208>>2]}J=f[a+44>>2]|0;f[a+28>>2]=J;e=54}while(1){if((e|0)==54){if(J>>>0>=(f[a+56>>2]|0)>>>0){nb=0;e=153;break}Xa=f[a+104>>2]|0;f[a+220>>2]=Xa;e=56}else if((e|0)==75){jb=lb+1|0;f[Ta>>2]=jb;Ua=Ta;e=71}while(1){if((e|0)==56){if((Xa|0)>=(f[a+108>>2]|0)){e=79;break}Ya=f[a+96>>2]|0;f[a+216>>2]=Ya;e=58}else if((e|0)==71){if(jb>>>0<(f[a+52>>2]|0)>>>0){e=73;break}mb=a+24|0;Va=mb;mb=f[mb>>2]|0;e=76}while(1){if((e|0)==58){if((Ya|0)>=(f[a+100>>2]|0)){e=78;break}Za=f[a+48>>2]|0;Wa=a+24|0;f[Wa>>2]=Za}else if((e|0)==76){Za=mb+1|0;f[Va>>2]=Za;Wa=Va}if(Za>>>0>=(f[a+60>>2]|0)>>>0){Ya=f[a+224>>2]|0;e=a+216|0;Sa=f[e>>2]|0;Ya=Sa+Ya-((Sa|0)%(Ya|0)|0)|0;f[e>>2]=Ya;e=58;continue}e=f[a+196>>2]|0;m=f[a+28>>2]|0;c=f[e+(Za<<4)+8>>2]|0;if(m>>>0>=c>>>0){Va=Wa;mb=Za;e=76;continue}n=f[e+(Za<<4)+12>>2]|0;i=c+~m|0;j=f[a+200>>2]|0;k=f[e+(Za<<4)>>2]|0;_a=k<<i;$a=(j+-1+_a|0)/(_a|0)|0;l=f[a+204>>2]|0;Sa=f[e+(Za<<4)+4>>2]|0;ab=Sa<<i;bb=(l+-1+ab|0)/(ab|0)|0;cb=_a+-1|0;c=(cb+(f[a+208>>2]|0)|0)/(_a|0)|0;db=ab+-1|0;e=(db+(f[a+212>>2]|0)|0)/(ab|0)|0;eb=f[n+(m<<4)>>2]|0;g=eb+i|0;fb=f[n+(m<<4)+4>>2]|0;h=fb+i|0;gb=f[a+220>>2]|0;if((gb|0)%(Sa<<h|0)|0|0){if((gb|0)!=(l|0)){Va=Wa;mb=Za;e=76;continue}if(!((bb<<i|0)%(1<<h|0)|0)){Va=Wa;mb=Za;e=76;continue}}hb=f[a+216>>2]|0;if((hb|0)%(k<<g|0)|0|0){if((hb|0)!=(j|0)){Va=Wa;mb=Za;e=76;continue}if(!(($a<<i|0)%(1<<g|0)|0)){Va=Wa;mb=Za;e=76;continue}}ib=f[n+(m<<4)+8>>2]|0;if(!ib){Va=Wa;mb=Za;e=76;continue}if((bb|0)==(e|0)|(($a|0)==(c|0)?1:(f[n+(m<<4)+12>>2]|0)==0)){Va=Wa;mb=Za;e=76}else{e=70;break}}if((e|0)==70){jb=(((cb+hb|0)/(_a|0)|0)>>eb)-($a>>eb)+(X((((db+gb|0)/(ab|0)|0)>>fb)-(bb>>fb)|0,ib)|0)|0;f[a+32>>2]=jb;jb=f[a+64>>2]|0;Ua=a+36|0;f[Ua>>2]=jb;e=71;continue}else if((e|0)==78){Xa=f[a+228>>2]|0;e=a+220|0;Sa=f[e>>2]|0;Xa=Sa+Xa-((Sa|0)%(Xa|0)|0)|0;f[e>>2]=Xa;e=56;continue}}if((e|0)==73){e=0;kb=X(f[a+8>>2]|0,jb)|0;kb=(X(f[a+12>>2]|0,f[a+28>>2]|0)|0)+kb|0;kb=kb+(X(f[a+16>>2]|0,f[a+24>>2]|0)|0)|0;kb=kb+(X(f[a+20>>2]|0,f[a+32>>2]|0)|0)|0;kb=(f[a+4>>2]|0)+(kb<<1)|0;if(!(d[kb>>1]|0))break;else{Ta=Ua;lb=jb;e=75;continue}}else if((e|0)==79){e=a+28|0;J=(f[e>>2]|0)+1|0;f[e>>2]=J;e=54;continue}}if((e|0)==153)return nb|0;d[kb>>1]=1;a=1;return a|0}case 3:{e=a+40|0;if(!(f[e>>2]|0)){Ra=f[a+24>>2]|0;Oa=a+36|0;ra=(f[a+196>>2]|0)+(Ra<<4)|0;ta=Oa;Oa=f[Oa>>2]|0;e=113}else{f[e>>2]=0;p=a+224|0;f[p>>2]=0;q=a+228|0;f[q>>2]=0;r=f[a+192>>2]|0;if(r|0){s=f[a+196>>2]|0;o=0;e=0;c=0;do{j=f[s+(o<<4)+8>>2]|0;if(j){k=f[s+(o<<4)+12>>2]|0;l=f[s+(o<<4)>>2]|0;m=f[s+(o<<4)+4>>2]|0;n=j+-1|0;lb=l<<(f[k>>2]|0)+n;mb=m<<(f[k+4>>2]|0)+n;e=(e|0)==0?lb:e>>>0<lb>>>0?e:lb;c=(c|0)==0?mb:c>>>0<mb>>>0?c:mb;if((j|0)!=1){h=-1;i=1;while(1){g=n+h|0;mb=l<<g+(f[k+(i<<4)>>2]|0);g=m<<(f[k+(i<<4)+4>>2]|0)+g;e=(e|0)==0?mb:e>>>0<mb>>>0?e:mb;c=(c|0)==0?g:c>>>0<g>>>0?c:g;g=i+1|0;if(g>>>0<j>>>0){h=~i;i=g}else break}}f[p>>2]=e;f[q>>2]=c}o=o+1|0}while((o|0)!=(r|0))}if(!(b[a>>0]|0)){c=f[a+204>>2]|0;f[a+104>>2]=c;f[a+96>>2]=f[a+200>>2];f[a+108>>2]=f[a+212>>2];f[a+100>>2]=f[a+208>>2]}else c=f[a+104>>2]|0;f[a+220>>2]=c;e=93}while(1){if((e|0)==93){if((c|0)>=(f[a+108>>2]|0)){nb=0;e=153;break}xa=f[a+96>>2]|0;f[a+216>>2]=xa;e=95}else if((e|0)==113){La=Oa+1|0;f[ta>>2]=La;qa=ra;ua=ta;Ma=Ra;e=109}while(1){if((e|0)==95){if((xa|0)>=(f[a+100>>2]|0)){e=117;break}ya=f[a+48>>2]|0;f[a+24>>2]=ya;e=97}else if((e|0)==109){if(La>>>0<(f[a+52>>2]|0)>>>0){e=111;break}Pa=a+28|0;sa=qa;va=Pa;Pa=f[Pa>>2]|0;Sa=Ma;e=114}while(1){if((e|0)==97){if(ya>>>0>=(f[a+60>>2]|0)>>>0){e=116;break}pa=(f[a+196>>2]|0)+(ya<<4)|0;za=f[a+44>>2]|0;wa=a+28|0;f[wa>>2]=za;Qa=ya}else if((e|0)==114){za=Pa+1|0;f[va>>2]=za;pa=sa;wa=va;Qa=Sa}mb=f[a+56>>2]|0;e=f[pa+8>>2]|0;if(za>>>0>=(mb>>>0<e>>>0?mb:e)>>>0){ya=Qa+1|0;f[a+24>>2]=ya;e=97;continue}n=f[pa+12>>2]|0;e=e+~za|0;g=f[a+200>>2]|0;h=f[pa>>2]|0;Aa=h<<e;Ba=(g+-1+Aa|0)/(Aa|0)|0;i=f[a+204>>2]|0;mb=f[pa+4>>2]|0;Ca=mb<<e;Da=(i+-1+Ca|0)/(Ca|0)|0;Ea=Aa+-1|0;j=(Ea+(f[a+208>>2]|0)|0)/(Aa|0)|0;Fa=Ca+-1|0;k=(Fa+(f[a+212>>2]|0)|0)/(Ca|0)|0;Ga=f[n+(za<<4)>>2]|0;l=Ga+e|0;Ha=f[n+(za<<4)+4>>2]|0;m=Ha+e|0;Ia=f[a+220>>2]|0;if((Ia|0)%(mb<<m|0)|0|0){if((Ia|0)!=(i|0)){sa=pa;va=wa;Pa=za;Sa=Qa;e=114;continue}if(!((Da<<e|0)%(1<<m|0)|0)){sa=pa;va=wa;Pa=za;Sa=Qa;e=114;continue}}Ja=f[a+216>>2]|0;if((Ja|0)%(h<<l|0)|0|0){if((Ja|0)!=(g|0)){sa=pa;va=wa;Pa=za;Sa=Qa;e=114;continue}if(!((Ba<<e|0)%(1<<l|0)|0)){sa=pa;va=wa;Pa=za;Sa=Qa;e=114;continue}}Ka=f[n+(za<<4)+8>>2]|0;if(!Ka){sa=pa;va=wa;Pa=za;Sa=Qa;e=114;continue}if((Da|0)==(k|0)|((Ba|0)==(j|0)?1:(f[n+(za<<4)+12>>2]|0)==0)){sa=pa;va=wa;Pa=za;Sa=Qa;e=114}else{e=108;break}}if((e|0)==108){La=(((Ea+Ja|0)/(Aa|0)|0)>>Ga)-(Ba>>Ga)+(X((((Fa+Ia|0)/(Ca|0)|0)>>Ha)-(Da>>Ha)|0,Ka)|0)|0;f[a+32>>2]=La;La=f[a+64>>2]|0;ua=a+36|0;f[ua>>2]=La;qa=pa;Ma=Qa;e=109;continue}else if((e|0)==116){xa=f[a+224>>2]|0;e=a+216|0;mb=f[e>>2]|0;xa=mb+xa-((mb|0)%(xa|0)|0)|0;f[e>>2]=xa;e=95;continue}}if((e|0)==111){e=0;Na=X(f[a+8>>2]|0,La)|0;Na=(X(f[a+12>>2]|0,f[a+28>>2]|0)|0)+Na|0;Na=Na+(X(f[a+16>>2]|0,Ma)|0)|0;Na=Na+(X(f[a+20>>2]|0,f[a+32>>2]|0)|0)|0;Na=(f[a+4>>2]|0)+(Na<<1)|0;if(!(d[Na>>1]|0))break;else{ra=qa;ta=ua;Oa=La;Ra=Ma;e=113;continue}}else if((e|0)==117){c=f[a+228>>2]|0;e=a+220|0;mb=f[e>>2]|0;c=mb+c-((mb|0)%(c|0)|0)|0;f[e>>2]=c;e=93;continue}}if((e|0)==153)return nb|0;d[Na>>1]=1;a=1;return a|0}case 4:{c=a+40|0;if(!(f[c>>2]|0)){la=f[a+24>>2]|0;ja=a+36|0;N=(f[a+196>>2]|0)+(la<<4)|0;P=ja;ja=f[ja>>2]|0;e=148}else{f[c>>2]=0;T=f[a+48>>2]|0;f[a+24>>2]=T;e=121}while(1){if((e|0)==121){if(T>>>0>=(f[a+60>>2]|0)>>>0){nb=0;e=153;break}c=f[a+196>>2]|0;q=c+(T<<4)|0;o=a+224|0;f[o>>2]=0;p=a+228|0;f[p>>2]=0;l=f[c+(T<<4)+8>>2]|0;if(l|0){m=f[c+(T<<4)+12>>2]|0;n=f[q>>2]|0;j=f[c+(T<<4)+4>>2]|0;k=l+-1|0;e=n<<(f[m>>2]|0)+k;c=j<<(f[m+4>>2]|0)+k;if((l|0)!=1){h=-1;i=1;while(1){g=k+h|0;mb=n<<g+(f[m+(i<<4)>>2]|0);g=j<<(f[m+(i<<4)+4>>2]|0)+g;e=(e|0)==0?mb:e>>>0<mb>>>0?e:mb;c=(c|0)==0?g:c>>>0<g>>>0?c:g;g=i+1|0;if(g>>>0<l>>>0){h=~i;i=g}else break}}f[o>>2]=e;f[p>>2]=c}if(!(b[a>>0]|0)){c=f[a+204>>2]|0;f[a+104>>2]=c;f[a+96>>2]=f[a+200>>2];f[a+108>>2]=f[a+212>>2];f[a+100>>2]=f[a+208>>2]}else c=f[a+104>>2]|0;f[a+220>>2]=c;H=c;I=T;e=130}else if((e|0)==148){ga=ja+1|0;f[P>>2]=ga;M=N;Q=P;ha=la;e=144}while(1){if((e|0)==130){if((H|0)>=(f[a+108>>2]|0)){e=152;break}U=f[a+96>>2]|0;f[a+216>>2]=U;K=q;ma=I;e=132}else if((e|0)==144){if(ga>>>0<(f[a+52>>2]|0)>>>0){e=146;break}ka=a+28|0;O=M;R=ka;ka=f[ka>>2]|0;oa=ha;e=149}while(1){if((e|0)==132){if((U|0)>=(f[a+100>>2]|0)){e=151;break}V=f[a+44>>2]|0;S=a+28|0;f[S>>2]=V;L=K;na=ma}else if((e|0)==149){V=ka+1|0;f[R>>2]=V;L=O;S=R;na=oa}mb=f[a+56>>2]|0;c=f[L+8>>2]|0;if(V>>>0>=(mb>>>0<c>>>0?mb:c)>>>0){U=f[a+224>>2]|0;K=a+216|0;ma=f[K>>2]|0;U=ma+U-((ma|0)%(U|0)|0)|0;f[K>>2]=U;K=L;ma=na;e=132;continue}m=f[L+12>>2]|0;c=c+~V|0;e=f[a+200>>2]|0;g=f[L>>2]|0;W=g<<c;Y=(e+-1+W|0)/(W|0)|0;h=f[a+204>>2]|0;mb=f[L+4>>2]|0;Z=mb<<c;_=(h+-1+Z|0)/(Z|0)|0;$=W+-1|0;i=($+(f[a+208>>2]|0)|0)/(W|0)|0;aa=Z+-1|0;j=(aa+(f[a+212>>2]|0)|0)/(Z|0)|0;ba=f[m+(V<<4)>>2]|0;k=ba+c|0;ca=f[m+(V<<4)+4>>2]|0;l=ca+c|0;da=f[a+220>>2]|0;if((da|0)%(mb<<l|0)|0|0){if((da|0)!=(h|0)){O=L;R=S;ka=V;oa=na;e=149;continue}if(!((_<<c|0)%(1<<l|0)|0)){O=L;R=S;ka=V;oa=na;e=149;continue}}ea=f[a+216>>2]|0;if((ea|0)%(g<<k|0)|0|0){if((ea|0)!=(e|0)){O=L;R=S;ka=V;oa=na;e=149;continue}if(!((Y<<c|0)%(1<<k|0)|0)){O=L;R=S;ka=V;oa=na;e=149;continue}}fa=f[m+(V<<4)+8>>2]|0;if(!fa){O=L;R=S;ka=V;oa=na;e=149;continue}if((_|0)==(j|0)|((Y|0)==(i|0)?1:(f[m+(V<<4)+12>>2]|0)==0)){O=L;R=S;ka=V;oa=na;e=149}else{e=143;break}}if((e|0)==143){ga=((($+ea|0)/(W|0)|0)>>ba)-(Y>>ba)+(X((((aa+da|0)/(Z|0)|0)>>ca)-(_>>ca)|0,fa)|0)|0;f[a+32>>2]=ga;ga=f[a+64>>2]|0;Q=a+36|0;f[Q>>2]=ga;M=L;ha=na;e=144;continue}else if((e|0)==151){H=f[a+228>>2]|0;q=a+220|0;I=f[q>>2]|0;H=I+H-((I|0)%(H|0)|0)|0;f[q>>2]=H;q=K;I=ma;e=130;continue}}if((e|0)==146){e=0;ia=X(f[a+8>>2]|0,ga)|0;ia=(X(f[a+12>>2]|0,f[a+28>>2]|0)|0)+ia|0;ia=ia+(X(f[a+16>>2]|0,ha)|0)|0;ia=ia+(X(f[a+20>>2]|0,f[a+32>>2]|0)|0)|0;ia=(f[a+4>>2]|0)+(ia<<1)|0;if(!(d[ia>>1]|0))break;else{N=M;P=Q;ja=ga;la=ha;e=148;continue}}else if((e|0)==152){T=I+1|0;f[a+24>>2]=T;e=121;continue}}if((e|0)==153)return nb|0;d[ia>>1]=1;a=1;return a|0}default:{a=0;return a|0}}return 0}function Lf(a){a=a|0;var c=0,d=0;c=Ic(1,44)|0;if(!c){c=0;return c|0}d=c+40|0;b[d>>0]=b[d>>0]&-2|(a|0)!=0;a=Ic(1,4)|0;f[c+20>>2]=a;if(a|0){d=c;return d|0}Mc(c);d=0;return d|0}function Mf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0.0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;O=u;u=u+1200|0;M=O;d=f[f[a+20>>2]>>2]|0;N=d+16|0;e=f[N>>2]|0;if(!e){u=O;return}J=d+20|0;K=(f[a+32>>2]|0)+8|0;L=(f[a+28>>2]|0)+88|0;H=a+24|0;I=(b|0)==0;F=(c|0)==0;G=b+-1|0;E=0;d=e;do{i=f[J>>2]|0;j=f[K>>2]|0;C=i+(E*52|0)+16|0;k=f[C>>2]|0;if(j){if(k){e=f[L>>2]|0;g=+((f[(f[(f[H>>2]|0)+24>>2]|0)+(E*52|0)+24>>2]|0)>>>0)*.0625;a=0;do{h=X(k,a)|0;c=0;do{D=(h+c|0)*3|0;f[M+(a*120|0)+(c*12|0)>>2]=~~(+(f[e+(D<<2)>>2]|0)*g);f[M+(a*120|0)+(c*12|0)+4>>2]=~~(+(f[e+(D+1<<2)>>2]|0)*g);f[M+(a*120|0)+(c*12|0)+8>>2]=~~(+(f[e+(D+2<<2)>>2]|0)*g);c=c+1|0}while(c>>>0<k>>>0);a=a+1|0}while(a>>>0<j>>>0);D=9}}else D=9;if((D|0)==9){D=0;if(k){B=i+(E*52|0)+24|0;A=0;d=k;do{y=f[B>>2]|0;z=y+(A*136|0)+24|0;a=f[z>>2]|0;if(a){w=y+(A*136|0)+16|0;x=y+(A*136|0)+20|0;v=0;c=f[x>>2]|0;d=f[w>>2]|0;do{if(X(c,d)|0){r=y+(A*136|0)+28+(v*36|0)+20|0;s=M+(b*120|0)+(A*12|0)+(v<<2)|0;t=M+(G*120|0)+(A*12|0)+(v<<2)|0;q=0;do{d=f[r>>2]|0;p=X(f[d+(q*40|0)+20>>2]|0,f[d+(q*40|0)+16>>2]|0)|0;a:do if(p|0){o=d+(q*40|0)+24|0;i=f[s>>2]|0;if(I){d=0;while(1){c=f[o>>2]|0;e=f[c+(d*52|0)+4>>2]|0;a=(f[(f[(f[H>>2]|0)+24>>2]|0)+(E*52|0)+24>>2]|0)-(f[c+(d*52|0)+28>>2]|0)|0;a=(i|0)>(a|0)?i-a|0:0;h=c+(d*52|0)+44|0;f[h>>2]=0;a=(a|0)==0?0:(a*3|0)+-2|0;f[e>>2]=a;if(a|0?(n=f[c+(d*52|0)>>2]|0,f[e+4>>2]=f[(f[c+(d*52|0)+8>>2]|0)+((a+-1|0)*24|0)>>2],f[e+16>>2]=n,!F):0)f[h>>2]=a;d=d+1|0;if(d>>>0>=p>>>0)break a}}n=f[t>>2]|0;m=i-n|0;j=0;do{a=f[o>>2]|0;c=a+(j*52|0)|0;k=f[a+(j*52|0)+4>>2]|0;l=(f[(f[(f[H>>2]|0)+24>>2]|0)+(E*52|0)+24>>2]|0)-(f[a+(j*52|0)+28>>2]|0)|0;d=m+(n-l)|0;d=(n|0)>(l|0)?m:(d|0)>0?d:0;l=a+(j*52|0)+44|0;e=f[l>>2]|0;h=(e|0)==0;if(h)i=(d|0)==0?0:(d*3|0)+-2|0;else i=(d*3|0)+e|0;d=i-e|0;f[k+(b*24|0)>>2]=d;do if(d|0){a=f[a+(j*52|0)+8>>2]|0;d=f[a+((i+-1|0)*24|0)>>2]|0;if(h)a=f[c>>2]|0;else{h=f[a+((e+-1|0)*24|0)>>2]|0;a=(f[c>>2]|0)+h|0;d=d-h|0}f[k+(b*24|0)+4>>2]=d;f[k+(b*24|0)+16>>2]=a;if(F)break;f[l>>2]=i}while(0);j=j+1|0}while(j>>>0<p>>>0)}while(0);q=q+1|0;d=f[w>>2]|0;c=f[x>>2]|0}while(q>>>0<(X(c,d)|0)>>>0);a=f[z>>2]|0}v=v+1|0}while(v>>>0<a>>>0);d=f[C>>2]|0}A=A+1|0}while(A>>>0<d>>>0);d=f[N>>2]|0}}E=E+1|0}while(E>>>0<d>>>0);u=O;return}function Nf(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;var e=0,g=0.0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;a=f[f[a+20>>2]>>2]|0;G=a+40+(b<<3)|0;p[G>>3]=0.0;H=a+16|0;e=f[H>>2]|0;if(!e)return;E=a+20|0;F=(b|0)==0;D=(d|0)==0;C=0;a=e;do{d=f[E>>2]|0;B=d+(C*52|0)+16|0;e=f[B>>2]|0;if(e){A=d+(C*52|0)+24|0;z=0;a=e;do{x=f[A>>2]|0;y=x+(z*136|0)+24|0;d=f[y>>2]|0;if(d){v=x+(z*136|0)+16|0;w=x+(z*136|0)+20|0;u=0;e=f[w>>2]|0;a=f[v>>2]|0;do{if(X(e,a)|0){t=x+(z*136|0)+28+(u*36|0)+20|0;s=0;do{d=f[t>>2]|0;r=X(f[d+(s*40|0)+20>>2]|0,f[d+(s*40|0)+16>>2]|0)|0;if(r){n=d+(s*40|0)+24|0;m=0;do{j=f[n>>2]|0;k=j+(m*52|0)|0;o=f[j+(m*52|0)+4>>2]|0;q=j+(m*52|0)+44|0;if(F){f[q>>2]=0;l=0}else l=f[q>>2]|0;h=f[j+(m*52|0)+48>>2]|0;if(l>>>0<h>>>0){i=f[j+(m*52|0)+8>>2]|0;a=l;e=l;do{d=f[i+(e*24|0)>>2]|0;if(!a)g=+p[i+(e*24|0)+8>>3];else{I=a+-1|0;g=+p[i+(e*24|0)+8>>3]-+p[i+(I*24|0)+8>>3];d=d-(f[i+(I*24|0)>>2]|0)|0}if(!d)d=g!=0.0;else d=c-g/+(d>>>0)<2.220446049250313e-16;e=e+1|0;a=d?e:a}while(e>>>0<h>>>0);h=a}else h=l;I=h-l|0;f[o+(b*24|0)>>2]=I;if(I){d=f[j+(m*52|0)+8>>2]|0;e=h+-1|0;a=f[d+(e*24|0)>>2]|0;if(!l){f[o+(b*24|0)+16>>2]=f[k>>2];g=+p[d+(e*24|0)+8>>3]}else{l=l+-1|0;I=f[d+(l*24|0)>>2]|0;f[o+(b*24|0)+16>>2]=(f[k>>2]|0)+I;g=+p[d+(e*24|0)+8>>3]-+p[d+(l*24|0)+8>>3];a=a-I|0}f[o+(b*24|0)+4>>2]=a;p[o+(b*24|0)+8>>3]=g;p[G>>3]=g+ +p[G>>3];if(!D)f[q>>2]=h}else p[o+(b*24|0)+8>>3]=0.0;m=m+1|0}while(m>>>0<r>>>0);e=f[w>>2]|0;a=f[v>>2]|0}s=s+1|0}while(s>>>0<(X(e,a)|0)>>>0);d=f[y>>2]|0}u=u+1|0}while(u>>>0<d>>>0);a=f[B>>2]|0}z=z+1|0}while(z>>>0<a>>>0);a=f[H>>2]|0}C=C+1|0}while(C>>>0<a>>>0);return}function Of(a,c,e,g,h){a=a|0;c=c|0;e=e|0;g=g|0;h=h|0;var i=0,j=0,k=0.0,l=0.0,m=0.0,o=0.0,q=0.0,r=0.0,s=0,t=0,v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0.0,K=0,L=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,Y=0,Z=0,_=0,$=0,aa=0;$=u;u=u+800|0;Y=$;Z=f[a+28>>2]|0;U=f[f[a+20>>2]>>2]|0;V=f[a+32>>2]|0;R=U+24|0;f[R>>2]=0;S=f[U+16>>2]|0;if(!S){J=1797693134862315708145274.0e284;m=0.0;k=0.0;i=0}else{T=a+24|0;Q=f[U+20>>2]|0;P=0;l=1797693134862315708145274.0e284;m=0.0;k=0.0;i=0;do{N=Q+(P*52|0)+48|0;f[N>>2]=0;O=f[Q+(P*52|0)+16>>2]|0;if(!O)j=0;else{L=f[Q+(P*52|0)+24>>2]|0;K=0;j=0;do{G=f[L+(K*136|0)+24>>2]|0;if(G){H=X(f[L+(K*136|0)+20>>2]|0,f[L+(K*136|0)+16>>2]|0)|0;I=(H|0)==0;F=0;do{if(!I){E=f[L+(K*136|0)+28+(F*36|0)+20>>2]|0;D=0;do{B=X(f[E+(D*40|0)+20>>2]|0,f[E+(D*40|0)+16>>2]|0)|0;if(B){C=E+(D*40|0)+24|0;A=0;do{y=f[C>>2]|0;v=f[y+(A*52|0)+48>>2]|0;if(v){w=f[y+(A*52|0)+8>>2]|0;x=w+8|0;t=0;do{s=f[w+(t*24|0)>>2]|0;if(!t)o=+p[x>>3];else{aa=t+-1|0;o=+p[w+(t*24|0)+8>>3]-+p[w+(aa*24|0)+8>>3];s=s-(f[w+(aa*24|0)>>2]|0)|0}if(s){J=o/+(s|0);l=J<l?J:l;m=J>m?J:m}t=t+1|0}while(t>>>0<v>>>0)}aa=X((f[y+(A*52|0)+24>>2]|0)-(f[y+(A*52|0)+16>>2]|0)|0,(f[y+(A*52|0)+20>>2]|0)-(f[y+(A*52|0)+12>>2]|0)|0)|0;i=aa+i|0;f[R>>2]=i;j=aa+j|0;f[N>>2]=j;A=A+1|0}while(A>>>0<B>>>0)}D=D+1|0}while(D>>>0<H>>>0)}F=F+1|0}while(F>>>0<G>>>0)}K=K+1|0}while(K>>>0<O>>>0)}J=+(1<<f[(f[(f[T>>2]|0)+24>>2]|0)+(P*52|0)+24>>2]|0)+-1.0;k=k+J*J*+(j|0);P=P+1|0}while(P>>>0<S>>>0);J=l}I=(h|0)!=0;if(I){S=f[h+88>>2]|0;T=f[a+36>>2]|0;f[S+(T*592|0)+552>>2]=i;p[S+(T*592|0)+560>>3]=+p[U+32>>3];i=V+8|0;aa=Hc(f[i>>2]<<3)|0;f[S+(T*592|0)>>2]=aa;if(!aa){aa=0;u=$;return aa|0}}else i=V+8|0;if(!(f[i>>2]|0)){aa=1;u=$;return aa|0}A=U+32|0;B=Z+93|0;C=h+88|0;D=a+36|0;E=U+40|0;F=a+24|0;G=a+8|0;H=a+16|0;y=0;while(1){r=+n[V+20+(y<<2)>>2];T=r>0.0;v=~~+W(+r)>>>0;v=T&v>>>0<g>>>0?v:g;r=+n[V+5184+(y<<2)>>2];z=+p[A>>3]-k/+M(10.0,+(r/10.0));aa=b[B>>0]|0;if((aa&1)==0|T^1?!((aa&4)!=0&r>0.0):0)l=J;else{x=Yg(f[F>>2]|0,Z)|0;if(!x){i=0;_=56;break}w=y+1|0;s=Y+(y+-1<<3)|0;t=U+40+(y<<3)|0;if(!y){j=0;l=0.0;q=m;r=J;do{o=(r+q)*.5;Nf(a,0,o,0);do if(!(b[B>>0]&4))if(!(Ug(x,f[D>>2]|0,U,w,c,e,v,h,f[G>>2]|0,f[a>>2]|0,f[H>>2]|0,0)|0))r=o;else{l=o;q=o;_=39}else{if(((d[Z>>1]|0)+-3&65535)>=4)if(+p[E>>3]<z){l=o;q=o;break}else{r=o;_=39;break}if(Ug(x,f[D>>2]|0,U,w,c,e,v,h,f[G>>2]|0,f[a>>2]|0,f[H>>2]|0,0)|0)if(+p[E>>3]<z){l=o;q=o}else{r=o;_=39}else r=o}while(0);if((_|0)==39)_=0;j=j+1|0}while((j|0)!=128)}else{j=0;l=0.0;q=m;r=J;do{o=(r+q)*.5;Nf(a,y,o,0);do if(!(b[B>>0]&4))if(!(Ug(x,f[D>>2]|0,U,w,c,e,v,h,f[G>>2]|0,f[a>>2]|0,f[H>>2]|0,0)|0))r=o;else{l=o;q=o;_=47}else{if(((d[Z>>1]|0)+-3&65535)>=4)if(+p[s>>3]+ +p[t>>3]<z){l=o;q=o;break}else{r=o;_=47;break}if(Ug(x,f[D>>2]|0,U,w,c,e,v,h,f[G>>2]|0,f[a>>2]|0,f[H>>2]|0,0)|0)if(+p[s>>3]+ +p[t>>3]<z){l=o;q=o}else{r=o;_=47}else r=o}while(0);if((_|0)==47)_=0;j=j+1|0}while((j|0)!=128)}Zg(x);l=l==0.0?o:l}if(I)p[(f[(f[C>>2]|0)+((f[D>>2]|0)*592|0)>>2]|0)+(y<<3)>>3]=l;Nf(a,y,l,1);if(!y)l=+p[E>>3];else l=+p[Y+(y+-1<<3)>>3]+ +p[U+40+(y<<3)>>3];p[Y+(y<<3)>>3]=l;y=y+1|0;if(y>>>0>=(f[i>>2]|0)>>>0){i=1;_=56;break}}if((_|0)==56){u=$;return i|0}return 0}function Pf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0;f[a+24>>2]=b;f[a+28>>2]=c;e=Ic(1,848)|0;d=a+20|0;f[f[d>>2]>>2]=e;if(!e){c=0;return c|0}e=b+16|0;g=Ic(f[e>>2]|0,52)|0;b=f[f[d>>2]>>2]|0;f[b+20>>2]=g;if(!g){g=0;return g|0}f[b+16>>2]=f[e>>2];f[a>>2]=f[c+84>>2];g=1;return g|0}function Qf(a){a=a|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;if(!a)return;s=a+20|0;c=f[s>>2]|0;do if(c|0){r=(b[a+40>>0]&1)==0?3:4;d=f[c>>2]|0;if(d){o=d+20|0;c=f[o>>2]|0;n=d+16|0;if(f[n>>2]|0){m=0;while(1){l=c+24|0;d=f[l>>2]|0;if(d|0){j=f[c+28>>2]|0;k=(j>>>0)/136|0;if(j>>>0>135){j=0;while(1){i=d+48|0;e=f[i>>2]|0;if(e|0){g=f[d+52>>2]|0;h=(g>>>0)/40|0;if(g>>>0>39){g=0;while(1){t=e+32|0;eg(f[t>>2]|0);f[t>>2]=0;t=e+36|0;eg(f[t>>2]|0);f[t>>2]=0;Sa[r&7](e);g=g+1|0;if(g>>>0>=h>>>0)break;else e=e+40|0}e=f[i>>2]|0}Mc(e);f[i>>2]=0}i=d+84|0;e=f[i>>2]|0;if(e|0){t=f[d+88>>2]|0;h=(t>>>0)/40|0;if(t>>>0>39){g=0;while(1){t=e+32|0;eg(f[t>>2]|0);f[t>>2]=0;t=e+36|0;eg(f[t>>2]|0);f[t>>2]=0;Sa[r&7](e);g=g+1|0;if(g>>>0>=h>>>0)break;else e=e+40|0}e=f[i>>2]|0}Mc(e);f[i>>2]=0}i=d+120|0;e=f[i>>2]|0;if(e|0){t=f[d+124>>2]|0;h=(t>>>0)/40|0;if(t>>>0>39){g=0;while(1){t=e+32|0;eg(f[t>>2]|0);f[t>>2]=0;t=e+36|0;eg(f[t>>2]|0);f[t>>2]=0;Sa[r&7](e);g=g+1|0;if(g>>>0>=h>>>0)break;else e=e+40|0}e=f[i>>2]|0}Mc(e);f[i>>2]=0}j=j+1|0;if(j>>>0>=k>>>0)break;else d=d+136|0}d=f[l>>2]|0}Mc(d);f[l>>2]=0}if(f[c+36>>2]|0?(p=c+32|0,q=f[p>>2]|0,q|0):0){Kc(q);f[p>>2]=0;f[p+4>>2]=0;f[p+8>>2]=0;f[p+12>>2]=0}m=m+1|0;if(m>>>0>=(f[n>>2]|0)>>>0)break;else c=c+52|0}c=f[o>>2]|0}Mc(c);f[o>>2]=0;Mc(f[f[s>>2]>>2]|0);c=f[s>>2]|0;f[c>>2]=0;if(!c)break}Mc(c);f[s>>2]=0}while(0);Mc(a);return}function Rf(a){a=a|0;var b=0,c=0,d=0,e=0,g=0;g=a+24|0;b=f[g>>2]|0;if(!b)return;d=f[a+28>>2]|0;e=(d>>>0)/52|0;if(d>>>0>51){d=0;while(1){a=f[b>>2]|0;if(a|0){Mc(a+-1|0);f[b>>2]=0}a=b+4|0;c=f[a>>2]|0;if(c|0){Mc(c);f[a>>2]=0}a=b+8|0;c=f[a>>2]|0;if(c|0){Mc(c);f[a>>2]=0}d=d+1|0;if(d>>>0>=e>>>0)break;else b=b+52|0}b=f[g>>2]|0}Mc(b);f[g>>2]=0;return}function Sf(a){a=a|0;var b=0,c=0,d=0,e=0,g=0;g=a+24|0;b=f[g>>2]|0;if(!b)return;d=f[a+28>>2]|0;e=(d>>>0)/56|0;if(d>>>0>55){d=0;while(1){a=f[b>>2]|0;if(a|0){Mc(a);f[b>>2]=0}a=b+4|0;c=f[a>>2]|0;if(c|0){Mc(c);f[a>>2]=0}d=d+1|0;if(d>>>0>=e>>>0)break;else b=b+56|0}b=f[g>>2]|0}Mc(b);f[g>>2]=0;return}function Tf(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0;d=a+32|0;e=f[d>>2]|0;b=a+40|0;c=f[b>>2]|0;do if(e){g=a+44|0;if(c>>>0<=(f[g>>2]|0)>>>0){h=1;return h|0}if(f[a+36>>2]|0){Kc(e);e=Jc(f[b>>2]|0)|0;f[d>>2]=e;if(e|0){f[g>>2]=f[b>>2];break}f[g>>2]=0;f[b>>2]=0;f[a+36>>2]=0;h=0;return h|0}else h=4}else h=4;while(0);do if((h|0)==4){h=Jc(c)|0;f[d>>2]=h;if(!h){h=0;return h|0}else{f[a+44>>2]=f[b>>2];break}}while(0);f[a+36>>2]=1;h=1;return h|0}function Uf(a,b,c){a=a|0;b=b|0;c=c|0;return Vf(a,b,1,1.0,52,c)|0}function Vf(a,c,d,e,g,h){a=a|0;c=c|0;d=d|0;e=+e;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0.0;Xa=u;u=u+112|0;Ta=Xa+104|0;Sa=Xa+96|0;Ra=Xa+88|0;Qa=Xa+80|0;Pa=Xa+72|0;Oa=Xa+64|0;Na=Xa+56|0;Ma=Xa+48|0;Wa=Xa+40|0;Va=Xa+32|0;Ua=Xa+24|0;k=f[a+28>>2]|0;Ja=f[f[a+20>>2]>>2]|0;l=f[(f[k+76>>2]|0)+(c*5640|0)+5584>>2]|0;m=f[Ja+20>>2]|0;j=f[a+24>>2]|0;o=f[j+24>>2]|0;i=f[k+24>>2]|0;r=f[k+12>>2]|0;La=(X(r,(c>>>0)%(i>>>0)|0)|0)+(f[k+4>>2]|0)|0;p=f[j>>2]|0;p=La>>>0>p>>>0?La:p;f[Ja>>2]=p;La=Zi(r|0,0,La|0,0)|0;La=0-I|La;r=f[j+8>>2]|0;r=La>>>0<r>>>0?La:r;La=Ja+8|0;f[La>>2]=r;if(!((p|0)>-1&(r|0)>(p|0))){Mb(h,1,19655,Xa)|0;Wa=0;u=Xa;return Wa|0}q=f[k+16>>2]|0;Fa=(X(q,(c>>>0)/(i>>>0)|0)|0)+(f[k+8>>2]|0)|0;i=f[j+4>>2]|0;i=Fa>>>0>i>>>0?Fa:i;Ia=Ja+4|0;f[Ia>>2]=i;Fa=Zi(q|0,0,Fa|0,0)|0;Fa=0-I|Fa;q=f[j+12>>2]|0;q=Fa>>>0<q>>>0?Fa:q;Fa=Ja+12|0;f[Fa>>2]=q;if(!((i|0)>-1&(q|0)>(i|0))){Mb(h,1,19693,Xa+8|0)|0;Wa=0;u=Xa;return Wa|0}if(!(f[l+4>>2]|0)){Mb(h,1,19731,Xa+16|0)|0;Wa=0;u=Xa;return Wa|0}Ga=Ja+16|0;if(!(f[Ga>>2]|0)){Wa=1;u=Xa;return Wa|0}Ea=k+80|0;Da=a+40|0;Ca=(d|0)==0;c=0;Ba=m;j=p;k=r;a=q;a:while(1){f[o+36>>2]=0;za=f[o>>2]|0;xa=(j+-1+za|0)/(za|0)|0;f[Ba>>2]=xa;ya=f[o+4>>2]|0;j=(i+-1+ya|0)/(ya|0)|0;Aa=Ba+4|0;f[Aa>>2]=j;k=(k+-1+za|0)/(za|0)|0;za=Ba+8|0;f[za>>2]=k;i=(a+-1+ya|0)/(ya|0)|0;ya=Ba+12|0;f[ya>>2]=i;k=k-xa|0;if(k){i=i-j|0;if((4294967295/(k>>>0)|0)>>>0<i>>>0){Ha=12;break}}else i=i-j|0;i=X(i,k)|0;if(i>>>0>1073741823){Ha=14;break}j=i<<2;i=f[l+4>>2]|0;xa=Ba+16|0;f[xa>>2]=i;k=f[Ea>>2]|0;f[Ba+20>>2]=i>>>0<k>>>0?1:i-k|0;k=Ba+40|0;f[k>>2]=j;do if(b[Da>>0]&1){a=Ba+32|0;d=f[a>>2]|0;if(d){m=Ba+44|0;if(j>>>0<=(f[m>>2]|0)>>>0)break;i=Ba+36|0;if(f[i>>2]|0){Kc(d);wa=Jc(f[k>>2]|0)|0;f[a>>2]=wa;if(!wa){Ha=22;break a}f[m>>2]=f[k>>2]}else Ha=19}else Ha=19;if((Ha|0)==19){Ha=0;wa=Jc(j)|0;f[a>>2]=wa;if(!wa)break a;f[Ba+44>>2]=f[k>>2];i=Ba+36|0}f[i>>2]=1;i=f[xa>>2]|0}while(0);k=i*136|0;a=Ba+24|0;i=f[a>>2]|0;if(i){j=Ba+28|0;if(k>>>0>(f[j>>2]|0)>>>0){i=Lc(i,k)|0;if(!i){Ha=31;break}f[a>>2]=i;wa=f[j>>2]|0;ij(i+wa|0,0,k-wa|0)|0;f[j>>2]=k}}else{i=Hc(k)|0;f[a>>2]=i;if(!i){c=0;Ha=100;break}f[Ba+28>>2]=k;ij(i|0,0,k|0)|0}wa=(f[l+20>>2]|0)==0?7:8;i=f[xa>>2]|0;if(i|0){sa=l+8|0;ta=l+12|0;ua=o+24|0;va=l+804|0;ra=0;qa=f[a>>2]|0;q=l+28|0;while(1){ka=i;i=i+-1|0;pa=f[Ba>>2]|0;la=fj(1,0,i|0)|0;ma=I;na=Zi(la|0,ma|0,-1,-1)|0;oa=I;pa=Zi(na|0,oa|0,pa|0,((pa|0)<0)<<31>>31|0)|0;pa=dj(pa|0,I|0,i|0)|0;f[qa>>2]=pa;ha=f[Aa>>2]|0;ha=Zi(na|0,oa|0,ha|0,((ha|0)<0)<<31>>31|0)|0;ha=dj(ha|0,I|0,i|0)|0;f[qa+4>>2]=ha;j=f[za>>2]|0;j=Zi(na|0,oa|0,j|0,((j|0)<0)<<31>>31|0)|0;j=dj(j|0,I|0,i|0)|0;f[qa+8>>2]=j;ia=f[ya>>2]|0;ia=Zi(na|0,oa|0,ia|0,((ia|0)<0)<<31>>31|0)|0;ia=dj(ia|0,I|0,i|0)|0;f[qa+12>>2]=ia;d=f[l+812+(ra<<2)>>2]|0;a=f[l+944+(ra<<2)>>2]|0;p=pa>>d<<d;m=ha>>a<<a;ja=fj(1,0,d|0)|0;ja=Zi(ja|0,I|0,-1,-1)|0;ja=Zi(ja|0,I|0,j|0,((j|0)<0)<<31>>31|0)|0;ja=dj(ja|0,I|0,d|0)|0;k=fj(1,0,a|0)|0;k=Zi(k|0,I|0,-1,-1)|0;k=Zi(k|0,I|0,ia|0,((ia|0)<0)<<31>>31|0)|0;k=dj(k|0,I|0,a|0)|0;ja=(ja<<d)-p>>d;j=(pa|0)==(j|0)?0:ja;pa=qa+16|0;f[pa>>2]=j;k=(ha|0)==(ia|0)?0:(k<<a)-m>>a;f[qa+20>>2]=k;if(j|0?(4294967295/(ja>>>0)|0)>>>0<k>>>0:0){Ha=37;break a}ha=X(k,j)|0;if(ha>>>0>107374182){Ha=39;break a}ia=ha*40|0;ja=(ra|0)==0;if(ja)j=1;else{p=Zi(p|0,((p|0)<0)<<31>>31|0,1,0)|0;p=ej(p|0,I|0,1)|0;m=Zi(m|0,((m|0)<0)<<31>>31|0,1,0)|0;m=ej(m|0,I|0,1)|0;a=a+-1|0;d=d+-1|0;j=3}ga=qa+24|0;f[ga>>2]=j;R=f[sa>>2]|0;R=R>>>0<d>>>0?R:d;S=f[ta>>2]|0;S=S>>>0<a>>>0?S:a;T=(ha|0)!=0;U=(ha|0)==0;V=1<<d;W=1<<a;Y=fj(1,0,R|0)|0;Y=Zi(Y|0,I|0,-1,-1)|0;Z=I;_=fj(1,0,S|0)|0;_=Zi(_|0,I|0,-1,-1)|0;$=I;aa=1<<R;ba=1<<S;ca=fj(1,0,ka|0)|0;da=I;ea=Zi(ca|0,da|0,-1,-1)|0;fa=I;P=0;Q=qa+28|0;while(1){if(ja){j=f[Ba>>2]|0;j=Zi(na|0,oa|0,j|0,((j|0)<0)<<31>>31|0)|0;j=dj(j|0,I|0,i|0)|0;k=f[Aa>>2]|0;k=Zi(na|0,oa|0,k|0,((k|0)<0)<<31>>31|0)|0;k=dj(k|0,I|0,i|0)|0;r=f[za>>2]|0;r=Zi(na|0,oa|0,r|0,((r|0)<0)<<31>>31|0)|0;r=dj(r|0,I|0,i|0)|0;t=f[ya>>2]|0;y=0;s=t;t=((t|0)<0)<<31>>31;v=la;w=ma;x=i}else{y=P+1|0;j=f[Ba>>2]|0;w=fj(y&1|0,0,i|0)|0;w=_i(ea|0,fa|0,w|0,I|0)|0;v=I;j=Zi(w|0,v|0,j|0,((j|0)<0)<<31>>31|0)|0;j=dj(j|0,I|0,ka|0)|0;k=f[Aa>>2]|0;t=fj(y>>>1|0,0,i|0)|0;s=I;r=_i(ea|0,fa|0,t|0,s|0)|0;k=Zi(r|0,I|0,k|0,((k|0)<0)<<31>>31|0)|0;k=dj(k|0,I|0,ka|0)|0;r=f[za>>2]|0;r=Zi(w|0,v|0,r|0,((r|0)<0)<<31>>31|0)|0;r=dj(r|0,I|0,ka|0)|0;v=f[ya>>2]|0;s=_i(v|0,((v|0)<0)<<31>>31|0,t|0,s|0)|0;t=I;v=ca;w=da;x=ka}f[Q+16>>2]=y;f[Q>>2]=j;O=Q+4|0;f[O>>2]=k;N=Q+8|0;f[N>>2]=r;r=Zi(s|0,t|0,-1,-1)|0;r=Zi(r|0,I|0,v|0,w|0)|0;r=dj(r|0,I|0,x|0)|0;M=Q+12|0;f[M>>2]=r;r=Ka[wa&15](y)|0;Ya=+(f[q+4>>2]|0)*.00048828125+1.0;Ya=+Ni(1.0,(f[ua>>2]|0)+r-(f[q>>2]|0)|0)*Ya*e;n[Q+32>>2]=Ya;f[Q+28>>2]=(f[q>>2]|0)+-1+(f[va>>2]|0);r=Q+20|0;k=f[r>>2]|0;if(!(T&(k|0)==0)){j=Q+24|0;if((f[j>>2]|0)>>>0<ia>>>0){k=Lc(k,ia)|0;if(!k){Ha=53;break a}f[r>>2]=k;Ha=f[j>>2]|0;ij(k+Ha|0,0,ia-Ha|0)|0;Ha=54}}else{j=Hc(ia)|0;f[r>>2]=j;if(!j){Ha=48;break a}ij(j|0,0,ia|0)|0;j=Q+24|0;Ha=54}if((Ha|0)==54){Ha=0;f[j>>2]=ia}if(!U){L=0;B=f[r>>2]|0;while(1){C=f[pa>>2]|0;G=(((L>>>0)%(C>>>0)|0)<<d)+p|0;C=(((L>>>0)/(C>>>0)|0)<<a)+m|0;D=G+V|0;E=C+W|0;F=f[Q>>2]|0;F=(G|0)>(F|0)?G:F;f[B>>2]=F;G=f[O>>2]|0;G=(C|0)>(G|0)?C:G;C=B+4|0;f[C>>2]=G;r=f[N>>2]|0;r=(D|0)<(r|0)?D:r;D=B+8|0;f[D>>2]=r;k=f[M>>2]|0;k=(E|0)<(k|0)?E:k;E=B+12|0;f[E>>2]=k;F=F>>R<<R;G=G>>S<<S;r=Zi(Y|0,Z|0,r|0,((r|0)<0)<<31>>31|0)|0;r=dj(r|0,I|0,R|0)|0;k=Zi(_|0,$|0,k|0,((k|0)<0)<<31>>31|0)|0;k=dj(k|0,I|0,S|0)|0;r=(r<<R)-F>>R;H=B+16|0;f[H>>2]=r;k=(k<<S)-G>>S;v=B+20|0;f[v>>2]=k;J=X(r,k)|0;t=X(J,g)|0;K=B+24|0;s=f[K>>2]|0;do if((s|0)==0&(J|0)!=0){j=Hc(t)|0;f[K>>2]=j;if(!j){c=0;Ha=100;break a}ij(j|0,0,t|0)|0;j=B+28|0;Ha=64}else{j=B+28|0;if(t>>>0<=(f[j>>2]|0)>>>0)break;k=Lc(s,t)|0;if(!k){Ha=63;break a}f[K>>2]=k;Ha=f[j>>2]|0;ij(k+Ha|0,0,t-Ha|0)|0;Ha=64}while(0);if((Ha|0)==64){Ha=0;f[j>>2]=t;r=f[H>>2]|0;k=f[v>>2]|0}s=B+32|0;j=f[s>>2]|0;if(!j)j=bg(r,k,h)|0;else j=dg(j,r,k,h)|0;f[s>>2]=j;if(!j)Mb(h,2,19944,Sa)|0;s=B+36|0;k=f[s>>2]|0;r=f[H>>2]|0;j=f[v>>2]|0;if(!k)j=bg(r,j,h)|0;else j=dg(k,r,j,h)|0;f[s>>2]=j;if(!j)Mb(h,2,19966,Ta)|0;if(J|0){A=0;do{x=f[H>>2]|0;w=(((A>>>0)%(x>>>0)|0)<<R)+F|0;x=(((A>>>0)/(x>>>0)|0)<<S)+G|0;y=w+aa|0;z=x+ba|0;do if(Ca){v=f[K>>2]|0;j=v+(A*56|0)|0;if(!(f[j>>2]|0)){t=Hc(8192)|0;f[j>>2]=t;if(!t){c=0;Ha=100;break a}f[v+(A*56|0)+32>>2]=8192;t=Ic(10,32)|0;f[v+(A*56|0)+4>>2]=t;if(!t){c=0;Ha=100;break a}f[v+(A*56|0)+52>>2]=10;j=v+(A*56|0)+8|0}else{k=v+(A*56|0)+32|0;r=f[k>>2]|0;j=v+(A*56|0)+8|0;s=j;t=s+44|0;do{f[s>>2]=0;s=s+4|0}while((s|0)<(t|0));f[k>>2]=r}t=f[B>>2]|0;f[j>>2]=(w|0)>(t|0)?w:t;w=f[C>>2]|0;f[v+(A*56|0)+12>>2]=(x|0)>(w|0)?x:w;x=f[D>>2]|0;f[v+(A*56|0)+16>>2]=(y|0)<(x|0)?y:x;y=f[E>>2]|0;f[v+(A*56|0)+20>>2]=(z|0)<(y|0)?z:y}else{k=f[K>>2]|0;j=k+(A*52|0)+4|0;if((f[j>>2]|0)==0?(v=Ic(100,24)|0,f[j>>2]=v,(v|0)==0):0){c=0;Ha=100;break a}j=k+(A*52|0)+8|0;if((f[j>>2]|0)==0?(v=Ic(100,24)|0,f[j>>2]=v,(v|0)==0):0){c=0;Ha=100;break a}r=f[B>>2]|0;r=(w|0)>(r|0)?w:r;f[k+(A*52|0)+12>>2]=r;s=f[C>>2]|0;x=(x|0)>(s|0)?x:s;f[k+(A*52|0)+16>>2]=x;s=f[D>>2]|0;s=(y|0)<(s|0)?y:s;f[k+(A*52|0)+20>>2]=s;y=f[E>>2]|0;z=(z|0)<(y|0)?z:y;f[k+(A*52|0)+24>>2]=z;r=X(z-x|0,s-r<<2)|0;s=k+(A*52|0)+36|0;if(r>>>0<=(f[s>>2]|0)>>>0)break;k=k+(A*52|0)|0;j=f[k>>2]|0;if(j|0)Mc(j+-1|0);j=Hc(r|1)|0;f[k>>2]=j;if(!j){Ha=87;break a}f[s>>2]=r;b[j>>0]=0;f[k>>2]=(f[k>>2]|0)+1}while(0);A=A+1|0}while(A>>>0<J>>>0)}L=L+1|0;if(L>>>0>=ha>>>0)break;else B=B+40|0}}q=q+8|0;P=P+1|0;if(P>>>0>=(f[ga>>2]|0)>>>0)break;else Q=Q+36|0}ra=ra+1|0;if(ra>>>0>=(f[xa>>2]|0)>>>0)break;else qa=qa+136|0}}c=c+1|0;if(c>>>0>=(f[Ga>>2]|0)>>>0){c=1;Ha=100;break}l=l+1080|0;Ba=Ba+52|0;o=o+52|0;j=f[Ja>>2]|0;i=f[Ia>>2]|0;k=f[La>>2]|0;a=f[Fa>>2]|0}switch(Ha|0){case 12:{Mb(h,1,19770,Ua)|0;Wa=0;u=Xa;return Wa|0}case 14:{Mb(h,1,19770,Va)|0;Wa=0;u=Xa;return Wa|0}case 22:{f[m>>2]=0;f[k>>2]=0;f[i>>2]=0;break}case 31:{Mb(h,1,19803,Ma)|0;Mc(f[a>>2]|0);f[a>>2]=0;f[j>>2]=0;Wa=0;u=Xa;return Wa|0}case 37:{Mb(h,1,19770,Na)|0;Wa=0;u=Xa;return Wa|0}case 39:{Mb(h,1,19770,Oa)|0;Wa=0;u=Xa;return Wa|0}case 48:{Mb(h,1,19843,Pa)|0;Wa=0;u=Xa;return Wa|0}case 53:{Mb(h,1,19843,Qa)|0;Mc(f[r>>2]|0);f[r>>2]=0;f[j>>2]=0;Wa=0;u=Xa;return Wa|0}case 63:{Mc(f[K>>2]|0);f[K>>2]=0;f[j>>2]=0;Mb(h,1,19886,Ra)|0;Wa=0;u=Xa;return Wa|0}case 87:{f[s>>2]=0;Wa=0;u=Xa;return Wa|0}case 100:{u=Xa;return c|0}}Mb(h,1,19770,Wa)|0;Wa=0;u=Xa;return Wa|0}function Wf(a,b,c){a=a|0;b=b|0;c=c|0;return Vf(a,b,0,.5,56,c)|0}function Xf(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0;b=f[a+24>>2]|0;e=f[b+16>>2]|0;if(!e){e=0;return e|0}d=f[(f[f[a+20>>2]>>2]|0)+20>>2]|0;b=f[b+24>>2]|0;a=0;c=0;while(1){h=f[b+24>>2]|0;h=(h>>>3)+((h&7|0)!=0&1)|0;g=(f[d+24>>2]|0)+((f[d+20>>2]|0)*136|0)+-136|0;a=(X(X((h|0)==3?4:h,(f[g+8>>2]|0)-(f[g>>2]|0)|0)|0,(f[g+12>>2]|0)-(f[g+4>>2]|0)|0)|0)+a|0;c=c+1|0;if(c>>>0>=e>>>0)break;else{d=d+52|0;b=b+52|0}}return a|0}function Yf(a,c,d,e,g,h){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0;y=u;u=u+16|0;w=y;if(!(f[a+8>>2]|0)){f[a+36>>2]=c;t=a+28|0;i=f[(f[t>>2]|0)+76>>2]|0;x=a+32|0;f[x>>2]=i+(c*5640|0);v=(h|0)==0;s=a+20|0;if(!v){j=f[(f[f[s>>2]>>2]|0)+20>>2]|0;n=f[i+(c*5640|0)+5584>>2]|0;o=j+16|0;if(!(f[o>>2]|0)){j=0;i=h+88|0}else{l=f[j+24>>2]|0;i=h+88|0;m=f[i>>2]|0;j=0;k=0;do{r=l+(k*136|0)+16|0;f[m+(c*592|0)+20+(k<<2)>>2]=f[r>>2];q=l+(k*136|0)+20|0;f[m+(c*592|0)+152+(k<<2)>>2]=f[q>>2];j=(X(f[q>>2]|0,f[r>>2]|0)|0)+j|0;f[m+(c*592|0)+284+(k<<2)>>2]=f[n+812+(k<<2)>>2];f[m+(c*592|0)+416+(k<<2)>>2]=f[n+944+(k<<2)>>2];k=k+1|0}while(k>>>0<(f[o>>2]|0)>>>0)}r=Ic(X(X(f[h+52>>2]|0,j)|0,f[h+56>>2]|0)|0,32)|0;f[(f[i>>2]|0)+(c*592|0)+548>>2]=r;if(!r){h=0;u=y;return h|0}}i=f[f[s>>2]>>2]|0;r=i+16|0;if(!(f[r>>2]|0)){j=f[i+20>>2]|0;m=f[x>>2]|0;i=0}else{m=f[x>>2]|0;j=f[i+20>>2]|0;c=0;p=j;q=f[m+5584>>2]|0;while(1){n=f[p+32>>2]|0;o=X((f[p+12>>2]|0)-(f[p+4>>2]|0)|0,(f[p+8>>2]|0)-(f[p>>2]|0)|0)|0;i=(o|0)!=0;if((f[q+20>>2]|0)==1){if(i){l=q+1076|0;k=0;i=n;while(1){f[i>>2]=(f[i>>2]|0)-(f[l>>2]|0);k=k+1|0;if((k|0)==(o|0))break;else i=i+4|0}}}else if(i){l=q+1076|0;i=n;k=0;while(1){f[i>>2]=(f[i>>2]|0)-(f[l>>2]|0)<<11;k=k+1|0;if((k|0)==(o|0))break;else i=i+4|0}}c=c+1|0;i=f[r>>2]|0;if(c>>>0>=i>>>0)break;else{p=p+52|0;q=q+1080|0}}}n=X((f[j+12>>2]|0)-(f[j+4>>2]|0)|0,(f[j+8>>2]|0)-(f[j>>2]|0)|0)|0;a:do switch(f[m+16>>2]|0){case 0:break;case 2:{if(f[m+5608>>2]|0){l=Hc(i<<2)|0;if(!l){h=0;u=y;return h|0}i=f[r>>2]|0;if(!i)i=0;else{k=0;while(1){f[l+(k<<2)>>2]=f[j+32>>2];k=k+1|0;if((k|0)==(i|0))break;else j=j+52|0}}r=(yf(f[(f[x>>2]|0)+5608>>2]|0,n,l,i,f[(f[(f[a+24>>2]|0)+24>>2]|0)+32>>2]|0)|0)==0;Mc(l);if(r){h=0;u=y;return h|0}}break}default:{k=f[j+32>>2]|0;l=f[j+84>>2]|0;i=f[j+136>>2]|0;if(!(f[(f[m+5584>>2]|0)+20>>2]|0)){wf(k,l,i,n);break a}else{uf(k,l,i,n);break a}}}while(0);i=f[f[s>>2]>>2]|0;l=i+16|0;b:do if(f[l>>2]|0){k=f[(f[x>>2]|0)+5584>>2]|0;i=f[i+20>>2]|0;j=0;c:while(1){switch(f[k+20>>2]|0){case 1:{if(!(xg(i)|0)){i=0;j=53;break c}break}case 0:{if(!(Eg(i)|0)){i=0;j=53;break c}break}default:{}}j=j+1|0;if(j>>>0>=(f[l>>2]|0)>>>0)break b;else{k=k+1080|0;i=i+52|0}}if((j|0)==53){u=y;return i|0}}while(0);k=f[x>>2]|0;l=Og(1)|0;if(!l){h=0;u=y;return h|0}do if((f[k+16>>2]|0)==1)if(!(f[(f[k+5584>>2]|0)+20>>2]|0)){i=3;j=tf()|0;break}else{i=3;j=sf()|0;break}else{i=f[(f[a+24>>2]|0)+16>>2]|0;j=f[k+5600>>2]|0}while(0);s=(Tg(l,f[f[s>>2]>>2]|0,k,j,i)|0)==0;Pg(l);if(s){h=0;u=y;return h|0}i=f[t>>2]|0;f[w>>2]=0;if(!v)f[h+12>>2]=0;if(!(b[i+93>>0]&5)){if(f[(f[x>>2]|0)+8>>2]|0){i=0;do{Mf(a,i,1);i=i+1|0}while(i>>>0<(f[(f[x>>2]|0)+8>>2]|0)>>>0)}}else if(!(Of(a,d,w,g,h)|0)){h=0;u=y;return h|0}}if(h|0)f[h+12>>2]=1;i=Yg(f[a+24>>2]|0,f[a+28>>2]|0)|0;if(!i){h=0;u=y;return h|0}h=(Ug(i,f[a+36>>2]|0,f[f[a+20>>2]>>2]|0,f[(f[a+32>>2]|0)+8>>2]|0,d,e,g,h,f[a+4>>2]|0,f[a>>2]|0,f[a+16>>2]|0,1)|0)!=0;Zg(i);h=h&1;u=y;return h|0}function Zf(a,b,c,d,e,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0;v=u;u=u+16|0;k=v+8|0;j=v;h=v+12|0;i=a+36|0;f[i>>2]=d;p=f[a+28>>2]|0;q=a+32|0;f[q>>2]=(f[p+76>>2]|0)+(d*5640|0);f[h>>2]=0;r=a+24|0;d=Yg(f[r>>2]|0,p)|0;if(!d){t=0;u=v;return t|0}l=a+20|0;p=(Wg(d,f[i>>2]|0,f[f[l>>2]>>2]|0,b,h,c,e,g)|0)==0;Zg(d);if(p){t=0;u=v;return t|0}d=f[f[l>>2]>>2]|0;c=f[(f[q>>2]|0)+5584>>2]|0;a=f[d+20>>2]|0;h=Og(0)|0;if(!h){t=0;u=v;return t|0}e=d+16|0;a:do if(f[e>>2]|0){b=0;d=c;while(1){if(!(Qg(h,a,d)|0))break;b=b+1|0;if(b>>>0>=(f[e>>2]|0)>>>0)break a;else{a=a+52|0;d=d+1080|0}}Pg(h);t=0;u=v;return t|0}while(0);Pg(h);d=f[f[l>>2]>>2]|0;h=d+16|0;do if(f[h>>2]|0){e=f[(f[q>>2]|0)+5584>>2]|0;d=f[d+20>>2]|0;a=0;b=f[(f[r>>2]|0)+24>>2]|0;while(1){c=(f[b+36>>2]|0)+1|0;if((f[e+20>>2]|0)==1){if(!(Ag(d,c)|0)){d=0;a=47;break}}else if(!(Jg(d,c)|0)){d=0;a=47;break}a=a+1|0;if(a>>>0>=(f[h>>2]|0)>>>0){a=14;break}else{e=e+1080|0;d=d+52|0;b=b+52|0}}if((a|0)==14){d=f[f[l>>2]>>2]|0;break}else if((a|0)==47){u=v;return d|0}}while(0);c=f[q>>2]|0;a=f[d+20>>2]|0;b=f[c+16>>2]|0;do if(b|0){i=X((f[a+12>>2]|0)-(f[a+4>>2]|0)|0,(f[a+8>>2]|0)-(f[a>>2]|0)|0)|0;h=d+16|0;d=f[h>>2]|0;if(d>>>0<=2){f[k>>2]=d;Mb(g,1,20049,k)|0;break}if((X((f[a+64>>2]|0)-(f[a+56>>2]|0)|0,(f[a+60>>2]|0)-(f[a+52>>2]|0)|0)|0)>=(i|0)?(X((f[a+116>>2]|0)-(f[a+108>>2]|0)|0,(f[a+112>>2]|0)-(f[a+104>>2]|0)|0)|0)>=(i|0):0){if((b|0)!=2){d=f[a+32>>2]|0;if((f[(f[c+5584>>2]|0)+20>>2]|0)==1){vf(d,f[a+84>>2]|0,f[a+136>>2]|0,i);break}else{xf(d,f[a+84>>2]|0,f[a+136>>2]|0,i);break}}e=c+5604|0;if(!(f[e>>2]|0))break;c=Hc(d<<2)|0;if(!c){t=0;u=v;return t|0}d=f[h>>2]|0;if(!d)d=0;else{b=0;while(1){f[c+(b<<2)>>2]=f[a+32>>2];b=b+1|0;if((b|0)==(d|0))break;else a=a+52|0}}p=(zf(f[e>>2]|0,i,c,d,f[(f[(f[r>>2]|0)+24>>2]|0)+32>>2]|0)|0)==0;Mc(c);if(p)d=0;else break;u=v;return d|0}Mb(g,1,19988,j)|0;t=0;u=v;return t|0}while(0);d=f[f[l>>2]>>2]|0;p=d+16|0;if(!(f[p>>2]|0)){t=1;u=v;return t|0}o=0;m=f[d+20>>2]|0;l=f[(f[q>>2]|0)+5584>>2]|0;i=f[(f[r>>2]|0)+24>>2]|0;while(1){k=f[m+24>>2]|0;j=f[i+36>>2]|0;g=(f[k+(j*136|0)+8>>2]|0)-(f[k+(j*136|0)>>2]|0)|0;j=(f[k+(j*136|0)+12>>2]|0)-(f[k+(j*136|0)+4>>2]|0)|0;k=(f[m+8>>2]|0)-(f[m>>2]|0)|0;d=f[i+24>>2]|0;if(!(f[i+32>>2]|0)){d=1<<d;h=0}else{h=1<<d+-1;d=h;h=0-h|0}e=d+-1|0;a=f[m+32>>2]|0;d=(j|0)!=0;if((f[l+20>>2]|0)==1){if(d?(t=l+1076|0,g|0):0){d=0;while(1){b=0;c=a;while(1){r=(f[t>>2]|0)+(f[c>>2]|0)|0;f[c>>2]=(r|0)<(h|0)?h:(r|0)>(e|0)?e:r;b=b+1|0;if((b|0)==(g|0))break;else c=c+4|0}d=d+1|0;if((d|0)==(j|0))break;else a=a+(k<<2)|0}}}else if(d?(s=l+1076|0,g|0):0){c=0;while(1){d=0;b=a;while(1){r=Oi(+n[b>>2])|0;r=(f[s>>2]|0)+r|0;f[b>>2]=(r|0)<(h|0)?h:(r|0)>(e|0)?e:r;d=d+1|0;if((d|0)==(g|0))break;else b=b+4|0}c=c+1|0;if((c|0)==(j|0))break;else a=a+(k<<2)|0}}o=o+1|0;if(o>>>0>=(f[p>>2]|0)>>>0){d=1;break}else{m=m+52|0;l=l+1080|0;i=i+52|0}}u=v;return d|0}function _f(a,c,e){a=a|0;c=c|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=a+24|0;g=f[r>>2]|0;j=f[g+16>>2]|0;l=(j|0)==0;if(l){r=1;return r|0}m=f[g+24>>2]|0;k=f[(f[f[a+20>>2]>>2]|0)+20>>2]|0;g=k;a=m;h=0;i=0;while(1){p=f[a+24>>2]|0;p=(p>>>3)+((p&7|0)!=0&1)|0;q=(f[g+24>>2]|0)+((f[g+20>>2]|0)*136|0)+-136|0;h=(X(X((p|0)==3?4:p,(f[q+8>>2]|0)-(f[q>>2]|0)|0)|0,(f[q+12>>2]|0)-(f[q+4>>2]|0)|0)|0)+h|0;i=i+1|0;if((i|0)==(j|0))break;else{g=g+52|0;a=a+52|0}}g=h>>>0>e>>>0;if(g|l){r=(g^1)&1;return r|0}else q=0;while(1){l=f[m+24>>2]|0;o=f[k+24>>2]|0;j=f[m+36>>2]|0;h=f[o+(j*136|0)+8>>2]|0;i=f[o+(j*136|0)>>2]|0;n=h-i|0;e=f[o+(j*136|0)+12>>2]|0;j=f[o+(j*136|0)+4>>2]|0;o=e-j|0;p=(f[k+8>>2]|0)-(f[k>>2]|0)|0;l=(l>>>3)+((l&7|0)!=0&1)|0;a:do switch(((l|0)==3?4:l)&1073741823|0){case 1:{a=f[k+32>>2]|0;g=(o|0)==0|(n|0)==0;if(!(f[m+32>>2]|0)){if(g)break a;l=h+(X(e+-1-j|0,n)|0)-i|0;j=0;h=c;while(1){g=0;i=a;e=h;while(1){b[e>>0]=f[i>>2];g=g+1|0;if((g|0)==(n|0))break;else{i=i+4|0;e=e+1|0}}j=j+1|0;if((j|0)==(o|0))break;else{a=a+(p<<2)|0;h=h+n|0}}c=c+l|0;break a}else{if(g)break a;l=h+(X(e+-1-j|0,n)|0)-i|0;g=a;a=c;h=0;while(1){i=0;e=g;j=a;while(1){b[j>>0]=f[e>>2];i=i+1|0;if((i|0)==(n|0))break;else{e=e+4|0;j=j+1|0}}h=h+1|0;if((h|0)==(o|0))break;else{g=g+(p<<2)|0;a=a+n|0}}c=c+l|0;break a}}case 2:{g=f[k+32>>2]|0;a=(o|0)==0|(n|0)==0;if(!(f[m+32>>2]|0)){if(a)break a;l=h<<1;h=i<<1;j=c+((X(e+-1-j|0,l-h|0)|0)+l-h)|0;h=0;while(1){a=g;i=0;e=c;while(1){d[e>>1]=f[a>>2];i=i+1|0;if((i|0)==(n|0))break;else{a=a+4|0;e=e+2|0}}h=h+1|0;if((h|0)==(o|0)){c=j;break}else{g=g+(p<<2)|0;c=c+(n<<1)|0}}}else{if(a)break a;l=h<<1;i=i<<1;j=c+((X(e+-1-j|0,l-i|0)|0)+l-i)|0;i=0;while(1){a=c;h=g;e=0;while(1){d[a>>1]=f[h>>2];e=e+1|0;if((e|0)==(n|0))break;else{a=a+2|0;h=h+4|0}}i=i+1|0;if((i|0)==(o|0)){c=j;break}else{c=c+(n<<1)|0;g=g+(p<<2)|0}}}break}case 4:{if(!((o|0)==0|(n|0)==0)){l=h<<2;g=i<<2;j=c+((X(e+-1-j|0,l-g|0)|0)+l-g)|0;g=f[k+32>>2]|0;i=0;while(1){a=c;h=g;e=0;while(1){f[a>>2]=f[h>>2];e=e+1|0;if((e|0)==(n|0))break;else{a=a+4|0;h=h+4|0}}i=i+1|0;if((i|0)==(o|0)){c=j;break}else{c=c+(n<<2)|0;g=g+(p<<2)|0}}}break}default:{}}while(0);q=q+1|0;if(q>>>0>=(f[(f[r>>2]|0)+16>>2]|0)>>>0){c=1;break}else{k=k+52|0;m=m+52|0}}return c|0}function $f(a){a=a|0;var b=0,c=0,d=0,e=0,g=0;b=f[a+24>>2]|0;e=f[b+16>>2]|0;if(!e){e=0;return e|0}d=f[(f[f[a+20>>2]>>2]|0)+20>>2]|0;b=f[b+24>>2]|0;a=0;c=0;while(1){g=f[b+24>>2]|0;g=(g>>>3)+((g&7|0)!=0&1)|0;a=(X(X((f[d+12>>2]|0)-(f[d+4>>2]|0)|0,(f[d+8>>2]|0)-(f[d>>2]|0)|0)|0,(g|0)==3?4:g)|0)+a|0;c=c+1|0;if(c>>>0>=e>>>0)break;else{d=d+52|0;b=b+52|0}}return a|0}function ag(a,c,e){a=a|0;c=c|0;e=e|0;var g=0,i=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;o=f[a+24>>2]|0;p=o+16|0;m=f[p>>2]|0;n=(m|0)==0;if(n)g=0;else{i=f[(f[f[a+20>>2]>>2]|0)+20>>2]|0;k=f[o+24>>2]|0;g=0;l=0;while(1){q=f[k+24>>2]|0;q=(q>>>3)+((q&7|0)!=0&1)|0;g=(X(X((f[i+12>>2]|0)-(f[i+4>>2]|0)|0,(f[i+8>>2]|0)-(f[i>>2]|0)|0)|0,(q|0)==3?4:q)|0)+g|0;l=l+1|0;if((l|0)==(m|0))break;else{i=i+52|0;k=k+52|0}}}g=(g|0)!=(e|0);if(g|n){q=(g^1)&1;return q|0}a=f[(f[f[a+20>>2]>>2]|0)+20>>2]|0;e=f[o+24>>2]|0;n=0;while(1){q=f[e+24>>2]|0;i=(f[a+8>>2]|0)-(f[a>>2]|0)|0;k=(f[a+12>>2]|0)-(f[a+4>>2]|0)|0;m=X(k,i)|0;q=(q>>>3)+((q&7|0)!=0&1)|0;a:do switch(((q|0)==3?4:q)&1073741823|0){case 1:{i=f[a+32>>2]|0;g=(m|0)!=0;if(!(f[e+32>>2]|0)){if(g){k=0;g=i;i=c}else break a;while(1){f[g>>2]=h[i>>0];k=k+1|0;if((k|0)==(m|0))break;else{g=g+4|0;i=i+1|0}}c=c+m|0;break a}else{if(g){g=i;i=c;k=0}else break a;while(1){f[g>>2]=b[i>>0];k=k+1|0;if((k|0)==(m|0))break;else{g=g+4|0;i=i+1|0}}c=c+m|0;break a}}case 2:{g=f[a+32>>2]|0;l=(m|0)!=0;if(!(f[e+32>>2]|0)){if(!l)break a;k=c+(X(k<<1,i)|0)|0;i=0;while(1){f[g>>2]=j[c>>1];i=i+1|0;if((i|0)==(m|0)){c=k;break}else{c=c+2|0;g=g+4|0}}}else{if(!l)break a;k=c+(X(k<<1,i)|0)|0;i=0;while(1){f[g>>2]=d[c>>1];i=i+1|0;if((i|0)==(m|0)){c=k;break}else{c=c+2|0;g=g+4|0}}}break}case 4:{if(m){k=c+(X(k<<2,i)|0)|0;i=f[a+32>>2]|0;g=0;while(1){f[i>>2]=f[c>>2];g=g+1|0;if((g|0)==(m|0)){c=k;break}else{i=i+4|0;c=c+4|0}}}break}default:{}}while(0);n=n+1|0;if(n>>>0>=(f[p>>2]|0)>>>0){c=1;break}else{a=a+52|0;e=e+52|0}}return c|0}function bg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=u;u=u+288|0;j=t+16|0;h=t+8|0;r=t+152|0;s=t+24|0;d=Ic(1,20)|0;if(!d){Mb(c,1,20123,t)|0;s=0;u=t;return s|0}f[d>>2]=a;k=d+4|0;f[k>>2]=b;f[r>>2]=a;f[s>>2]=b;i=d+8|0;f[i>>2]=0;q=0;g=0;while(1){p=X(b,a)|0;a=(a+1|0)/2|0;e=q+1|0;f[r+(e<<2)>>2]=a;b=(b+1|0)/2|0;f[s+(e<<2)>>2]=b;g=g+p|0;if(p>>>0<=1)break;else q=e}f[i>>2]=g;if(!g){Mc(d);Mb(c,2,20161,h)|0;s=0;u=t;return s|0}b=Ic(g,16)|0;f[d+12>>2]=b;if(!b){Mb(c,1,20211,j)|0;Mc(d);s=0;u=t;return s|0}p=f[i>>2]|0;f[d+16>>2]=p<<4;a=b+((X(f[k>>2]|0,f[d>>2]|0)|0)<<4)|0;if(!q)a=b;else{o=0;g=a;e=a;a=b;do{m=f[s+(o<<2)>>2]|0;a:do if((m|0)>0){n=f[r+(o<<2)>>2]|0;if((n|0)<=0){i=m+-1|0;c=0;while(1){l=(c&1|0)!=0|(c|0)==(i|0);h=l?e:g;g=l?e:g+(n<<4)|0;c=c+1|0;if((c|0)>=(m|0)){e=h;break a}else e=h}}k=~n;k=(n+2+((k|0)>-3?k:-3)|0)>>>1;l=m+-1|0;j=0;do{i=e+16|0;c=n;while(1){f[a>>2]=e;h=a+16|0;if((c|0)==1){a=h;break}f[h>>2]=e;a=a+32|0;if((c|0)>2){c=c+-2|0;e=e+16|0}else break}i=i+(k<<4)|0;c=(j&1|0)!=0|(j|0)==(l|0);e=c?i:g;g=c?i:g+(n<<4)|0;j=j+1|0}while((j|0)<(m|0))}while(0);o=o+1|0}while((o|0)!=(q|0))}f[a>>2]=0;if(!p){s=d;u=t;return s|0}else a=0;while(1){f[b+4>>2]=999;f[b+8>>2]=0;f[b+12>>2]=0;a=a+1|0;if((a|0)==(p|0))break;else b=b+16|0}u=t;return d|0}function cg(a){a=a|0;var b=0,c=0;if(!a)return;c=f[a+8>>2]|0;if(!c)return;b=0;a=f[a+12>>2]|0;while(1){f[a+4>>2]=999;f[a+8>>2]=0;f[a+12>>2]=0;b=b+1|0;if(b>>>0>=c>>>0)break;else a=a+16|0}return}function dg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=u;u=u+272|0;l=s;q=s+136|0;r=s+8|0;if(!a){r=0;u=s;return r|0}k=a+4|0;if((f[a>>2]|0)==(b|0)?(f[k>>2]|0)==(c|0):0)e=a+8|0;else{f[a>>2]=b;f[k>>2]=c;f[q>>2]=b;f[r>>2]=c;e=a+8|0;f[e>>2]=0;p=0;g=c;h=b;j=0;while(1){o=X(g,h)|0;h=(h+1|0)/2|0;i=p+1|0;f[q+(i<<2)>>2]=h;g=(g+1|0)/2|0;f[r+(i<<2)>>2]=g;j=j+o|0;if(o>>>0<=1)break;else p=i}f[e>>2]=j;if(!j){e=a+12|0;g=f[e>>2]|0;if(g|0){Mc(g);f[e>>2]=0}Mc(a);r=0;u=s;return r|0}h=j<<4;i=a+16|0;j=a+12|0;do if(h>>>0>(f[i>>2]|0)>>>0){g=Lc(f[j>>2]|0,h)|0;if(g|0){f[j>>2]=g;c=f[i>>2]|0;ij(g+c|0,0,h-c|0)|0;f[i>>2]=h;c=f[k>>2]|0;b=f[a>>2]|0;break}Mb(d,1,20255,l)|0;e=f[j>>2]|0;if(e|0){Mc(e);f[j>>2]=0}Mc(a);r=0;u=s;return r|0}while(0);g=f[j>>2]|0;b=g+((X(c,b)|0)<<4)|0;if(p){c=b;o=0;do{m=f[r+(o<<2)>>2]|0;a:do if((m|0)>0){n=f[q+(o<<2)>>2]|0;if((n|0)<=0){j=m+-1|0;i=0;while(1){l=(i&1|0)!=0|(i|0)==(j|0);h=l?b:c+(n<<4)|0;b=l?b:c;i=i+1|0;if((i|0)>=(m|0)){c=h;break a}else c=h}}k=~n;k=(n+2+((k|0)>-3?k:-3)|0)>>>1;l=m+-1|0;d=0;while(1){j=b+16|0;i=n;while(1){f[g>>2]=b;h=g+16|0;if((i|0)==1){g=h;break}f[h>>2]=b;g=g+32|0;if((i|0)>2){i=i+-2|0;b=b+16|0}else break}b=j+(k<<4)|0;j=(d&1|0)!=0|(d|0)==(l|0);h=j?b:c+(n<<4)|0;b=j?b:c;d=d+1|0;if((d|0)>=(m|0)){c=h;break}else c=h}}while(0);o=o+1|0}while((o|0)!=(p|0))}f[g>>2]=0}b=f[e>>2]|0;if(!b){r=a;u=s;return r|0}e=0;g=f[a+12>>2]|0;while(1){f[g+4>>2]=999;f[g+8>>2]=0;f[g+12>>2]=0;e=e+1|0;if((e|0)==(b|0))break;else g=g+16|0}u=s;return a|0}function eg(a){a=a|0;var b=0,c=0;if(!a)return;b=a+12|0;c=f[b>>2]|0;if(c|0){Mc(c);f[b>>2]=0}Mc(a);return}function fg(a,b,c){a=a|0;b=b|0;c=c|0;a=(f[a+12>>2]|0)+(b<<4)|0;if(!a)return;while(1){b=a+4|0;if((f[b>>2]|0)<=(c|0)){a=4;break}f[b>>2]=c;a=f[a>>2]|0;if(!a){a=4;break}}if((a|0)==4)return}function gg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0;j=u;u=u+128|0;i=j;c=(f[b+12>>2]|0)+(c<<4)|0;b=f[c>>2]|0;if(!b){b=0;h=0}else{e=0;g=b;while(1){h=e+1|0;f[i+(e<<2)>>2]=c;b=f[g>>2]|0;if(!b){b=0;c=g;break}else{c=g;e=h;g=b}}}while(1){g=c+8|0;e=f[g>>2]|0;if((b|0)>(e|0))f[g>>2]=b;else b=e;a:do if((b|0)<(d|0)){e=c+4|0;while(1){if((b|0)>=(f[e>>2]|0))break;tg(a,0,1);b=b+1|0;if((b|0)>=(d|0))break a}c=c+12|0;if(!(f[c>>2]|0)){tg(a,1,1);f[c>>2]=1}}while(0);f[g>>2]=b;if(!h)break;g=h+-1|0;c=f[i+(g<<2)>>2]|0;h=g}u=j;return}function hg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0;j=u;u=u+128|0;i=j;b=(f[b+12>>2]|0)+(c<<4)|0;c=f[b>>2]|0;if(!c){e=0;g=0}else{e=0;while(1){g=e+1|0;f[i+(e<<2)>>2]=b;b=f[c>>2]|0;if(!b){e=0;b=c;break}else{h=c;e=g;c=b;b=h}}}while(1){h=b+8|0;c=f[h>>2]|0;if((e|0)>(c|0)){f[h>>2]=e;c=e}e=b+4|0;a:do if((c|0)<(d|0)){b=c;while(1){if((b|0)>=(f[e>>2]|0))break a;if(ug(a,1)|0)break;b=b+1|0;if((b|0)>=(d|0))break a}f[e>>2]=b}else b=c;while(0);f[h>>2]=b;if(!g)break;h=g+-1|0;e=b;b=f[i+(h<<2)>>2]|0;g=h}u=j;return (f[e>>2]|0)<(d|0)|0}function ig(){var a=0,b=0;a=Ic(1,12)|0;if(!a){a=0;return a|0}f[a+4>>2]=10;b=Ic(10,4)|0;f[a+8>>2]=b;if(b|0){b=a;return b|0}Mc(a);b=0;return b|0}function jg(a){a=a|0;var b=0;if(!a)return;b=f[a+8>>2]|0;if(b|0)Mc(b);Mc(a);return}function kg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0;i=u;u=u+16|0;h=i;g=a+4|0;e=f[g>>2]|0;d=f[a>>2]|0;do if((e|0)==(d|0)){e=e+10|0;f[g>>2]=e;d=a+8|0;e=Lc(f[d>>2]|0,e<<2)|0;if(e|0){f[d>>2]=e;d=f[a>>2]|0;break}Mc(f[d>>2]|0);f[g>>2]=0;f[a>>2]=0;Mb(c,1,20303,h)|0;b=0;u=i;return b|0}else e=f[a+8>>2]|0;while(0);f[e+(d<<2)>>2]=b;f[a>>2]=d+1;b=1;u=i;return b|0}function lg(a){a=a|0;return f[a>>2]|0}function mg(a){a=a|0;return f[a+8>>2]|0}function ng(a){a=a|0;f[a>>2]=0;return}function og(){return Hc(20)|0}function pg(a){a=a|0;if(!a)return;Mc(a);return}function qg(a){a=a|0;return (f[a+8>>2]|0)-(f[a>>2]|0)|0}function rg(a,b,c){a=a|0;b=b|0;c=c|0;f[a>>2]=b;f[a+4>>2]=b+c;f[a+8>>2]=b;f[a+12>>2]=0;f[a+16>>2]=8;return}function sg(a,b,c){a=a|0;b=b|0;c=c|0;f[a>>2]=b;f[a+4>>2]=b+c;f[a+8>>2]=b;f[a+12>>2]=0;f[a+16>>2]=0;return}function tg(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;if(!d)return;k=a+16|0;l=a+12|0;m=a+8|0;i=a+4|0;h=d+-1|0;a=f[k>>2]|0;do{j=c>>>h&1;if(!a){e=f[l>>2]|0;a=e<<8&65280;f[l>>2]=a;a=(a|0)==65280?7:8;f[k>>2]=a;g=f[m>>2]|0;if((f[i>>2]|0)>>>0>g>>>0){f[m>>2]=g+1;b[g>>0]=e;a=f[k>>2]|0}}a=a+-1|0;f[k>>2]=a;f[l>>2]=f[l>>2]|j<<a;h=h+-1|0}while(h>>>0<d>>>0);return}function ug(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,i=0,j=0,k=0,l=0;if(!b){l=0;return l|0}j=a+16|0;k=a+12|0;l=a+8|0;i=a+4|0;g=b+-1|0;a=0;c=f[k>>2]|0;d=f[j>>2]|0;do{if(!d){c=c<<8&65280;f[k>>2]=c;d=(c|0)==65280?7:8;f[j>>2]=d;e=f[l>>2]|0;if((f[i>>2]|0)>>>0>e>>>0){f[l>>2]=e+1;c=c|(h[e>>0]|0);f[k>>2]=c}}d=d+-1|0;f[j>>2]=d;a=(c>>>d&1)<<g|a;g=g+-1|0}while(g>>>0<b>>>0);return a|0}function vg(a){a=a|0;var c=0,d=0,e=0,g=0,h=0,i=0;e=a+12|0;c=f[e>>2]|0;i=c<<8&65280;f[e>>2]=i;h=a+16|0;f[h>>2]=(i|0)==65280?7:8;i=a+8|0;d=f[i>>2]|0;g=a+4|0;if((f[g>>2]|0)>>>0<=d>>>0){i=0;return i|0}f[i>>2]=d+1;b[d>>0]=c;if((f[h>>2]|0)!=7){i=1;return i|0}c=f[e>>2]|0;a=c<<8&65280;f[e>>2]=a;f[h>>2]=(a|0)==65280?7:8;a=f[i>>2]|0;if((f[g>>2]|0)>>>0<=a>>>0){i=0;return i|0}f[i>>2]=a+1;b[a>>0]=c;i=1;return i|0}function wg(a){a=a|0;var b=0,c=0,d=0,e=0,g=0;g=a+12|0;b=f[g>>2]|0;do if((b&255|0)==255){e=b<<8&65280;f[g>>2]=e;b=a+16|0;f[b>>2]=(e|0)==65280?7:8;c=a+8|0;d=f[c>>2]|0;if((f[a+4>>2]|0)>>>0>d>>>0){f[c>>2]=d+1;f[g>>2]=e|(h[d>>0]|0);break}else{g=0;return g|0}}else b=a+16|0;while(0);f[b>>2]=0;g=1;return g|0}function xg(a){a=a|0;return zg(a,1)|0}function yg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0;if(!d){d=(b|0)>0;if(!(d|(c|0)>1))return;if(d){e=c+-1|0;d=0;do{h=d;d=d+1|0;g=a+((h<<1|1)<<2)|0;f[g>>2]=(f[g>>2]|0)-((f[a+(((d|0)>=(c|0)?e:d)<<1<<2)>>2]|0)+(f[a+(((h|0)>=(c|0)?e:h)<<1<<2)>>2]|0)>>1)}while((d|0)!=(b|0))}if((c|0)<=0)return;e=b+-1|0;d=0;do{h=a+(d<<1<<2)|0;f[h>>2]=((f[a+(((d|0)<1?1:(((d|0)>(b|0)?b:d)<<1)+-1|0)<<2)>>2]|0)+2+(f[a+((((d|0)>=(b|0)?e:d)<<1|1)<<2)>>2]|0)>>2)+(f[h>>2]|0);d=d+1|0}while((d|0)!=(c|0));return}if((b|0)==1&(c|0)==0){f[a>>2]=f[a>>2]<<1;return}if((b|0)>0){e=c+-1|0;d=0;do{h=a+(d<<1<<2)|0;f[h>>2]=(f[h>>2]|0)-((f[a+(((d|0)<1?1:(((d|0)>(c|0)?c:d)<<1)+-1|0)<<2)>>2]|0)+(f[a+((((d|0)>=(c|0)?e:d)<<1|1)<<2)>>2]|0)>>1);d=d+1|0}while((d|0)!=(b|0))}if((c|0)<=0)return;e=b+-1|0;d=0;do{g=d;d=d+1|0;h=a+((g<<1|1)<<2)|0;f[h>>2]=((f[a+(((g|0)>=(b|0)?e:g)<<1<<2)>>2]|0)+2+(f[a+(((d|0)>=(b|0)?e:d)<<1<<2)>>2]|0)>>2)+(f[h>>2]|0)}while((d|0)!=(c|0));return}function zg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;z=(f[a+8>>2]|0)-(f[a>>2]|0)|0;h=f[a+16>>2]|0;c=h+-1|0;y=f[a+32>>2]|0;a=f[a+24>>2]|0;g=a+(c*136|0)|0;e=(c|0)==0;if(e)a=0;else{d=0;do{w=a;a=a+136|0;x=(f[w+144>>2]|0)-(f[a>>2]|0)|0;x=d>>>0<x>>>0?x:d;w=(f[w+148>>2]|0)-(f[w+140>>2]|0)|0;d=x>>>0<w>>>0?w:x;c=c+-1|0}while((c|0)!=0);a=d<<2}x=Hc(a)|0;if(!((a|0)==0|(x|0)!=0)){z=0;return z|0}if(!e){w=x+4|0;s=h+-2|0;while(1){j=g;g=g+-136|0;v=f[j>>2]|0;r=(f[j+8>>2]|0)-v|0;l=f[j+4>>2]|0;t=(f[j+12>>2]|0)-l|0;u=(f[j+-128>>2]|0)-(f[g>>2]|0)|0;j=(f[j+-124>>2]|0)-(f[j+-132>>2]|0)|0;v=v&1;l=l&1;m=t-j|0;q=(r|0)>0;a:do if(q){i=(j|0)==0;n=(m|0)==0;o=w+(0-l<<2)|0;p=X(j,z)|0;k=x+(l<<2)|0;if((t|0)>0){h=0;while(1){e=y+(h<<2)|0;a=0;do{d=e+((X(a,z)|0)<<2)|0;f[x+(a<<2)>>2]=f[d>>2];a=a+1|0}while((a|0)!=(t|0));Va[b&3](x,m,j,l);if(!i){a=e;c=j;d=k;while(1){c=c+-1|0;f[a>>2]=f[d>>2];if(!c)break;else{a=a+(z<<2)|0;d=d+8|0}}}if(!n){a=e+(p<<2)|0;c=m;d=o;while(1){c=c+-1|0;f[a>>2]=f[d>>2];if(!c)break;else{a=a+(z<<2)|0;d=d+8|0}}}h=h+1|0;if((h|0)==(r|0))break a}}if(i){a=0;while(1){Va[b&3](x,m,0,l);if(!n){c=y+(a<<2)+(p<<2)|0;d=m;e=o;while(1){d=d+-1|0;f[c>>2]=f[e>>2];if(!d)break;else{c=c+(z<<2)|0;e=e+8|0}}}a=a+1|0;if((a|0)==(r|0))break a}}else h=0;do{e=y+(h<<2)|0;Va[b&3](x,m,j,l);a=e;c=j;d=k;while(1){c=c+-1|0;f[a>>2]=f[d>>2];if(!c)break;else{a=a+(z<<2)|0;d=d+8|0}}if(!n){a=e+(p<<2)|0;c=m;d=o;while(1){c=c+-1|0;f[a>>2]=f[d>>2];if(!c)break;else{a=a+(z<<2)|0;d=d+8|0}}}h=h+1|0}while((h|0)!=(r|0))}while(0);k=r-u|0;b:do if((t|0)>0){i=(u|0)>0;j=x+(v<<2)|0;l=(k|0)>0;m=w+(0-v<<2)|0;if(q){h=0;while(1){e=y+((X(h,z)|0)<<2)|0;a=0;do{f[x+(a<<2)>>2]=f[e+(a<<2)>>2];a=a+1|0}while((a|0)!=(r|0));Va[b&3](x,k,u,v);if(i){a=e;c=0;d=j;while(1){f[a>>2]=f[d>>2];c=c+1|0;if((c|0)==(u|0))break;else{a=a+4|0;d=d+8|0}}}if(l){a=e+(u<<2)|0;c=0;d=m;while(1){f[a>>2]=f[d>>2];c=c+1|0;if((c|0)==(k|0))break;else{a=a+4|0;d=d+8|0}}}h=h+1|0;if((h|0)==(t|0))break b}}if(i)h=0;else{a=0;while(1){Va[b&3](x,k,u,v);if(l){c=y+((X(a,z)|0)<<2)+(u<<2)|0;d=0;e=m;while(1){f[c>>2]=f[e>>2];d=d+1|0;if((d|0)==(k|0))break;else{c=c+4|0;e=e+8|0}}}a=a+1|0;if((a|0)==(t|0))break b}}do{e=y+((X(h,z)|0)<<2)|0;Va[b&3](x,k,u,v);a=e;c=0;d=j;while(1){f[a>>2]=f[d>>2];c=c+1|0;if((c|0)==(u|0))break;else{a=a+4|0;d=d+8|0}}if(l){a=e+(u<<2)|0;c=0;d=m;while(1){f[a>>2]=f[d>>2];c=c+1|0;if((c|0)==(k|0))break;else{a=a+4|0;d=d+8|0}}}h=h+1|0}while((h|0)!=(t|0))}while(0);if(!s)break;else s=s+-1|0}}Mc(x);z=1;return z|0}function Ag(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;G=u;u=u+32|0;E=G+16|0;F=G;h=f[a+24>>2]|0;g=(f[h+8>>2]|0)-(f[h>>2]|0)|0;i=(f[h+12>>2]|0)-(f[h+4>>2]|0)|0;D=(f[a+8>>2]|0)-(f[a>>2]|0)|0;if((b|0)==1){F=1;u=G;return F|0}j=b+-1|0;e=(j|0)==0;if(e)b=0;else{b=h;c=0;d=j;do{B=b;b=b+136|0;C=(f[B+144>>2]|0)-(f[b>>2]|0)|0;C=c>>>0<C>>>0?C:c;B=(f[B+148>>2]|0)-(f[B+140>>2]|0)|0;c=C>>>0<B>>>0?B:C;d=d+-1|0}while((d|0)!=0);b=c<<2}C=Jc(b)|0;f[E>>2]=C;if(!C){F=0;u=G;return F|0}f[F>>2]=C;if(!e){t=a+32|0;v=E+8|0;w=F+8|0;x=E+4|0;y=E+12|0;z=F+4|0;A=F+12|0;B=C+4|0;do{s=f[t>>2]|0;p=h;h=h+136|0;f[v>>2]=g;f[w>>2]=i;c=f[h>>2]|0;n=g;g=(f[p+144>>2]|0)-c|0;o=p+140|0;b=f[o>>2]|0;r=i;i=(f[p+148>>2]|0)-b|0;p=g-n|0;f[x>>2]=p;c=(c|0)%2|0;f[y>>2]=c;q=(i|0)==0;if(!q){k=g<<2;l=(n|0)==0;m=(p|0)==0;b=0;while(1){a=s+((X(b,D)|0)<<2)|0;if(l)d=0;else{c=C+(c<<2)|0;d=a;e=n;while(1){e=e+-1|0;f[c>>2]=f[d>>2];if(!e)break;else{c=c+8|0;d=d+4|0}}c=f[y>>2]|0;d=n}if(!m){e=B+(0-c<<2)|0;c=a+(d<<2)|0;d=p;while(1){d=d+-1|0;f[e>>2]=f[c>>2];if(!d)break;else{e=e+8|0;c=c+4|0}}}Bg(E);hj(a|0,C|0,k|0)|0;b=b+1|0;if((b|0)==(i|0))break;c=f[y>>2]|0}b=f[o>>2]|0}m=i-r|0;f[z>>2]=m;c=(b|0)%2|0;f[A>>2]=c;a:do if(g|0){k=(r|0)==0;l=(m|0)==0;if(q){b=0;while(1){a=s+(b<<2)|0;if(k)d=0;else{c=C+(c<<2)|0;d=a;e=r;while(1){e=e+-1|0;f[c>>2]=f[d>>2];if(!e)break;else{c=c+8|0;d=d+(D<<2)|0}}c=f[A>>2]|0;d=r}if(!l){e=B+(0-c<<2)|0;c=a+((X(d,D)|0)<<2)|0;d=m;while(1){d=d+-1|0;f[e>>2]=f[c>>2];if(!d)break;else{e=e+8|0;c=c+(D<<2)|0}}}Bg(F);b=b+1|0;if((b|0)==(g|0))break a;c=f[A>>2]|0}}else b=0;while(1){a=s+(b<<2)|0;if(k)d=0;else{c=C+(c<<2)|0;d=a;e=r;while(1){e=e+-1|0;f[c>>2]=f[d>>2];if(!e)break;else{c=c+8|0;d=d+(D<<2)|0}}c=f[A>>2]|0;d=r}if(!l){e=B+(0-c<<2)|0;c=a+((X(d,D)|0)<<2)|0;d=m;while(1){d=d+-1|0;f[e>>2]=f[c>>2];if(!d)break;else{e=e+8|0;c=c+(D<<2)|0}}}Bg(F);c=0;do{q=s+((X(c,D)|0)+b<<2)|0;f[q>>2]=f[C+(c<<2)>>2];c=c+1|0}while((c|0)!=(i|0));b=b+1|0;if((b|0)==(g|0))break a;c=f[A>>2]|0}}while(0);j=j+-1|0}while((j|0)!=0)}Kc(C);F=1;u=G;return F|0}function Bg(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0;d=f[a>>2]|0;e=f[a+4>>2]|0;g=f[a+8>>2]|0;if(!(f[a+12>>2]|0)){c=(e|0)>0;if(!(c|(g|0)>1))return;if((g|0)>0){b=e+-1|0;a=0;do{h=d+(a<<1<<2)|0;f[h>>2]=(f[h>>2]|0)-((f[d+(((a|0)<1?1:(((a|0)>(e|0)?e:a)<<1)+-1|0)<<2)>>2]|0)+2+(f[d+((((a|0)>=(e|0)?b:a)<<1|1)<<2)>>2]|0)>>2);a=a+1|0}while((a|0)!=(g|0))}if(!c)return;b=g+-1|0;a=0;do{c=a;a=a+1|0;h=d+((c<<1|1)<<2)|0;f[h>>2]=((f[d+(((a|0)>=(g|0)?b:a)<<1<<2)>>2]|0)+(f[d+(((c|0)>=(g|0)?b:c)<<1<<2)>>2]|0)>>1)+(f[h>>2]|0)}while((a|0)!=(e|0));return}if((e|0)==1&(g|0)==0){f[d>>2]=(f[d>>2]|0)/2|0;return}if((g|0)>0){b=e+-1|0;a=0;do{c=a;a=a+1|0;h=d+((c<<1|1)<<2)|0;f[h>>2]=(f[h>>2]|0)-((f[d+(((c|0)>=(e|0)?b:c)<<1<<2)>>2]|0)+2+(f[d+(((a|0)>=(e|0)?b:a)<<1<<2)>>2]|0)>>2)}while((a|0)!=(g|0))}if((e|0)<=0)return;b=g+-1|0;a=0;do{h=d+(a<<1<<2)|0;f[h>>2]=((f[d+(((a|0)<1?1:(((a|0)>(g|0)?g:a)<<1)+-1|0)<<2)>>2]|0)+(f[d+((((a|0)>=(g|0)?b:a)<<1|1)<<2)>>2]|0)>>1)+(f[h>>2]|0);a=a+1|0}while((a|0)!=(e|0));return}function Cg(a){a=a|0;return ((a|0)==0?0:(a+-1|0)>>>0<2?1:2)|0}function Dg(a,b){a=a|0;b=b|0;return +(+p[56+(b*80|0)+(a<<3)>>3])}function Eg(a){a=a|0;return zg(a,2)|0}
function Fg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0;if(!d){h=(b|0)>0;if(!(h|(c|0)>1))return;if(h){e=c+-1|0;d=0;do{g=d;d=d+1|0;i=(f[a+(((d|0)>=(c|0)?e:d)<<1<<2)>>2]|0)+(f[a+(((g|0)>=(c|0)?e:g)<<1<<2)>>2]|0)|0;i=Yi(i|0,((i|0)<0)<<31>>31|0,12993,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;g=a+((g<<1|1)<<2)|0;f[g>>2]=(f[g>>2]|0)-i}while((d|0)!=(b|0))}g=(c|0)>0;if(g){e=b+-1|0;d=0;do{j=(f[a+((((d|0)>=(b|0)?e:d)<<1|1)<<2)>>2]|0)+(f[a+(((d|0)<1?1:(((d|0)>(b|0)?b:d)<<1)+-1|0)<<2)>>2]|0)|0;j=Yi(j|0,((j|0)<0)<<31>>31|0,434,0)|0;j=Zi(j|0,I|0,4096,0)|0;j=ej(j|0,I|0,13)|0;i=a+(d<<1<<2)|0;f[i>>2]=(f[i>>2]|0)-j;d=d+1|0}while((d|0)!=(c|0))}if(h){e=c+-1|0;d=0;do{j=d;d=d+1|0;i=(f[a+(((d|0)>=(c|0)?e:d)<<1<<2)>>2]|0)+(f[a+(((j|0)>=(c|0)?e:j)<<1<<2)>>2]|0)|0;i=Yi(i|0,((i|0)<0)<<31>>31|0,7233,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;j=a+((j<<1|1)<<2)|0;f[j>>2]=(f[j>>2]|0)+i}while((d|0)!=(b|0))}if(g){e=b+-1|0;d=0;do{i=(f[a+((((d|0)>=(b|0)?e:d)<<1|1)<<2)>>2]|0)+(f[a+(((d|0)<1?1:(((d|0)>(b|0)?b:d)<<1)+-1|0)<<2)>>2]|0)|0;i=Yi(i|0,((i|0)<0)<<31>>31|0,3633,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;j=a+(d<<1<<2)|0;f[j>>2]=(f[j>>2]|0)+i;d=d+1|0}while((d|0)!=(c|0))}if(h){d=0;do{j=a+((d<<1|1)<<2)|0;i=f[j>>2]|0;i=Yi(i|0,((i|0)<0)<<31>>31|0,5038,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;f[j>>2]=i;d=d+1|0}while((d|0)!=(b|0))}if(g)d=0;else return;do{j=a+(d<<1<<2)|0;i=f[j>>2]|0;i=Yi(i|0,((i|0)<0)<<31>>31|0,6659,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;f[j>>2]=i;d=d+1|0}while((d|0)!=(c|0));return}else{h=(c|0)>0;if(!((b|0)>1|h))return;g=(b|0)>0;if(g){e=c+-1|0;d=0;do{i=(f[a+(((d|0)<1?1:(((d|0)>(c|0)?c:d)<<1)+-1|0)<<2)>>2]|0)+(f[a+((((d|0)>=(c|0)?e:d)<<1|1)<<2)>>2]|0)|0;i=Yi(i|0,((i|0)<0)<<31>>31|0,12993,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;j=a+(d<<1<<2)|0;f[j>>2]=(f[j>>2]|0)-i;d=d+1|0}while((d|0)!=(b|0))}if(h){e=b+-1|0;d=0;do{j=d;d=d+1|0;i=(f[a+(((d|0)>=(b|0)?e:d)<<1<<2)>>2]|0)+(f[a+(((j|0)>=(b|0)?e:j)<<1<<2)>>2]|0)|0;i=Yi(i|0,((i|0)<0)<<31>>31|0,434,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;j=a+((j<<1|1)<<2)|0;f[j>>2]=(f[j>>2]|0)-i}while((d|0)!=(c|0))}if(g){e=c+-1|0;d=0;do{i=(f[a+(((d|0)<1?1:(((d|0)>(c|0)?c:d)<<1)+-1|0)<<2)>>2]|0)+(f[a+((((d|0)>=(c|0)?e:d)<<1|1)<<2)>>2]|0)|0;i=Yi(i|0,((i|0)<0)<<31>>31|0,7233,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;j=a+(d<<1<<2)|0;f[j>>2]=(f[j>>2]|0)+i;d=d+1|0}while((d|0)!=(b|0))}if(h){e=b+-1|0;d=0;do{j=d;d=d+1|0;i=(f[a+(((d|0)>=(b|0)?e:d)<<1<<2)>>2]|0)+(f[a+(((j|0)>=(b|0)?e:j)<<1<<2)>>2]|0)|0;i=Yi(i|0,((i|0)<0)<<31>>31|0,3633,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;j=a+((j<<1|1)<<2)|0;f[j>>2]=(f[j>>2]|0)+i}while((d|0)!=(c|0))}if(g){d=0;do{j=a+(d<<1<<2)|0;i=f[j>>2]|0;i=Yi(i|0,((i|0)<0)<<31>>31|0,5038,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;f[j>>2]=i;d=d+1|0}while((d|0)!=(b|0))}if(h)d=0;else return;do{j=a+((d<<1|1)<<2)|0;i=f[j>>2]|0;i=Yi(i|0,((i|0)<0)<<31>>31|0,6659,0)|0;i=Zi(i|0,I|0,4096,0)|0;i=ej(i|0,I|0,13)|0;f[j>>2]=i;d=d+1|0}while((d|0)!=(c|0));return}}function Gg(a){a=a|0;return 0}function Hg(a,b){a=a|0;b=b|0;return +(+p[376+(b*80|0)+(a<<3)>>3])}function Ig(a,b){a=a|0;b=b|0;var c=0.0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;k=a+4|0;l=((f[k>>2]|0)*3|0)+-2|0;if(!l)return;m=a+20|0;n=a+24|0;j=0;do{if(!j){d=0;e=0}else{e=j+-1|0;d=((e>>>0)%3|0)+1|0;e=((e>>>0)/3|0)+1|0}g=(d|0)==0|(f[m>>2]|0)==0?0:(d+-1|0)>>>0<2?1:2;if(!(f[n>>2]|0))c=1.0;else c=+(1<<g|0)/+p[376+(d*80|0)+((f[k>>2]|0)+~e<<3)>>3];i=~~+J(+(c*8192.0));h=g+b|0;if((i|0)>1){d=i;g=0;while(1)if(d>>>0>3){d=d>>>1;g=g+1|0}else{d=i;e=0;break}while(1)if(d>>>0>3){d=d>>>1;e=e+1|0}else break;e=10-e|0;d=g+-12|0}else{e=11;d=-13}f[a+28+(j<<3)+4>>2]=((e|0)<0?i>>0-e:i<<e)&2047;f[a+28+(j<<3)>>2]=h-d;j=j+1|0}while((j|0)!=(l|0));return}function Jg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0;S=u;u=u+32|0;Q=S+16|0;R=S;j=f[a+24>>2]|0;g=f[j+8>>2]|0;h=f[j>>2]|0;n=f[j+12>>2]|0;o=f[j+4>>2]|0;O=a+8|0;l=f[O>>2]|0;m=f[a>>2]|0;P=l-m|0;i=b+-1|0;e=(i|0)==0;if(e)b=80;else{b=j;c=0;d=i;do{L=b;b=b+136|0;M=(f[L+144>>2]|0)-(f[b>>2]|0)|0;M=c>>>0<M>>>0?M:c;L=(f[L+148>>2]|0)-(f[L+140>>2]|0)|0;c=M>>>0<L>>>0?L:M;d=d+-1|0}while((d|0)!=0);b=(c<<4)+80|0}k=Jc(b)|0;f[Q>>2]=k;if(!k){R=0;u=S;return R|0}f[R>>2]=k;a:do if(e)b=k;else{z=a+32|0;A=a+12|0;B=a+4|0;C=Q+8|0;D=R+8|0;E=Q+4|0;F=Q+12|0;G=P<<2;H=P<<1;I=P*3|0;J=R+4|0;K=R+12|0;L=l-m<<2;M=m-l<<2;p=g-h|0;c=i;b=k;d=k;g=l;e=m;t=n-o|0;n=k;while(1){v=f[z>>2]|0;e=X((f[A>>2]|0)-(f[B>>2]|0)|0,g-e|0)|0;f[C>>2]=p;f[D>>2]=t;w=j+136|0;o=f[j+144>>2]|0;q=f[w>>2]|0;x=o-q|0;h=f[j+148>>2]|0;m=j+140|0;g=f[m>>2]|0;y=h-g|0;f[E>>2]=x-p;f[F>>2]=(q|0)%2|0;do if((y|0)>3){k=g+-1-h|0;k=(h+4+((k|0)>-8?k:-8)-g|0)>>>2;l=v+(G<<2)+((X(L,k)|0)<<2)|0;k=X(M,k)|0;if((x|0)>0){g=y;h=e;i=v}else{g=y;h=e;i=v;while(1){Kg(Q,i,P,h);Lg(Q);if((g|0)>7){g=g+-4|0;h=h-G|0;i=i+(G<<2)|0}else break}e=M+e+k|0;h=l;break}while(1){Kg(Q,i,P,h);Lg(Q);j=x;do{s=j;j=j+-1|0;f[i+(j<<2)>>2]=f[n+(j<<4)>>2];f[i+(j+P<<2)>>2]=f[n+(j<<4)+4>>2];f[i+(j+H<<2)>>2]=f[n+(j<<4)+8>>2];f[i+(j+I<<2)>>2]=f[n+(j<<4)+12>>2]}while((s|0)>1);if((g|0)>7){g=g+-4|0;h=h-G|0;i=i+(G<<2)|0}else break}e=M+e+k|0;h=l}else h=v;while(0);b:do if(!(y&3)){s=n;N=22}else{Kg(Q,h,P,e);Lg(Q);e=x+-1|0;if((x|0)<=0){l=y-t|0;f[J>>2]=l;k=(f[m>>2]|0)%2|0;f[K>>2]=k;m=v;break}g=f[Q>>2]|0;switch(y&3){case 3:{b=e;while(1){f[h+(b+H<<2)>>2]=f[g+(b<<4)+8>>2];f[h+(b+P<<2)>>2]=f[g+(b<<4)+4>>2];f[h+(b<<2)>>2]=f[g+(b<<4)>>2];if((b|0)>0)b=b+-1|0;else{b=g;s=g;N=22;break}}break}case 2:{b=e;while(1){f[h+(b+P<<2)>>2]=f[g+(b<<4)+4>>2];f[h+(b<<2)>>2]=f[g+(b<<4)>>2];if((b|0)>0)b=b+-1|0;else{b=g;s=g;N=22;break}}break}case 1:{b=e;while(1){f[h+(b<<2)>>2]=f[g+(b<<4)>>2];if((b|0)>0)b=b+-1|0;else{b=g;s=g;N=22;break}}break}default:{b=g;s=g;N=22;break b}}}while(0);do if((N|0)==22){N=0;r=y-t|0;f[J>>2]=r;p=(f[m>>2]|0)%2|0;f[K>>2]=p;if((x|0)>3){n=q+-1-o|0;o=o+4+((n|0)>-8?n:-8)-q&-4;if(!y){k=(t|0)>0;l=X(t,P)|0;m=0-p|0;n=(r|0)>0;i=v;j=x;while(1){d=f[R>>2]|0;g=d+(p<<4)|0;if(k){e=0;do{q=g+(e<<1<<4)|0;h=i+((X(e,P)|0)<<2)|0;f[q>>2]=f[h>>2];f[q+4>>2]=f[h+4>>2];f[q+8>>2]=f[h+8>>2];f[q+12>>2]=f[h+12>>2];e=e+1|0}while((e|0)!=(t|0))}g=i+(l<<2)|0;h=d+16+(m<<4)|0;if(n){e=0;do{q=h+(e<<1<<4)|0;T=g+((X(e,P)|0)<<2)|0;f[q>>2]=f[T>>2];f[q+4>>2]=f[T+4>>2];f[q+8>>2]=f[T+8>>2];f[q+12>>2]=f[T+12>>2];e=e+1|0}while((e|0)!=(r|0))}Lg(R);if((j|0)>7){i=i+16|0;j=j+-4|0}else break}m=v+16+(o<<2)|0;k=p;l=r;n=s;break}j=f[D>>2]|0;k=(j|0)>0;l=X(j,P)|0;m=0-p|0;n=(r|0)>0;h=v;i=x;while(1){g=d+(p<<4)|0;if(k){e=0;do{T=g+(e<<1<<4)|0;t=h+((X(e,P)|0)<<2)|0;f[T>>2]=f[t>>2];f[T+4>>2]=f[t+4>>2];f[T+8>>2]=f[t+8>>2];f[T+12>>2]=f[t+12>>2];e=e+1|0}while((e|0)!=(j|0))}g=h+(l<<2)|0;e=d+16+(m<<4)|0;if(n){d=0;do{T=e+(d<<1<<4)|0;t=g+((X(d,P)|0)<<2)|0;f[T>>2]=f[t>>2];f[T+4>>2]=f[t+4>>2];f[T+8>>2]=f[t+8>>2];f[T+12>>2]=f[t+12>>2];d=d+1|0}while((d|0)!=(r|0))}Lg(R);e=0;do{T=h+((X(e,P)|0)<<2)|0;d=f[R>>2]|0;t=d+(e<<4)|0;f[T>>2]=f[t>>2];f[T+4>>2]=f[t+4>>2];f[T+8>>2]=f[t+8>>2];f[T+12>>2]=f[t+12>>2];e=e+1|0}while((e|0)!=(y|0));if((i|0)>7){h=h+16|0;i=i+-4|0}else break}m=v+16+(o<<2)|0;k=p;l=r;n=s}else{m=v;k=p;l=r;n=s}}while(0);i=x&3;if(i){j=f[R>>2]|0;e=j+(k<<4)|0;g=f[D>>2]|0;if((g|0)>0){h=i<<2;d=0;do{hj(e+(d<<1<<4)|0,m+((X(d,P)|0)<<2)|0,h|0)|0;d=d+1|0}while((d|0)!=(g|0))}h=m+((X(g,P)|0)<<2)|0;e=j+16+(0-k<<4)|0;if((l|0)>0){g=i<<2;d=0;do{hj(e+(d<<1<<4)|0,h+((X(d,P)|0)<<2)|0,g|0)|0;d=d+1|0}while((d|0)!=(l|0))}Lg(R);if(!y)d=j;else{e=i<<2;d=0;do{hj(m+((X(d,P)|0)<<2)|0,j+(d<<4)|0,e|0)|0;d=d+1|0}while((d|0)!=(y|0));d=j}}c=c+-1|0;if(!c)break a;p=x;j=w;g=f[O>>2]|0;e=f[a>>2]|0;t=y}}while(0);Kc(b);T=1;u=S;return T|0}function Kg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;h=f[a>>2]|0;j=f[a+12>>2]|0;g=h+(j<<4)|0;l=f[a+8>>2]|0;m=c*3|0;q=h+16+(0-j<<4)|0;n=f[a+4>>2]|0;if(((l+m|0)<(d|0)?(b&15|0)==0:0)?((g|c)&15|0)==0:0){if((l|0)>0){a=0;do{g=a<<3;f[h+(j<<4)+(g<<2)>>2]=f[b+(a<<2)>>2];r=a+c|0;f[h+(j<<4)+((g|1)<<2)>>2]=f[b+(r<<2)>>2];r=r+c|0;f[h+(j<<4)+((g|2)<<2)>>2]=f[b+(r<<2)>>2];f[h+(j<<4)+((g|3)<<2)>>2]=f[b+(r+c<<2)>>2];a=a+1|0}while((a|0)!=(l|0))}}else e=2;if((e|0)==2?(l|0)>0:0){a=0;do{e=a<<3;f[h+(j<<4)+(e<<2)>>2]=f[b+(a<<2)>>2];g=a+c|0;if(((g|0)<(d|0)?(f[h+(j<<4)+((e|1)<<2)>>2]=f[b+(g<<2)>>2],i=g+c|0,(i|0)<(d|0)):0)?(f[h+(j<<4)+((e|2)<<2)>>2]=f[b+(i<<2)>>2],k=i+c|0,(k|0)<(d|0)):0)f[h+(j<<4)+((e|3)<<2)>>2]=f[b+(k<<2)>>2];a=a+1|0}while((a|0)!=(l|0))}h=b+(l<<2)|0;b=d-l|0;if(((n+m|0)<(b|0)?(h&15|0)==0:0)?((q|c)&15|0)==0:0){if((n|0)>0)a=0;else return;do{r=a<<3;f[q+(r<<2)>>2]=f[h+(a<<2)>>2];p=a+c|0;f[q+((r|1)<<2)>>2]=f[h+(p<<2)>>2];p=p+c|0;f[q+((r|2)<<2)>>2]=f[h+(p<<2)>>2];f[q+((r|3)<<2)>>2]=f[h+(p+c<<2)>>2];a=a+1|0}while((a|0)!=(n|0));return}if((n|0)>0)a=0;else return;do{e=a<<3;f[q+(e<<2)>>2]=f[h+(a<<2)>>2];g=a+c|0;if(((g|0)<(b|0)?(f[q+((e|1)<<2)>>2]=f[h+(g<<2)>>2],o=g+c|0,(o|0)<(b|0)):0)?(f[q+((e|2)<<2)>>2]=f[h+(o<<2)>>2],p=o+c|0,(p|0)<(b|0)):0)f[q+((e|3)<<2)>>2]=f[h+(p<<2)>>2];a=a+1|0}while((a|0)!=(n|0));return}function Lg(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0,i=0,j=0.0,k=0.0,l=0,m=0.0,o=0;do if(!(f[a+12>>2]|0)){d=f[a+8>>2]|0;if((f[a+4>>2]|0)>0){b=f[a>>2]|0;if((d|0)>0){e=0;c=1;g=b;i=9;break}else{e=0;h=1;g=b;break}}if((d|0)>1){c=1;b=0;i=7}else return}else{d=f[a+8>>2]|0;if((d|0)<=0)if((f[a+4>>2]|0)>1){e=1;h=0;g=f[a>>2]|0;break}else return;else{c=0;b=1;i=7}}while(0);if((i|0)==7){e=b;g=f[a>>2]|0;i=9}if((i|0)==9){b=0;do{i=b<<3;o=g+(e<<4)+(i<<2)|0;l=g+(e<<4)+((i|1)<<2)|0;m=+n[l>>2];h=g+(e<<4)+((i|2)<<2)|0;k=+n[h>>2];i=g+(e<<4)+((i|3)<<2)|0;j=+n[i>>2];n[o>>2]=+n[o>>2]*1.2301740646362305;n[l>>2]=m*1.2301740646362305;n[h>>2]=k*1.2301740646362305;n[i>>2]=j*1.2301740646362305;b=b+1|0}while((b|0)!=(d|0));h=c}c=f[a+4>>2]|0;if((c|0)>0){b=0;do{o=b<<3;i=g+(h<<4)+(o<<2)|0;a=g+(h<<4)+((o|1)<<2)|0;j=+n[a>>2];l=g+(h<<4)+((o|2)<<2)|0;k=+n[l>>2];o=g+(h<<4)+((o|3)<<2)|0;m=+n[o>>2];n[i>>2]=+n[i>>2]*1.625732421875;n[a>>2]=j*1.625732421875;n[l>>2]=k*1.625732421875;n[o>>2]=m*1.625732421875;b=b+1|0}while((b|0)!=(c|0))}b=g+(h<<4)|0;a=g+(e<<4)|0;g=a+16|0;i=c-e|0;i=(d|0)<(i|0)?d:i;Mg(b,g,d,i,-.4435068666934967);l=b+16|0;o=d-h|0;o=(c|0)<(o|0)?c:o;Mg(a,l,c,o,-.8829110860824585);Mg(b,g,d,i,.05298011749982834);Mg(a,l,c,o,1.5861343145370483);return}function Mg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;var f=0.0,g=0.0,h=0.0,i=0.0,j=0,k=0,l=0,m=0,o=0.0,p=0.0,q=0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0,x=0.0;if((d|0)>0){m=d<<1;l=m+-2|0;j=b;k=0;g=+n[a>>2];h=+n[a+4>>2];i=+n[a+8>>2];f=+n[a+12>>2];while(1){w=j+-16|0;t=j+-12|0;v=+n[t>>2];q=j+-8|0;s=+n[q>>2];a=j+-4|0;p=+n[a>>2];x=g;g=+n[j>>2];u=h;h=+n[j+4>>2];r=i;i=+n[j+8>>2];o=f;f=+n[j+12>>2];n[w>>2]=+n[w>>2]+(x+g)*e;n[t>>2]=v+(u+h)*e;n[q>>2]=s+(r+i)*e;n[a>>2]=p+(o+f)*e;k=k+1|0;if((k|0)==(d|0))break;else j=j+32|0}a=b+(l<<4)|0;b=b+(m<<4)|0}if((d|0)>=(c|0))return;f=e+e;g=f*+n[a>>2];h=f*+n[a+4>>2];i=f*+n[a+8>>2];f=f*+n[a+12>>2];while(1){m=b+-16|0;q=b+-12|0;u=+n[q>>2];t=b+-8|0;v=+n[t>>2];w=b+-4|0;x=+n[w>>2];n[m>>2]=g+ +n[m>>2];n[q>>2]=h+u;n[t>>2]=i+v;n[w>>2]=f+x;d=d+1|0;if((d|0)==(c|0))break;else b=b+32|0}return}function Ng(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0.0,h=0,i=0,j=0,k=0,l=0.0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;x=c<<2;y=Hc(c<<4)|0;if(!y){z=0;return z|0}z=y+x|0;ij(y|0,0,x|0)|0;t=c+-1|0;u=(c|0)==0;if(!u){d=y;e=0;while(1){f[d>>2]=e;e=e+1|0;if((e|0)==(c|0))break;else d=d+4|0}}a:do if(t|0){m=1;o=a;p=0;d=0;q=y;s=c;while(1){r=o+(p<<2)|0;if(p>>>0<c>>>0){e=r;g=0.0;h=p}else break;while(1){l=+n[e>>2];l=l>0.0?l:-l;w=l>g;d=w?h:d;g=w?l:g;h=h+1|0;if((h|0)==(c|0))break;else e=e+(c<<2)|0}if(g==0.0)break;if((d|0)!=(p|0)){w=q+(d<<2)+(0-p<<2)|0;v=f[q>>2]|0;f[q>>2]=f[w>>2];f[w>>2]=v;w=o+((X(d-p|0,c)|0)<<2)|0;hj(z|0,w|0,x|0)|0;hj(w|0,o|0,x|0)|0;hj(o|0,z|0,x|0)|0}g=+n[r>>2];if(m>>>0<c>>>0){h=r+(c<<2)|0;j=m;while(1){l=+n[h>>2]/g;n[h>>2]=l;e=m;i=h;k=r;do{k=k+4|0;i=i+4|0;n[i>>2]=+n[i>>2]-l*+n[k>>2];e=e+1|0}while((e|0)!=(c|0));j=j+1|0;if((j|0)==(c|0))break;else h=h+(s<<2)+(p<<2)|0}}p=p+1|0;if(p>>>0>=t>>>0)break a;else{m=m+1|0;o=o+(c<<2)|0;q=q+4|0;s=s+-1|0}}Mc(y);z=0;return z|0}while(0);v=z+(c<<2)|0;w=z+(c<<1<<2)|0;if(!u){q=v+(c<<2)|0;r=w+(c<<2)|0;s=a+((X(c,c)|0)<<2)+-4|0;t=~c;p=0;while(1){ij(z|0,0,x|0)|0;n[z+(p<<2)>>2]=1.0;i=y;j=a;k=w;m=0;o=1;while(1){if(!m)g=0.0;else{d=j;e=w;g=0.0;h=1;while(1){g=g+ +n[d>>2]*+n[e>>2];h=h+1|0;if((h|0)==(o|0))break;else{d=d+4|0;e=e+4|0}}}n[k>>2]=+n[z+(f[i>>2]<<2)>>2]-g;m=m+1|0;if((m|0)==(c|0)){i=c;j=s;k=q;m=r;break}else{i=i+4|0;j=j+(c<<2)|0;k=k+4|0;o=o+1|0}}while(1){m=m+-4|0;l=+n[j>>2];if(i>>>0<c>>>0){d=j;e=k;g=0.0;h=i;while(1){d=d+4|0;g=g+ +n[d>>2]*+n[e>>2];h=h+1|0;if((h|0)==(c|0))break;else e=e+4|0}}else g=0.0;k=k+-4|0;i=i+-1|0;n[k>>2]=(+n[m>>2]-g)/l;if(!i){d=b;e=0;break}else j=j+(t<<2)|0}while(1){f[d>>2]=f[v+(e<<2)>>2];e=e+1|0;if((e|0)==(c|0))break;else d=d+(c<<2)|0}p=p+1|0;if((p|0)==(c|0))break;else b=b+4|0}}Mc(y);z=1;return z|0}function Og(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0;g=Ic(1,44)|0;if(!g){g=0;return g|0}h=_g()|0;f[g>>2]=h;if(!h){$g(0);f[g>>2]=0;h=g+4|0;ph(f[h>>2]|0);f[h>>2]=0;if((f[g+40>>2]|0)==0?(b=g+8|0,c=f[b>>2]|0,c|0):0){Kc(c);f[b>>2]=0}b=g+12|0;c=f[b>>2]|0;if(c|0){Kc(c);f[b>>2]=0}Mc(g);h=0;return h|0}h=oh()|0;b=g+4|0;f[b>>2]=h;if(h|0){f[g+40>>2]=a;h=g;return h|0}$g(f[g>>2]|0);f[g>>2]=0;ph(f[b>>2]|0);f[b>>2]=0;if((f[g+40>>2]|0)==0?(d=g+8|0,e=f[d>>2]|0,e|0):0){Kc(e);f[d>>2]=0}b=g+12|0;c=f[b>>2]|0;if(c|0){Kc(c);f[b>>2]=0}Mc(g);h=0;return h|0}function Pg(a){a=a|0;var b=0,c=0,d=0;if(!a)return;$g(f[a>>2]|0);f[a>>2]=0;d=a+4|0;ph(f[d>>2]|0);f[d>>2]=0;if((f[a+40>>2]|0)==0?(b=a+8|0,c=f[b>>2]|0,c|0):0){Kc(c);f[b>>2]=0}b=a+12|0;c=f[b>>2]|0;if(c|0){Kc(c);f[b>>2]=0}Mc(a);return}function Qg(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,g=0,i=0,k=0,l=0,m=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0;Aa=(f[b+8>>2]|0)-(f[b>>2]|0)|0;Ba=b+20|0;e=f[Ba>>2]|0;if(!e){Ba=1;return Ba|0}sa=b+24|0;ta=c+808|0;ua=c+16|0;va=a+4|0;xa=a+8|0;ya=a+16|0;za=a+20|0;ra=c+20|0;oa=b+32|0;pa=a+12|0;qa=a+32|0;na=0;c=e;a:while(1){la=f[sa>>2]|0;ma=la+(na*136|0)+24|0;b=f[ma>>2]|0;if(b){ia=la+(na*136|0)+16|0;ja=la+(na*136|0)+20|0;ka=na+-1|0;ha=0;e=f[ja>>2]|0;c=f[ia>>2]|0;do{if(X(e,c)|0){ca=la+(na*136|0)+28+(ha*36|0)+20|0;da=la+(na*136|0)+28+(ha*36|0)+16|0;ea=la+(na*136|0)+28+(ha*36|0)|0;fa=la+(na*136|0)+28+(ha*36|0)+4|0;ga=la+(na*136|0)+28+(ha*36|0)+32|0;ba=0;do{b=f[ca>>2]|0;$=b+(ba*40|0)+16|0;aa=b+(ba*40|0)+20|0;if(X(f[aa>>2]|0,f[$>>2]|0)|0){_=b+(ba*40|0)+24|0;Z=0;do{c=f[_>>2]|0;R=f[da>>2]|0;e=f[ta>>2]|0;b=f[ua>>2]|0;S=f[va>>2]|0;T=f[a>>2]|0;U=c+(Z*56|0)+8|0;Y=c+(Z*56|0)+12|0;if(!(Rg(a,(f[c+(Z*56|0)+16>>2]|0)-(f[U>>2]|0)|0,(f[c+(Z*56|0)+20>>2]|0)-(f[Y>>2]|0)|0)|0)){c=0;F=219;break a}V=c+(Z*56|0)+24|0;g=f[V>>2]|0;hh(T);ih(T,18,0,46);ih(T,17,0,3);ih(T,0,0,4);W=c+(Z*56|0)+48|0;if(f[W>>2]|0){M=c+(Z*56|0)+4|0;N=(b&1|0)!=0;O=(b&2|0)==0;P=(b&8|0)==0;Q=R<<8;L=(b&32|0)==0;K=0;b=2;c=g+e|0;do{i=f[M>>2]|0;J=N&(b>>>0<2?(c|0)<=((f[V>>2]|0)+-4|0):0);e=f[i+(K<<5)>>2]|0;b:do if(e){e=(f[e>>2]|0)+(f[i+(K<<5)+4>>2]|0)|0;g=f[i+(K<<5)+16>>2]|0;if(!J){if(!(mh(T,e,g)|0)){c=0;F=219;break a}}else qh(S,e,g);H=i+(K<<5)+12|0;if((c|0)>0&(f[H>>2]|0)!=0){I=O|J;G=0;while(1){c:do switch(b|0){case 0:{if(J){v=1<<c;v=v>>1|v;e=f[za>>2]|0;if(!e)break c;u=0-v|0;t=0;g=f[ya>>2]|0;while(1){s=t;t=t+4|0;if(!g)g=0;else{q=(s|0)==-4;r=s|3;p=0;do{d:do if(!q)if(P){e=s;do{if(e>>>0>=(f[za>>2]|0)>>>0)break d;g=f[pa>>2]|0;l=e;e=e+1|0;i=(X(f[qa>>2]|0,e)|0)+p|0;k=g+(i+1<<1)|0;l=(f[xa>>2]|0)+((X(f[ya>>2]|0,l)|0)+p<<2)|0;m=f[va>>2]|0;F=d[k>>1]|0;if((F&255|0)!=0&(F&20480|0)==0){if(rh(m)|0){E=rh(m)|0;f[l>>2]=E|0?u:v;F=f[qa>>2]|0;D=k+(0-F<<1)|0;F=k+(F<<1)|0;C=D+-2|0;d[C>>1]=d[C>>1]|2;d[D>>1]=d[D>>1]|d[3160+(E<<1)>>1];D=D+2|0;d[D>>1]=d[D>>1]|4;D=g+(i<<1)|0;d[D>>1]=d[D>>1]|d[3160+(E+2<<1)>>1];d[k>>1]=d[k>>1]|4096;D=k+2|0;d[D>>1]=d[D>>1]|d[3160+(E+4<<1)>>1];D=F+-2|0;d[D>>1]=d[D>>1]|1;d[F>>1]=d[F>>1]|d[3160+(E+6<<1)>>1];F=F+2|0;d[F>>1]=d[F>>1]|8}d[k>>1]=d[k>>1]|16384}}while(e>>>0<t>>>0)}else{e=s;do{g=f[za>>2]|0;if(e>>>0>=g>>>0)break d;i=f[pa>>2]|0;E=e;e=e+1|0;k=(X(f[qa>>2]|0,e)|0)+p|0;l=i+(k+1<<1)|0;m=(f[xa>>2]|0)+((X(f[ya>>2]|0,E)|0)+p<<2)|0;o=f[va>>2]|0;F=d[l>>1]|0;F=(E|0)==(r|0)|(E|0)==(g+-1|0)?F&-1095:F;if((F&255|0)!=0&(F&20480|0)==0){if(rh(o)|0){E=rh(o)|0;f[m>>2]=E|0?u:v;F=f[qa>>2]|0;D=l+(0-F<<1)|0;F=l+(F<<1)|0;C=D+-2|0;d[C>>1]=d[C>>1]|2;d[D>>1]=d[D>>1]|d[3160+(E<<1)>>1];D=D+2|0;d[D>>1]=d[D>>1]|4;D=i+(k<<1)|0;d[D>>1]=d[D>>1]|d[3160+(E+2<<1)>>1];d[l>>1]=d[l>>1]|4096;D=l+2|0;d[D>>1]=d[D>>1]|d[3160+(E+4<<1)>>1];D=F+-2|0;d[D>>1]=d[D>>1]|1;d[F>>1]=d[F>>1]|d[3160+(E+6<<1)>>1];F=F+2|0;d[F>>1]=d[F>>1]|8}d[l>>1]=d[l>>1]|16384}}while(e>>>0<t>>>0)}while(0);p=p+1|0;g=f[ya>>2]|0}while(p>>>0<g>>>0);e=f[za>>2]|0}if(t>>>0>=e>>>0){F=187;break c}}}if(!P){w=1<<c;w=w>>1|w;e=f[za>>2]|0;if(!e){F=187;break c}x=0-w|0;g=f[ya>>2]|0;v=0;i=g;while(1){u=v;v=v+4|0;if(!g)g=0;else{s=(u|0)==-4;t=u|3;r=0;while(1){if(s)e=i;else{k=u;do{e=f[za>>2]|0;if(k>>>0>=e>>>0)break;l=f[pa>>2]|0;F=k;k=k+1|0;m=(X(f[qa>>2]|0,k)|0)+r|0;o=l+(m+1<<1)|0;p=(f[xa>>2]|0)+((X(f[ya>>2]|0,F)|0)+r<<2)|0;q=f[a>>2]|0;g=d[o>>1]|0;e=(F|0)==(t|0)|(F|0)==(e+-1|0)?g&-1095:g;g=e&255;if((g|0)!=0&(e&20480|0)==0){i=q+100|0;f[i>>2]=q+24+(h[20356+(g|Q)>>0]<<2);if(nh(q)|0){E=e>>>4&255;f[i>>2]=q+24+(h[21380+E>>0]<<2);F=nh(q)|0;E=F^h[21636+E>>0];f[p>>2]=E|0?x:w;F=f[qa>>2]|0;D=o+(0-F<<1)|0;F=o+(F<<1)|0;C=D+-2|0;d[C>>1]=d[C>>1]|2;d[D>>1]=d[D>>1]|d[3160+(E<<1)>>1];D=D+2|0;d[D>>1]=d[D>>1]|4;D=l+(m<<1)|0;d[D>>1]=d[D>>1]|d[3160+(E+2<<1)>>1];d[o>>1]=d[o>>1]|4096;D=o+2|0;d[D>>1]=d[D>>1]|d[3160+(E+4<<1)>>1];D=F+-2|0;d[D>>1]=d[D>>1]|1;d[F>>1]=d[F>>1]|d[3160+(E+6<<1)>>1];F=F+2|0;d[F>>1]=d[F>>1]|8}d[o>>1]=d[o>>1]|16384}}while(k>>>0<v>>>0);e=f[ya>>2]|0}r=r+1|0;if(r>>>0>=e>>>0)break;else i=e}i=e;g=e;e=f[za>>2]|0}if(v>>>0>=e>>>0){F=187;break c}}}g=f[xa>>2]|0;e=(f[pa>>2]|0)+2|0;v=1<<c;v=v>>1|v;k=f[za>>2]|0;if(k>>>0>3){u=0-v|0;i=f[ya>>2]|0;m=0;l=i;do{if(!i)i=0;else{t=0;i=l;do{q=g+(t<<2)|0;k=f[qa>>2]|0;r=e+(t<<1)+(k<<1)|0;p=f[a>>2]|0;l=d[r>>1]|0;o=l&255;if((o|0)!=0&(l&20480|0)==0){i=p+100|0;f[i>>2]=p+24+(h[20356+(o|Q)>>0]<<2);if(!(nh(p)|0))k=f[qa>>2]|0;else{E=l>>>4&255;f[i>>2]=p+24+(h[21380+E>>0]<<2);k=nh(p)|0;E=k^h[21636+E>>0];f[q>>2]=E|0?u:v;k=f[qa>>2]|0;D=r+(0-k<<1)|0;F=r+(k<<1)|0;C=D+-2|0;d[C>>1]=d[C>>1]|2;d[D>>1]=d[D>>1]|d[3160+(E<<1)>>1];D=D+2|0;d[D>>1]=d[D>>1]|4;D=r+-2|0;d[D>>1]=d[D>>1]|d[3160+(E+2<<1)>>1];d[r>>1]=d[r>>1]|4096;D=r+2|0;d[D>>1]=d[D>>1]|d[3160+(E+4<<1)>>1];D=F+-2|0;d[D>>1]=d[D>>1]|1;d[F>>1]=d[F>>1]|d[3160+(E+6<<1)>>1];F=F+2|0;d[F>>1]=d[F>>1]|8}d[r>>1]=d[r>>1]|16384;i=f[ya>>2]|0;p=f[a>>2]|0}q=q+(i<<2)|0;r=r+(k<<1)|0;l=d[r>>1]|0;o=l&255;if((o|0)!=0&(l&20480|0)==0){i=p+100|0;f[i>>2]=p+24+(h[20356+(o|Q)>>0]<<2);if(!(nh(p)|0))k=f[qa>>2]|0;else{E=l>>>4&255;f[i>>2]=p+24+(h[21380+E>>0]<<2);k=nh(p)|0;E=k^h[21636+E>>0];f[q>>2]=E|0?u:v;k=f[qa>>2]|0;D=r+(0-k<<1)|0;F=r+(k<<1)|0;C=D+-2|0;d[C>>1]=d[C>>1]|2;d[D>>1]=d[D>>1]|d[3160+(E<<1)>>1];D=D+2|0;d[D>>1]=d[D>>1]|4;D=r+-2|0;d[D>>1]=d[D>>1]|d[3160+(E+2<<1)>>1];d[r>>1]=d[r>>1]|4096;D=r+2|0;d[D>>1]=d[D>>1]|d[3160+(E+4<<1)>>1];D=F+-2|0;d[D>>1]=d[D>>1]|1;d[F>>1]=d[F>>1]|d[3160+(E+6<<1)>>1];F=F+2|0;d[F>>1]=d[F>>1]|8}d[r>>1]=d[r>>1]|16384;i=f[ya>>2]|0;p=f[a>>2]|0}s=q+(i<<2)|0;r=r+(k<<1)|0;l=d[r>>1]|0;o=l&255;if((o|0)!=0&(l&20480|0)==0){i=p+100|0;f[i>>2]=p+24+(h[20356+(o|Q)>>0]<<2);if(!(nh(p)|0))k=f[qa>>2]|0;else{E=l>>>4&255;f[i>>2]=p+24+(h[21380+E>>0]<<2);k=nh(p)|0;E=k^h[21636+E>>0];f[s>>2]=E|0?u:v;k=f[qa>>2]|0;D=r+(0-k<<1)|0;F=r+(k<<1)|0;C=D+-2|0;d[C>>1]=d[C>>1]|2;d[D>>1]=d[D>>1]|d[3160+(E<<1)>>1];D=D+2|0;d[D>>1]=d[D>>1]|4;D=r+-2|0;d[D>>1]=d[D>>1]|d[3160+(E+2<<1)>>1];d[r>>1]=d[r>>1]|4096;D=r+2|0;d[D>>1]=d[D>>1]|d[3160+(E+4<<1)>>1];D=F+-2|0;d[D>>1]=d[D>>1]|1;d[F>>1]=d[F>>1]|d[3160+(E+6<<1)>>1];F=F+2|0;d[F>>1]=d[F>>1]|8}d[r>>1]=d[r>>1]|16384;i=f[ya>>2]|0;q=f[a>>2]|0}else q=p;p=s+(i<<2)|0;k=r+(k<<1)|0;l=d[k>>1]|0;o=l&255;if((o|0)!=0&(l&20480|0)==0){i=q+100|0;f[i>>2]=q+24+(h[20356+(o|Q)>>0]<<2);if(nh(q)|0){E=l>>>4&255;f[i>>2]=q+24+(h[21380+E>>0]<<2);F=nh(q)|0;E=F^h[21636+E>>0];f[p>>2]=E|0?u:v;F=f[qa>>2]|0;D=k+(0-F<<1)|0;F=k+(F<<1)|0;C=D+-2|0;d[C>>1]=d[C>>1]|2;d[D>>1]=d[D>>1]|d[3160+(E<<1)>>1];D=D+2|0;d[D>>1]=d[D>>1]|4;D=k+-2|0;d[D>>1]=d[D>>1]|d[3160+(E+2<<1)>>1];d[k>>1]=d[k>>1]|4096;D=k+2|0;d[D>>1]=d[D>>1]|d[3160+(E+4<<1)>>1];D=F+-2|0;d[D>>1]=d[D>>1]|1;d[F>>1]=d[F>>1]|d[3160+(E+6<<1)>>1];F=F+2|0;d[F>>1]=d[F>>1]|8}d[k>>1]=d[k>>1]|16384;i=f[ya>>2]|0}t=t+1|0}while(t>>>0<i>>>0);l=i;k=f[za>>2]|0}g=g+(i<<2<<2)|0;e=e+(f[qa>>2]<<2<<1)|0;m=m+4|0}while(m>>>0<(k&-4)>>>0);i=l}else{m=0;i=f[ya>>2]|0}if(!i){F=187;break c}u=0-v|0;t=0;do{if(m>>>0<k>>>0){q=m;r=e+(t<<1)|0;s=g+(t<<2)|0;while(1){r=r+(f[qa>>2]<<1)|0;l=f[a>>2]|0;o=d[r>>1]|0;p=o&255;if((p|0)!=0&(o&20480|0)==0){i=l+100|0;f[i>>2]=l+24+(h[20356+(p|Q)>>0]<<2);if(nh(l)|0){E=o>>>4&255;f[i>>2]=l+24+(h[21380+E>>0]<<2);F=nh(l)|0;E=F^h[21636+E>>0];f[s>>2]=E|0?u:v;F=f[qa>>2]|0;D=r+(0-F<<1)|0;F=r+(F<<1)|0;C=D+-2|0;d[C>>1]=d[C>>1]|2;d[D>>1]=d[D>>1]|d[3160+(E<<1)>>1];D=D+2|0;d[D>>1]=d[D>>1]|4;D=r+-2|0;d[D>>1]=d[D>>1]|d[3160+(E+2<<1)>>1];d[r>>1]=d[r>>1]|4096;D=r+2|0;d[D>>1]=d[D>>1]|d[3160+(E+4<<1)>>1];D=F+-2|0;d[D>>1]=d[D>>1]|1;d[F>>1]=d[F>>1]|d[3160+(E+6<<1)>>1];F=F+2|0;d[F>>1]=d[F>>1]|8}d[r>>1]=d[r>>1]|16384;i=f[ya>>2]|0;k=f[za>>2]|0}q=q+1|0;if(q>>>0>=k>>>0)break;else s=s+(i<<2)|0}}t=t+1|0}while(t>>>0<i>>>0);F=187;break}case 1:{if(J){p=1<<c>>1;q=0-p|0;e=f[za>>2]|0;if(!e)break c;g=f[ya>>2]|0;o=0;i=g;while(1){m=o;o=o+4|0;do if(!g){k=i;g=0}else{if((m|0)==-4){k=i;g=i;break}else l=0;do{g=l;l=l+1|0;e=m;do{if(e>>>0>=(f[za>>2]|0)>>>0)break;k=e;e=e+1|0;i=(f[pa>>2]|0)+((X(f[qa>>2]|0,e)|0)+l<<1)|0;k=(f[xa>>2]|0)+((X(f[ya>>2]|0,k)|0)+g<<2)|0;if((d[i>>1]&20480)==4096){E=(rh(f[va>>2]|0)|0)!=0;E=E?p:q;F=f[k>>2]|0;f[k>>2]=((F|0)<0?0-E|0:E)+F;d[i>>1]=d[i>>1]|8192}}while(e>>>0<o>>>0);e=f[ya>>2]|0}while(l>>>0<e>>>0);k=e;g=e;e=f[za>>2]|0}while(0);if(o>>>0>=e>>>0){F=187;break c}else i=k}}if(!P){s=1<<c>>1;t=0-s|0;e=f[za>>2]|0;if(!e){F=187;break c}g=f[ya>>2]|0;r=0;k=g;while(1){q=r;r=r+4|0;do if(!g){i=k;g=0}else{p=q|3;if((q|0)==-4){i=k;g=k;break}else o=0;do{i=o;o=o+1|0;g=q;do{e=f[za>>2]|0;if(g>>>0>=e>>>0)break;E=g;g=g+1|0;l=(f[pa>>2]|0)+((X(f[qa>>2]|0,g)|0)+o<<1)|0;m=(f[xa>>2]|0)+((X(f[ya>>2]|0,E)|0)+i<<2)|0;k=f[a>>2]|0;F=d[l>>1]|0;e=(E|0)==(p|0)|(E|0)==(e+-1|0)?F&-1095:F;if((e&20480|0)==4096){f[k+100>>2]=k+24+((e&8192|0?16:e&255|0?15:14)<<2);E=(nh(k)|0)!=0;E=E?s:t;F=f[m>>2]|0;f[m>>2]=((F|0)<0?0-E|0:E)+F;d[l>>1]=d[l>>1]|8192}}while(g>>>0<r>>>0);e=f[ya>>2]|0}while(o>>>0<e>>>0);i=e;g=e;e=f[za>>2]|0}while(0);if(r>>>0>=e>>>0){F=187;break c}else k=i}}g=f[xa>>2]|0;e=(f[pa>>2]|0)+2|0;t=1<<c>>1;u=0-t|0;k=f[za>>2]|0;i=f[ya>>2]|0;if(k>>>0>3){m=0;l=i;do{if(!i)i=0;else{s=0;i=l;do{p=g+(s<<2)|0;o=f[qa>>2]|0;q=e+(s<<1)+(o<<1)|0;k=f[a>>2]|0;l=d[q>>1]|0;if((l&20480|0)==4096){f[k+100>>2]=k+24+((l&8192|0?16:l&255|0?15:14)<<2);i=(nh(k)|0)!=0;i=i?t:u;k=f[p>>2]|0;f[p>>2]=((k|0)<0?0-i|0:i)+k;d[q>>1]=d[q>>1]|8192;k=f[a>>2]|0;i=f[ya>>2]|0;o=f[qa>>2]|0}p=p+(i<<2)|0;q=q+(o<<1)|0;l=d[q>>1]|0;if((l&20480|0)==4096){f[k+100>>2]=k+24+((l&8192|0?16:l&255|0?15:14)<<2);i=(nh(k)|0)!=0;i=i?t:u;k=f[p>>2]|0;f[p>>2]=((k|0)<0?0-i|0:i)+k;d[q>>1]=d[q>>1]|8192;k=f[a>>2]|0;i=f[ya>>2]|0;o=f[qa>>2]|0}r=p+(i<<2)|0;q=q+(o<<1)|0;l=d[q>>1]|0;if((l&20480|0)==4096){f[k+100>>2]=k+24+((l&8192|0?16:l&255|0?15:14)<<2);i=(nh(k)|0)!=0;i=i?t:u;p=f[r>>2]|0;f[r>>2]=((p|0)<0?0-i|0:i)+p;d[q>>1]=d[q>>1]|8192;p=f[a>>2]|0;i=f[ya>>2]|0;k=f[qa>>2]|0}else{p=k;k=o}o=r+(i<<2)|0;k=q+(k<<1)|0;l=d[k>>1]|0;if((l&20480|0)==4096){f[p+100>>2]=p+24+((l&8192|0?16:l&255|0?15:14)<<2);F=(nh(p)|0)!=0;F=F?t:u;i=f[o>>2]|0;f[o>>2]=((i|0)<0?0-F|0:F)+i;d[k>>1]=d[k>>1]|8192;i=f[ya>>2]|0}s=s+1|0}while(s>>>0<i>>>0);l=i;k=f[za>>2]|0}g=g+(i<<2<<2)|0;e=e+(f[qa>>2]<<2<<1)|0;m=m+4|0}while(m>>>0<(k&-4)>>>0);i=l}else m=0;if(!i){F=187;break c}else s=0;do{if(m>>>0<k>>>0){p=m;q=e+(s<<1)|0;r=g+(s<<2)|0;while(1){q=q+(f[qa>>2]<<1)|0;l=f[a>>2]|0;o=d[q>>1]|0;if((o&20480|0)==4096){f[l+100>>2]=l+24+((o&8192|0?16:o&255|0?15:14)<<2);k=(nh(l)|0)!=0;k=k?t:u;i=f[r>>2]|0;f[r>>2]=((i|0)<0?0-k|0:k)+i;d[q>>1]=d[q>>1]|8192;i=f[ya>>2]|0;k=f[za>>2]|0}p=p+1|0;if(p>>>0>=k>>>0)break;else r=r+(i<<2)|0}}s=s+1|0}while(s>>>0<i>>>0);F=187;break}case 2:{D=f[a>>2]|0;E=1<<c;E=E>>1|E;do if(P){i=f[xa>>2]|0;g=(f[pa>>2]|0)+2|0;e=f[za>>2]|0;if(e>>>0>3){u=D+92|0;v=D+100|0;w=D+96|0;x=0-E|0;F=f[ya>>2]|0;k=g;m=0;l=F;g=F;while(1){if(!l)l=0;else{q=m|1;r=q+1|0;s=m|3;t=q+3|0;p=0;do{g=i+(p<<2)|0;l=k+(p<<1)|0;F=f[pa>>2]|0;e=f[qa>>2]|0;p=p+1|0;B=F+((X(e,q)|0)+p<<1)|0;A=F+((X(e,r)|0)+p<<1)|0;C=F+((X(e,s)|0)+p<<1)|0;F=F+((X(e,t)|0)+p<<1)|0;e:do if(!((d[A>>1]|d[B>>1]|d[C>>1]|d[F>>1])&20735)){f[v>>2]=u;if(!(nh(D)|0))break;f[v>>2]=w;o=(nh(D)|0)<<1;o=o|(nh(D)|0);if(o>>>0>=4)break;g=g+((X(f[ya>>2]|0,o)|0)<<2)|0;e=l+((X(f[qa>>2]|0,o)|0)<<1)|0;l=o;while(1){if(l>>>0>=(f[za>>2]|0)>>>0)break e;e=e+(f[qa>>2]<<1)|0;if((l|0)==(o|0)){F=f[a>>2]|0;C=(j[e>>1]|0)>>>4&255;f[F+100>>2]=F+24+(h[21380+C>>0]<<2);F=nh(F)|0;C=F^h[21636+C>>0];f[g>>2]=C|0?x:E;F=f[qa>>2]|0;B=e+(0-F<<1)|0;F=e+(F<<1)|0;A=B+-2|0;d[A>>1]=d[A>>1]|2;d[B>>1]=d[B>>1]|d[3160+(C<<1)>>1];B=B+2|0;d[B>>1]=d[B>>1]|4;B=e+-2|0;d[B>>1]=d[B>>1]|d[3160+(C+2<<1)>>1];d[e>>1]=d[e>>1]|4096;B=e+2|0;d[B>>1]=d[B>>1]|d[3160+(C+4<<1)>>1];B=F+-2|0;d[B>>1]=d[B>>1]|1;d[F>>1]=d[F>>1]|d[3160+(C+6<<1)>>1];F=F+2|0;d[F>>1]=d[F>>1]|8;d[e>>1]=d[e>>1]&-16385}else Sg(a,e,g,R,E);l=l+1|0;if(l>>>0>=4)break;else g=g+(f[ya>>2]<<2)|0}}else{C=l+(e<<1)|0;Sg(a,C,g,R,E);F=g+(f[ya>>2]<<2)|0;C=C+(f[qa>>2]<<1)|0;Sg(a,C,F,R,E);F=F+(f[ya>>2]<<2)|0;C=C+(f[qa>>2]<<1)|0;Sg(a,C,F,R,E);Sg(a,C+(f[qa>>2]<<1)|0,F+(f[ya>>2]<<2)|0,R,E)}while(0);g=f[ya>>2]|0}while(p>>>0<g>>>0);l=g;e=f[za>>2]|0}i=i+(l<<2<<2)|0;k=k+(f[qa>>2]<<2<<1)|0;m=m+4|0;if(m>>>0>=(e&-4)>>>0){q=k;p=i;break}}}else{q=g;p=i;m=0;g=f[ya>>2]|0}if(!g)break;else o=0;do{if(m>>>0<e>>>0){i=q+(o<<1)|0;k=p+(o<<2)|0;l=m;while(1){i=i+(f[qa>>2]<<1)|0;Sg(a,i,k,R,E);g=f[ya>>2]|0;l=l+1|0;e=f[za>>2]|0;if(l>>>0>=e>>>0)break;else k=k+(g<<2)|0}}o=o+1|0}while(o>>>0<g>>>0)}else{e=f[za>>2]|0;if(!e)break;z=D+92|0;A=D+100|0;B=D+96|0;C=0-E|0;i=0;g=f[ya>>2]|0;do if(!g){i=i+4|0;g=0}else{u=i|3;v=i|1;w=v+1|0;x=v+3|0;y=i+4|0;t=0;while(1){do if(u>>>0<e>>>0){e=f[pa>>2]|0;g=f[qa>>2]|0;k=t+1|0;s=e+((X(g,v)|0)+k<<1)|0;if(d[s>>1]&20735){e=0;s=0;F=152;break}s=e+((X(g,w)|0)+k<<1)|0;if(d[s>>1]&20735){e=0;s=0;F=152;break}s=e+((X(g,u)|0)+k<<1)|0;if(d[s>>1]&20735){e=0;s=0;F=152;break}s=e+((X(g,x)|0)+k<<1)|0;if(d[s>>1]&20665){e=0;s=0;F=152;break}f[A>>2]=z;if(!(nh(D)|0))break;f[A>>2]=B;e=(nh(D)|0)<<1;e=e|(nh(D)|0);s=1;F=152}else{e=0;s=0;F=152}while(0);f:do if((F|0)==152){F=0;l=e+i|0;if(l>>>0<y>>>0)k=l;else break;do{e=f[za>>2]|0;if(k>>>0>=e>>>0)break f;m=f[pa>>2]|0;Ca=k;k=k+1|0;o=(X(f[qa>>2]|0,k)|0)+t|0;p=m+(o+1<<1)|0;q=(f[xa>>2]|0)+((X(f[ya>>2]|0,Ca)|0)+t<<2)|0;r=f[a>>2]|0;g=d[p>>1]|0;g=(Ca|0)==(u|0)|(Ca|0)==(e+-1|0)?g&-1095:g;do if(!(s&(Ca|0)==(l|0))){if(g&20480|0)break;e=r+100|0;f[e>>2]=r+24+(h[20356+(g&255|Q)>>0]<<2);if(nh(r)|0)F=158}else{e=r+100|0;F=158}while(0);if((F|0)==158){F=0;Ca=g>>>4&255;f[e>>2]=r+24+(h[21380+Ca>>0]<<2);r=nh(r)|0;r=r^h[21636+Ca>>0];f[q>>2]=r|0?C:E;Ca=f[qa>>2]|0;q=p+(0-Ca<<1)|0;Ca=p+(Ca<<1)|0;g=q+-2|0;d[g>>1]=d[g>>1]|2;d[q>>1]=d[q>>1]|d[3160+(r<<1)>>1];q=q+2|0;d[q>>1]=d[q>>1]|4;q=m+(o<<1)|0;d[q>>1]=d[q>>1]|d[3160+(r+2<<1)>>1];d[p>>1]=d[p>>1]|4096;q=p+2|0;d[q>>1]=d[q>>1]|d[3160+(r+4<<1)>>1];q=Ca+-2|0;d[q>>1]=d[q>>1]|1;d[Ca>>1]=d[Ca>>1]|d[3160+(r+6<<1)>>1];Ca=Ca+2|0;d[Ca>>1]=d[Ca>>1]|8}d[p>>1]=d[p>>1]&-16385}while(k>>>0<y>>>0)}while(0);t=t+1|0;g=f[ya>>2]|0;e=f[za>>2]|0;if(t>>>0>=g>>>0){i=y;break}}}while(i>>>0<e>>>0)}while(0);if(L){F=187;break c}f[D+100>>2]=D+96;nh(D)|0;nh(D)|0;nh(D)|0;nh(D)|0;F=187;break}default:F=187}while(0);do if((F|0)==187){F=0;if(I)break;hh(T);ih(T,18,0,46);ih(T,17,0,3);ih(T,0,0,4)}while(0);b=b+1|0;Ca=(b|0)==3;c=c+(Ca<<31>>31)|0;b=Ca?0:b;G=G+1|0;if(!((c|0)>0?G>>>0<(f[H>>2]|0)>>>0:0))break b}}}while(0);K=K+1|0}while(K>>>0<(f[W>>2]|0)>>>0)}c=(f[U>>2]|0)-(f[ea>>2]|0)|0;b=(f[Y>>2]|0)-(f[fa>>2]|0)|0;e=f[da>>2]|0;if(e&1){Ca=f[sa>>2]|0;c=(f[Ca+(ka*136|0)+8>>2]|0)+c-(f[Ca+(ka*136|0)>>2]|0)|0}if(e&2){Ca=f[sa>>2]|0;b=(f[Ca+(ka*136|0)+12>>2]|0)+b-(f[Ca+(ka*136|0)+4>>2]|0)|0}o=f[xa>>2]|0;p=f[ya>>2]|0;q=f[za>>2]|0;e=f[ta>>2]|0;if(e|0?(wa=1<<e,!((q|0)==0|(p|0)==0)):0){e=0;do{i=X(e,p)|0;g=0;do{k=o+(g+i<<2)|0;l=f[k>>2]|0;m=(l|0)>-1?l:0-l|0;if((m|0)>=(wa|0)){Ca=m>>f[ta>>2];f[k>>2]=(l|0)<0?0-Ca|0:Ca}g=g+1|0}while((g|0)!=(p|0));e=e+1|0}while((e|0)!=(q|0))}k=(f[oa>>2]|0)+((X(b,Aa)|0)+c<<2)|0;c=(q|0)==0|(p|0)==0;if((f[ra>>2]|0)==1){if(!c){c=0;do{e=X(c,p)|0;g=X(c,Aa)|0;b=0;do{f[k+(b+g<<2)>>2]=(f[o+(b+e<<2)>>2]|0)/2|0;b=b+1|0}while((b|0)!=(p|0));c=c+1|0}while((c|0)!=(q|0))}}else if(!c){b=o;g=0;while(1){c=k;e=b;i=0;while(1){n[c>>2]=+n[ga>>2]*+(f[e>>2]|0);i=i+1|0;if((i|0)==(p|0))break;else{c=c+4|0;e=e+4|0}}g=g+1|0;if((g|0)==(q|0))break;else{k=k+(Aa<<2)|0;b=b+(p<<2)|0}}}Z=Z+1|0}while(Z>>>0<(X(f[aa>>2]|0,f[$>>2]|0)|0)>>>0);e=f[ja>>2]|0;c=f[ia>>2]|0}ba=ba+1|0}while(ba>>>0<(X(e,c)|0)>>>0);b=f[ma>>2]|0}ha=ha+1|0}while(ha>>>0<b>>>0);c=f[Ba>>2]|0}na=na+1|0;if(na>>>0>=c>>>0){c=1;F=219;break}}if((F|0)==219)return c|0;return 0}function Rg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0;h=X(c,b)|0;if(!(f[a+40>>2]|0)){e=a+24|0;d=a+8|0;do if(h>>>0>(f[e>>2]|0)>>>0){Kc(f[d>>2]|0);g=Jc(h<<2)|0;f[d>>2]=g;if(!g){c=0;return c|0}else{f[e>>2]=h;e=g;d=g;break}}else{d=f[d>>2]|0;e=d}while(0);if(e|0)ij(d|0,0,h<<2|0)|0}g=b+2|0;f[a+32>>2]=g;g=X(c+2|0,g)|0;h=a+28|0;i=a+12|0;d=f[i>>2]|0;do if(g>>>0>(f[h>>2]|0)>>>0){Kc(d);e=g<<1;d=Jc(e)|0;f[i>>2]=d;if(!d){c=0;return c|0}else{f[h>>2]=g;break}}else e=g<<1;while(0);ij(d|0,0,e|0)|0;f[a+16>>2]=b;f[a+20>>2]=c;c=1;return c|0}function Sg(a,b,c,e,g){a=a|0;b=b|0;c=c|0;e=e|0;g=g|0;var i=0,j=0,k=0;j=f[a>>2]|0;k=d[b>>1]|0;if(k&20480|0){k=d[b>>1]|0;k=k&-16385;d[b>>1]=k;return}i=j+100|0;f[i>>2]=j+24+(h[20356+(k&255|e<<8)>>0]<<2);if(!(nh(j)|0)){k=d[b>>1]|0;k=k&-16385;d[b>>1]=k;return}k=k>>>4&255;f[i>>2]=j+24+(h[21380+k>>0]<<2);j=nh(j)|0;j=j^h[21636+k>>0];f[c>>2]=j|0?0-g|0:g;k=f[a+32>>2]|0;g=b+(0-k<<1)|0;k=b+(k<<1)|0;e=g+-2|0;d[e>>1]=d[e>>1]|2;d[g>>1]=d[g>>1]|d[3160+(j<<1)>>1];g=g+2|0;d[g>>1]=d[g>>1]|4;g=b+-2|0;d[g>>1]=d[g>>1]|d[3160+(j+2<<1)>>1];d[b>>1]=d[b>>1]|4096;g=b+2|0;d[g>>1]=d[g>>1]|d[3160+(j+4<<1)>>1];g=k+-2|0;d[g>>1]=d[g>>1]|1;d[k>>1]=d[k>>1]|d[3160+(j+6<<1)>>1];k=k+2|0;d[k>>1]=d[k>>1]|8;k=d[b>>1]|0;k=k&-16385;d[b>>1]=k;return}function Tg(a,c,e,g,i){a=a|0;c=c|0;e=e|0;g=g|0;i=i|0;var j=0,k=0,l=0,m=0,o=0,q=0.0,r=0.0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0.0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0.0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0;Za=c+32|0;p[Za>>3]=0.0;_a=c+16|0;j=f[_a>>2]|0;if(!j){_a=1;return _a|0}Ya=c+20|0;Qa=e+5584|0;Ra=a+16|0;Sa=a+20|0;Ta=a+8|0;Ua=a+36|0;Va=(g|0)!=0;Wa=a+12|0;Xa=a+32|0;Pa=0;c=j;a:while(1){e=f[Ya>>2]|0;j=f[Qa>>2]|0;Na=(f[e+(Pa*52|0)+8>>2]|0)-(f[e+(Pa*52|0)>>2]|0)|0;Oa=e+(Pa*52|0)+16|0;k=f[Oa>>2]|0;if(k){Ma=e+(Pa*52|0)+24|0;Ka=e+(Pa*52|0)+32|0;La=j+(Pa*1080|0)+20|0;Ha=j+(Pa*1080|0)+16|0;Ja=Va&Pa>>>0<i>>>0;Ia=g+(Pa<<3)|0;Ga=0;c=k;do{Da=f[Ma>>2]|0;Ea=Da+(Ga*136|0)+24|0;e=f[Ea>>2]|0;if(e){za=Da+(Ga*136|0)+16|0;Aa=Da+(Ga*136|0)+20|0;Ba=~Ga;Ca=Ga+-1|0;ya=0;j=f[Aa>>2]|0;c=f[za>>2]|0;do{xa=Da+(Ga*136|0)+28+(ya*36|0)+32|0;if(X(j,c)|0){ra=67108864/(~~+J(+(+n[xa>>2]*8192.0))|0)|0;sa=Da+(Ga*136|0)+28+(ya*36|0)+20|0;ta=Da+(Ga*136|0)+28+(ya*36|0)|0;ua=Da+(Ga*136|0)+28+(ya*36|0)+4|0;va=Da+(Ga*136|0)+28+(ya*36|0)+16|0;wa=((ra|0)<0)<<31>>31;qa=0;do{e=f[sa>>2]|0;oa=e+(qa*40|0)+16|0;pa=e+(qa*40|0)+20|0;if(X(f[pa>>2]|0,f[oa>>2]|0)|0){na=e+(qa*40|0)+24|0;ma=0;do{la=f[na>>2]|0;k=f[la+(ma*52|0)+12>>2]|0;c=k-(f[ta>>2]|0)|0;l=f[la+(ma*52|0)+16>>2]|0;e=l-(f[ua>>2]|0)|0;j=f[va>>2]|0;if(j&1){ka=f[Ma>>2]|0;c=(f[ka+(Ca*136|0)+8>>2]|0)+c-(f[ka+(Ca*136|0)>>2]|0)|0}if(j&2){ka=f[Ma>>2]|0;e=(f[ka+(Ca*136|0)+12>>2]|0)+e-(f[ka+(Ca*136|0)+4>>2]|0)|0}if(!(Rg(a,(f[la+(ma*52|0)+20>>2]|0)-k|0,(f[la+(ma*52|0)+24>>2]|0)-l|0)|0)){c=0;Fa=163;break a}l=f[Ra>>2]|0;m=f[Sa>>2]|0;s=(f[Ka>>2]|0)+((X(e,Na)|0)+c<<2)|0;f[Ta>>2]=s;f[Ua>>2]=Na;c=f[La>>2]|0;e=(m|0)!=0;do if((c|0)==1)if(e){if(!l){Fa=27;break}else{c=0;e=0}while(1){j=0;k=c;while(1){Fa=s+(k<<2)|0;f[Fa>>2]=f[Fa>>2]<<6;j=j+1|0;if((j|0)==(l|0))break;else k=k+1|0}e=e+1|0;if((e|0)==(m|0)){Fa=27;break}else c=Na+c|0}}else c=1;else if(e){if(!l){Fa=27;break}else{c=0;j=0}while(1){e=0;k=j;while(1){Fa=s+(k<<2)|0;ka=f[Fa>>2]|0;ka=Yi(ka|0,((ka|0)<0)<<31>>31|0,ra|0,wa|0)|0;ka=Zi(ka|0,I|0,4096,0)|0;ka=ej(ka|0,I|0,18)|0;f[Fa>>2]=ka;e=e+1|0;if((e|0)==(l|0))break;else k=k+1|0}c=c+1|0;if((c|0)==(m|0)){Fa=27;break}else j=Na+j|0}}while(0);if((Fa|0)==27){Fa=0;c=f[La>>2]|0}ga=f[va>>2]|0;ha=(f[Oa>>2]|0)+Ba|0;ia=+n[xa>>2];ja=f[Ha>>2]|0;ka=f[a>>2]|0;m=f[Ra>>2]|0;do if(!m)e=0;else{o=f[Sa>>2]|0;if(!o){e=0;break}l=f[Ua>>2]|0;k=0;j=0;do{e=0;do{fa=s+((X(e,l)|0)+k<<2)|0;fa=f[fa>>2]|0;fa=(fa|0)>-1?fa:0-fa|0;j=(j|0)>(fa|0)?j:fa;e=e+1|0}while((e|0)!=(o|0));k=k+1|0}while((k|0)!=(m|0));if(!j){e=0;break}if((j|0)>1){e=0;while(1){e=e+1|0;if(j>>>0>3)j=j>>>1;else break}}else e=0;e=e+-5|0}while(0);ea=la+(ma*52|0)+28|0;f[ea>>2]=e;e=e+-1|0;hh(ka);ih(ka,18,0,46);ih(ka,17,0,3);ih(ka,0,0,4);fa=la+(ma*52|0)|0;bh(ka,f[fa>>2]|0);b:do if((e|0)>-1){ca=la+(ma*52|0)+8|0;U=ja&1;da=(U|0)!=0;V=(c|0)==1;W=(ja&4|0)==0;U=(U|0)==0;Y=(ja&2|0)==0;$=ja&8;Z=($|0)!=0;_=ga<<8;$=($|0)==0;aa=(ja&32|0)==0;ba=$^1;c=0;S=2;j=0;T=0.0;while(1){R=f[ca>>2]|0;G=da&(S>>>0<2?(e|0)<((f[ea>>2]|0)+-4|0):0);c:do switch(S|0){case 0:{E=1<<e+6;k=f[Sa>>2]|0;if(!k){j=0;break c}F=(e|0)==0?3176:3432;m=f[Ra>>2]|0;D=0;j=0;l=m;do{C=D;D=D+4|0;if(!l)l=0;else{A=(C|0)==-4;B=C|3;z=0;while(1){if(A)l=m;else{y=C;do{k=f[Sa>>2]|0;if(y>>>0>=k>>>0)break;u=f[Wa>>2]|0;Q=y;y=y+1|0;v=(X(f[Xa>>2]|0,y)|0)+z|0;x=u+(v+1<<1)|0;o=(f[Ta>>2]|0)+((X(f[Ua>>2]|0,Q)|0)+z<<2)|0;w=f[a>>2]|0;s=d[x>>1]|0;s=Z&((Q|0)==(B|0)|(Q|0)==(k+-1|0))?s&-1095:s;k=s&255;if((k|0)!=0&(s&20480|0)==0){l=f[o>>2]|0;l=(((l|0)<0?0-l|0:l)&E|0)!=0;m=l&1;t=w+100|0;f[t>>2]=w+24+(h[20356+(k|_)>>0]<<2);if(G)fh(w,m);else ch(w,m);if(l){k=f[o>>2]|0;l=k>>>31;j=j+(d[F+((((k|0)<0?0-k|0:k)>>>e&127)<<1)>>1]|0)|0;k=s>>>4&255;f[t>>2]=w+24+(h[21380+k>>0]<<2);if(G)fh(w,l);else ch(w,l^h[21636+k>>0]);Q=f[Xa>>2]|0;P=x+(0-Q<<1)|0;Q=x+(Q<<1)|0;O=P+-2|0;d[O>>1]=d[O>>1]|2;d[P>>1]=d[P>>1]|d[3160+(l<<1)>>1];P=P+2|0;d[P>>1]=d[P>>1]|4;P=u+(v<<1)|0;d[P>>1]=d[P>>1]|d[3160+((l|2)<<1)>>1];d[x>>1]=d[x>>1]|4096;P=x+2|0;d[P>>1]=d[P>>1]|d[3160+((l|4)<<1)>>1];P=Q+-2|0;d[P>>1]=d[P>>1]|1;d[Q>>1]=d[Q>>1]|d[3160+((l|6)<<1)>>1];Q=Q+2|0;d[Q>>1]=d[Q>>1]|8}d[x>>1]=d[x>>1]|16384}}while(y>>>0<D>>>0);l=f[Ra>>2]|0}z=z+1|0;if(z>>>0>=l>>>0)break;else m=l}k=f[Sa>>2]|0;m=l}}while(D>>>0<k>>>0);break}case 1:{z=1<<e+6;k=f[Sa>>2]|0;if(!k){j=0;break c}A=(e|0)==0?3688:3944;y=0;j=0;l=f[Ra>>2]|0;do{x=y;y=y+4|0;if(!l)l=0;else{v=(x|0)==-4;w=x|3;u=0;do{t=u;u=u+1|0;d:do if(!v)if($)if(G){s=x;do{if(s>>>0>=(f[Sa>>2]|0)>>>0)break d;k=s;s=s+1|0;m=(f[Wa>>2]|0)+((X(f[Xa>>2]|0,s)|0)+u<<1)|0;l=f[a>>2]|0;o=d[m>>1]|0;if((o&20480|0)==4096){Q=(f[Ta>>2]|0)+((X(f[Ua>>2]|0,k)|0)+t<<2)|0;Q=f[Q>>2]|0;Q=(Q|0)<0?0-Q|0:Q;j=j+(d[A+((Q>>>e&127)<<1)>>1]|0)|0;f[l+100>>2]=l+24+((o&8192|0?16:o&255|0?15:14)<<2);fh(l,(Q&z|0)!=0&1);d[m>>1]=d[m>>1]|8192}}while(s>>>0<y>>>0)}else{s=x;do{if(s>>>0>=(f[Sa>>2]|0)>>>0)break d;k=s;s=s+1|0;m=(f[Wa>>2]|0)+((X(f[Xa>>2]|0,s)|0)+u<<1)|0;l=f[a>>2]|0;o=d[m>>1]|0;if((o&20480|0)==4096){Q=(f[Ta>>2]|0)+((X(f[Ua>>2]|0,k)|0)+t<<2)|0;Q=f[Q>>2]|0;Q=(Q|0)<0?0-Q|0:Q;j=j+(d[A+((Q>>>e&127)<<1)>>1]|0)|0;f[l+100>>2]=l+24+((o&8192|0?16:o&255|0?15:14)<<2);ch(l,(Q&z|0)!=0&1);d[m>>1]=d[m>>1]|8192}}while(s>>>0<y>>>0)}else if(G){s=x;do{k=f[Sa>>2]|0;if(s>>>0>=k>>>0)break d;l=s;s=s+1|0;o=(f[Wa>>2]|0)+((X(f[Xa>>2]|0,s)|0)+u<<1)|0;m=f[a>>2]|0;Q=d[o>>1]|0;k=(l|0)==(w|0)|(l|0)==(k+-1|0)?Q&-1095:Q;if((k&20480|0)==4096){Q=(f[Ta>>2]|0)+((X(f[Ua>>2]|0,l)|0)+t<<2)|0;Q=f[Q>>2]|0;Q=(Q|0)<0?0-Q|0:Q;j=j+(d[A+((Q>>>e&127)<<1)>>1]|0)|0;f[m+100>>2]=m+24+((k&8192|0?16:k&255|0?15:14)<<2);fh(m,(Q&z|0)!=0&1);d[o>>1]=d[o>>1]|8192}}while(s>>>0<y>>>0)}else{s=x;do{k=f[Sa>>2]|0;if(s>>>0>=k>>>0)break d;l=s;s=s+1|0;o=(f[Wa>>2]|0)+((X(f[Xa>>2]|0,s)|0)+u<<1)|0;m=f[a>>2]|0;Q=d[o>>1]|0;k=(l|0)==(w|0)|(l|0)==(k+-1|0)?Q&-1095:Q;if((k&20480|0)==4096){Q=(f[Ta>>2]|0)+((X(f[Ua>>2]|0,l)|0)+t<<2)|0;Q=f[Q>>2]|0;Q=(Q|0)<0?0-Q|0:Q;j=j+(d[A+((Q>>>e&127)<<1)>>1]|0)|0;f[m+100>>2]=m+24+((k&8192|0?16:k&255|0?15:14)<<2);ch(m,(Q&z|0)!=0&1);d[o>>1]=d[o>>1]|8192}}while(s>>>0<y>>>0)}while(0);l=f[Ra>>2]|0}while(u>>>0<l>>>0);k=f[Sa>>2]|0}}while(y>>>0<k>>>0);break}case 2:{L=f[a>>2]|0;M=1<<e+6;k=f[Sa>>2]|0;if(!k)j=0;else{N=L+92|0;O=L+100|0;P=L+96|0;Q=(e|0)==0?3176:3432;m=0;j=0;l=f[Ra>>2]|0;do if(!l){m=m+4|0;l=0}else{B=m|3;C=m|1;D=C+1|0;E=C+3|0;K=m+4|0;F=m+1|0;G=m+2|0;H=m+3|0;A=0;while(1){do if(B>>>0<k>>>0){k=f[Wa>>2]|0;l=f[Xa>>2]|0;o=A+1|0;s=k+((X(l,C)|0)+o<<1)|0;s=d[s>>1]|0;if($){x=k+((X(l,D)|0)+o<<1)|0;y=k+((X(l,B)|0)+o<<1)|0;z=k+((X(l,E)|0)+o<<1)|0;if((d[x>>1]|s|d[y>>1]|d[z>>1])&20735){z=0;k=0;Fa=105;break}}else{if(s&20735){z=0;k=0;Fa=105;break}z=k+((X(l,D)|0)+o<<1)|0;if(d[z>>1]&20735){z=0;k=0;Fa=105;break}z=k+((X(l,B)|0)+o<<1)|0;if(d[z>>1]&20735){z=0;k=0;Fa=105;break}z=k+((X(l,E)|0)+o<<1)|0;if(d[z>>1]&20665){z=0;k=0;Fa=105;break}}k=f[Ta>>2]|0;l=f[Ua>>2]|0;z=k+((X(l,m)|0)+A<<2)|0;z=f[z>>2]|0;do if(!(((z|0)<0?0-z|0:z)&M)){z=k+((X(l,F)|0)+A<<2)|0;z=f[z>>2]|0;if(((z|0)<0?0-z|0:z)&M|0){k=1;break}z=k+((X(l,G)|0)+A<<2)|0;z=f[z>>2]|0;if(((z|0)<0?0-z|0:z)&M|0){k=2;break}k=k+((X(l,H)|0)+A<<2)|0;k=f[k>>2]|0;k=(((k|0)<0?0-k|0:k)&M|0)==0?4:3}else k=0;while(0);f[O>>2]=N;ch(L,(k|0)!=4&1);if((k|0)==4)break;f[O>>2]=P;ch(L,k>>>1);ch(L,k&1);z=1;Fa=105}else{z=0;k=0;Fa=105}while(0);e:do if((Fa|0)==105){Fa=0;y=k+m|0;if(y>>>0<K>>>0)x=y;else break;do{k=f[Sa>>2]|0;if(x>>>0>=k>>>0)break e;s=f[Wa>>2]|0;$a=x;x=x+1|0;t=(X(f[Xa>>2]|0,x)|0)+A|0;w=s+(t+1<<1)|0;u=(f[Ta>>2]|0)+((X(f[Ua>>2]|0,$a)|0)+A<<2)|0;v=f[a>>2]|0;l=d[w>>1]|0;o=(($a|0)==(B|0)|($a|0)==(k+-1|0))&ba?l&-1095:l;do if(!(z&($a|0)==(y|0))){if(l&20480|0)break;k=v+100|0;f[k>>2]=v+24+(h[20356+(o&255|_)>>0]<<2);$a=f[u>>2]|0;$a=((($a|0)<0?0-$a|0:$a)&M|0)!=0;ch(v,$a&1);if($a)Fa=111}else{k=v+100|0;Fa=111}while(0);if((Fa|0)==111){Fa=0;u=f[u>>2]|0;j=j+(d[Q+((((u|0)<0?0-u|0:u)>>>e&127)<<1)>>1]|0)|0;$a=o>>>4&255;f[k>>2]=v+24+(h[21380+$a>>0]<<2);u=u>>>31;ch(v,u^h[21636+$a>>0]);$a=f[Xa>>2]|0;v=w+(0-$a<<1)|0;$a=w+($a<<1)|0;o=v+-2|0;d[o>>1]=d[o>>1]|2;d[v>>1]=d[v>>1]|d[3160+(u<<1)>>1];v=v+2|0;d[v>>1]=d[v>>1]|4;v=s+(t<<1)|0;d[v>>1]=d[v>>1]|d[3160+((u|2)<<1)>>1];d[w>>1]=d[w>>1]|4096;v=w+2|0;d[v>>1]=d[v>>1]|d[3160+((u|4)<<1)>>1];v=$a+-2|0;d[v>>1]=d[v>>1]|1;d[$a>>1]=d[$a>>1]|d[3160+((u|6)<<1)>>1];$a=$a+2|0;d[$a>>1]=d[$a>>1]|8}d[w>>1]=d[w>>1]&-16385}while(x>>>0<K>>>0)}while(0);A=A+1|0;l=f[Ra>>2]|0;k=f[Sa>>2]|0;if(A>>>0>=l>>>0){m=K;break}}}while(m>>>0<k>>>0)}if(aa)break c;lh(ka);break}default:{}}while(0);if(Ja)q=+p[Ia>>3];else q=1.0;if(V)r=+Dg(ha,ga);else r=+Hg(ha,ga);r=q*r*ia*+(1<<e|0);r=r*(r*+(j|0)*.0001220703125);T=T+r;p[Za>>3]=+p[Za>>3]+r;do if(W)Fa=127;else{if((e|0)<1&(S|0)==2){Fa=127;break}dh(ka);k=R+(c*24|0)+20|0;l=b[k>>0]|1;b[k>>0]=l;k=1}while(0);do if((Fa|0)==127){k=(f[ea>>2]|0)+-4|0;if((S|0)!=0&(e|0)<(k|0))if(U)Fa=131;else Fa=130;else if(U|((S|0)!=2|(e|0)!=(k|0)))Fa=131;else Fa=130;if((Fa|0)==130){Fa=0;dh(ka);k=R+(c*24|0)+20|0;l=b[k>>0]|1;b[k>>0]=l;k=1;break}else if((Fa|0)==131){Fa=0;k=R+(c*24|0)+20|0;l=b[k>>0]&-2;b[k>>0]=l;k=3;break}}while(0);Q=S+1|0;$a=(Q|0)==3;S=$a?0:Q;e=e+($a<<31>>31)|0;do if((e|0)>0&(l&1)!=0)if(da&(S>>>0<2?(e|0)<((f[ea>>2]|0)+-4|0):0)){eh(ka);break}else{jh(ka);break}while(0);p[R+(c*24|0)+8>>3]=T;$a=(ah(ka)|0)+k|0;f[R+(c*24|0)>>2]=$a;if(!Y)gh(ka);c=c+1|0;if((e|0)<=-1)break b}}else c=0;while(0);do if(!(ja&16)){if(ja&1|0)break;dh(ka)}else kh(ka);while(0);o=la+(ma*52|0)+48|0;f[o>>2]=c;if(c|0){l=la+(ma*52|0)+8|0;k=0;do{m=f[l>>2]|0;e=m+(k*24|0)|0;$a=f[e>>2]|0;if($a>>>0>(ah(ka)|0)>>>0){c=ah(ka)|0;f[e>>2]=c}else c=f[e>>2]|0;do if(c>>>0>1){j=c+-1|0;if((b[(f[fa>>2]|0)+j>>0]|0)!=-1)break;f[e>>2]=j;c=j}while(0);if(!k)e=0;else e=f[(f[l>>2]|0)+((k+-1|0)*24|0)>>2]|0;f[m+(k*24|0)+16>>2]=c-e;k=k+1|0}while(k>>>0<(f[o>>2]|0)>>>0)}ma=ma+1|0}while(ma>>>0<(X(f[pa>>2]|0,f[oa>>2]|0)|0)>>>0);j=f[Aa>>2]|0;c=f[za>>2]|0}qa=qa+1|0}while(qa>>>0<(X(j,c)|0)>>>0);e=f[Ea>>2]|0}ya=ya+1|0}while(ya>>>0<e>>>0);c=f[Oa>>2]|0}Ga=Ga+1|0}while(Ga>>>0<c>>>0);c=f[_a>>2]|0}Pa=Pa+1|0;if(Pa>>>0>=c>>>0){c=1;Fa=163;break}}if((Fa|0)==163)return c|0;return 0}function Ug(a,b,c,e,g,i,j,k,l,m,n,o){a=a|0;b=b|0;c=c|0;e=e|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;G=u;u=u+16|0;E=G;f[E>>2]=0;p=f[a>>2]|0;z=f[a+4>>2]|0;a=f[z+76>>2]|0;C=a+(b*5640|0)|0;q=(d[z>>1]|0)==4?2:1;r=z+80|0;if(!(f[r>>2]|0))s=1;else s=f[p+16>>2]|0;F=(f[a+(b*5640|0)+420>>2]|0)+1|0;D=Ff(p,z,b,o)|0;if(!D){i=0;u=G;return i|0}f[i>>2]=0;a:do if(!o){if(s|0){o=0;b:while(1){a=0;l=0;n=D;while(1){Hf(D,z,b,l,o,m,0);if((f[n+80>>2]|0)==-1){g=9;break b}p=n+36|0;c:while(1){do if(!(Kf(n)|0))break c;while((f[p>>2]|0)>>>0>=e>>>0);f[E>>2]=0;if(!(Vg(b,c,C,n,g,E,j,k)|0)){g=13;break b}B=f[E>>2]|0;f[i>>2]=(f[i>>2]|0)+B;a=B+a|0;j=j-B|0;g=g+B|0}B=f[r>>2]|0;if((B|0)!=0&a>>>0>B>>>0){g=17;break b}l=l+1|0;if(l>>>0>=q>>>0)break;else n=n+232|0}o=o+1|0;if(o>>>0>=s>>>0)break a}if((g|0)==9){Ef(D,F);i=0;u=G;return i|0}else if((g|0)==13){Ef(D,F);i=0;u=G;return i|0}else if((g|0)==17){Ef(D,F);i=0;u=G;return i|0}}}else{Hf(D,z,b,n,l,m,o);y=D+(n*232|0)|0;if((f[D+(n*232|0)+80>>2]|0)==-1){Ef(D,F);i=0;u=G;return i|0}w=D+(n*232|0)+36|0;x=c+840|0;m=k+12|0;t=k+8|0;v=k+88|0;s=z+93|0;r=a+(b*5640|0)+5636|0;d:do if(!k)while(1){do if(!(Kf(y)|0))break a;while((f[w>>2]|0)>>>0>=e>>>0);f[E>>2]=0;if(!(Vg(b,c,C,y,g,E,j,0)|0))break d;k=f[E>>2]|0;f[i>>2]=(f[i>>2]|0)+k;f[x>>2]=(f[x>>2]|0)+1;j=j-k|0;g=g+k|0}else while(1){do if(!(Kf(y)|0))break a;while((f[w>>2]|0)>>>0>=e>>>0);f[E>>2]=0;if(!(Vg(b,c,C,y,g,E,j,k)|0))break d;q=f[E>>2]|0;g=g+q|0;j=j-q|0;f[i>>2]=(f[i>>2]|0)+q;if(!(f[m>>2]|0))a=f[t>>2]|0;else{p=f[v>>2]|0;n=f[p+(b*592|0)+548>>2]|0;a=f[t>>2]|0;l=n+(a<<5)|0;do if(!a){o=(f[p+(b*592|0)+12>>2]|0)+1|0;p=o;o=((o|0)<0)<<31>>31}else{if(((h[r>>0]|0)>>>2|(h[s>>0]|0)>>>3)&1?(B=l,A=f[B>>2]|0,B=f[B+4>>2]|0,!((A|0)==0&(B|0)==0)):0){p=A;o=B;break}p=n+(a+-1<<5)+16|0;p=Zi(f[p>>2]|0,f[p+4>>2]|0,1,0)|0;o=I}while(0);f[l>>2]=p;f[l+4>>2]=o;o=Zi(p|0,o|0,-1,-1)|0;l=I;q=Zi(o|0,l|0,q|0,0)|0;z=n+(a<<5)+16|0;f[z>>2]=q;f[z+4>>2]=I;z=n+(a<<5)+8|0;q=z;q=Zi(o|0,l|0,f[q>>2]|0,f[q+4>>2]|0)|0;f[z>>2]=q;f[z+4>>2]=I}f[t>>2]=a+1;f[x>>2]=(f[x>>2]|0)+1}while(0);Ef(D,F);i=0;u=G;return i|0}while(0);Ef(D,F);i=1;u=G;return i|0}function Vg(a,c,d,e,g,h,i,j){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0.0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;t=f[e+28>>2]|0;J=f[e+32>>2]|0;K=f[e+36>>2]|0;s=f[(f[c+20>>2]|0)+((f[e+24>>2]|0)*52|0)+24>>2]|0;if(!(f[d>>2]&2))G=g;else{b[g>>0]=-1;b[g+1>>0]=-111;b[g+2>>0]=0;b[g+3>>0]=4;G=c+840|0;b[g+4>>0]=(f[G>>2]|0)>>>8;b[g+5>>0]=f[G>>2];i=i+-6|0;G=g+6|0}if((K|0)==0?(r=s+(t*136|0)+24|0,f[r>>2]|0):0){m=0;n=s+(t*136|0)+28|0;while(1){e=f[n+20>>2]|0;cg(f[e+(J*40|0)+32>>2]|0);o=e+(J*40|0)+36|0;cg(f[o>>2]|0);q=X(f[e+(J*40|0)+20>>2]|0,f[e+(J*40|0)+16>>2]|0)|0;if(q|0){c=e+(J*40|0)+24|0;l=n+28|0;e=0;do{I=f[c>>2]|0;f[I+(e*52|0)+40>>2]=0;fg(f[o>>2]|0,e,(f[l>>2]|0)-(f[I+(e*52|0)+28>>2]|0)|0);e=e+1|0}while((e|0)!=(q|0))}m=m+1|0;if(m>>>0>=(f[r>>2]|0)>>>0)break;else n=n+36|0}}F=og()|0;if(!F){h=0;return h|0}rg(F,G,i);tg(F,1,1);H=s+(t*136|0)+28|0;I=s+(t*136|0)+24|0;if(f[I>>2]|0){D=K+1|0;B=0;C=H;while(1){n=f[C+20>>2]|0;E=X(f[n+(J*40|0)+20>>2]|0,f[n+(J*40|0)+16>>2]|0)|0;o=n+(J*40|0)+24|0;l=(E|0)==0;if(!l){m=n+(J*40|0)+32|0;e=f[o>>2]|0;c=0;while(1){if((f[e+40>>2]|0)==0?f[(f[e+4>>2]|0)+(K*24|0)>>2]|0:0)fg(f[m>>2]|0,c,K);c=c+1|0;if((c|0)==(E|0))break;else e=e+52|0}if(!l){A=n+(J*40|0)+32|0;z=n+(J*40|0)+36|0;w=f[o>>2]|0;x=0;while(1){e=(f[w+4>>2]|0)+(K*24|0)|0;y=w+40|0;if(!(f[y>>2]|0))gg(F,f[A>>2]|0,x,D);else tg(F,(f[e>>2]|0)!=0&1,1);c=f[e>>2]|0;if(c|0){if(!(f[y>>2]|0)){f[w+32>>2]=3;gg(F,f[z>>2]|0,x,999);c=f[e>>2]|0}a:do switch(c|0){case 1:{tg(F,0,1);break}case 2:{tg(F,2,2);break}default:{if(c>>>0<6){tg(F,c+-3|12,4);break a}if(c>>>0<37){tg(F,c+-6|480,9);break a}if(c>>>0<165)tg(F,c+-37|65408,16)}}while(0);m=f[y>>2]|0;c=f[e>>2]|0;v=c+m|0;u=w+8|0;if(m>>>0<v>>>0){t=w+32|0;s=m+-1+c|0;r=m;l=0;c=0;n=0;q=(f[u>>2]|0)+(m*24|0)|0;while(1){m=c+1|0;l=(f[q+16>>2]|0)+l|0;if((b[q+20>>0]&1)!=0|(r|0)==(s|0)){if((l|0)>1){c=0;while(1){c=c+1|0;if(l>>>0>3)l=l>>>1;else{l=c;break}}}else l=0;o=f[t>>2]|0;if((m|0)>1){c=0;while(1){c=c+1|0;if(m>>>0>3)m=m>>>1;else break}}else c=0;o=l+1-o-c|0;l=0;m=0;n=(n|0)>(o|0)?n:o}r=r+1|0;if((r|0)==(v|0))break;else{c=m;q=q+24|0}}if((n|0)>0){c=n;while(1){tg(F,1,1);if((c|0)>1)c=c+-1|0;else{c=n;break}}}else c=n}else{l=0;m=0;c=0}tg(F,0,1);r=w+32|0;f[r>>2]=(f[r>>2]|0)+c;c=f[y>>2]|0;if(c>>>0<v>>>0){q=c;o=(f[u>>2]|0)+(c*24|0)|0;c=m;while(1){c=c+1|0;l=(f[o+16>>2]|0)+l|0;if(!((b[o+20>>0]&1)==0?(q|0)!=((f[y>>2]|0)+-1+(f[e>>2]|0)|0):0)){n=f[r>>2]|0;if((c|0)>1){m=0;while(1){m=m+1|0;if(c>>>0>3)c=c>>>1;else{c=m;break}}}else c=0;tg(F,l,c+n|0);l=0;c=0}q=q+1|0;if((q|0)==(v|0))break;else o=o+24|0}}}x=x+1|0;if((x|0)==(E|0))break;else w=w+52|0}}}B=B+1|0;if(B>>>0>=(f[I>>2]|0)>>>0)break;else C=C+36|0}}if(!(vg(F)|0)){pg(F);h=0;return h|0}c=qg(F)|0;e=G+c|0;c=i-c|0;pg(F);if(f[d>>2]&4){b[e>>0]=-1;b[e+1>>0]=-110;c=c+-2|0;e=e+2|0}u=(j|0)!=0;if(u?f[j+12>>2]|0:0){G=e-g|0;d=(f[(f[j+88>>2]|0)+(a*592|0)+548>>2]|0)+(f[j+8>>2]<<5)+8|0;f[d>>2]=G;f[d+4>>2]=((G|0)<0)<<31>>31}b:do if(f[I>>2]|0){v=j+12|0;w=j+88|0;x=j+8|0;t=0;s=H;c:while(1){l=f[s+20>>2]|0;r=X(f[l+(J*40|0)+20>>2]|0,f[l+(J*40|0)+16>>2]|0)|0;l=f[l+(J*40|0)+24>>2]|0;d:do if(r){e:do if(u){q=0;while(1){o=f[l+4>>2]|0;i=o+(K*24|0)|0;if(f[i>>2]|0){m=o+(K*24|0)+4|0;n=f[m>>2]|0;if(n>>>0>c>>>0)i=1;else{hj(e|0,f[o+(K*24|0)+16>>2]|0,n|0)|0;d=l+40|0;f[d>>2]=(f[d>>2]|0)+(f[i>>2]|0);d=f[m>>2]|0;e=e+d|0;c=c-d|0;do if(f[v>>2]|0){d=(f[(f[w>>2]|0)+(a*592|0)+548>>2]|0)+(f[x>>2]<<5)+24|0;k=+p[o+(K*24|0)+8>>3]+ +p[d>>3];p[d>>3]=k;if(!(+p[j>>3]<k))break;p[j>>3]=k}while(0);i=0;l=l+52|0}}else{i=28;l=l+52|0}switch(i&31){case 28:case 0:break;default:break e}q=q+1|0;if(q>>>0>=r>>>0){L=83;break d}}}else{q=0;while(1){i=f[l+4>>2]|0;m=i+(K*24|0)|0;if(f[m>>2]|0){n=i+(K*24|0)+4|0;o=f[n>>2]|0;if(o>>>0>c>>>0)i=1;else{hj(e|0,f[i+(K*24|0)+16>>2]|0,o|0)|0;d=l+40|0;f[d>>2]=(f[d>>2]|0)+(f[m>>2]|0);d=f[n>>2]|0;i=0;c=c-d|0;e=e+d|0;l=l+52|0}}else{i=28;l=l+52|0}switch(i&31){case 28:case 0:break;default:break e}q=q+1|0;if(q>>>0>=r>>>0){L=83;break d}}}while(0);if(!i)i=s;else{e=0;break c}}else L=83;while(0);if((L|0)==83){L=0;i=s+36|0}t=t+1|0;if(t>>>0>=(f[I>>2]|0)>>>0)break b;else s=i}return e|0}while(0);f[h>>2]=e-g+(f[h>>2]|0);h=1;return h|0}function Wg(a,b,c,d,e,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0;_=u;u=u+112|0;Z=_+64|0;U=_+32|0;T=_;R=_+96|0;S=_+92|0;j=f[a>>2]|0;L=a+4|0;Q=f[L>>2]|0;h=f[Q+76>>2]|0;M=h+(b*5640|0)|0;N=h+(b*5640|0)+420|0;P=(f[N>>2]|0)+1|0;Q=Bf(j,Q,b)|0;if(!Q){$=0;u=_;return $|0}O=j+16|0;K=h+(b*5640|0)+12|0;J=c+20|0;H=j+24|0;G=Q;a=g;h=d;F=0;a:while(1){if((f[G+80>>2]|0)==-1){$=4;break}I=Hc(f[O>>2]<<2)|0;if(!I){$=6;break}ij(I|0,1,f[O>>2]<<2|0)|0;if(Kf(G)|0){B=G+24|0;C=G+28|0;D=G+36|0;E=G+32|0;A=h;while(1){if((f[K>>2]|0)>>>0>(f[D>>2]|0)>>>0){h=f[J>>2]|0;b=f[B>>2]|0;if((f[C>>2]|0)>>>0<(f[h+(b*52|0)+20>>2]|0)>>>0){f[I+(b<<2)>>2]=0;z=f[L>>2]|0;f[S>>2]=0;if(!(Xg(z,h,M,G,R,A,S,a,i)|0)){$=45;break a}h=f[S>>2]|0;if(f[R>>2]|0){y=a-h|0;z=A+h|0;f[S>>2]=0;b=f[(f[J>>2]|0)+((f[B>>2]|0)*52|0)+24>>2]|0;c=f[C>>2]|0;w=b+(c*136|0)+24|0;g=f[w>>2]|0;b:do if(!g){b=z;$=43}else{x=A+a|0;j=0;v=b+(c*136|0)+28|0;b=z;c=g;c:while(1){g=f[v+20>>2]|0;k=f[E>>2]|0;if(((f[v+8>>2]|0)!=(f[v>>2]|0)?(f[v+12>>2]|0)!=(f[v+4>>2]|0):0)?(Y=X(f[g+(k*40|0)+20>>2]|0,f[g+(k*40|0)+16>>2]|0)|0,(Y|0)!=0):0){c=0;t=f[g+(k*40|0)+24>>2]|0;while(1){r=t+40|0;if(f[r>>2]|0){s=t+44|0;g=f[s>>2]|0;k=f[t+4>>2]|0;do if(!g){f[s>>2]=1;f[t+36>>2]=0}else{l=g+-1|0;if((f[k+(l<<5)+8>>2]|0)!=(f[k+(l<<5)+20>>2]|0)){k=k+(l<<5)|0;break}f[s>>2]=g+1;k=k+(g<<5)|0}while(0);p=t+36|0;q=t+32|0;o=b;n=k+28|0;g=f[n>>2]|0;if((g+o|0)>>>0<o>>>0|(b+g|0)>>>0>x>>>0){b=g;break c}l=g;m=f[p>>2]|0;o=n;while(1){n=l+m|0;if(n>>>0<m>>>0){$=29;break a}g=f[t>>2]|0;if(n>>>0>(f[q>>2]|0)>>>0){g=Lc(g,n)|0;if(!g){$=33;break a}m=f[p>>2]|0;l=f[o>>2]|0;f[q>>2]=l+m;f[t>>2]=g}hj(g+m|0,b|0,l|0)|0;g=k+8|0;l=f[g>>2]|0;if(!l){f[k>>2]=t;m=f[p>>2]|0;f[k+4>>2]=m}else m=f[p>>2]|0;aa=f[o>>2]|0;b=b+aa|0;o=f[k+24>>2]|0;n=o+l|0;f[g>>2]=n;o=(f[r>>2]|0)-o|0;f[r>>2]=o;f[k+12>>2]=n;m=aa+m|0;f[p>>2]=m;n=k+16|0;f[n>>2]=(f[n>>2]|0)+aa;if(!o)break;f[s>>2]=(f[s>>2]|0)+1;aa=b;o=k+60|0;g=f[o>>2]|0;if((g+aa|0)>>>0<aa>>>0|(b+g|0)>>>0>x>>>0){b=g;break c}else{k=k+32|0;l=g}}f[t+48>>2]=f[s>>2]}c=c+1|0;if(c>>>0<Y>>>0)t=t+56|0;else break}c=f[w>>2]|0}j=j+1|0;if(j>>>0<c>>>0)v=v+36|0;else{$=43;break b}}x=f[E>>2]|0;z=f[C>>2]|0;aa=f[B>>2]|0;f[T>>2]=b;f[T+4>>2]=y;f[T+8>>2]=c;f[T+12>>2]=x;f[T+16>>2]=j;f[T+20>>2]=z;f[T+24>>2]=aa;Mb(i,2,21892,T)|0;b=0}while(0);if(($|0)==43){$=0;b=b-z|0;f[S>>2]=b}h=b+h|0}aa=f[B>>2]|0;y=f[C>>2]|0;b=(f[H>>2]|0)+(aa*52|0)+36|0;z=f[b>>2]|0;f[b>>2]=y>>>0>z>>>0?y:z;b=h;h=aa}else $=47}else{h=f[J>>2]|0;$=47}if(($|0)==47){$=0;aa=f[L>>2]|0;f[S>>2]=0;if(!(Xg(aa,h,M,G,R,A,S,a,i)|0))break a;b=f[S>>2]|0;if(!(f[R>>2]|0))h=f[B>>2]|0;else{v=a-b|0;x=f[B>>2]|0;h=f[(f[J>>2]|0)+(x*52|0)+24>>2]|0;w=f[C>>2]|0;f[S>>2]=0;s=f[h+(w*136|0)+24>>2]|0;if(!s)h=0;else{t=f[E>>2]|0;j=0;r=h+(w*136|0)+28|0;h=0;while(1){c=f[r+20>>2]|0;if(((f[r+8>>2]|0)!=(f[r>>2]|0)?(f[r+12>>2]|0)!=(f[r+4>>2]|0):0)?(V=X(f[c+(t*40|0)+20>>2]|0,f[c+(t*40|0)+16>>2]|0)|0,(V|0)!=0):0){q=f[c+(t*40|0)+24>>2]|0;c=0;n=h;while(1){o=q+40|0;m=f[o>>2]|0;if(!m)h=n;else{p=q+44|0;k=f[p>>2]|0;h=f[q+4>>2]|0;do if(!k){f[p>>2]=1;f[q+36>>2]=0;g=h;l=1}else{g=k+-1|0;l=k+1|0;if((f[h+(g<<5)+8>>2]|0)!=(f[h+(g<<5)+20>>2]|0)){g=h+(g<<5)|0;l=k;break}f[p>>2]=l;g=h+(k<<5)|0}while(0);h=f[g+28>>2]|0;k=h+n|0;if(k>>>0<n>>>0|k>>>0>v>>>0){$=67;break a}else n=g;while(1){aa=f[n+24>>2]|0;z=n+8|0;f[z>>2]=(f[z>>2]|0)+aa;m=m-aa|0;if(!m)break;l=l+1|0;f[p>>2]=l;h=f[n+60>>2]|0;g=h+k|0;if(g>>>0<k>>>0|g>>>0>v>>>0){$=68;break a}else{n=n+32|0;k=g}}f[o>>2]=0;h=k}c=c+1|0;if(c>>>0<V>>>0){q=q+56|0;n=h}else break}}j=j+1|0;if(j>>>0<s>>>0)r=r+36|0;else break}f[S>>2]=h}b=h+b|0;h=x}}if(f[I+(h<<2)>>2]|0?(W=(f[H>>2]|0)+(h*52|0)+36|0,(f[W>>2]|0)==0):0)f[W>>2]=(f[(f[J>>2]|0)+(h*52|0)+20>>2]|0)+-1;h=A+b|0;a=a-b|0;if(!(Kf(G)|0))break;else A=h}}Mc(I);F=F+1|0;if(F>>>0>(f[N>>2]|0)>>>0){$=79;break}else G=G+232|0}if(($|0)==4){Ef(Q,P);aa=0;u=_;return aa|0}else if(($|0)==6){Ef(Q,P);aa=0;u=_;return aa|0}else if(($|0)==29){Y=f[E>>2]|0;Z=f[C>>2]|0;aa=f[B>>2]|0;f[U>>2]=l;f[U+4>>2]=m;f[U+8>>2]=~l;f[U+12>>2]=c;f[U+16>>2]=Y;f[U+20>>2]=j;f[U+24>>2]=Z;f[U+28>>2]=aa;Mb(i,1,21977,U)|0;$=45}else if(($|0)==33){Mc(f[t>>2]|0);f[t>>2]=0;f[q>>2]=0;$=45}else if(($|0)==67){f[S>>2]=n;$=69}else if(($|0)==68){f[S>>2]=k;f[o>>2]=m;$=69}else if(($|0)==79){Ef(Q,P);f[e>>2]=h-d;aa=1;u=_;return aa|0}if(($|0)==45){Ef(Q,P);Mc(I);aa=0;u=_;return aa|0}else if(($|0)==69){f[Z>>2]=h;f[Z+4>>2]=v;f[Z+8>>2]=c;f[Z+12>>2]=t;f[Z+16>>2]=j;f[Z+20>>2]=w;f[Z+24>>2]=x;Mb(i,1,22076,Z)|0}Ef(Q,P);Mc(I);aa=0;u=_;return aa|0}function Xg(a,c,d,e,g,h,i,j,k){a=a|0;c=c|0;d=d|0;e=e|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;O=u;u=u+64|0;K=O+48|0;L=O+40|0;y=O+32|0;x=O+24|0;v=O+16|0;t=O+8|0;s=O;w=O+56|0;M=O+52|0;N=h;f[M>>2]=N;J=e+24|0;z=f[c+((f[J>>2]|0)*52|0)+24>>2]|0;A=f[e+28>>2]|0;I=e+36|0;a:do if((f[I>>2]|0)==0?(r=z+(A*136|0)+24|0,f[r>>2]|0):0){p=e+32|0;m=0;o=z+(A*136|0)+28|0;while(1){if((f[o+8>>2]|0)!=(f[o>>2]|0)?(f[o+12>>2]|0)!=(f[o+4>>2]|0):0){c=f[o+20>>2]|0;l=f[p>>2]|0;if(l>>>0>=(((f[o+24>>2]|0)>>>0)/40|0)>>>0)break;cg(f[c+(l*40|0)+32>>2]|0);cg(f[c+(l*40|0)+36>>2]|0);q=X(f[c+(l*40|0)+20>>2]|0,f[c+(l*40|0)+16>>2]|0)|0;if(q|0){n=0;c=f[c+(l*40|0)+24>>2]|0;while(1){f[c+44>>2]=0;f[c+48>>2]=0;n=n+1|0;if((n|0)==(q|0))break;else c=c+56|0}}}m=m+1|0;if(m>>>0>=(f[r>>2]|0)>>>0)break a;else o=o+36|0}Mb(k,1,22161,s)|0;N=0;u=O;return N|0}while(0);do if(!(f[d>>2]&2))c=N;else{if(j>>>0<6){Mb(k,2,22179,t)|0;c=N;break}if((b[h>>0]|0)==-1?(b[h+1>>0]|0)==-111:0){c=h+6|0;f[M>>2]=c;break}Mb(k,2,22221,v)|0;c=N}while(0);G=og()|0;if(!G){N=0;u=O;return N|0}do if(!(b[a+96>>0]&1))if(!(b[d+5636>>0]&2)){f[w>>2]=h+j-c;H=M;F=c;break}else{F=d+5168|0;H=F;F=f[F>>2]|0;w=d+5180|0;break}else{F=a+40|0;H=F;F=f[F>>2]|0;w=a+44|0}while(0);sg(G,F,f[w>>2]|0);if(!(ug(G,1)|0)){wg(G)|0;c=F+(qg(G)|0)|0;pg(G);do if(!(f[d>>2]&4))l=H;else{if(((f[w>>2]|0)-c+(f[H>>2]|0)|0)>>>0<2){Mb(k,2,22242,x)|0;l=H;break}if((b[c>>0]|0)==-1?(b[c+1>>0]|0)==-110:0){c=c+2|0;l=H;break}Mb(k,2,22284,y)|0;l=H}while(0);d=f[l>>2]|0;k=c-d|0;f[w>>2]=(f[w>>2]|0)-k;f[H>>2]=d+k;f[g>>2]=0;f[i>>2]=(f[M>>2]|0)-N;N=1;u=O;return N|0}E=z+(A*136|0)+24|0;b:do if(f[E>>2]|0){C=e+32|0;D=d+5584|0;y=0;c=z+(A*136|0)+28|0;c:while(1){l=f[c+20>>2]|0;m=f[C>>2]|0;d:do if((f[c+8>>2]|0)!=(f[c>>2]|0)?(f[c+12>>2]|0)!=(f[c+4>>2]|0):0){j=X(f[l+(m*40|0)+20>>2]|0,f[l+(m*40|0)+16>>2]|0)|0;e:do if(j|0){a=l+(m*40|0)+32|0;e=l+(m*40|0)+36|0;x=c+28|0;h=0;l=f[l+(m*40|0)+24>>2]|0;f:while(1){n=l+44|0;if(!(f[n>>2]|0))m=hg(G,f[a>>2]|0,h,(f[I>>2]|0)+1|0)|0;else m=ug(G,1)|0;g:do if(m){if(!(f[n>>2]|0)){m=0;while(1)if(!(hg(G,f[e>>2]|0,h,m)|0))m=m+1|0;else break;f[l+24>>2]=1-m+(f[x>>2]|0);f[l+28>>2]=3}do if(ug(G,1)|0){if(!(ug(G,1)|0)){m=2;break}m=ug(G,2)|0;if((m|0)!=3){m=m+3|0;break}m=ug(G,5)|0;if((m|0)==31){m=(ug(G,7)|0)+37|0;break}else{m=m+6|0;break}}else m=1;while(0);s=l+40|0;f[s>>2]=m;m=0;while(1)if(!(ug(G,1)|0))break;else m=m+1|0;v=l+28|0;f[v>>2]=(f[v>>2]|0)+m;q=f[n>>2]|0;do if(!q){p=f[(f[D>>2]|0)+((f[J>>2]|0)*1080|0)+16>>2]|0;m=l+52|0;do if(!(f[m>>2]|0)){f[m>>2]=10;n=l+4|0;o=Lc(f[n>>2]|0,320)|0;if(!o){Mc(f[n>>2]|0);f[n>>2]=0;f[m>>2]=0;pg(G);m=1;break g}else{f[n>>2]=o;m=o;n=o;break}}else{n=f[l+4>>2]|0;m=n}while(0);f[m>>2]=0;f[m+4>>2]=0;f[m+8>>2]=0;f[m+12>>2]=0;f[m+16>>2]=0;f[m+20>>2]=0;f[m+24>>2]=0;f[m+28>>2]=0;if(!(p&4))m=(p&1|0)==0?109:10;else m=1;o=0;p=l+4|0;n=n+20|0;B=77}else{m=q+-1|0;r=l+4|0;n=f[r>>2]|0;if((f[n+(m<<5)+8>>2]|0)!=(f[n+(m<<5)+20>>2]|0))break;p=f[(f[D>>2]|0)+((f[J>>2]|0)*1080|0)+16>>2]|0;o=l+52|0;m=f[o>>2]|0;do if((q+1|0)>>>0>m>>>0){m=m+10|0;f[o>>2]=m;m=Lc(n,m<<5)|0;if(!m){Mc(f[r>>2]|0);f[r>>2]=0;f[o>>2]=0;pg(G);m=1;break g}else{f[r>>2]=m;n=m;break}}while(0);m=n+(q<<5)|0;f[m>>2]=0;f[m+4>>2]=0;f[m+8>>2]=0;f[m+12>>2]=0;f[m+16>>2]=0;f[m+20>>2]=0;f[m+24>>2]=0;f[m+28>>2]=0;do if(!(p&4)){if(!(p&1)){m=109;break}m=f[m+-32+20>>2]|0;m=(m|0)==1|(m|0)==10?2:1}else m=1;while(0);o=q;p=r;n=n+(q<<5)+20|0;B=77}while(0);if((B|0)==77){f[n>>2]=m;m=o;r=p}t=l+52|0;p=f[s>>2]|0;s=m;while(1){o=f[r>>2]|0;m=(f[o+(s<<5)+20>>2]|0)-(f[o+(s<<5)+8>>2]|0)|0;m=(m|0)<(p|0)?m:p;f[o+(s<<5)+24>>2]=m;o=f[v>>2]|0;if(m>>>0>1){n=m;m=0;while(1){m=m+1|0;if(n>>>0>3)n=n>>>1;else break}}else m=0;B=ug(G,m+o|0)|0;n=f[r>>2]|0;f[n+(s<<5)+28>>2]=B;p=p-(f[n+(s<<5)+24>>2]|0)|0;if((p|0)<=0){B=90;break}q=s+1|0;o=f[(f[D>>2]|0)+((f[J>>2]|0)*1080|0)+16>>2]|0;m=f[t>>2]|0;if((s+2|0)>>>0>m>>>0){m=m+10|0;f[t>>2]=m;m=Lc(n,m<<5)|0;if(!m){B=89;break}f[r>>2]=m;n=m}B=n+(q<<5)|0;f[B>>2]=0;f[B+4>>2]=0;f[B+8>>2]=0;f[B+12>>2]=0;f[B+16>>2]=0;f[B+20>>2]=0;f[B+24>>2]=0;f[B+28>>2]=0;do if(!(o&4)){if(!(o&1)){m=109;break}m=f[n+(s<<5)+20>>2]|0;m=(m|0)==1|(m|0)==10?2:1}else m=1;while(0);f[n+(q<<5)+20>>2]=m;s=q}if((B|0)==89){B=0;Mc(f[r>>2]|0);f[r>>2]=0;f[t>>2]=0;pg(G);m=1;break}else if((B|0)==90){B=0;m=0;l=l+56|0;break}}else{f[l+40>>2]=0;m=13;l=l+56|0}while(0);switch(m&15){case 13:case 0:break;default:break f}h=h+1|0;if(h>>>0>=j>>>0)break e}if(!m)break d;else{c=0;break c}}while(0);c=c+36|0}else B=39;while(0);if((B|0)==39){B=0;c=c+36|0}y=y+1|0;if(y>>>0>=(f[E>>2]|0)>>>0)break b}u=O;return c|0}while(0);if(!(wg(G)|0)){pg(G);N=0;u=O;return N|0}c=F+(qg(G)|0)|0;pg(G);do if(!(f[d>>2]&4))l=H;else{if(((f[w>>2]|0)-c+(f[H>>2]|0)|0)>>>0<2){Mb(k,2,22242,L)|0;l=H;break}if((b[c>>0]|0)==-1?(b[c+1>>0]|0)==-110:0){c=c+2|0;l=H;break}Mb(k,2,22284,K)|0;l=H}while(0);d=f[l>>2]|0;k=c-d|0;f[w>>2]=(f[w>>2]|0)-k;f[H>>2]=d+k;f[g>>2]=1;f[i>>2]=(f[M>>2]|0)-N;N=1;u=O;return N|0}function Yg(a,b){a=a|0;b=b|0;var c=0;c=Ic(1,8)|0;if(!c){c=0;return c|0}f[c>>2]=a;f[c+4>>2]=b;return c|0}function Zg(a){a=a|0;if(!a)return;Mc(a);return}function _g(){return Hc(104)|0}function $g(a){a=a|0;if(!a)return;Mc(a);return}function ah(a){a=a|0;return (f[a+12>>2]|0)-(f[a+16>>2]|0)|0}function bh(a,b){a=a|0;b=b|0;f[a+100>>2]=a+24;f[a+4>>2]=32768;f[a>>2]=0;f[a+12>>2]=b+-1;f[a+8>>2]=12;f[a+16>>2]=b;return}function ch(a,c){a=a|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0;e=f[a+100>>2]|0;g=f[e>>2]|0;k=(f[g+4>>2]|0)==(c|0);d=f[g>>2]|0;l=a+4|0;c=(f[l>>2]|0)-d|0;f[l>>2]=c;if(!k){if(c>>>0<d>>>0){d=(f[a>>2]|0)+d|0;f[a>>2]=d;k=a}else{f[l>>2]=d;c=d;k=a;d=f[a>>2]|0}f[e>>2]=f[g+12>>2];i=a+8|0;j=a+12|0;h=a+16|0;a=d;e=f[i>>2]|0;while(1){c=c<<1;f[l>>2]=c;d=a<<1;f[k>>2]=d;e=e+-1|0;f[i>>2]=e;if(!e){c=f[j>>2]|0;do if((c|0)!=((f[h>>2]|0)+-1|0)){e=b[c>>0]|0;if(e<<24>>24==-1){e=c+1|0;f[j>>2]=e;g=7;d=1048575;c=a>>>19&4095;break}if(!(d&134217728)){e=c+1|0;f[j>>2]=e;g=8;d=524287;c=a>>>18&8191;break}b[c>>0]=e+1<<24>>24;c=f[j>>2]|0;if((b[c>>0]|0)==-1){a=f[k>>2]&134217727;f[k>>2]=a;e=c+1|0;f[j>>2]=e;g=7;d=1048575;c=a>>>20;break}else{e=c+1|0;f[j>>2]=e;g=8;d=524287;c=(f[k>>2]|0)>>>19;break}}else{e=c+1|0;f[j>>2]=e;g=8;d=524287;c=a>>>18&8191}while(0);b[e>>0]=c;d=f[k>>2]&d;f[k>>2]=d;f[i>>2]=g;c=f[l>>2]|0;e=g}if(!(c&32768))a=d;else break}return}if(c&32768|0){f[a>>2]=(f[a>>2]|0)+d;return}if(c>>>0<d>>>0){f[l>>2]=d;c=d;k=a;d=f[a>>2]|0}else{d=(f[a>>2]|0)+d|0;f[a>>2]=d;k=a}f[e>>2]=f[g+8>>2];i=a+8|0;j=a+12|0;h=a+16|0;a=d;d=f[i>>2]|0;while(1){c=c<<1;f[l>>2]=c;e=a<<1;f[k>>2]=e;d=d+-1|0;f[i>>2]=d;if(!d){c=f[j>>2]|0;do if((c|0)!=((f[h>>2]|0)+-1|0)){d=b[c>>0]|0;if(d<<24>>24==-1){g=c+1|0;f[j>>2]=g;d=7;e=1048575;c=a>>>19&4095;break}if(!(e&134217728)){g=c+1|0;f[j>>2]=g;d=8;e=524287;c=a>>>18&8191;break}b[c>>0]=d+1<<24>>24;c=f[j>>2]|0;if((b[c>>0]|0)==-1){a=f[k>>2]&134217727;f[k>>2]=a;g=c+1|0;f[j>>2]=g;d=7;e=1048575;c=a>>>20;break}else{g=c+1|0;f[j>>2]=g;d=8;e=524287;c=(f[k>>2]|0)>>>19;break}}else{g=c+1|0;f[j>>2]=g;d=8;e=524287;c=a>>>18&8191}while(0);b[g>>0]=c;e=f[k>>2]&e;f[k>>2]=e;f[i>>2]=d;c=f[l>>2]|0}if(!(c&32768))a=e;else break}return}function dh(a){a=a|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0;k=f[a>>2]|0;h=k|65535;j=a+8|0;h=(h>>>0<((f[a+4>>2]|0)+k|0)>>>0?h:h+-32768|0)<<f[j>>2];f[a>>2]=h;k=a+12|0;c=f[k>>2]|0;i=a+16|0;do if((c|0)!=((f[i>>2]|0)+-1|0)){d=b[c>>0]|0;if(d<<24>>24==-1){g=c+1|0;f[k>>2]=g;d=7;e=1048575;c=h>>>20;break}if(!(h&134217728)){g=c+1|0;f[k>>2]=g;d=8;e=524287;c=h>>>19;break}b[c>>0]=d+1<<24>>24;c=f[k>>2]|0;if((b[c>>0]|0)==-1){h=f[a>>2]&134217727;f[a>>2]=h;g=c+1|0;f[k>>2]=g;d=7;e=1048575;c=h>>>20;break}else{g=c+1|0;f[k>>2]=g;d=8;e=524287;c=(f[a>>2]|0)>>>19;break}}else{g=c+1|0;f[k>>2]=g;d=8;e=524287;c=h>>>19}while(0);b[g>>0]=c;h=f[a>>2]&e;f[j>>2]=d;h=h<<d;f[a>>2]=h;d=f[k>>2]|0;do if((d|0)!=((f[i>>2]|0)+-1|0)){c=b[d>>0]|0;if(c<<24>>24==-1){g=d+1|0;f[k>>2]=g;d=7;e=1048575;c=h>>>20;break}if(!(h&134217728)){g=d+1|0;f[k>>2]=g;d=8;e=524287;c=h>>>19;break}b[d>>0]=c+1<<24>>24;c=f[k>>2]|0;if((b[c>>0]|0)==-1){i=f[a>>2]&134217727;f[a>>2]=i;g=c+1|0;f[k>>2]=g;d=7;e=1048575;c=i>>>20;break}else{g=c+1|0;f[k>>2]=g;d=8;e=524287;c=(f[a>>2]|0)>>>19;break}}else{g=d+1|0;f[k>>2]=g;d=8;e=524287;c=h>>>19}while(0);b[g>>0]=c;f[a>>2]=f[a>>2]&e;f[j>>2]=d;c=f[k>>2]|0;if((b[c>>0]|0)==-1)return;f[k>>2]=c+1;return}function eh(a){a=a|0;f[a>>2]=0;f[a+8>>2]=8;return}function fh(a,c){a=a|0;c=c|0;var d=0,e=0,g=0;d=a+8|0;e=(f[d>>2]|0)+-1|0;f[d>>2]=e;c=(f[a>>2]|0)+(c<<e)|0;f[a>>2]=c;if(e|0)return;e=a+12|0;g=(f[e>>2]|0)+1|0;f[e>>2]=g;b[g>>0]=c;f[d>>2]=8;f[d>>2]=(b[f[e>>2]>>0]|0)==-1?7:8;f[a>>2]=0;return}function gh(a){a=a|0;f[a+28>>2]=1156;f[a+32>>2]=1156;f[a+36>>2]=1156;f[a+40>>2]=1156;f[a+44>>2]=1156;f[a+48>>2]=1156;f[a+52>>2]=1156;f[a+56>>2]=1156;f[a+60>>2]=1156;f[a+64>>2]=1156;f[a+68>>2]=1156;f[a+72>>2]=1156;f[a+76>>2]=1156;f[a+80>>2]=1156;f[a+84>>2]=1156;f[a+88>>2]=1156;f[a+96>>2]=2628;f[a+92>>2]=1252;f[a+24>>2]=1284;return}function hh(a){a=a|0;f[a+24>>2]=1156;f[a+28>>2]=1156;f[a+32>>2]=1156;f[a+36>>2]=1156;f[a+40>>2]=1156;f[a+44>>2]=1156;f[a+48>>2]=1156;f[a+52>>2]=1156;f[a+56>>2]=1156;f[a+60>>2]=1156;f[a+64>>2]=1156;f[a+68>>2]=1156;f[a+72>>2]=1156;f[a+76>>2]=1156;f[a+80>>2]=1156;f[a+84>>2]=1156;f[a+88>>2]=1156;f[a+92>>2]=1156;f[a+96>>2]=1156;return}function ih(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;f[a+24+(b<<2)>>2]=1156+((d<<1)+c<<4);return}function jh(a){a=a|0;var c=0,d=0;f[a+100>>2]=a+24;f[a+4>>2]=32768;f[a>>2]=0;c=a+8|0;f[c>>2]=12;d=a+12|0;a=(f[d>>2]|0)+-1|0;f[d>>2]=a;if((b[a>>0]|0)!=-1)return;f[c>>2]=13;return}function kh(a){a=a|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0;l=a+8|0;d=f[l>>2]|0;c=12-d|0;if((c|0)>0){e=a+12|0;k=a+16|0;j=c;g=f[a>>2]|0;c=d;do{i=g<<c;f[a>>2]=i;f[l>>2]=0;c=f[e>>2]|0;do if((c|0)!=((f[k>>2]|0)+-1|0)){d=b[c>>0]|0;if(d<<24>>24==-1){h=c+1|0;f[e>>2]=h;c=7;g=1048575;d=i>>>20;break}if(!(i&134217728)){h=c+1|0;f[e>>2]=h;c=8;g=524287;d=i>>>19;break}b[c>>0]=d+1<<24>>24;c=f[e>>2]|0;if((b[c>>0]|0)==-1){d=f[a>>2]&134217727;f[a>>2]=d;h=c+1|0;f[e>>2]=h;c=7;g=1048575;d=d>>>20;break}else{h=c+1|0;f[e>>2]=h;c=8;g=524287;d=(f[a>>2]|0)>>>19;break}}else{h=c+1|0;f[e>>2]=h;c=8;g=524287;d=i>>>19}while(0);b[h>>0]=d;g=f[a>>2]&g;f[a>>2]=g;f[l>>2]=c;j=j-c|0}while((j|0)>0)}else e=a+12|0;c=f[e>>2]|0;d=b[c>>0]|0;if(d<<24>>24==-1)return;do if((c|0)!=((f[a+16>>2]|0)+-1|0)){i=f[a>>2]|0;if(!(i&134217728)){h=c+1|0;f[e>>2]=h;d=a;e=8;g=524287;c=i>>>19;break}b[c>>0]=d+1<<24>>24;c=f[e>>2]|0;if((b[c>>0]|0)==-1){k=f[a>>2]&134217727;f[a>>2]=k;h=c+1|0;f[e>>2]=h;d=a;e=7;g=1048575;c=k>>>20;break}else{h=c+1|0;f[e>>2]=h;d=a;e=8;g=524287;c=(f[a>>2]|0)>>>19;break}}else{h=c+1|0;f[e>>2]=h;d=a;e=8;g=524287;c=(f[a>>2]|0)>>>19}while(0);b[h>>0]=c;f[d>>2]=f[d>>2]&g;f[l>>2]=e;return}function lh(a){a=a|0;f[a+100>>2]=a+96;ch(a,1);ch(a,0);ch(a,1);ch(a,0);return}function mh(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,i=0,j=0;f[a+100>>2]=a+24;f[a+16>>2]=c;f[a+20>>2]=c+d;j=a+12|0;f[j>>2]=c;do if(!d){f[a>>2]=16711680;g=8;c=65280;e=16711680;d=a}else{e=h[c>>0]<<16;f[a>>2]=e;g=c+1|0;if((d|0)==1)i=255;else i=h[g>>0]|0;if((b[c>>0]|0)==-1)if(i>>>0>143){g=8;c=65280;d=a;break}else{c=9;d=7}else{c=8;d=8}f[j>>2]=g;g=d;c=i<<c;d=a}while(0);f[d>>2]=e+c<<7;f[a+8>>2]=g+-7;f[a+4>>2]=32768;return 1}function nh(a){a=a|0;var c=0,d=0,e=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;c=f[a+100>>2]|0;d=f[c>>2]|0;g=f[d>>2]|0;p=a+4|0;i=(f[p>>2]|0)-g|0;f[p>>2]=i;e=f[a>>2]|0;if(e>>>16>>>0<g>>>0){n=i>>>0<g>>>0;f[p>>2]=g;o=f[d+4>>2]|0;f[c>>2]=f[(n?d+8|0:d+12|0)>>2];k=a+8|0;l=a+12|0;m=a+20|0;c=f[k>>2]|0;d=e;j=g;do{if(!c){e=f[l>>2]|0;c=f[m>>2]|0;do if((e|0)==(c|0)){g=8;c=65280}else{g=e+1|0;if((g|0)==(c|0))i=255;else i=h[g>>0]|0;if((b[e>>0]|0)==-1)if(i>>>0>143){g=8;c=65280;break}else{e=9;c=7}else{e=8;c=8}f[l>>2]=g;g=c;c=i<<e}while(0);d=d+c|0;f[a>>2]=d;f[k>>2]=g;c=g}j=j<<1;f[p>>2]=j;d=d<<1;f[a>>2]=d;c=c+-1|0;f[k>>2]=c}while(j>>>0<32768);p=n?o:1-o|0;return p|0}e=e-(g<<16)|0;f[a>>2]=e;if(i&32768|0){p=f[d+4>>2]|0;return p|0}n=i>>>0<g>>>0;o=f[d+4>>2]|0;f[c>>2]=f[(n?d+12|0:d+8|0)>>2];k=a+8|0;l=a+12|0;m=a+20|0;c=f[k>>2]|0;d=e;j=i;do{if(!c){e=f[l>>2]|0;c=f[m>>2]|0;do if((e|0)==(c|0)){g=8;c=65280}else{g=e+1|0;if((g|0)==(c|0))i=255;else i=h[g>>0]|0;if((b[e>>0]|0)==-1)if(i>>>0>143){g=8;c=65280;break}else{e=9;c=7}else{e=8;c=8}f[l>>2]=g;g=c;c=i<<e}while(0);d=d+c|0;f[a>>2]=d;f[k>>2]=g;c=g}j=j<<1;f[p>>2]=j;d=d<<1;f[a>>2]=d;c=c+-1|0;f[k>>2]=c}while(j>>>0<32768);p=n?1-o|0:o;return p|0}function oh(){return Hc(28)|0}function ph(a){a=a|0;if(!a)return;Mc(a);return}function qh(a,c,d){a=a|0;c=c|0;d=d|0;f[a+20>>2]=c;f[a+8>>2]=d;f[a+12>>2]=0;b[a>>0]=0;f[a+4>>2]=0;return}function rh(a){a=a|0;var c=0,d=0,e=0,g=0,h=0;g=a+4|0;c=f[g>>2]|0;do if(!c){f[g>>2]=8;c=a+12|0;e=f[c>>2]|0;if((e|0)==(f[a+8>>2]|0)){b[a>>0]=-1;d=8;c=-1;break}if((b[a>>0]|0)==-1){f[g>>2]=7;d=7}else d=8;h=b[(f[a+20>>2]|0)+e>>0]|0;b[a>>0]=h;f[c>>2]=e+1;c=h}else{d=c;c=b[a>>0]|0}while(0);h=d+-1|0;f[g>>2]=h;return (c&255)>>>h&1|0}function sh(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0;x=u;u=u+16|0;o=x;do if(a>>>0<245){l=a>>>0<11?16:a+11&-8;a=l>>>3;n=f[6184]|0;c=n>>>a;if(c&3|0){b=(c&1^1)+a|0;a=24776+(b<<1<<2)|0;c=a+8|0;d=f[c>>2]|0;e=d+8|0;g=f[e>>2]|0;if((g|0)==(a|0))f[6184]=n&~(1<<b);else{f[g+12>>2]=a;f[c>>2]=g}w=b<<3;f[d+4>>2]=w|3;w=d+w+4|0;f[w>>2]=f[w>>2]|1;w=e;u=x;return w|0}m=f[6186]|0;if(l>>>0>m>>>0){if(c|0){b=2<<a;b=c<<a&(b|0-b);b=(b&0-b)+-1|0;i=b>>>12&16;b=b>>>i;c=b>>>5&8;b=b>>>c;g=b>>>2&4;b=b>>>g;a=b>>>1&2;b=b>>>a;d=b>>>1&1;d=(c|i|g|a|d)+(b>>>d)|0;b=24776+(d<<1<<2)|0;a=b+8|0;g=f[a>>2]|0;i=g+8|0;c=f[i>>2]|0;if((c|0)==(b|0)){a=n&~(1<<d);f[6184]=a}else{f[c+12>>2]=b;f[a>>2]=c;a=n}w=d<<3;h=w-l|0;f[g+4>>2]=l|3;e=g+l|0;f[e+4>>2]=h|1;f[g+w>>2]=h;if(m|0){d=f[6189]|0;b=m>>>3;c=24776+(b<<1<<2)|0;b=1<<b;if(!(a&b)){f[6184]=a|b;b=c;a=c+8|0}else{a=c+8|0;b=f[a>>2]|0}f[a>>2]=d;f[b+12>>2]=d;f[d+8>>2]=b;f[d+12>>2]=c}f[6186]=h;f[6189]=e;w=i;u=x;return w|0}j=f[6185]|0;if(j){c=(j&0-j)+-1|0;i=c>>>12&16;c=c>>>i;h=c>>>5&8;c=c>>>h;k=c>>>2&4;c=c>>>k;d=c>>>1&2;c=c>>>d;a=c>>>1&1;a=f[25040+((h|i|k|d|a)+(c>>>a)<<2)>>2]|0;c=(f[a+4>>2]&-8)-l|0;d=f[a+16+(((f[a+16>>2]|0)==0&1)<<2)>>2]|0;if(!d){k=a;h=c}else{do{i=(f[d+4>>2]&-8)-l|0;k=i>>>0<c>>>0;c=k?i:c;a=k?d:a;d=f[d+16+(((f[d+16>>2]|0)==0&1)<<2)>>2]|0}while((d|0)!=0);k=a;h=c}i=k+l|0;if(i>>>0>k>>>0){e=f[k+24>>2]|0;b=f[k+12>>2]|0;do if((b|0)==(k|0)){a=k+20|0;b=f[a>>2]|0;if(!b){a=k+16|0;b=f[a>>2]|0;if(!b){c=0;break}}while(1){c=b+20|0;d=f[c>>2]|0;if(d|0){b=d;a=c;continue}c=b+16|0;d=f[c>>2]|0;if(!d)break;else{b=d;a=c}}f[a>>2]=0;c=b}else{c=f[k+8>>2]|0;f[c+12>>2]=b;f[b+8>>2]=c;c=b}while(0);do if(e|0){b=f[k+28>>2]|0;a=25040+(b<<2)|0;if((k|0)==(f[a>>2]|0)){f[a>>2]=c;if(!c){f[6185]=j&~(1<<b);break}}else{f[e+16+(((f[e+16>>2]|0)!=(k|0)&1)<<2)>>2]=c;if(!c)break}f[c+24>>2]=e;b=f[k+16>>2]|0;if(b|0){f[c+16>>2]=b;f[b+24>>2]=c}b=f[k+20>>2]|0;if(b|0){f[c+20>>2]=b;f[b+24>>2]=c}}while(0);if(h>>>0<16){w=h+l|0;f[k+4>>2]=w|3;w=k+w+4|0;f[w>>2]=f[w>>2]|1}else{f[k+4>>2]=l|3;f[i+4>>2]=h|1;f[i+h>>2]=h;if(m|0){d=f[6189]|0;b=m>>>3;c=24776+(b<<1<<2)|0;b=1<<b;if(!(n&b)){f[6184]=n|b;b=c;a=c+8|0}else{a=c+8|0;b=f[a>>2]|0}f[a>>2]=d;f[b+12>>2]=d;f[d+8>>2]=b;f[d+12>>2]=c}f[6186]=h;f[6189]=i}w=k+8|0;u=x;return w|0}else m=l}else m=l}else m=l}else if(a>>>0<=4294967231){a=a+11|0;l=a&-8;k=f[6185]|0;if(k){d=0-l|0;a=a>>>8;if(a)if(l>>>0>16777215)j=31;else{n=(a+1048320|0)>>>16&8;v=a<<n;m=(v+520192|0)>>>16&4;v=v<<m;j=(v+245760|0)>>>16&2;j=14-(m|n|j)+(v<<j>>>15)|0;j=l>>>(j+7|0)&1|j<<1}else j=0;c=f[25040+(j<<2)>>2]|0;a:do if(!c){c=0;a=0;v=57}else{a=0;i=c;h=l<<((j|0)==31?0:25-(j>>>1)|0);c=0;while(1){e=(f[i+4>>2]&-8)-l|0;if(e>>>0<d>>>0)if(!e){d=0;c=i;a=i;v=61;break a}else{a=i;d=e}e=f[i+20>>2]|0;i=f[i+16+(h>>>31<<2)>>2]|0;c=(e|0)==0|(e|0)==(i|0)?c:e;e=(i|0)==0;if(e){v=57;break}else h=h<<((e^1)&1)}}while(0);if((v|0)==57){if((c|0)==0&(a|0)==0){a=2<<j;a=k&(a|0-a);if(!a){m=l;break}n=(a&0-a)+-1|0;i=n>>>12&16;n=n>>>i;h=n>>>5&8;n=n>>>h;j=n>>>2&4;n=n>>>j;m=n>>>1&2;n=n>>>m;c=n>>>1&1;a=0;c=f[25040+((h|i|j|m|c)+(n>>>c)<<2)>>2]|0}if(!c){i=a;h=d}else v=61}if((v|0)==61)while(1){v=0;m=(f[c+4>>2]&-8)-l|0;n=m>>>0<d>>>0;d=n?m:d;a=n?c:a;c=f[c+16+(((f[c+16>>2]|0)==0&1)<<2)>>2]|0;if(!c){i=a;h=d;break}else v=61}if((i|0)!=0?h>>>0<((f[6186]|0)-l|0)>>>0:0){g=i+l|0;if(g>>>0<=i>>>0){w=0;u=x;return w|0}e=f[i+24>>2]|0;b=f[i+12>>2]|0;do if((b|0)==(i|0)){a=i+20|0;b=f[a>>2]|0;if(!b){a=i+16|0;b=f[a>>2]|0;if(!b){b=0;break}}while(1){c=b+20|0;d=f[c>>2]|0;if(d|0){b=d;a=c;continue}c=b+16|0;d=f[c>>2]|0;if(!d)break;else{b=d;a=c}}f[a>>2]=0}else{w=f[i+8>>2]|0;f[w+12>>2]=b;f[b+8>>2]=w}while(0);do if(e){a=f[i+28>>2]|0;c=25040+(a<<2)|0;if((i|0)==(f[c>>2]|0)){f[c>>2]=b;if(!b){d=k&~(1<<a);f[6185]=d;break}}else{f[e+16+(((f[e+16>>2]|0)!=(i|0)&1)<<2)>>2]=b;if(!b){d=k;break}}f[b+24>>2]=e;a=f[i+16>>2]|0;if(a|0){f[b+16>>2]=a;f[a+24>>2]=b}a=f[i+20>>2]|0;if(a){f[b+20>>2]=a;f[a+24>>2]=b;d=k}else d=k}else d=k;while(0);do if(h>>>0>=16){f[i+4>>2]=l|3;f[g+4>>2]=h|1;f[g+h>>2]=h;b=h>>>3;if(h>>>0<256){c=24776+(b<<1<<2)|0;a=f[6184]|0;b=1<<b;if(!(a&b)){f[6184]=a|b;b=c;a=c+8|0}else{a=c+8|0;b=f[a>>2]|0}f[a>>2]=g;f[b+12>>2]=g;f[g+8>>2]=b;f[g+12>>2]=c;break}b=h>>>8;if(b)if(h>>>0>16777215)b=31;else{v=(b+1048320|0)>>>16&8;w=b<<v;t=(w+520192|0)>>>16&4;w=w<<t;b=(w+245760|0)>>>16&2;b=14-(t|v|b)+(w<<b>>>15)|0;b=h>>>(b+7|0)&1|b<<1}else b=0;c=25040+(b<<2)|0;f[g+28>>2]=b;a=g+16|0;f[a+4>>2]=0;f[a>>2]=0;a=1<<b;if(!(d&a)){f[6185]=d|a;f[c>>2]=g;f[g+24>>2]=c;f[g+12>>2]=g;f[g+8>>2]=g;break}a=h<<((b|0)==31?0:25-(b>>>1)|0);c=f[c>>2]|0;while(1){if((f[c+4>>2]&-8|0)==(h|0)){v=97;break}d=c+16+(a>>>31<<2)|0;b=f[d>>2]|0;if(!b){v=96;break}else{a=a<<1;c=b}}if((v|0)==96){f[d>>2]=g;f[g+24>>2]=c;f[g+12>>2]=g;f[g+8>>2]=g;break}else if((v|0)==97){v=c+8|0;w=f[v>>2]|0;f[w+12>>2]=g;f[v>>2]=g;f[g+8>>2]=w;f[g+12>>2]=c;f[g+24>>2]=0;break}}else{w=h+l|0;f[i+4>>2]=w|3;w=i+w+4|0;f[w>>2]=f[w>>2]|1}while(0);w=i+8|0;u=x;return w|0}else m=l}else m=l}else m=-1;while(0);c=f[6186]|0;if(c>>>0>=m>>>0){b=c-m|0;a=f[6189]|0;if(b>>>0>15){w=a+m|0;f[6189]=w;f[6186]=b;f[w+4>>2]=b|1;f[a+c>>2]=b;f[a+4>>2]=m|3}else{f[6186]=0;f[6189]=0;f[a+4>>2]=c|3;w=a+c+4|0;f[w>>2]=f[w>>2]|1}w=a+8|0;u=x;return w|0}i=f[6187]|0;if(i>>>0>m>>>0){t=i-m|0;f[6187]=t;w=f[6190]|0;v=w+m|0;f[6190]=v;f[v+4>>2]=t|1;f[w+4>>2]=m|3;w=w+8|0;u=x;return w|0}if(!(f[6302]|0)){f[6304]=4096;f[6303]=4096;f[6305]=-1;f[6306]=-1;f[6307]=0;f[6295]=0;f[6302]=o&-16^1431655768;a=4096}else a=f[6304]|0;j=m+48|0;k=m+47|0;h=a+k|0;e=0-a|0;l=h&e;if(l>>>0<=m>>>0){w=0;u=x;return w|0}a=f[6294]|0;if(a|0?(n=f[6292]|0,o=n+l|0,o>>>0<=n>>>0|o>>>0>a>>>0):0){w=0;u=x;return w|0}b:do if(!(f[6295]&4)){c=f[6190]|0;c:do if(c){d=25184;while(1){a=f[d>>2]|0;if(a>>>0<=c>>>0?(r=d+4|0,(a+(f[r>>2]|0)|0)>>>0>c>>>0):0)break;a=f[d+8>>2]|0;if(!a){v=118;break c}else d=a}b=h-i&e;if(b>>>0<2147483647){a=lj(b|0)|0;if((a|0)==((f[d>>2]|0)+(f[r>>2]|0)|0)){if((a|0)!=(-1|0)){h=b;g=a;v=135;break b}}else{d=a;v=126}}else b=0}else v=118;while(0);do if((v|0)==118){c=lj(0)|0;if((c|0)!=(-1|0)?(b=c,p=f[6303]|0,q=p+-1|0,b=((q&b|0)==0?0:(q+b&0-p)-b|0)+l|0,p=f[6292]|0,q=b+p|0,b>>>0>m>>>0&b>>>0<2147483647):0){r=f[6294]|0;if(r|0?q>>>0<=p>>>0|q>>>0>r>>>0:0){b=0;break}a=lj(b|0)|0;if((a|0)==(c|0)){h=b;g=c;v=135;break b}else{d=a;v=126}}else b=0}while(0);do if((v|0)==126){c=0-b|0;if(!(j>>>0>b>>>0&(b>>>0<2147483647&(d|0)!=(-1|0))))if((d|0)==(-1|0)){b=0;break}else{h=b;g=d;v=135;break b}a=f[6304]|0;a=k-b+a&0-a;if(a>>>0>=2147483647){h=b;g=d;v=135;break b}if((lj(a|0)|0)==(-1|0)){lj(c|0)|0;b=0;break}else{h=a+b|0;g=d;v=135;break b}}while(0);f[6295]=f[6295]|4;v=133}else{b=0;v=133}while(0);if(((v|0)==133?l>>>0<2147483647:0)?(g=lj(l|0)|0,r=lj(0)|0,s=r-g|0,t=s>>>0>(m+40|0)>>>0,!((g|0)==(-1|0)|t^1|g>>>0<r>>>0&((g|0)!=(-1|0)&(r|0)!=(-1|0))^1)):0){h=t?s:b;v=135}if((v|0)==135){b=(f[6292]|0)+h|0;f[6292]=b;if(b>>>0>(f[6293]|0)>>>0)f[6293]=b;j=f[6190]|0;do if(j){b=25184;while(1){a=f[b>>2]|0;c=b+4|0;d=f[c>>2]|0;if((g|0)==(a+d|0)){v=143;break}e=f[b+8>>2]|0;if(!e)break;else b=e}if(((v|0)==143?(f[b+12>>2]&8|0)==0:0)?g>>>0>j>>>0&a>>>0<=j>>>0:0){f[c>>2]=d+h;w=(f[6187]|0)+h|0;t=j+8|0;t=(t&7|0)==0?0:0-t&7;v=j+t|0;t=w-t|0;f[6190]=v;f[6187]=t;f[v+4>>2]=t|1;f[j+w+4>>2]=40;f[6191]=f[6306];break}if(g>>>0<(f[6188]|0)>>>0)f[6188]=g;a=g+h|0;b=25184;while(1){if((f[b>>2]|0)==(a|0)){v=151;break}b=f[b+8>>2]|0;if(!b){a=25184;break}}if((v|0)==151)if(!(f[b+12>>2]&8)){f[b>>2]=g;l=b+4|0;f[l>>2]=(f[l>>2]|0)+h;l=g+8|0;l=g+((l&7|0)==0?0:0-l&7)|0;b=a+8|0;b=a+((b&7|0)==0?0:0-b&7)|0;k=l+m|0;i=b-l-m|0;f[l+4>>2]=m|3;do if((j|0)!=(b|0)){if((f[6189]|0)==(b|0)){w=(f[6186]|0)+i|0;f[6186]=w;f[6189]=k;f[k+4>>2]=w|1;f[k+w>>2]=w;break}a=f[b+4>>2]|0;if((a&3|0)==1){h=a&-8;d=a>>>3;d:do if(a>>>0<256){a=f[b+8>>2]|0;c=f[b+12>>2]|0;if((c|0)==(a|0)){f[6184]=f[6184]&~(1<<d);break}else{f[a+12>>2]=c;f[c+8>>2]=a;break}}else{g=f[b+24>>2]|0;a=f[b+12>>2]|0;do if((a|0)==(b|0)){d=b+16|0;c=d+4|0;a=f[c>>2]|0;if(!a){a=f[d>>2]|0;if(!a){a=0;break}else c=d}while(1){d=a+20|0;e=f[d>>2]|0;if(e|0){a=e;c=d;continue}d=a+16|0;e=f[d>>2]|0;if(!e)break;else{a=e;c=d}}f[c>>2]=0}else{w=f[b+8>>2]|0;f[w+12>>2]=a;f[a+8>>2]=w}while(0);if(!g)break;c=f[b+28>>2]|0;d=25040+(c<<2)|0;do if((f[d>>2]|0)!=(b|0)){f[g+16+(((f[g+16>>2]|0)!=(b|0)&1)<<2)>>2]=a;if(!a)break d}else{f[d>>2]=a;if(a|0)break;f[6185]=f[6185]&~(1<<c);break d}while(0);f[a+24>>2]=g;c=b+16|0;d=f[c>>2]|0;if(d|0){f[a+16>>2]=d;f[d+24>>2]=a}c=f[c+4>>2]|0;if(!c)break;f[a+20>>2]=c;f[c+24>>2]=a}while(0);b=b+h|0;e=h+i|0}else e=i;b=b+4|0;f[b>>2]=f[b>>2]&-2;f[k+4>>2]=e|1;f[k+e>>2]=e;b=e>>>3;if(e>>>0<256){c=24776+(b<<1<<2)|0;a=f[6184]|0;b=1<<b;if(!(a&b)){f[6184]=a|b;b=c;a=c+8|0}else{a=c+8|0;b=f[a>>2]|0}f[a>>2]=k;f[b+12>>2]=k;f[k+8>>2]=b;f[k+12>>2]=c;break}b=e>>>8;do if(!b)b=0;else{if(e>>>0>16777215){b=31;break}v=(b+1048320|0)>>>16&8;w=b<<v;t=(w+520192|0)>>>16&4;w=w<<t;b=(w+245760|0)>>>16&2;b=14-(t|v|b)+(w<<b>>>15)|0;b=e>>>(b+7|0)&1|b<<1}while(0);d=25040+(b<<2)|0;f[k+28>>2]=b;a=k+16|0;f[a+4>>2]=0;f[a>>2]=0;a=f[6185]|0;c=1<<b;if(!(a&c)){f[6185]=a|c;f[d>>2]=k;f[k+24>>2]=d;f[k+12>>2]=k;f[k+8>>2]=k;break}a=e<<((b|0)==31?0:25-(b>>>1)|0);c=f[d>>2]|0;while(1){if((f[c+4>>2]&-8|0)==(e|0)){v=192;break}d=c+16+(a>>>31<<2)|0;b=f[d>>2]|0;if(!b){v=191;break}else{a=a<<1;c=b}}if((v|0)==191){f[d>>2]=k;f[k+24>>2]=c;f[k+12>>2]=k;f[k+8>>2]=k;break}else if((v|0)==192){v=c+8|0;w=f[v>>2]|0;f[w+12>>2]=k;f[v>>2]=k;f[k+8>>2]=w;f[k+12>>2]=c;f[k+24>>2]=0;break}}else{w=(f[6187]|0)+i|0;f[6187]=w;f[6190]=k;f[k+4>>2]=w|1}while(0);w=l+8|0;u=x;return w|0}else a=25184;while(1){b=f[a>>2]|0;if(b>>>0<=j>>>0?(w=b+(f[a+4>>2]|0)|0,w>>>0>j>>>0):0)break;a=f[a+8>>2]|0}e=w+-47|0;a=e+8|0;a=e+((a&7|0)==0?0:0-a&7)|0;e=j+16|0;a=a>>>0<e>>>0?j:a;b=a+8|0;c=h+-40|0;t=g+8|0;t=(t&7|0)==0?0:0-t&7;v=g+t|0;t=c-t|0;f[6190]=v;f[6187]=t;f[v+4>>2]=t|1;f[g+c+4>>2]=40;f[6191]=f[6306];c=a+4|0;f[c>>2]=27;f[b>>2]=f[6296];f[b+4>>2]=f[6297];f[b+8>>2]=f[6298];f[b+12>>2]=f[6299];f[6296]=g;f[6297]=h;f[6299]=0;f[6298]=b;b=a+24|0;do{v=b;b=b+4|0;f[b>>2]=7}while((v+8|0)>>>0<w>>>0);if((a|0)!=(j|0)){g=a-j|0;f[c>>2]=f[c>>2]&-2;f[j+4>>2]=g|1;f[a>>2]=g;b=g>>>3;if(g>>>0<256){c=24776+(b<<1<<2)|0;a=f[6184]|0;b=1<<b;if(!(a&b)){f[6184]=a|b;b=c;a=c+8|0}else{a=c+8|0;b=f[a>>2]|0}f[a>>2]=j;f[b+12>>2]=j;f[j+8>>2]=b;f[j+12>>2]=c;break}b=g>>>8;if(b)if(g>>>0>16777215)c=31;else{v=(b+1048320|0)>>>16&8;w=b<<v;t=(w+520192|0)>>>16&4;w=w<<t;c=(w+245760|0)>>>16&2;c=14-(t|v|c)+(w<<c>>>15)|0;c=g>>>(c+7|0)&1|c<<1}else c=0;d=25040+(c<<2)|0;f[j+28>>2]=c;f[j+20>>2]=0;f[e>>2]=0;b=f[6185]|0;a=1<<c;if(!(b&a)){f[6185]=b|a;f[d>>2]=j;f[j+24>>2]=d;f[j+12>>2]=j;f[j+8>>2]=j;break}a=g<<((c|0)==31?0:25-(c>>>1)|0);c=f[d>>2]|0;while(1){if((f[c+4>>2]&-8|0)==(g|0)){v=213;break}d=c+16+(a>>>31<<2)|0;b=f[d>>2]|0;if(!b){v=212;break}else{a=a<<1;c=b}}if((v|0)==212){f[d>>2]=j;f[j+24>>2]=c;f[j+12>>2]=j;f[j+8>>2]=j;break}else if((v|0)==213){v=c+8|0;w=f[v>>2]|0;f[w+12>>2]=j;f[v>>2]=j;f[j+8>>2]=w;f[j+12>>2]=c;f[j+24>>2]=0;break}}}else{w=f[6188]|0;if((w|0)==0|g>>>0<w>>>0)f[6188]=g;f[6296]=g;f[6297]=h;f[6299]=0;f[6193]=f[6302];f[6192]=-1;f[6197]=24776;f[6196]=24776;f[6199]=24784;f[6198]=24784;f[6201]=24792;f[6200]=24792;f[6203]=24800;f[6202]=24800;f[6205]=24808;f[6204]=24808;f[6207]=24816;f[6206]=24816;f[6209]=24824;f[6208]=24824;f[6211]=24832;f[6210]=24832;f[6213]=24840;f[6212]=24840;f[6215]=24848;f[6214]=24848;f[6217]=24856;f[6216]=24856;f[6219]=24864;f[6218]=24864;f[6221]=24872;f[6220]=24872;f[6223]=24880;f[6222]=24880;f[6225]=24888;f[6224]=24888;f[6227]=24896;f[6226]=24896;f[6229]=24904;f[6228]=24904;f[6231]=24912;f[6230]=24912;f[6233]=24920;f[6232]=24920;f[6235]=24928;f[6234]=24928;f[6237]=24936;f[6236]=24936;f[6239]=24944;f[6238]=24944;f[6241]=24952;f[6240]=24952;f[6243]=24960;f[6242]=24960;f[6245]=24968;f[6244]=24968;f[6247]=24976;f[6246]=24976;f[6249]=24984;f[6248]=24984;f[6251]=24992;f[6250]=24992;f[6253]=25e3;f[6252]=25e3;f[6255]=25008;f[6254]=25008;f[6257]=25016;f[6256]=25016;f[6259]=25024;f[6258]=25024;w=h+-40|0;t=g+8|0;t=(t&7|0)==0?0:0-t&7;v=g+t|0;t=w-t|0;f[6190]=v;f[6187]=t;f[v+4>>2]=t|1;f[g+w+4>>2]=40;f[6191]=f[6306]}while(0);b=f[6187]|0;if(b>>>0>m>>>0){t=b-m|0;f[6187]=t;w=f[6190]|0;v=w+m|0;f[6190]=v;f[v+4>>2]=t|1;f[w+4>>2]=m|3;w=w+8|0;u=x;return w|0}}w=Eh()|0;f[w>>2]=12;w=0;u=x;return w|0}function th(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0,i=0,j=0;if(!a)return;c=a+-8|0;e=f[6188]|0;a=f[a+-4>>2]|0;b=a&-8;j=c+b|0;do if(!(a&1)){d=f[c>>2]|0;if(!(a&3))return;h=c+(0-d)|0;g=d+b|0;if(h>>>0<e>>>0)return;if((f[6189]|0)==(h|0)){a=j+4|0;b=f[a>>2]|0;if((b&3|0)!=3){i=h;b=g;break}f[6186]=g;f[a>>2]=b&-2;f[h+4>>2]=g|1;f[h+g>>2]=g;return}c=d>>>3;if(d>>>0<256){a=f[h+8>>2]|0;b=f[h+12>>2]|0;if((b|0)==(a|0)){f[6184]=f[6184]&~(1<<c);i=h;b=g;break}else{f[a+12>>2]=b;f[b+8>>2]=a;i=h;b=g;break}}e=f[h+24>>2]|0;a=f[h+12>>2]|0;do if((a|0)==(h|0)){c=h+16|0;b=c+4|0;a=f[b>>2]|0;if(!a){a=f[c>>2]|0;if(!a){a=0;break}else b=c}while(1){c=a+20|0;d=f[c>>2]|0;if(d|0){a=d;b=c;continue}c=a+16|0;d=f[c>>2]|0;if(!d)break;else{a=d;b=c}}f[b>>2]=0}else{i=f[h+8>>2]|0;f[i+12>>2]=a;f[a+8>>2]=i}while(0);if(e){b=f[h+28>>2]|0;c=25040+(b<<2)|0;if((f[c>>2]|0)==(h|0)){f[c>>2]=a;if(!a){f[6185]=f[6185]&~(1<<b);i=h;b=g;break}}else{f[e+16+(((f[e+16>>2]|0)!=(h|0)&1)<<2)>>2]=a;if(!a){i=h;b=g;break}}f[a+24>>2]=e;b=h+16|0;c=f[b>>2]|0;if(c|0){f[a+16>>2]=c;f[c+24>>2]=a}b=f[b+4>>2]|0;if(b){f[a+20>>2]=b;f[b+24>>2]=a;i=h;b=g}else{i=h;b=g}}else{i=h;b=g}}else{i=c;h=c}while(0);if(h>>>0>=j>>>0)return;a=j+4|0;d=f[a>>2]|0;if(!(d&1))return;if(!(d&2)){if((f[6190]|0)==(j|0)){j=(f[6187]|0)+b|0;f[6187]=j;f[6190]=i;f[i+4>>2]=j|1;if((i|0)!=(f[6189]|0))return;f[6189]=0;f[6186]=0;return}if((f[6189]|0)==(j|0)){j=(f[6186]|0)+b|0;f[6186]=j;f[6189]=h;f[i+4>>2]=j|1;f[h+j>>2]=j;return}e=(d&-8)+b|0;c=d>>>3;do if(d>>>0<256){b=f[j+8>>2]|0;a=f[j+12>>2]|0;if((a|0)==(b|0)){f[6184]=f[6184]&~(1<<c);break}else{f[b+12>>2]=a;f[a+8>>2]=b;break}}else{g=f[j+24>>2]|0;a=f[j+12>>2]|0;do if((a|0)==(j|0)){c=j+16|0;b=c+4|0;a=f[b>>2]|0;if(!a){a=f[c>>2]|0;if(!a){c=0;break}else b=c}while(1){c=a+20|0;d=f[c>>2]|0;if(d|0){a=d;b=c;continue}c=a+16|0;d=f[c>>2]|0;if(!d)break;else{a=d;b=c}}f[b>>2]=0;c=a}else{c=f[j+8>>2]|0;f[c+12>>2]=a;f[a+8>>2]=c;c=a}while(0);if(g|0){a=f[j+28>>2]|0;b=25040+(a<<2)|0;if((f[b>>2]|0)==(j|0)){f[b>>2]=c;if(!c){f[6185]=f[6185]&~(1<<a);break}}else{f[g+16+(((f[g+16>>2]|0)!=(j|0)&1)<<2)>>2]=c;if(!c)break}f[c+24>>2]=g;a=j+16|0;b=f[a>>2]|0;if(b|0){f[c+16>>2]=b;f[b+24>>2]=c}a=f[a+4>>2]|0;if(a|0){f[c+20>>2]=a;f[a+24>>2]=c}}}while(0);f[i+4>>2]=e|1;f[h+e>>2]=e;if((i|0)==(f[6189]|0)){f[6186]=e;return}}else{f[a>>2]=d&-2;f[i+4>>2]=b|1;f[h+b>>2]=b;e=b}a=e>>>3;if(e>>>0<256){c=24776+(a<<1<<2)|0;b=f[6184]|0;a=1<<a;if(!(b&a)){f[6184]=b|a;a=c;b=c+8|0}else{b=c+8|0;a=f[b>>2]|0}f[b>>2]=i;f[a+12>>2]=i;f[i+8>>2]=a;f[i+12>>2]=c;return}a=e>>>8;if(a)if(e>>>0>16777215)a=31;else{h=(a+1048320|0)>>>16&8;j=a<<h;g=(j+520192|0)>>>16&4;j=j<<g;a=(j+245760|0)>>>16&2;a=14-(g|h|a)+(j<<a>>>15)|0;a=e>>>(a+7|0)&1|a<<1}else a=0;d=25040+(a<<2)|0;f[i+28>>2]=a;f[i+20>>2]=0;f[i+16>>2]=0;b=f[6185]|0;c=1<<a;do if(b&c){b=e<<((a|0)==31?0:25-(a>>>1)|0);c=f[d>>2]|0;while(1){if((f[c+4>>2]&-8|0)==(e|0)){a=73;break}d=c+16+(b>>>31<<2)|0;a=f[d>>2]|0;if(!a){a=72;break}else{b=b<<1;c=a}}if((a|0)==72){f[d>>2]=i;f[i+24>>2]=c;f[i+12>>2]=i;f[i+8>>2]=i;break}else if((a|0)==73){h=c+8|0;j=f[h>>2]|0;f[j+12>>2]=i;f[h>>2]=i;f[i+8>>2]=j;f[i+12>>2]=c;f[i+24>>2]=0;break}}else{f[6185]=b|c;f[d>>2]=i;f[i+24>>2]=d;f[i+12>>2]=i;f[i+8>>2]=i}while(0);j=(f[6192]|0)+-1|0;f[6192]=j;if(!j)a=25192;else return;while(1){a=f[a>>2]|0;if(!a)break;else a=a+8|0}f[6192]=-1;return}function uh(a,b){a=a|0;b=b|0;var c=0;if(a){c=X(b,a)|0;if((b|a)>>>0>65535)c=((c>>>0)/(a>>>0)|0|0)==(b|0)?c:-1}else c=0;a=sh(c)|0;if(!a)return a|0;if(!(f[a+-4>>2]&3))return a|0;ij(a|0,0,c|0)|0;return a|0}function vh(a,b){a=a|0;b=b|0;var c=0,d=0;if(!a){b=sh(b)|0;return b|0}if(b>>>0>4294967231){b=Eh()|0;f[b>>2]=12;b=0;return b|0}c=wh(a+-8|0,b>>>0<11?16:b+11&-8)|0;if(c|0){b=c+8|0;return b|0}c=sh(b)|0;if(!c){b=0;return b|0}d=f[a+-4>>2]|0;d=(d&-8)-((d&3|0)==0?8:4)|0;hj(c|0,a|0,(d>>>0<b>>>0?d:b)|0)|0;th(a);b=c;return b|0}function wh(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;l=a+4|0;m=f[l>>2]|0;c=m&-8;i=a+c|0;if(!(m&3)){if(b>>>0<256){a=0;return a|0}if(c>>>0>=(b+4|0)>>>0?(c-b|0)>>>0<=f[6304]<<1>>>0:0)return a|0;a=0;return a|0}if(c>>>0>=b>>>0){c=c-b|0;if(c>>>0<=15)return a|0;k=a+b|0;f[l>>2]=m&1|b|2;f[k+4>>2]=c|3;m=i+4|0;f[m>>2]=f[m>>2]|1;xh(k,c);return a|0}if((f[6190]|0)==(i|0)){k=(f[6187]|0)+c|0;c=k-b|0;d=a+b|0;if(k>>>0<=b>>>0){a=0;return a|0}f[l>>2]=m&1|b|2;f[d+4>>2]=c|1;f[6190]=d;f[6187]=c;return a|0}if((f[6189]|0)==(i|0)){d=(f[6186]|0)+c|0;if(d>>>0<b>>>0){a=0;return a|0}c=d-b|0;if(c>>>0>15){k=a+b|0;d=a+d|0;f[l>>2]=m&1|b|2;f[k+4>>2]=c|1;f[d>>2]=c;d=d+4|0;f[d>>2]=f[d>>2]&-2;d=k}else{f[l>>2]=m&1|d|2;d=a+d+4|0;f[d>>2]=f[d>>2]|1;d=0;c=0}f[6186]=c;f[6189]=d;return a|0}d=f[i+4>>2]|0;if(d&2|0){a=0;return a|0}j=(d&-8)+c|0;if(j>>>0<b>>>0){a=0;return a|0}k=j-b|0;e=d>>>3;do if(d>>>0<256){d=f[i+8>>2]|0;c=f[i+12>>2]|0;if((c|0)==(d|0)){f[6184]=f[6184]&~(1<<e);break}else{f[d+12>>2]=c;f[c+8>>2]=d;break}}else{h=f[i+24>>2]|0;c=f[i+12>>2]|0;do if((c|0)==(i|0)){e=i+16|0;d=e+4|0;c=f[d>>2]|0;if(!c){c=f[e>>2]|0;if(!c){e=0;break}else g=e}else g=d;while(1){e=c+20|0;d=f[e>>2]|0;if(d|0){c=d;g=e;continue}d=c+16|0;e=f[d>>2]|0;if(!e)break;else{c=e;g=d}}f[g>>2]=0;e=c}else{e=f[i+8>>2]|0;f[e+12>>2]=c;f[c+8>>2]=e;e=c}while(0);if(h|0){c=f[i+28>>2]|0;d=25040+(c<<2)|0;if((f[d>>2]|0)==(i|0)){f[d>>2]=e;if(!e){f[6185]=f[6185]&~(1<<c);break}}else{f[h+16+(((f[h+16>>2]|0)!=(i|0)&1)<<2)>>2]=e;if(!e)break}f[e+24>>2]=h;c=i+16|0;d=f[c>>2]|0;if(d|0){f[e+16>>2]=d;f[d+24>>2]=e}c=f[c+4>>2]|0;if(c|0){f[e+20>>2]=c;f[c+24>>2]=e}}}while(0);if(k>>>0<16){f[l>>2]=j|m&1|2;m=a+j+4|0;f[m>>2]=f[m>>2]|1;return a|0}else{i=a+b|0;f[l>>2]=m&1|b|2;f[i+4>>2]=k|3;m=a+j+4|0;f[m>>2]=f[m>>2]|1;xh(i,k);return a|0}return 0}function xh(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0;i=a+b|0;c=f[a+4>>2]|0;do if(!(c&1)){e=f[a>>2]|0;if(!(c&3))return;h=a+(0-e)|0;b=e+b|0;if((f[6189]|0)==(h|0)){a=i+4|0;c=f[a>>2]|0;if((c&3|0)!=3)break;f[6186]=b;f[a>>2]=c&-2;f[h+4>>2]=b|1;f[i>>2]=b;return}d=e>>>3;if(e>>>0<256){a=f[h+8>>2]|0;c=f[h+12>>2]|0;if((c|0)==(a|0)){f[6184]=f[6184]&~(1<<d);break}else{f[a+12>>2]=c;f[c+8>>2]=a;break}}g=f[h+24>>2]|0;a=f[h+12>>2]|0;do if((a|0)==(h|0)){d=h+16|0;c=d+4|0;a=f[c>>2]|0;if(!a){a=f[d>>2]|0;if(!a){a=0;break}else c=d}while(1){d=a+20|0;e=f[d>>2]|0;if(e|0){a=e;c=d;continue}d=a+16|0;e=f[d>>2]|0;if(!e)break;else{a=e;c=d}}f[c>>2]=0}else{e=f[h+8>>2]|0;f[e+12>>2]=a;f[a+8>>2]=e}while(0);if(g){c=f[h+28>>2]|0;d=25040+(c<<2)|0;if((f[d>>2]|0)==(h|0)){f[d>>2]=a;if(!a){f[6185]=f[6185]&~(1<<c);break}}else{f[g+16+(((f[g+16>>2]|0)!=(h|0)&1)<<2)>>2]=a;if(!a)break}f[a+24>>2]=g;c=h+16|0;d=f[c>>2]|0;if(d|0){f[a+16>>2]=d;f[d+24>>2]=a}c=f[c+4>>2]|0;if(c){f[a+20>>2]=c;f[c+24>>2]=a}}}else h=a;while(0);a=i+4|0;d=f[a>>2]|0;if(!(d&2)){if((f[6190]|0)==(i|0)){i=(f[6187]|0)+b|0;f[6187]=i;f[6190]=h;f[h+4>>2]=i|1;if((h|0)!=(f[6189]|0))return;f[6189]=0;f[6186]=0;return}if((f[6189]|0)==(i|0)){i=(f[6186]|0)+b|0;f[6186]=i;f[6189]=h;f[h+4>>2]=i|1;f[h+i>>2]=i;return}e=(d&-8)+b|0;c=d>>>3;do if(d>>>0<256){a=f[i+8>>2]|0;b=f[i+12>>2]|0;if((b|0)==(a|0)){f[6184]=f[6184]&~(1<<c);break}else{f[a+12>>2]=b;f[b+8>>2]=a;break}}else{g=f[i+24>>2]|0;b=f[i+12>>2]|0;do if((b|0)==(i|0)){c=i+16|0;a=c+4|0;b=f[a>>2]|0;if(!b){b=f[c>>2]|0;if(!b){c=0;break}else a=c}while(1){c=b+20|0;d=f[c>>2]|0;if(d|0){b=d;a=c;continue}c=b+16|0;d=f[c>>2]|0;if(!d)break;else{b=d;a=c}}f[a>>2]=0;c=b}else{c=f[i+8>>2]|0;f[c+12>>2]=b;f[b+8>>2]=c;c=b}while(0);if(g|0){b=f[i+28>>2]|0;a=25040+(b<<2)|0;if((f[a>>2]|0)==(i|0)){f[a>>2]=c;if(!c){f[6185]=f[6185]&~(1<<b);break}}else{f[g+16+(((f[g+16>>2]|0)!=(i|0)&1)<<2)>>2]=c;if(!c)break}f[c+24>>2]=g;b=i+16|0;a=f[b>>2]|0;if(a|0){f[c+16>>2]=a;f[a+24>>2]=c}b=f[b+4>>2]|0;if(b|0){f[c+20>>2]=b;f[b+24>>2]=c}}}while(0);f[h+4>>2]=e|1;f[h+e>>2]=e;if((h|0)==(f[6189]|0)){f[6186]=e;return}}else{f[a>>2]=d&-2;f[h+4>>2]=b|1;f[h+b>>2]=b;e=b}b=e>>>3;if(e>>>0<256){c=24776+(b<<1<<2)|0;a=f[6184]|0;b=1<<b;if(!(a&b)){f[6184]=a|b;b=c;a=c+8|0}else{a=c+8|0;b=f[a>>2]|0}f[a>>2]=h;f[b+12>>2]=h;f[h+8>>2]=b;f[h+12>>2]=c;return}b=e>>>8;if(b)if(e>>>0>16777215)b=31;else{g=(b+1048320|0)>>>16&8;i=b<<g;d=(i+520192|0)>>>16&4;i=i<<d;b=(i+245760|0)>>>16&2;b=14-(d|g|b)+(i<<b>>>15)|0;b=e>>>(b+7|0)&1|b<<1}else b=0;d=25040+(b<<2)|0;f[h+28>>2]=b;f[h+20>>2]=0;f[h+16>>2]=0;a=f[6185]|0;c=1<<b;if(!(a&c)){f[6185]=a|c;f[d>>2]=h;f[h+24>>2]=d;f[h+12>>2]=h;f[h+8>>2]=h;return}a=e<<((b|0)==31?0:25-(b>>>1)|0);c=f[d>>2]|0;while(1){if((f[c+4>>2]&-8|0)==(e|0)){b=69;break}d=c+16+(a>>>31<<2)|0;b=f[d>>2]|0;if(!b){b=68;break}else{a=a<<1;c=b}}if((b|0)==68){f[d>>2]=h;f[h+24>>2]=c;f[h+12>>2]=h;f[h+8>>2]=h;return}else if((b|0)==69){g=c+8|0;i=f[g>>2]|0;f[i+12>>2]=h;f[g>>2]=h;f[h+8>>2]=i;f[h+12>>2]=c;f[h+24>>2]=0;return}}function yh(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,g=0,h=0,i=0;a=a>>>0>16?a:16;if(a+-1&a){c=16;while(1)if(c>>>0<a>>>0)c=c<<1;else{a=c;break}}if((-64-a|0)>>>0<=b>>>0){h=Eh()|0;f[h>>2]=12;h=0;return h|0}g=b>>>0<11?16:b+11&-8;c=sh(g+12+a|0)|0;if(!c){h=0;return h|0}e=c+-8|0;do if(a+-1&c){d=(c+a+-1&0-a)+-8|0;b=e;d=(d-b|0)>>>0>15?d:d+a|0;b=d-b|0;a=c+-4|0;i=f[a>>2]|0;c=(i&-8)-b|0;if(!(i&3)){f[d>>2]=(f[e>>2]|0)+b;f[d+4>>2]=c;a=d;b=d;break}else{i=d+4|0;f[i>>2]=c|f[i>>2]&1|2;c=d+c+4|0;f[c>>2]=f[c>>2]|1;f[a>>2]=b|f[a>>2]&1|2;f[i>>2]=f[i>>2]|1;xh(e,b);a=d;b=d;break}}else{a=e;b=e}while(0);a=a+4|0;c=f[a>>2]|0;if(c&3|0?(h=c&-8,h>>>0>(g+16|0)>>>0):0){i=h-g|0;e=b+g|0;f[a>>2]=g|c&1|2;f[e+4>>2]=i|3;h=b+h+4|0;f[h>>2]=f[h>>2]|1;xh(e,i)}i=b+8|0;return i|0}function zh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;do if((b|0)!=8){d=b>>>2;if((b&3|0)!=0|(d|0)==0){a=22;return a|0}if(d+1073741823&d|0){a=22;return a|0}if((-64-b|0)>>>0<c>>>0){a=12;return a|0}else{b=yh(b>>>0>16?b:16,c)|0;break}}else b=sh(c)|0;while(0);if(!b){a=12;return a|0}f[a>>2]=b;a=0;return a|0}function Ah(a){a=a|0;var b=0,c=0;b=u;u=u+16|0;c=b;a=Fh(f[a+60>>2]|0)|0;f[c>>2]=a;a=Dh(za(6,c|0)|0)|0;u=b;return a|0}function Bh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;m=u;u=u+48|0;k=m+16|0;g=m;e=m+32|0;i=a+28|0;d=f[i>>2]|0;f[e>>2]=d;j=a+20|0;d=(f[j>>2]|0)-d|0;f[e+4>>2]=d;f[e+8>>2]=b;f[e+12>>2]=c;d=d+c|0;h=a+60|0;f[g>>2]=f[h>>2];f[g+4>>2]=e;f[g+8>>2]=2;g=Dh(va(146,g|0)|0)|0;a:do if((d|0)!=(g|0)){b=2;while(1){if((g|0)<0)break;d=d-g|0;o=f[e+4>>2]|0;n=g>>>0>o>>>0;e=n?e+8|0:e;b=b+(n<<31>>31)|0;o=g-(n?o:0)|0;f[e>>2]=(f[e>>2]|0)+o;n=e+4|0;f[n>>2]=(f[n>>2]|0)-o;f[k>>2]=f[h>>2];f[k+4>>2]=e;f[k+8>>2]=b;g=Dh(va(146,k|0)|0)|0;if((d|0)==(g|0)){l=3;break a}}f[a+16>>2]=0;f[i>>2]=0;f[j>>2]=0;f[a>>2]=f[a>>2]|32;if((b|0)==2)c=0;else c=c-(f[e+4>>2]|0)|0}else l=3;while(0);if((l|0)==3){o=f[a+44>>2]|0;f[a+16>>2]=o+(f[a+48>>2]|0);f[i>>2]=o;f[j>>2]=o}u=m;return c|0}function Ch(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0;e=u;u=u+32|0;g=e;d=e+20|0;f[g>>2]=f[a+60>>2];f[g+4>>2]=0;f[g+8>>2]=b;f[g+12>>2]=d;f[g+16>>2]=c;if((Dh(ta(140,g|0)|0)|0)<0){f[d>>2]=-1;a=-1}else a=f[d>>2]|0;u=e;return a|0}function Dh(a){a=a|0;var b=0;if(a>>>0>4294963200){b=Eh()|0;f[b>>2]=0-a;a=-1}return a|0}function Eh(){return 25296}function Fh(a){a=a|0;return a|0}function Gh(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0;k=u;u=u+32|0;e=k;i=k+16|0;f[i>>2]=c;g=i+4|0;j=a+48|0;l=f[j>>2]|0;f[g>>2]=d-((l|0)!=0&1);h=a+44|0;f[i+8>>2]=f[h>>2];f[i+12>>2]=l;f[e>>2]=f[a+60>>2];f[e+4>>2]=i;f[e+8>>2]=2;e=Dh(ua(145,e|0)|0)|0;if((e|0)>=1){i=f[g>>2]|0;if(e>>>0>i>>>0){g=f[h>>2]|0;h=a+4|0;f[h>>2]=g;f[a+8>>2]=g+(e-i);if(!(f[j>>2]|0))e=d;else{f[h>>2]=g+1;b[c+(d+-1)>>0]=b[g>>0]|0;e=d}}}else f[a>>2]=f[a>>2]|e&48^16;u=k;return e|0}function Hh(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0;g=u;u=u+32|0;e=g;f[a+36>>2]=61;if((f[a>>2]&64|0)==0?(f[e>>2]=f[a+60>>2],f[e+4>>2]=21523,f[e+8>>2]=g+16,ya(54,e|0)|0):0)b[a+75>>0]=-1;e=Bh(a,c,d)|0;u=g;return e|0}function Ih(){return 2792}function Jh(a,c){a=a|0;c=c|0;var d=0,e=0;d=b[a>>0]|0;e=b[c>>0]|0;if(d<<24>>24==0?1:d<<24>>24!=e<<24>>24)a=e;else{do{a=a+1|0;c=c+1|0;d=b[a>>0]|0;e=b[c>>0]|0}while(!(d<<24>>24==0?1:d<<24>>24!=e<<24>>24));a=e}return (d&255)-(a&255)|0}function Kh(a){a=a|0;var c=0,d=0,e=0;e=a;a:do if(!(e&3))d=4;else{c=e;while(1){if(!(b[a>>0]|0)){a=c;break a}a=a+1|0;c=a;if(!(c&3)){d=4;break}}}while(0);if((d|0)==4){while(1){c=f[a>>2]|0;if(!((c&-2139062144^-2139062144)&c+-16843009))a=a+4|0;else break}if((c&255)<<24>>24)do a=a+1|0;while((b[a>>0]|0)!=0)}return a-e|0}function Lh(a,b){a=a|0;b=b|0;var c=0;c=Kh(a)|0;return ((Mh(a,1,c,b)|0)!=(c|0))<<31>>31|0}function Mh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0;e=X(c,b)|0;c=(b|0)==0?0:c;if((f[d+76>>2]|0)>-1){g=(Qh(d)|0)==0;a=Th(a,e,d)|0;if(!g)Oh(d)}else a=Th(a,e,d)|0;if((a|0)!=(e|0))c=(a>>>0)/(b>>>0)|0;return c|0}function Nh(a){a=a|0;var b=0;if(f[a+68>>2]|0){b=f[a+116>>2]|0;a=a+112|0;if(b|0)f[b+112>>2]=f[a>>2];a=f[a>>2]|0;if(!a)a=(Ph()|0)+232|0;else a=a+116|0;f[a>>2]=b}return}function Oh(a){a=a|0;return}function Ph(){return Ih()|0}function Qh(a){a=a|0;return 0}function Rh(a,c){a=a|0;c=c|0;var d=0,e=0,g=0,i=0,j=0,k=0,l=0;l=u;u=u+16|0;j=l;k=c&255;b[j>>0]=k;e=a+16|0;g=f[e>>2]|0;if(!g)if(!(Sh(a)|0)){g=f[e>>2]|0;i=4}else d=-1;else i=4;do if((i|0)==4){i=a+20|0;e=f[i>>2]|0;if(e>>>0<g>>>0?(d=c&255,(d|0)!=(b[a+75>>0]|0)):0){f[i>>2]=e+1;b[e>>0]=k;break}if((Ma[f[a+36>>2]&63](a,j,1)|0)==1)d=h[j>>0]|0;else d=-1}while(0);u=l;return d|0}function Sh(a){a=a|0;var c=0,d=0;c=a+74|0;d=b[c>>0]|0;b[c>>0]=d+255|d;c=f[a>>2]|0;if(!(c&8)){f[a+8>>2]=0;f[a+4>>2]=0;d=f[a+44>>2]|0;f[a+28>>2]=d;f[a+20>>2]=d;f[a+16>>2]=d+(f[a+48>>2]|0);a=0}else{f[a>>2]=c|32;a=-1}return a|0}function Th(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0;e=d+16|0;g=f[e>>2]|0;if(!g)if(!(Sh(d)|0)){g=f[e>>2]|0;h=5}else e=0;else h=5;a:do if((h|0)==5){j=d+20|0;i=f[j>>2]|0;e=i;if((g-i|0)>>>0<c>>>0){e=Ma[f[d+36>>2]&63](d,a,c)|0;break}b:do if((b[d+75>>0]|0)>-1){i=c;while(1){if(!i){h=0;g=a;break b}g=i+-1|0;if((b[a+g>>0]|0)==10)break;else i=g}e=Ma[f[d+36>>2]&63](d,a,i)|0;if(e>>>0<i>>>0)break a;h=i;g=a+i|0;c=c-i|0;e=f[j>>2]|0}else{h=0;g=a}while(0);hj(e|0,g|0,c|0)|0;f[j>>2]=(f[j>>2]|0)+c;e=h+c|0}while(0);return e|0}function Uh(a,b){a=a|0;b=b|0;if(!b)b=0;else b=Vh(f[b>>2]|0,f[b+4>>2]|0,a)|0;return (b|0?b:a)|0}function Vh(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;o=(f[a>>2]|0)+1794895138|0;h=Wh(f[a+8>>2]|0,o)|0;e=Wh(f[a+12>>2]|0,o)|0;g=Wh(f[a+16>>2]|0,o)|0;a:do if((h>>>0<c>>>2>>>0?(n=c-(h<<2)|0,e>>>0<n>>>0&g>>>0<n>>>0):0)?((g|e)&3|0)==0:0){n=e>>>2;m=g>>>2;l=0;while(1){j=h>>>1;k=l+j|0;i=k<<1;g=i+n|0;e=Wh(f[a+(g<<2)>>2]|0,o)|0;g=Wh(f[a+(g+1<<2)>>2]|0,o)|0;if(!(g>>>0<c>>>0&e>>>0<(c-g|0)>>>0)){e=0;break a}if(b[a+(g+e)>>0]|0){e=0;break a}e=Jh(d,a+g|0)|0;if(!e)break;e=(e|0)<0;if((h|0)==1){e=0;break a}else{l=e?l:k;h=e?j:h-j|0}}e=i+m|0;g=Wh(f[a+(e<<2)>>2]|0,o)|0;e=Wh(f[a+(e+1<<2)>>2]|0,o)|0;if(e>>>0<c>>>0&g>>>0<(c-e|0)>>>0)e=(b[a+(e+g)>>0]|0)==0?a+e|0:0;else e=0}else e=0;while(0);return e|0}function Wh(a,b){a=a|0;b=b|0;var c=0;c=gj(a|0)|0;return ((b|0)==0?a:c)|0}function Xh(a,c){a=a|0;c=c|0;var d=0,e=0,g=0,h=0,i=0;i=u;u=u+48|0;h=i+32|0;g=i+16|0;d=i;if(Yh(22305,b[c>>0]|0,4)|0){e=Zh(c)|0;f[d>>2]=a;f[d+4>>2]=e|32768;f[d+8>>2]=438;d=Dh(xa(5,d|0)|0)|0;if((d|0)>=0){if(e&524288|0){f[g>>2]=d;f[g+4>>2]=2;f[g+8>>2]=1;wa(221,g|0)|0}a=_h(d,c)|0;if(!a){f[h>>2]=d;za(6,h|0)|0;a=0}}else a=0}else{a=Eh()|0;f[a>>2]=22;a=0}u=i;return a|0}function Yh(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0;h=c&255;e=(d|0)!=0;a:do if(e&(a&3|0)!=0){g=c&255;while(1){if((b[a>>0]|0)==g<<24>>24){i=6;break a}a=a+1|0;d=d+-1|0;e=(d|0)!=0;if(!(e&(a&3|0)!=0)){i=5;break}}}else i=5;while(0);if((i|0)==5)if(e)i=6;else d=0;b:do if((i|0)==6){g=c&255;if((b[a>>0]|0)!=g<<24>>24){e=X(h,16843009)|0;c:do if(d>>>0>3)while(1){h=f[a>>2]^e;if((h&-2139062144^-2139062144)&h+-16843009|0)break;a=a+4|0;d=d+-4|0;if(d>>>0<=3){i=11;break c}}else i=11;while(0);if((i|0)==11)if(!d){d=0;break}while(1){if((b[a>>0]|0)==g<<24>>24)break b;a=a+1|0;d=d+-1|0;if(!d){d=0;break}}}}while(0);return (d|0?a:0)|0}function Zh(a){a=a|0;var c=0,d=0,e=0;d=($h(a,43)|0)==0;c=b[a>>0]|0;d=d?c<<24>>24!=114&1:2;e=($h(a,120)|0)==0;d=e?d:d|128;a=($h(a,101)|0)==0;a=a?d:d|524288;a=c<<24>>24==114?a:a|64;a=c<<24>>24==119?a|512:a;return (c<<24>>24==97?a|1024:a)|0}function _h(a,c){a=a|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;n=u;u=u+64|0;m=n+40|0;k=n+24|0;j=n+16|0;g=n;l=n+56|0;e=b[c>>0]|0;if(Yh(22305,e<<24>>24,4)|0){d=sh(1156)|0;if(!d)d=0;else{h=d;i=h+124|0;do{f[h>>2]=0;h=h+4|0}while((h|0)<(i|0));if(!($h(c,43)|0))f[d>>2]=e<<24>>24==114?8:4;if($h(c,101)|0){f[g>>2]=a;f[g+4>>2]=2;f[g+8>>2]=1;wa(221,g|0)|0;e=b[c>>0]|0}if(e<<24>>24==97){f[j>>2]=a;f[j+4>>2]=3;e=wa(221,j|0)|0;if(!(e&1024)){f[k>>2]=a;f[k+4>>2]=4;f[k+8>>2]=e|1024;wa(221,k|0)|0}c=f[d>>2]|128;f[d>>2]=c}else c=f[d>>2]|0;f[d+60>>2]=a;f[d+44>>2]=d+132;f[d+48>>2]=1024;e=d+75|0;b[e>>0]=-1;if((c&8|0)==0?(f[m>>2]=a,f[m+4>>2]=21523,f[m+8>>2]=l,(ya(54,m|0)|0)==0):0)b[e>>0]=10;f[d+32>>2]=62;f[d+36>>2]=61;f[d+40>>2]=2;f[d+12>>2]=1;if(!(f[6309]|0))f[d+76>>2]=-1;ai(d)|0}}else{d=Eh()|0;f[d>>2]=22;d=0}u=n;return d|0}function $h(a,c){a=a|0;c=c|0;a=di(a,c)|0;return ((b[a>>0]|0)==(c&255)<<24>>24?a:0)|0}function ai(a){a=a|0;var b=0,c=0;b=bi()|0;f[a+56>>2]=f[b>>2];c=f[b>>2]|0;if(c|0)f[c+52>>2]=a;f[b>>2]=a;ci();return a|0}function bi(){ra(25300);return 25308}function ci(){Aa(25300);return}function di(a,c){a=a|0;c=c|0;var d=0,e=0,g=0;e=c&255;a:do if(!e)a=a+(Kh(a)|0)|0;else{if(a&3){d=c&255;do{g=b[a>>0]|0;if(g<<24>>24==0?1:g<<24>>24==d<<24>>24)break a;a=a+1|0}while((a&3|0)!=0)}e=X(e,16843009)|0;d=f[a>>2]|0;b:do if(!((d&-2139062144^-2139062144)&d+-16843009))do{g=d^e;if((g&-2139062144^-2139062144)&g+-16843009|0)break b;a=a+4|0;d=f[a>>2]|0}while(!((d&-2139062144^-2139062144)&d+-16843009|0));while(0);d=c&255;while(1){g=b[a>>0]|0;if(g<<24>>24==0?1:g<<24>>24==d<<24>>24)break;else a=a+1|0}}while(0);return a|0}function ei(a){a=a|0;var b=0,c=0,d=0,e=0,g=0;if((f[a+76>>2]|0)>-1)e=Qh(a)|0;else e=0;Nh(a);g=(f[a>>2]&1|0)!=0;if(!g){d=bi()|0;c=f[a+52>>2]|0;b=a+56|0;if(c|0)f[c+56>>2]=f[b>>2];b=f[b>>2]|0;if(b|0)f[b+52>>2]=c;if((f[d>>2]|0)==(a|0))f[d>>2]=b;ci()}b=fi(a)|0;b=Ka[f[a+12>>2]&15](a)|0|b;c=f[a+92>>2]|0;if(c|0)th(c);if(g){if(e|0)Oh(a)}else th(a);return b|0}
function fi(a){a=a|0;var b=0,c=0;do if(a){if((f[a+76>>2]|0)<=-1){b=gi(a)|0;break}c=(Qh(a)|0)==0;b=gi(a)|0;if(!c)Oh(a)}else{if(!(f[697]|0))b=0;else b=fi(f[697]|0)|0;a=bi()|0;a=f[a>>2]|0;if(a)do{if((f[a+76>>2]|0)>-1)c=Qh(a)|0;else c=0;if((f[a+20>>2]|0)>>>0>(f[a+28>>2]|0)>>>0)b=gi(a)|0|b;if(c|0)Oh(a);a=f[a+56>>2]|0}while((a|0)!=0);ci()}while(0);return b|0}function gi(a){a=a|0;var b=0,c=0,d=0,e=0,g=0,h=0;b=a+20|0;h=a+28|0;if((f[b>>2]|0)>>>0>(f[h>>2]|0)>>>0?(Ma[f[a+36>>2]&63](a,0,0)|0,(f[b>>2]|0)==0):0)a=-1;else{c=a+4|0;d=f[c>>2]|0;e=a+8|0;g=f[e>>2]|0;if(d>>>0<g>>>0)Ma[f[a+40>>2]&63](a,d-g|0,1)|0;f[a+16>>2]=0;f[h>>2]=0;f[b>>2]=0;f[e>>2]=0;f[c>>2]=0;a=0}return a|0}function hi(a,b){a=+a;b=b|0;var c=0,d=0;if((b|0)<=1023){if((b|0)<-1022){a=a*2.2250738585072014e-308;d=(b|0)<-2044;c=b+2044|0;a=d?a*2.2250738585072014e-308:a;b=d?((c|0)>-1022?c:-1022):b+1022|0}}else{a=a*8988465674311579538646525.0e283;c=(b|0)>2046;d=b+-2046|0;a=c?a*8988465674311579538646525.0e283:a;b=c?((d|0)<1023?d:1023):b+-1023|0}c=fj(b+1023|0,0,52)|0;d=I;f[s>>2]=c;f[s+4>>2]=d;return +(a*+p[s>>3])}function ii(a){a=a|0;var c=0,d=0;c=a+74|0;d=b[c>>0]|0;b[c>>0]=d+255|d;c=a+20|0;d=a+28|0;if((f[c>>2]|0)>>>0>(f[d>>2]|0)>>>0)Ma[f[a+36>>2]&63](a,0,0)|0;f[a+16>>2]=0;f[d>>2]=0;f[c>>2]=0;c=f[a>>2]|0;if(!(c&4)){d=(f[a+44>>2]|0)+(f[a+48>>2]|0)|0;f[a+8>>2]=d;f[a+4>>2]=d;c=c<<27>>31}else{f[a>>2]=c|32;c=-1}return c|0}function ji(a,b,c){a=a|0;b=b|0;c=c|0;return Fi(a,b,c)|0}function ki(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=u;u=u+16|0;e=d;f[e>>2]=c;c=li(a,b,e)|0;u=d;return c|0}function li(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=u;u=u+224|0;m=r+120|0;n=r+80|0;p=r;q=r+136|0;e=n;g=e+40|0;do{f[e>>2]=0;e=e+4|0}while((e|0)<(g|0));f[m>>2]=f[d>>2];if((mi(0,c,m,p,n)|0)<0)d=-1;else{if((f[a+76>>2]|0)>-1)o=Qh(a)|0;else o=0;d=f[a>>2]|0;l=d&32;if((b[a+74>>0]|0)<1)f[a>>2]=d&-33;e=a+48|0;if(!(f[e>>2]|0)){g=a+44|0;h=f[g>>2]|0;f[g>>2]=q;i=a+28|0;f[i>>2]=q;j=a+20|0;f[j>>2]=q;f[e>>2]=80;k=a+16|0;f[k>>2]=q+80;d=mi(a,c,m,p,n)|0;if(h){Ma[f[a+36>>2]&63](a,0,0)|0;d=(f[j>>2]|0)==0?-1:d;f[g>>2]=h;f[e>>2]=0;f[k>>2]=0;f[i>>2]=0;f[j>>2]=0}}else d=mi(a,c,m,p,n)|0;e=f[a>>2]|0;f[a>>2]=e|l;if(o|0)Oh(a);d=(e&32|0)==0?d:-1}u=r;return d|0}function mi(a,c,e,g,h){a=a|0;c=c|0;e=e|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;G=u;u=u+64|0;C=G+16|0;D=G;A=G+24|0;E=G+8|0;F=G+20|0;f[C>>2]=c;x=(a|0)!=0;y=A+40|0;z=y;A=A+39|0;B=E+4|0;j=0;i=0;n=0;a:while(1){do if((i|0)>-1)if((j|0)>(2147483647-i|0)){i=Eh()|0;f[i>>2]=75;i=-1;break}else{i=j+i|0;break}while(0);j=b[c>>0]|0;if(!(j<<24>>24)){w=86;break}else k=c;b:while(1){switch(j<<24>>24){case 37:{j=k;w=9;break b}case 0:{j=k;break b}default:{}}v=k+1|0;f[C>>2]=v;j=b[v>>0]|0;k=v}c:do if((w|0)==9)while(1){w=0;if((b[k+1>>0]|0)!=37)break c;j=j+1|0;k=k+2|0;f[C>>2]=k;if((b[k>>0]|0)==37)w=9;else break}while(0);j=j-c|0;if(x)ni(a,c,j);if(j|0){c=k;continue}l=k+1|0;j=(b[l>>0]|0)+-48|0;if(j>>>0<10){v=(b[k+2>>0]|0)==36;s=v?j:-1;n=v?1:n;l=v?k+3|0:l}else s=-1;f[C>>2]=l;j=b[l>>0]|0;v=(j<<24>>24)+-32|0;if(v>>>0>31|(1<<v&75913|0)==0)k=0;else{k=0;do{k=1<<(j<<24>>24)+-32|k;l=l+1|0;f[C>>2]=l;j=b[l>>0]|0;v=(j<<24>>24)+-32|0}while(!(v>>>0>31|(1<<v&75913|0)==0))}if(j<<24>>24==42){m=l+1|0;j=(b[m>>0]|0)+-48|0;if(j>>>0<10?(b[l+2>>0]|0)==36:0){f[h+(j<<2)>>2]=10;j=f[g+((b[m>>0]|0)+-48<<3)>>2]|0;n=1;l=l+3|0}else{if(n|0){i=-1;break}if(x){n=(f[e>>2]|0)+(4-1)&~(4-1);j=f[n>>2]|0;f[e>>2]=n+4;n=0;l=m}else{j=0;n=0;l=m}}f[C>>2]=l;t=(j|0)<0;j=t?0-j|0:j;t=t?k|8192:k}else{j=oi(C)|0;if((j|0)<0){i=-1;break}t=k;l=f[C>>2]|0}do if((b[l>>0]|0)==46){if((b[l+1>>0]|0)!=42){f[C>>2]=l+1;k=oi(C)|0;l=f[C>>2]|0;break}m=l+2|0;k=(b[m>>0]|0)+-48|0;if(k>>>0<10?(b[l+3>>0]|0)==36:0){f[h+(k<<2)>>2]=10;k=f[g+((b[m>>0]|0)+-48<<3)>>2]|0;l=l+4|0;f[C>>2]=l;break}if(n|0){i=-1;break a}if(x){v=(f[e>>2]|0)+(4-1)&~(4-1);k=f[v>>2]|0;f[e>>2]=v+4}else k=0;f[C>>2]=m;l=m}else k=-1;while(0);r=0;while(1){if(((b[l>>0]|0)+-65|0)>>>0>57){i=-1;break a}v=l+1|0;f[C>>2]=v;m=b[(b[l>>0]|0)+-65+(22309+(r*58|0))>>0]|0;o=m&255;if((o+-1|0)>>>0<8){r=o;l=v}else break}if(!(m<<24>>24)){i=-1;break}q=(s|0)>-1;do if(m<<24>>24==19)if(q){i=-1;break a}else w=48;else{if(q){f[h+(s<<2)>>2]=o;q=g+(s<<3)|0;s=f[q+4>>2]|0;w=D;f[w>>2]=f[q>>2];f[w+4>>2]=s;w=48;break}if(!x){i=0;break a}pi(D,o,e)}while(0);if((w|0)==48?(w=0,!x):0){j=0;c=v;continue}l=b[l>>0]|0;l=(r|0)!=0&(l&15|0)==3?l&-33:l;s=t&-65537;t=(t&8192|0)==0?t:s;d:do switch(l|0){case 110:switch((r&255)<<24>>24){case 0:{f[f[D>>2]>>2]=i;j=0;c=v;continue a}case 1:{f[f[D>>2]>>2]=i;j=0;c=v;continue a}case 2:{j=f[D>>2]|0;f[j>>2]=i;f[j+4>>2]=((i|0)<0)<<31>>31;j=0;c=v;continue a}case 3:{d[f[D>>2]>>1]=i;j=0;c=v;continue a}case 4:{b[f[D>>2]>>0]=i;j=0;c=v;continue a}case 6:{f[f[D>>2]>>2]=i;j=0;c=v;continue a}case 7:{j=f[D>>2]|0;f[j>>2]=i;f[j+4>>2]=((i|0)<0)<<31>>31;j=0;c=v;continue a}default:{j=0;c=v;continue a}}case 112:{l=120;k=k>>>0>8?k:8;c=t|8;w=60;break}case 88:case 120:{c=t;w=60;break}case 111:{l=D;c=f[l>>2]|0;l=f[l+4>>2]|0;q=ri(c,l,y)|0;r=z-q|0;m=0;o=22773;k=(t&8|0)==0|(k|0)>(r|0)?k:r+1|0;r=t;w=66;break}case 105:case 100:{l=D;c=f[l>>2]|0;l=f[l+4>>2]|0;if((l|0)<0){c=_i(0,0,c|0,l|0)|0;l=I;m=D;f[m>>2]=c;f[m+4>>2]=l;m=1;o=22773;w=65;break d}else{m=(t&2049|0)!=0&1;o=(t&2048|0)==0?((t&1|0)==0?22773:22775):22774;w=65;break d}}case 117:{l=D;m=0;o=22773;c=f[l>>2]|0;l=f[l+4>>2]|0;w=65;break}case 99:{b[A>>0]=f[D>>2];c=A;m=0;o=22773;q=y;l=1;k=s;break}case 109:{l=Eh()|0;l=ti(f[l>>2]|0)|0;w=70;break}case 115:{l=f[D>>2]|0;l=l|0?l:22783;w=70;break}case 67:{f[E>>2]=f[D>>2];f[B>>2]=0;f[D>>2]=E;q=-1;l=E;w=74;break}case 83:{c=f[D>>2]|0;if(!k){ui(a,32,j,0,t);c=0;w=83}else{q=k;l=c;w=74}break}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{j=wi(a,+p[D>>3],j,k,t,l)|0;c=v;continue a}default:{m=0;o=22773;q=y;l=k;k=t}}while(0);e:do if((w|0)==60){t=D;s=f[t>>2]|0;t=f[t+4>>2]|0;q=qi(s,t,y,l&32)|0;o=(c&8|0)==0|(s|0)==0&(t|0)==0;m=o?0:2;o=o?22773:22773+(l>>4)|0;r=c;c=s;l=t;w=66}else if((w|0)==65){q=si(c,l,y)|0;r=t;w=66}else if((w|0)==70){w=0;t=Yh(l,0,k)|0;r=(t|0)==0;c=l;m=0;o=22773;q=r?l+k|0:t;l=r?k:t-l|0;k=s}else if((w|0)==74){w=0;o=l;c=0;k=0;while(1){m=f[o>>2]|0;if(!m)break;k=vi(F,m)|0;if((k|0)<0|k>>>0>(q-c|0)>>>0)break;c=k+c|0;if(q>>>0>c>>>0)o=o+4|0;else break}if((k|0)<0){i=-1;break a}ui(a,32,j,c,t);if(!c){c=0;w=83}else{m=0;while(1){k=f[l>>2]|0;if(!k){w=83;break e}k=vi(F,k)|0;m=k+m|0;if((m|0)>(c|0)){w=83;break e}ni(a,F,k);if(m>>>0>=c>>>0){w=83;break}else l=l+4|0}}}while(0);if((w|0)==66){w=0;l=(c|0)!=0|(l|0)!=0;t=(k|0)!=0|l;l=z-q+((l^1)&1)|0;c=t?q:y;q=y;l=t?((k|0)>(l|0)?k:l):k;k=(k|0)>-1?r&-65537:r}else if((w|0)==83){w=0;ui(a,32,j,c,t^8192);j=(j|0)>(c|0)?j:c;c=v;continue}s=q-c|0;r=(l|0)<(s|0)?s:l;t=r+m|0;j=(j|0)<(t|0)?t:j;ui(a,32,j,t,k);ni(a,o,m);ui(a,48,j,t,k^65536);ui(a,48,r,s,0);ni(a,c,s);ui(a,32,j,t,k^8192);c=v}f:do if((w|0)==86)if(!a)if(n){i=1;while(1){c=f[h+(i<<2)>>2]|0;if(!c)break;pi(g+(i<<3)|0,c,e);c=i+1|0;if((i|0)<9)i=c;else{i=c;break}}if((i|0)<10)while(1){if(f[h+(i<<2)>>2]|0){i=-1;break f}if((i|0)<9)i=i+1|0;else{i=1;break}}else i=1}else i=0;while(0);u=G;return i|0}function ni(a,b,c){a=a|0;b=b|0;c=c|0;if(!(f[a>>2]&32))Th(b,c,a)|0;return}function oi(a){a=a|0;var c=0,d=0,e=0;d=f[a>>2]|0;e=(b[d>>0]|0)+-48|0;if(e>>>0<10){c=0;do{c=e+(c*10|0)|0;d=d+1|0;f[a>>2]=d;e=(b[d>>0]|0)+-48|0}while(e>>>0<10)}else c=0;return c|0}function pi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,g=0.0;a:do if(b>>>0<=20)do switch(b|0){case 9:{d=(f[c>>2]|0)+(4-1)&~(4-1);b=f[d>>2]|0;f[c>>2]=d+4;f[a>>2]=b;break a}case 10:{d=(f[c>>2]|0)+(4-1)&~(4-1);b=f[d>>2]|0;f[c>>2]=d+4;d=a;f[d>>2]=b;f[d+4>>2]=((b|0)<0)<<31>>31;break a}case 11:{d=(f[c>>2]|0)+(4-1)&~(4-1);b=f[d>>2]|0;f[c>>2]=d+4;d=a;f[d>>2]=b;f[d+4>>2]=0;break a}case 12:{d=(f[c>>2]|0)+(8-1)&~(8-1);b=d;e=f[b>>2]|0;b=f[b+4>>2]|0;f[c>>2]=d+8;d=a;f[d>>2]=e;f[d+4>>2]=b;break a}case 13:{e=(f[c>>2]|0)+(4-1)&~(4-1);d=f[e>>2]|0;f[c>>2]=e+4;d=(d&65535)<<16>>16;e=a;f[e>>2]=d;f[e+4>>2]=((d|0)<0)<<31>>31;break a}case 14:{e=(f[c>>2]|0)+(4-1)&~(4-1);d=f[e>>2]|0;f[c>>2]=e+4;e=a;f[e>>2]=d&65535;f[e+4>>2]=0;break a}case 15:{e=(f[c>>2]|0)+(4-1)&~(4-1);d=f[e>>2]|0;f[c>>2]=e+4;d=(d&255)<<24>>24;e=a;f[e>>2]=d;f[e+4>>2]=((d|0)<0)<<31>>31;break a}case 16:{e=(f[c>>2]|0)+(4-1)&~(4-1);d=f[e>>2]|0;f[c>>2]=e+4;e=a;f[e>>2]=d&255;f[e+4>>2]=0;break a}case 17:{e=(f[c>>2]|0)+(8-1)&~(8-1);g=+p[e>>3];f[c>>2]=e+8;p[a>>3]=g;break a}case 18:{e=(f[c>>2]|0)+(8-1)&~(8-1);g=+p[e>>3];f[c>>2]=e+8;p[a>>3]=g;break a}default:break a}while(0);while(0);return}function qi(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;if(!((a|0)==0&(c|0)==0))do{d=d+-1|0;b[d>>0]=h[22825+(a&15)>>0]|0|e;a=ej(a|0,c|0,4)|0;c=I}while(!((a|0)==0&(c|0)==0));return d|0}function ri(a,c,d){a=a|0;c=c|0;d=d|0;if(!((a|0)==0&(c|0)==0))do{d=d+-1|0;b[d>>0]=a&7|48;a=ej(a|0,c|0,3)|0;c=I}while(!((a|0)==0&(c|0)==0));return d|0}function si(a,c,d){a=a|0;c=c|0;d=d|0;var e=0;if(c>>>0>0|(c|0)==0&a>>>0>4294967295){while(1){e=cj(a|0,c|0,10,0)|0;d=d+-1|0;b[d>>0]=e&255|48;e=a;a=bj(a|0,c|0,10,0)|0;if(!(c>>>0>9|(c|0)==9&e>>>0>4294967295))break;else c=I}c=a}else c=a;if(c)while(1){d=d+-1|0;b[d>>0]=(c>>>0)%10|0|48;if(c>>>0<10)break;else c=(c>>>0)/10|0}return d|0}function ti(a){a=a|0;var b=0;b=(Ci()|0)+188|0;return Di(a,f[b>>2]|0)|0}function ui(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=u;u=u+256|0;f=g;if((c|0)>(d|0)&(e&73728|0)==0){e=c-d|0;ij(f|0,b|0,(e>>>0<256?e:256)|0)|0;if(e>>>0>255){b=c-d|0;do{ni(a,f,256);e=e+-256|0}while(e>>>0>255);e=b&255}ni(a,f,e)}u=g;return}function vi(a,b){a=a|0;b=b|0;if(!a)a=0;else a=Ai(a,b,0)|0;return a|0}function wi(a,c,d,e,g,i){a=a|0;c=+c;d=d|0;e=e|0;g=g|0;i=i|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0,s=0,t=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;G=u;u=u+560|0;l=G+8|0;t=G;F=G+524|0;E=F;m=G+512|0;f[t>>2]=0;D=m+12|0;xi(c)|0;if((I|0)<0){c=-c;B=1;A=22790}else{B=(g&2049|0)!=0&1;A=(g&2048|0)==0?((g&1|0)==0?22791:22796):22793}xi(c)|0;do if(0==0&(I&2146435072|0)==2146435072){F=(i&32|0)!=0;j=B+3|0;ui(a,32,d,j,g&-65537);ni(a,A,B);ni(a,c!=c|0.0!=0.0?(F?22817:22821):F?22809:22813,3);ui(a,32,d,j,g^8192)}else{q=+yi(c,t)*2.0;j=q!=0.0;if(j)f[t>>2]=(f[t>>2]|0)+-1;w=i|32;if((w|0)==97){o=i&32;r=(o|0)==0?A:A+9|0;p=B|2;j=12-e|0;do if(!(e>>>0>11|(j|0)==0)){c=8.0;do{j=j+-1|0;c=c*16.0}while((j|0)!=0);if((b[r>>0]|0)==45){c=-(c+(-q-c));break}else{c=q+c-c;break}}else c=q;while(0);k=f[t>>2]|0;j=(k|0)<0?0-k|0:k;j=si(j,((j|0)<0)<<31>>31,D)|0;if((j|0)==(D|0)){j=m+11|0;b[j>>0]=48}b[j+-1>>0]=(k>>31&2)+43;n=j+-2|0;b[n>>0]=i+15;l=(e|0)<1;m=(g&8|0)==0;j=F;do{C=~~c;k=j+1|0;b[j>>0]=o|h[22825+C>>0];c=(c-+(C|0))*16.0;if((k-E|0)==1?!(m&(l&c==0.0)):0){b[k>>0]=46;j=j+2|0}else j=k}while(c!=0.0);if((e|0)!=0?(-2-E+j|0)<(e|0):0){k=j-E|0;j=e+2|0}else{j=j-E|0;k=j}D=D-n|0;E=D+p+j|0;ui(a,32,d,E,g);ni(a,r,p);ui(a,48,d,E,g^65536);ni(a,F,k);ui(a,48,j-k|0,0,0);ni(a,n,D);ui(a,32,d,E,g^8192);j=E;break}k=(e|0)<0?6:e;if(j){j=(f[t>>2]|0)+-28|0;f[t>>2]=j;c=q*268435456.0}else{c=q;j=f[t>>2]|0}C=(j|0)<0?l:l+288|0;l=C;do{y=~~c>>>0;f[l>>2]=y;l=l+4|0;c=(c-+(y>>>0))*1.0e9}while(c!=0.0);if((j|0)>0){m=C;o=l;while(1){n=(j|0)<29?j:29;j=o+-4|0;if(j>>>0>=m>>>0){l=0;do{x=fj(f[j>>2]|0,0,n|0)|0;x=Zi(x|0,I|0,l|0,0)|0;y=I;v=cj(x|0,y|0,1e9,0)|0;f[j>>2]=v;l=bj(x|0,y|0,1e9,0)|0;j=j+-4|0}while(j>>>0>=m>>>0);if(l){m=m+-4|0;f[m>>2]=l}}l=o;while(1){if(l>>>0<=m>>>0)break;j=l+-4|0;if(!(f[j>>2]|0))l=j;else break}j=(f[t>>2]|0)-n|0;f[t>>2]=j;if((j|0)>0)o=l;else break}}else m=C;if((j|0)<0){e=((k+25|0)/9|0)+1|0;s=(w|0)==102;do{r=0-j|0;r=(r|0)<9?r:9;if(m>>>0<l>>>0){n=(1<<r)+-1|0;o=1e9>>>r;p=0;j=m;do{y=f[j>>2]|0;f[j>>2]=(y>>>r)+p;p=X(y&n,o)|0;j=j+4|0}while(j>>>0<l>>>0);j=(f[m>>2]|0)==0?m+4|0:m;if(!p){m=j;j=l}else{f[l>>2]=p;m=j;j=l+4|0}}else{m=(f[m>>2]|0)==0?m+4|0:m;j=l}l=s?C:m;l=(j-l>>2|0)>(e|0)?l+(e<<2)|0:j;j=(f[t>>2]|0)+r|0;f[t>>2]=j}while((j|0)<0);j=m;e=l}else{j=m;e=l}y=C;if(j>>>0<e>>>0){l=(y-j>>2)*9|0;n=f[j>>2]|0;if(n>>>0>=10){m=10;do{m=m*10|0;l=l+1|0}while(n>>>0>=m>>>0)}}else l=0;s=(w|0)==103;v=(k|0)!=0;m=k-((w|0)!=102?l:0)+((v&s)<<31>>31)|0;if((m|0)<(((e-y>>2)*9|0)+-9|0)){m=m+9216|0;r=C+4+(((m|0)/9|0)+-1024<<2)|0;m=(m|0)%9|0;if((m|0)<8){n=10;while(1){n=n*10|0;if((m|0)<7)m=m+1|0;else break}}else n=10;o=f[r>>2]|0;p=(o>>>0)%(n>>>0)|0;m=(r+4|0)==(e|0);if(!(m&(p|0)==0)){q=(((o>>>0)/(n>>>0)|0)&1|0)==0?9007199254740992.0:9007199254740994.0;x=(n|0)/2|0;c=p>>>0<x>>>0?.5:m&(p|0)==(x|0)?1.0:1.5;if(B){x=(b[A>>0]|0)==45;c=x?-c:c;q=x?-q:q}m=o-p|0;f[r>>2]=m;if(q+c!=q){x=m+n|0;f[r>>2]=x;if(x>>>0>999999999){l=r;while(1){m=l+-4|0;f[l>>2]=0;if(m>>>0<j>>>0){j=j+-4|0;f[j>>2]=0}x=(f[m>>2]|0)+1|0;f[m>>2]=x;if(x>>>0>999999999)l=m;else break}}else m=r;l=(y-j>>2)*9|0;o=f[j>>2]|0;if(o>>>0>=10){n=10;do{n=n*10|0;l=l+1|0}while(o>>>0>=n>>>0)}}else m=r}else m=r;m=m+4|0;m=e>>>0>m>>>0?m:e;x=j}else{m=e;x=j}w=m;while(1){if(w>>>0<=x>>>0){t=0;break}j=w+-4|0;if(!(f[j>>2]|0))w=j;else{t=1;break}}e=0-l|0;do if(s){j=k+((v^1)&1)|0;if((j|0)>(l|0)&(l|0)>-5){n=i+-1|0;k=j+-1-l|0}else{n=i+-2|0;k=j+-1|0}j=g&8;if(!j){if(t?(z=f[w+-4>>2]|0,(z|0)!=0):0)if(!((z>>>0)%10|0)){m=0;j=10;do{j=j*10|0;m=m+1|0}while(!((z>>>0)%(j>>>0)|0|0))}else m=0;else m=9;j=((w-y>>2)*9|0)+-9|0;if((n|32|0)==102){r=j-m|0;r=(r|0)>0?r:0;k=(k|0)<(r|0)?k:r;r=0;break}else{r=j+l-m|0;r=(r|0)>0?r:0;k=(k|0)<(r|0)?k:r;r=0;break}}else r=j}else{n=i;r=g&8}while(0);s=k|r;o=(s|0)!=0&1;p=(n|32|0)==102;if(p){v=0;j=(l|0)>0?l:0}else{j=(l|0)<0?e:l;j=si(j,((j|0)<0)<<31>>31,D)|0;m=D;if((m-j|0)<2)do{j=j+-1|0;b[j>>0]=48}while((m-j|0)<2);b[j+-1>>0]=(l>>31&2)+43;j=j+-2|0;b[j>>0]=n;v=j;j=m-j|0}j=B+1+k+o+j|0;ui(a,32,d,j,g);ni(a,A,B);ui(a,48,d,j,g^65536);if(p){n=x>>>0>C>>>0?C:x;r=F+9|0;o=r;p=F+8|0;m=n;do{l=si(f[m>>2]|0,0,r)|0;if((m|0)==(n|0)){if((l|0)==(r|0)){b[p>>0]=48;l=p}}else if(l>>>0>F>>>0){ij(F|0,48,l-E|0)|0;do l=l+-1|0;while(l>>>0>F>>>0)}ni(a,l,o-l|0);m=m+4|0}while(m>>>0<=C>>>0);if(s|0)ni(a,22841,1);if(m>>>0<w>>>0&(k|0)>0)while(1){l=si(f[m>>2]|0,0,r)|0;if(l>>>0>F>>>0){ij(F|0,48,l-E|0)|0;do l=l+-1|0;while(l>>>0>F>>>0)}ni(a,l,(k|0)<9?k:9);m=m+4|0;l=k+-9|0;if(!(m>>>0<w>>>0&(k|0)>9)){k=l;break}else k=l}ui(a,48,k+9|0,9,0)}else{s=t?w:x+4|0;if((k|0)>-1){t=F+9|0;r=(r|0)==0;e=t;o=0-E|0;p=F+8|0;n=x;do{l=si(f[n>>2]|0,0,t)|0;if((l|0)==(t|0)){b[p>>0]=48;l=p}do if((n|0)==(x|0)){m=l+1|0;ni(a,l,1);if(r&(k|0)<1){l=m;break}ni(a,22841,1);l=m}else{if(l>>>0<=F>>>0)break;ij(F|0,48,l+o|0)|0;do l=l+-1|0;while(l>>>0>F>>>0)}while(0);E=e-l|0;ni(a,l,(k|0)>(E|0)?E:k);k=k-E|0;n=n+4|0}while(n>>>0<s>>>0&(k|0)>-1)}ui(a,48,k+18|0,18,0);ni(a,v,D-v|0)}ui(a,32,d,j,g^8192)}while(0);u=G;return ((j|0)<(d|0)?d:j)|0}function xi(a){a=+a;var b=0;p[s>>3]=a;b=f[s>>2]|0;I=f[s+4>>2]|0;return b|0}function yi(a,b){a=+a;b=b|0;return +(+zi(a,b))}function zi(a,b){a=+a;b=b|0;var c=0,d=0,e=0;p[s>>3]=a;c=f[s>>2]|0;d=f[s+4>>2]|0;e=ej(c|0,d|0,52)|0;switch(e&2047){case 0:{if(a!=0.0){a=+zi(a*18446744073709551616.0,b);c=(f[b>>2]|0)+-64|0}else c=0;f[b>>2]=c;break}case 2047:break;default:{f[b>>2]=(e&2047)+-1022;f[s>>2]=c;f[s+4>>2]=d&-2146435073|1071644672;a=+p[s>>3]}}return +a}function Ai(a,c,d){a=a|0;c=c|0;d=d|0;do if(a){if(c>>>0<128){b[a>>0]=c;a=1;break}d=(Bi()|0)+188|0;if(!(f[f[d>>2]>>2]|0))if((c&-128|0)==57216){b[a>>0]=c;a=1;break}else{a=Eh()|0;f[a>>2]=84;a=-1;break}if(c>>>0<2048){b[a>>0]=c>>>6|192;b[a+1>>0]=c&63|128;a=2;break}if(c>>>0<55296|(c&-8192|0)==57344){b[a>>0]=c>>>12|224;b[a+1>>0]=c>>>6&63|128;b[a+2>>0]=c&63|128;a=3;break}if((c+-65536|0)>>>0<1048576){b[a>>0]=c>>>18|240;b[a+1>>0]=c>>>12&63|128;b[a+2>>0]=c>>>6&63|128;b[a+3>>0]=c&63|128;a=4;break}else{a=Eh()|0;f[a>>2]=84;a=-1;break}}else a=1;while(0);return a|0}function Bi(){return Ih()|0}function Ci(){return Ih()|0}function Di(a,c){a=a|0;c=c|0;var d=0,e=0;e=0;while(1){if((h[22843+e>>0]|0)==(a|0)){a=2;break}d=e+1|0;if((d|0)==87){d=22931;e=87;a=5;break}else e=d}if((a|0)==2)if(!e)d=22931;else{d=22931;a=5}if((a|0)==5)while(1){do{a=d;d=d+1|0}while((b[a>>0]|0)!=0);e=e+-1|0;if(!e)break;else a=5}return Ei(d,f[c+20>>2]|0)|0}function Ei(a,b){a=a|0;b=b|0;return Uh(a,b)|0}function Fi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((f[a+76>>2]|0)>-1){d=(Qh(a)|0)==0;b=Gi(a,b,c)|0;if(!d)Oh(a)}else b=Gi(a,b,c)|0;return b|0}function Gi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if((c|0)==1)b=b-(f[a+8>>2]|0)+(f[a+4>>2]|0)|0;d=a+20|0;e=a+28|0;if((f[d>>2]|0)>>>0>(f[e>>2]|0)>>>0?(Ma[f[a+36>>2]&63](a,0,0)|0,(f[d>>2]|0)==0):0)b=-1;else{f[a+16>>2]=0;f[e>>2]=0;f[d>>2]=0;if((Ma[f[a+40>>2]&63](a,b,c)|0)<0)b=-1;else{f[a+8>>2]=0;f[a+4>>2]=0;f[a>>2]=f[a>>2]&-17;b=0}}return b|0}function Hi(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;m=u;u=u+128|0;g=m+124|0;l=m;h=l;i=3036;j=h+124|0;do{f[h>>2]=f[i>>2];h=h+4|0;i=i+4|0}while((h|0)<(j|0));if((c+-1|0)>>>0>2147483646)if(!c){a=g;c=1;k=4}else{c=Eh()|0;f[c>>2]=75;c=-1}else k=4;if((k|0)==4){k=-2-a|0;k=c>>>0>k>>>0?k:c;f[l+48>>2]=k;g=l+20|0;f[g>>2]=a;f[l+44>>2]=a;c=a+k|0;a=l+16|0;f[a>>2]=c;f[l+28>>2]=c;c=li(l,d,e)|0;if(k){l=f[g>>2]|0;b[l+(((l|0)==(f[a>>2]|0))<<31>>31)>>0]=0}}u=m;return c|0}function Ii(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=a+20|0;e=f[d>>2]|0;a=(f[a+16>>2]|0)-e|0;a=a>>>0>c>>>0?c:a;hj(e|0,b|0,a|0)|0;f[d>>2]=(f[d>>2]|0)+a;return c|0}function Ji(a,b){a=a|0;b=b|0;Ki(a,b)|0;return a|0}function Ki(a,c){a=a|0;c=c|0;var d=0,e=0;d=c;a:do if(!((d^a)&3)){if(d&3)do{d=b[c>>0]|0;b[a>>0]=d;if(!(d<<24>>24))break a;c=c+1|0;a=a+1|0}while((c&3|0)!=0);d=f[c>>2]|0;if(!((d&-2139062144^-2139062144)&d+-16843009)){e=a;while(1){c=c+4|0;a=e+4|0;f[e>>2]=d;d=f[c>>2]|0;if((d&-2139062144^-2139062144)&d+-16843009|0)break;else e=a}}e=8}else e=8;while(0);if((e|0)==8){e=b[c>>0]|0;b[a>>0]=e;if(e<<24>>24)do{c=c+1|0;a=a+1|0;e=b[c>>0]|0;b[a>>0]=e}while(e<<24>>24!=0)}return a|0}function Li(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=u;u=u+16|0;e=d;f[e>>2]=c;c=Mi(a,b,e)|0;u=d;return c|0}function Mi(a,b,c){a=a|0;b=b|0;c=c|0;return Hi(a,2147483647,b,c)|0}function Ni(a,b){a=+a;b=b|0;return +(+hi(a,b))}function Oi(a){a=+a;return ~~+kj(+a)|0}function Pi(a,b){a=a|0;b=b|0;var c=0,d=0;c=u;u=u+16|0;d=c;f[d>>2]=b;b=li(f[665]|0,a,d)|0;u=c;return b|0}function Qi(a,c,d,e){a=a|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;k=X(d,c)|0;d=(c|0)==0?0:d;if((f[e+76>>2]|0)>-1)j=Qh(e)|0;else j=0;g=e+74|0;h=b[g>>0]|0;b[g>>0]=h+255|h;g=e+4|0;h=f[g>>2]|0;m=(f[e+8>>2]|0)-h|0;i=m>>>0<k>>>0?m:k;if((m|0)>0){hj(a|0,h|0,i|0)|0;f[g>>2]=h+i;g=k-i|0;a=a+i|0}else g=k;a:do if(!g)l=13;else{i=e+32|0;while(1){if(ii(e)|0)break;h=Ma[f[i>>2]&63](e,a,g)|0;if((h+1|0)>>>0<2)break;g=g-h|0;if(!g){l=13;break a}else a=a+h|0}if(j|0)Oh(e);d=((k-g|0)>>>0)/(c>>>0)|0}while(0);if((l|0)==13)if(j)Oh(e);return d|0}function Ri(a,c){a=a|0;c=c|0;var d=0,e=0,g=0,h=0,i=0,j=0,k=0;if((f[c+76>>2]|0)>=0?(Qh(c)|0)!=0:0){e=a&255;d=a&255;if((d|0)!=(b[c+75>>0]|0)?(i=c+20|0,j=f[i>>2]|0,j>>>0<(f[c+16>>2]|0)>>>0):0){f[i>>2]=j+1;b[j>>0]=e}else d=Rh(c,a)|0;Oh(c)}else k=3;do if((k|0)==3){e=a&255;d=a&255;if((d|0)!=(b[c+75>>0]|0)?(g=c+20|0,h=f[g>>2]|0,h>>>0<(f[c+16>>2]|0)>>>0):0){f[g>>2]=h+1;b[h>>0]=e;break}d=Rh(c,a)|0}while(0);return d|0}function Si(a){a=a|0;var c=0,d=0,e=0,g=0;e=f[665]|0;if((f[e+76>>2]|0)>-1)g=Qh(e)|0;else g=0;do if((Lh(a,e)|0)<0)a=-1;else{if((b[e+75>>0]|0)!=10?(c=e+20|0,d=f[c>>2]|0,d>>>0<(f[e+16>>2]|0)>>>0):0){f[c>>2]=d+1;b[d>>0]=10;a=0;break}a=(Rh(e,10)|0)>>31}while(0);if(g|0)Oh(e);return a|0}function Ti(a){a=a|0;var b=0;if(!(f[a>>2]&128))b=1;else b=(f[a+20>>2]|0)>>>0>(f[a+28>>2]|0)>>>0?2:1;b=Ma[f[a+40>>2]&63](a,0,b)|0;if((b|0)>=0)b=b-(f[a+8>>2]|0)+(f[a+4>>2]|0)+(f[a+20>>2]|0)-(f[a+28>>2]|0)|0;return b|0}function Ui(a){a=a|0;var b=0,c=0;if((f[a+76>>2]|0)>-1){c=(Qh(a)|0)==0;b=Ti(a)|0;if(!c)Oh(a)}else b=Ti(a)|0;return b|0}function Vi(a){a=a|0;return Ui(a)|0}function Wi(){}function Xi(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;e=b&65535;c=X(e,f)|0;d=a>>>16;a=(c>>>16)+(X(e,d)|0)|0;e=b>>>16;b=X(e,f)|0;return (I=(a>>>16)+(X(e,d)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|c&65535|0)|0}function Yi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;c=Xi(e,f)|0;a=I;return (I=(X(b,f)|0)+(X(d,e)|0)+a|a&0,c|0|0)|0}function Zi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (I=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function _i(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (I=d,a-c>>>0|0)|0}function $i(a){a=a|0;var c=0;c=b[w+(a&255)>>0]|0;if((c|0)<8)return c|0;c=b[w+(a>>8&255)>>0]|0;if((c|0)<8)return c+8|0;c=b[w+(a>>16&255)>>0]|0;if((c|0)<8)return c+16|0;return (b[w+(a>>>24)>>0]|0)+24|0}function aj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;l=a;j=b;k=j;h=c;n=d;i=n;if(!k){g=(e|0)!=0;if(!i){if(g){f[e>>2]=(l>>>0)%(h>>>0);f[e+4>>2]=0}n=0;e=(l>>>0)/(h>>>0)>>>0;return (I=n,e)|0}else{if(!g){n=0;e=0;return (I=n,e)|0}f[e>>2]=a|0;f[e+4>>2]=b&0;n=0;e=0;return (I=n,e)|0}}g=(i|0)==0;do if(h){if(!g){g=(_(i|0)|0)-(_(k|0)|0)|0;if(g>>>0<=31){m=g+1|0;i=31-g|0;b=g-31>>31;h=m;a=l>>>(m>>>0)&b|k<<i;b=k>>>(m>>>0)&b;g=0;i=l<<i;break}if(!e){n=0;e=0;return (I=n,e)|0}f[e>>2]=a|0;f[e+4>>2]=j|b&0;n=0;e=0;return (I=n,e)|0}g=h-1|0;if(g&h|0){i=(_(h|0)|0)+33-(_(k|0)|0)|0;p=64-i|0;m=32-i|0;j=m>>31;o=i-32|0;b=o>>31;h=i;a=m-1>>31&k>>>(o>>>0)|(k<<m|l>>>(i>>>0))&b;b=b&k>>>(i>>>0);g=l<<p&j;i=(k<<p|l>>>(o>>>0))&j|l<<m&i-33>>31;break}if(e|0){f[e>>2]=g&l;f[e+4>>2]=0}if((h|0)==1){o=j|b&0;p=a|0|0;return (I=o,p)|0}else{p=$i(h|0)|0;o=k>>>(p>>>0)|0;p=k<<32-p|l>>>(p>>>0)|0;return (I=o,p)|0}}else{if(g){if(e|0){f[e>>2]=(k>>>0)%(h>>>0);f[e+4>>2]=0}o=0;p=(k>>>0)/(h>>>0)>>>0;return (I=o,p)|0}if(!l){if(e|0){f[e>>2]=0;f[e+4>>2]=(k>>>0)%(i>>>0)}o=0;p=(k>>>0)/(i>>>0)>>>0;return (I=o,p)|0}g=i-1|0;if(!(g&i)){if(e|0){f[e>>2]=a|0;f[e+4>>2]=g&k|b&0}o=0;p=k>>>(($i(i|0)|0)>>>0);return (I=o,p)|0}g=(_(i|0)|0)-(_(k|0)|0)|0;if(g>>>0<=30){b=g+1|0;i=31-g|0;h=b;a=k<<i|l>>>(b>>>0);b=k>>>(b>>>0);g=0;i=l<<i;break}if(!e){o=0;p=0;return (I=o,p)|0}f[e>>2]=a|0;f[e+4>>2]=j|b&0;o=0;p=0;return (I=o,p)|0}while(0);if(!h){k=i;j=0;i=0}else{m=c|0|0;l=n|d&0;k=Zi(m|0,l|0,-1,-1)|0;c=I;j=i;i=0;do{d=j;j=g>>>31|j<<1;g=i|g<<1;d=a<<1|d>>>31|0;n=a>>>31|b<<1|0;_i(k|0,c|0,d|0,n|0)|0;p=I;o=p>>31|((p|0)<0?-1:0)<<1;i=o&1;a=_i(d|0,n|0,o&m|0,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&l|0)|0;b=I;h=h-1|0}while((h|0)!=0);k=j;j=0}h=0;if(e|0){f[e>>2]=a;f[e+4>>2]=b}o=(g|0)>>>31|(k|h)<<1|(h<<1|g>>>31)&0|j;p=(g<<1|0>>>31)&-2|i;return (I=o,p)|0}function bj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return aj(a,b,c,d,0)|0}function cj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,g=0;g=u;u=u+16|0;e=g|0;aj(a,b,c,d,e)|0;u=g;return (I=f[e+4>>2]|0,f[e>>2]|0)|0}function dj(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){I=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}I=(b|0)<0?-1:0;return b>>c-32|0}function ej(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){I=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}I=0;return b>>>c-32|0}function fj(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){I=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}I=a<<c-32;return 0}function gj(a){a=a|0;return (a&255)<<24|(a>>8&255)<<16|(a>>16&255)<<8|a>>>24|0}function hj(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0;if((d|0)>=8192)return Ba(a|0,c|0,d|0)|0;h=a|0;g=a+d|0;if((a&3)==(c&3)){while(a&3){if(!d)return h|0;b[a>>0]=b[c>>0]|0;a=a+1|0;c=c+1|0;d=d-1|0}d=g&-4|0;e=d-64|0;while((a|0)<=(e|0)){f[a>>2]=f[c>>2];f[a+4>>2]=f[c+4>>2];f[a+8>>2]=f[c+8>>2];f[a+12>>2]=f[c+12>>2];f[a+16>>2]=f[c+16>>2];f[a+20>>2]=f[c+20>>2];f[a+24>>2]=f[c+24>>2];f[a+28>>2]=f[c+28>>2];f[a+32>>2]=f[c+32>>2];f[a+36>>2]=f[c+36>>2];f[a+40>>2]=f[c+40>>2];f[a+44>>2]=f[c+44>>2];f[a+48>>2]=f[c+48>>2];f[a+52>>2]=f[c+52>>2];f[a+56>>2]=f[c+56>>2];f[a+60>>2]=f[c+60>>2];a=a+64|0;c=c+64|0}while((a|0)<(d|0)){f[a>>2]=f[c>>2];a=a+4|0;c=c+4|0}}else{d=g-4|0;while((a|0)<(d|0)){b[a>>0]=b[c>>0]|0;b[a+1>>0]=b[c+1>>0]|0;b[a+2>>0]=b[c+2>>0]|0;b[a+3>>0]=b[c+3>>0]|0;a=a+4|0;c=c+4|0}}while((a|0)<(g|0)){b[a>>0]=b[c>>0]|0;a=a+1|0;c=c+1|0}return h|0}function ij(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,g=0,h=0,i=0;h=a+d|0;c=c&255;if((d|0)>=67){while(a&3){b[a>>0]=c;a=a+1|0}e=h&-4|0;g=e-64|0;i=c|c<<8|c<<16|c<<24;while((a|0)<=(g|0)){f[a>>2]=i;f[a+4>>2]=i;f[a+8>>2]=i;f[a+12>>2]=i;f[a+16>>2]=i;f[a+20>>2]=i;f[a+24>>2]=i;f[a+28>>2]=i;f[a+32>>2]=i;f[a+36>>2]=i;f[a+40>>2]=i;f[a+44>>2]=i;f[a+48>>2]=i;f[a+52>>2]=i;f[a+56>>2]=i;f[a+60>>2]=i;a=a+64|0}while((a|0)<(e|0)){f[a>>2]=i;a=a+4|0}}while((a|0)<(h|0)){b[a>>0]=c;a=a+1|0}return h-d|0}function jj(a){a=+a;return a>=0.0?+J(a+.5):+W(a-.5)}function kj(a){a=+a;return a-+J(a)!=.5?+jj(a):+jj(a/2.0)*2.0}function lj(a){a=a|0;var b=0,c=0;c=a+15&-16|0;b=f[r>>2]|0;a=b+c|0;if((c|0)>0&(a|0)<(b|0)|(a|0)<0){da()|0;sa(12);return -1}f[r>>2]=a;if((a|0)>(ca()|0)?(ba()|0)==0:0){f[r>>2]=b;sa(12);return -1}return b|0}function mj(a,b){a=a|0;b=b|0;return +Ja[a&3](b|0)}function nj(a,b){a=a|0;b=b|0;return Ka[a&15](b|0)|0}function oj(a,b,c){a=a|0;b=b|0;c=c|0;return La[a&7](b|0,c|0)|0}function pj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Ma[a&63](b|0,c|0,d|0)|0}function qj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Na[a&63](b|0,c|0,d|0,e|0)|0}function rj(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return Oa[a&3](b|0,c|0,d|0,e|0,f|0)|0}function sj(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return Pa[a&7](b|0,c|0,d|0,e|0,f|0,g|0)|0}function tj(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;return Qa[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0)|0}function uj(a,b,c,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;return Ra[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0,l|0)|0}function vj(a,b){a=a|0;b=b|0;Sa[a&7](b|0)}function wj(a,b,c){a=a|0;b=b|0;c=c|0;Ta[a&7](b|0,c|0)}function xj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Ua[a&15](b|0,c|0,d|0)}function yj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Va[a&3](b|0,c|0,d|0,e|0)}function zj(a){a=a|0;$(0);return 0.0}function Aj(a){a=a|0;$(1);return 0}function Bj(a,b){a=a|0;b=b|0;$(2);return 0}function Cj(a,b,c){a=a|0;b=b|0;c=c|0;$(3);return 0}function Dj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;$(4);return 0}function Ej(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;$(5);return 0}function Fj(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;$(6);return 0}function Gj(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;$(7);return 0}function Hj(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;$(8);return 0}function Ij(a){a=a|0;$(9)}function Jj(a,b){a=a|0;b=b|0;$(10)}function Kj(a,b,c){a=a|0;b=b|0;c=c|0;$(11)}function Lj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;$(12)}

// EMSCRIPTEN_END_FUNCS
var Ja=[zj,xe,ye,zj];var Ka=[Aj,Ah,Od,Pd,qf,pf,ei,Gg,Cg,Aj,Aj,Aj,Aj,Aj,Aj,Aj];var La=[Bj,bf,df,ef,cf,Bj,Bj,Bj];var Ma=[Cj,Hh,Ch,Ii,ub,vb,wb,xb,Wd,_d,Ie,Ue,Zc,Vd,Je,rf,Dc,Ec,Fc,Gc,zc,Ac,Bc,Cc,$c,ad,bd,cd,Rd,Ud,$d,ae,be,ce,de,fe,ge,he,ie,je,ke,le,me,ne,oe,pe,qe,re,se,te,ue,ve,we,Ke,Ve,Xe,Ye,Ze,_e,$e,af,Bh,Gh,Cj];var Na=[Dj,dd,ed,fd,gd,hd,id,jd,kd,ld,md,nd,od,pd,qd,rd,sd,td,ud,vd,Re,Se,Te,Le,Me,Ne,Oe,Pe,Qe,qb,rb,sb,tb,ee,Tc,We,He,Qd,_c,Ce,ff,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj,Dj];var Oa=[Ej,Td,mf,Ej];var Pa=[Fj,Be,hf,Hd,jf,Fj,Fj,Fj];var Qa=[Gj,Id,lf,Gj];var Ra=[Hj,Gd,gf,Hj];var Sa=[Ij,Qc,kf,Rf,Sf,Ij,Ij,Ij];var Ta=[Jj,eb,fb,gb,Ob,Oc,Ge,Jj];var Ua=[Kj,Vc,Wc,Xc,Yc,Ad,Bd,Cd,Dd,wd,xd,yd,zd,Kd,of,Kj];var Va=[Lj,yg,Fg,Lj];return{___muldi3:Yi,___udivdi3:bj,___uremdi3:cj,_bitshift64Ashr:dj,_bitshift64Lshr:ej,_bitshift64Shl:fj,_emscripten_replace_memory:Ia,_free:th,_i64Add:Zi,_i64Subtract:_i,_jp2_decode:bb,_jp2_encode:cb,_jp2_version:db,_llvm_bswap_i32:gj,_malloc:sh,_memcpy:hj,_memset:ij,_opj_create_compress:Vb,_opj_create_decompress:Wb,_opj_decode:Xb,_opj_decode_tile_data:Yb,_opj_destroy_codec:Zb,_opj_destroy_cstr_index:_b,_opj_destroy_cstr_info:$b,_opj_dump_codec:ac,_opj_encode:bc,_opj_end_compress:cc,_opj_end_decompress:dc,_opj_get_cstr_index:ec,_opj_get_cstr_info:fc,_opj_get_decoded_tile:gc,_opj_image_create:Pb,_opj_image_destroy:Qb,_opj_image_tile_create:Rb,_opj_read_header:hc,_opj_read_tile_header:ic,_opj_set_MCT:jc,_opj_set_decode_area:kc,_opj_set_decoded_resolution_factor:lc,_opj_set_default_decoder_parameters:mc,_opj_set_default_encoder_parameters:nc,_opj_set_error_handler:oc,_opj_set_info_handler:pc,_opj_set_warning_handler:qc,_opj_setup_decoder:rc,_opj_setup_encoder:sc,_opj_start_compress:tc,_opj_stream_create:hb,_opj_stream_create_buffer_stream:uc,_opj_stream_create_default_file_stream:vc,_opj_stream_create_file_stream:wc,_opj_stream_default_create:ib,_opj_stream_destroy:jb,_opj_stream_set_read_function:kb,_opj_stream_set_seek_function:lb,_opj_stream_set_skip_function:mb,_opj_stream_set_user_data:nb,_opj_stream_set_user_data_length:ob,_opj_stream_set_write_function:pb,_opj_version:xc,_opj_write_tile:yc,_rintf:kj,_sbrk:lj,dynCall_di:mj,dynCall_ii:nj,dynCall_iii:oj,dynCall_iiii:pj,dynCall_iiiii:qj,dynCall_iiiiii:rj,dynCall_iiiiiii:sj,dynCall_iiiiiiii:tj,dynCall_iiiiiiiiiiii:uj,dynCall_vi:vj,dynCall_vii:wj,dynCall_viii:xj,dynCall_viiii:yj,establishStackSpace:Za,getTempRet0:ab,runPostSets:Wi,setTempRet0:$a,setThrew:_a,stackAlloc:Wa,stackRestore:Ya,stackSave:Xa}})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var ___muldi3=Module["___muldi3"]=asm["___muldi3"];var ___udivdi3=Module["___udivdi3"]=asm["___udivdi3"];var ___uremdi3=Module["___uremdi3"]=asm["___uremdi3"];var _bitshift64Ashr=Module["_bitshift64Ashr"]=asm["_bitshift64Ashr"];var _bitshift64Lshr=Module["_bitshift64Lshr"]=asm["_bitshift64Lshr"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var _emscripten_replace_memory=Module["_emscripten_replace_memory"]=asm["_emscripten_replace_memory"];var _free=Module["_free"]=asm["_free"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var _i64Subtract=Module["_i64Subtract"]=asm["_i64Subtract"];var _jp2_decode=Module["_jp2_decode"]=asm["_jp2_decode"];var _jp2_encode=Module["_jp2_encode"]=asm["_jp2_encode"];var _jp2_version=Module["_jp2_version"]=asm["_jp2_version"];var _llvm_bswap_i32=Module["_llvm_bswap_i32"]=asm["_llvm_bswap_i32"];var _malloc=Module["_malloc"]=asm["_malloc"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var _memset=Module["_memset"]=asm["_memset"];var _opj_create_compress=Module["_opj_create_compress"]=asm["_opj_create_compress"];var _opj_create_decompress=Module["_opj_create_decompress"]=asm["_opj_create_decompress"];var _opj_decode=Module["_opj_decode"]=asm["_opj_decode"];var _opj_decode_tile_data=Module["_opj_decode_tile_data"]=asm["_opj_decode_tile_data"];var _opj_destroy_codec=Module["_opj_destroy_codec"]=asm["_opj_destroy_codec"];var _opj_destroy_cstr_index=Module["_opj_destroy_cstr_index"]=asm["_opj_destroy_cstr_index"];var _opj_destroy_cstr_info=Module["_opj_destroy_cstr_info"]=asm["_opj_destroy_cstr_info"];var _opj_dump_codec=Module["_opj_dump_codec"]=asm["_opj_dump_codec"];var _opj_encode=Module["_opj_encode"]=asm["_opj_encode"];var _opj_end_compress=Module["_opj_end_compress"]=asm["_opj_end_compress"];var _opj_end_decompress=Module["_opj_end_decompress"]=asm["_opj_end_decompress"];var _opj_get_cstr_index=Module["_opj_get_cstr_index"]=asm["_opj_get_cstr_index"];var _opj_get_cstr_info=Module["_opj_get_cstr_info"]=asm["_opj_get_cstr_info"];var _opj_get_decoded_tile=Module["_opj_get_decoded_tile"]=asm["_opj_get_decoded_tile"];var _opj_image_create=Module["_opj_image_create"]=asm["_opj_image_create"];var _opj_image_destroy=Module["_opj_image_destroy"]=asm["_opj_image_destroy"];var _opj_image_tile_create=Module["_opj_image_tile_create"]=asm["_opj_image_tile_create"];var _opj_read_header=Module["_opj_read_header"]=asm["_opj_read_header"];var _opj_read_tile_header=Module["_opj_read_tile_header"]=asm["_opj_read_tile_header"];var _opj_set_MCT=Module["_opj_set_MCT"]=asm["_opj_set_MCT"];var _opj_set_decode_area=Module["_opj_set_decode_area"]=asm["_opj_set_decode_area"];var _opj_set_decoded_resolution_factor=Module["_opj_set_decoded_resolution_factor"]=asm["_opj_set_decoded_resolution_factor"];var _opj_set_default_decoder_parameters=Module["_opj_set_default_decoder_parameters"]=asm["_opj_set_default_decoder_parameters"];var _opj_set_default_encoder_parameters=Module["_opj_set_default_encoder_parameters"]=asm["_opj_set_default_encoder_parameters"];var _opj_set_error_handler=Module["_opj_set_error_handler"]=asm["_opj_set_error_handler"];var _opj_set_info_handler=Module["_opj_set_info_handler"]=asm["_opj_set_info_handler"];var _opj_set_warning_handler=Module["_opj_set_warning_handler"]=asm["_opj_set_warning_handler"];var _opj_setup_decoder=Module["_opj_setup_decoder"]=asm["_opj_setup_decoder"];var _opj_setup_encoder=Module["_opj_setup_encoder"]=asm["_opj_setup_encoder"];var _opj_start_compress=Module["_opj_start_compress"]=asm["_opj_start_compress"];var _opj_stream_create=Module["_opj_stream_create"]=asm["_opj_stream_create"];var _opj_stream_create_buffer_stream=Module["_opj_stream_create_buffer_stream"]=asm["_opj_stream_create_buffer_stream"];var _opj_stream_create_default_file_stream=Module["_opj_stream_create_default_file_stream"]=asm["_opj_stream_create_default_file_stream"];var _opj_stream_create_file_stream=Module["_opj_stream_create_file_stream"]=asm["_opj_stream_create_file_stream"];var _opj_stream_default_create=Module["_opj_stream_default_create"]=asm["_opj_stream_default_create"];var _opj_stream_destroy=Module["_opj_stream_destroy"]=asm["_opj_stream_destroy"];var _opj_stream_set_read_function=Module["_opj_stream_set_read_function"]=asm["_opj_stream_set_read_function"];var _opj_stream_set_seek_function=Module["_opj_stream_set_seek_function"]=asm["_opj_stream_set_seek_function"];var _opj_stream_set_skip_function=Module["_opj_stream_set_skip_function"]=asm["_opj_stream_set_skip_function"];var _opj_stream_set_user_data=Module["_opj_stream_set_user_data"]=asm["_opj_stream_set_user_data"];var _opj_stream_set_user_data_length=Module["_opj_stream_set_user_data_length"]=asm["_opj_stream_set_user_data_length"];var _opj_stream_set_write_function=Module["_opj_stream_set_write_function"]=asm["_opj_stream_set_write_function"];var _opj_version=Module["_opj_version"]=asm["_opj_version"];var _opj_write_tile=Module["_opj_write_tile"]=asm["_opj_write_tile"];var _rintf=Module["_rintf"]=asm["_rintf"];var _sbrk=Module["_sbrk"]=asm["_sbrk"];var establishStackSpace=Module["establishStackSpace"]=asm["establishStackSpace"];var getTempRet0=Module["getTempRet0"]=asm["getTempRet0"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];var setTempRet0=Module["setTempRet0"]=asm["setTempRet0"];var setThrew=Module["setThrew"]=asm["setThrew"];var stackAlloc=Module["stackAlloc"]=asm["stackAlloc"];var stackRestore=Module["stackRestore"]=asm["stackRestore"];var stackSave=Module["stackSave"]=asm["stackSave"];var dynCall_di=Module["dynCall_di"]=asm["dynCall_di"];var dynCall_ii=Module["dynCall_ii"]=asm["dynCall_ii"];var dynCall_iii=Module["dynCall_iii"]=asm["dynCall_iii"];var dynCall_iiii=Module["dynCall_iiii"]=asm["dynCall_iiii"];var dynCall_iiiii=Module["dynCall_iiiii"]=asm["dynCall_iiiii"];var dynCall_iiiiii=Module["dynCall_iiiiii"]=asm["dynCall_iiiiii"];var dynCall_iiiiiii=Module["dynCall_iiiiiii"]=asm["dynCall_iiiiiii"];var dynCall_iiiiiiii=Module["dynCall_iiiiiiii"]=asm["dynCall_iiiiiiii"];var dynCall_iiiiiiiiiiii=Module["dynCall_iiiiiiiiiiii"]=asm["dynCall_iiiiiiiiiiii"];var dynCall_vi=Module["dynCall_vi"]=asm["dynCall_vi"];var dynCall_vii=Module["dynCall_vii"]=asm["dynCall_vii"];var dynCall_viii=Module["dynCall_viii"]=asm["dynCall_viii"];var dynCall_viiii=Module["dynCall_viiii"]=asm["dynCall_viiii"];Module["asm"]=asm;Module["ccall"]=ccall;Module["getValue"]=getValue;Module["writeArrayToMemory"]=writeArrayToMemory;if(memoryInitializer){if(!isDataURI(memoryInitializer)){if(typeof Module["locateFile"]==="function"){memoryInitializer=Module["locateFile"](memoryInitializer)}else if(Module["memoryInitializerPrefixURL"]){memoryInitializer=Module["memoryInitializerPrefixURL"]+memoryInitializer}}if(ENVIRONMENT_IS_NODE||ENVIRONMENT_IS_SHELL){var data=Module["readBinary"](memoryInitializer);HEAPU8.set(data,GLOBAL_BASE)}else{addRunDependency("memory initializer");var applyMemoryInitializer=(function(data){if(data.byteLength)data=new Uint8Array(data);HEAPU8.set(data,GLOBAL_BASE);if(Module["memoryInitializerRequest"])delete Module["memoryInitializerRequest"].response;removeRunDependency("memory initializer")});function doBrowserLoad(){Module["readAsync"](memoryInitializer,applyMemoryInitializer,(function(){throw"could not load memory initializer "+memoryInitializer}))}var memoryInitializerBytes=tryParseAsDataURI(memoryInitializer);if(memoryInitializerBytes){applyMemoryInitializer(memoryInitializerBytes.buffer)}else if(Module["memoryInitializerRequest"]){function useRequest(){var request=Module["memoryInitializerRequest"];var response=request.response;if(request.status!==200&&request.status!==0){var data=tryParseAsDataURI(Module["memoryInitializerRequestURL"]);if(data){response=data.buffer}else{console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: "+request.status+", retrying "+memoryInitializer);doBrowserLoad();return}}applyMemoryInitializer(response)}if(Module["memoryInitializerRequest"].response){setTimeout(useRequest,0)}else{Module["memoryInitializerRequest"].addEventListener("load",useRequest)}}else{doBrowserLoad()}}}Module["then"]=(function(func){if(Module["calledRun"]){func(Module)}else{var old=Module["onRuntimeInitialized"];Module["onRuntimeInitialized"]=(function(){if(old)old();func(Module)})}return Module});function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};function run(args){args=args||Module["arguments"];if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]&&status===0){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}if(ENVIRONMENT_IS_NODE){process["exit"](status)}Module["quit"](status,new ExitStatus(status))}Module["exit"]=exit;function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;throw"abort("+what+"). Build with -s ASSERTIONS=1 for more info."}Module["abort"]=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}Module["noExitRuntime"]=true;run()






  return OpenJPEG;
};
if (true)
  module.exports = OpenJPEG;
else {}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/assert/assert.js":
/*!***************************************!*\
  !*** ./node_modules/assert/assert.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(/*! util/ */ "./node_modules/util/util.js");
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/const-ninf-float32/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/const-ninf-float32/lib/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// VARIABLES //

var FLOAT32_VIEW = new Float32Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );

// 1 11111111 00000000000000000000000 => 4286578688 => 0xff800000 (see IEEE 754-2008)
var NINF = 0xff800000;

// Set the ArrayBuffer bit sequence:
UINT32_VIEW[ 0 ] = NINF;


// EXPORTS //

module.exports = FLOAT32_VIEW[ 0 ];


/***/ }),

/***/ "./node_modules/const-pinf-float32/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/const-pinf-float32/lib/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// VARIABLES //

var FLOAT32_VIEW = new Float32Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );

// 0 11111111 00000000000000000000000 => 2139095040 => 0x7f800000 (see IEEE 754-2008)
var PINF = 0x7f800000;

// Set the ArrayBuffer bit sequence:
UINT32_VIEW[ 0 ] = PINF;


// EXPORTS //

module.exports = FLOAT32_VIEW[ 0 ];


/***/ }),

/***/ "./node_modules/dicom-parser/dist/dicomParser.min.js":
/*!***********************************************************!*\
  !*** ./node_modules/dicom-parser/dist/dicomParser.min.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*! dicom-parser - 1.8.1 - 2018-05-16 | (c) 2017 Chris Hafey | https://github.com/cornerstonejs/dicomParser */
!function(e,t){ true?module.exports=t():undefined}(this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=79)}([function(e,t){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=r(73),i=r(72),a=r(38);function o(){return f.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(o()<t)throw new RangeError("Invalid typed array length");return f.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=f.prototype:(null===e&&(e=new f(t)),e.length=t),e}function f(e,t,r){if(!(f.TYPED_ARRAY_SUPPORT||this instanceof f))return new f(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return l(this,e,t,r)}function l(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);f.TYPED_ARRAY_SUPPORT?(e=t).__proto__=f.prototype:e=d(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!f.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),i=(e=s(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(f.isBuffer(t)){var r=0|c(t.length);return 0===(e=s(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?s(e,0):d(e,t);if("Buffer"===t.type&&a(t.data))return d(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(u(t),e=s(e,t<0?0:0|c(t)),!f.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function d(e,t){var r=t.length<0?0:0|c(t.length);e=s(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function c(e){if(e>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|e}function p(e,t){if(f.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return Z(e).length;default:if(n)return z(e).length;t=(""+t).toLowerCase(),n=!0}}function g(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function m(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=f.from(t,n)),f.isBuffer(t))return 0===t.length?-1:_(e,t,r,n,i);if("number"==typeof t)return t&=255,f.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):_(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function _(e,t,r,n,i){var a,o=1,s=e.length,f=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,s/=2,f/=2,r/=2}function l(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(i){var u=-1;for(a=r;a<s;a++)if(l(e,a)===l(t,-1===u?0:a-u)){if(-1===u&&(u=a),a-u+1===f)return u*o}else-1!==u&&(a-=a-u),u=-1}else for(r+f>s&&(r=s-f),a=r;a>=0;a--){for(var h=!0,d=0;d<f;d++)if(l(e,a+d)!==l(t,d)){h=!1;break}if(h)return a}return-1}function b(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");n>a/2&&(n=a/2);for(var o=0;o<n;++o){var s=parseInt(t.substr(2*o,2),16);if(isNaN(s))return o;e[r+o]=s}return o}function y(e,t,r,n){return C(z(t,e.length-r),e,r,n)}function v(e,t,r,n){return C(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function w(e,t,r,n){return v(e,t,r,n)}function E(e,t,r,n){return C(Z(t),e,r,n)}function x(e,t,r,n){return C(function(e,t){for(var r,n,i,a=[],o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,i=r%256,a.push(i),a.push(n);return a}(t,e.length-r),e,r,n)}function k(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function S(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var a,o,s,f,l=e[i],u=null,h=l>239?4:l>223?3:l>191?2:1;if(i+h<=r)switch(h){case 1:l<128&&(u=l);break;case 2:128==(192&(a=e[i+1]))&&(f=(31&l)<<6|63&a)>127&&(u=f);break;case 3:a=e[i+1],o=e[i+2],128==(192&a)&&128==(192&o)&&(f=(15&l)<<12|(63&a)<<6|63&o)>2047&&(f<55296||f>57343)&&(u=f);break;case 4:a=e[i+1],o=e[i+2],s=e[i+3],128==(192&a)&&128==(192&o)&&128==(192&s)&&(f=(15&l)<<18|(63&a)<<12|(63&o)<<6|63&s)>65535&&f<1114112&&(u=f)}null===u?(u=65533,h=1):u>65535&&(u-=65536,n.push(u>>>10&1023|55296),u=56320|1023&u),n.push(u),i+=h}return function(e){var t=e.length;if(t<=A)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=A));return r}(n)}t.Buffer=f,t.SlowBuffer=function(e){+e!=e&&(e=0);return f.alloc(+e)},t.INSPECT_MAX_BYTES=50,f.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=o(),f.poolSize=8192,f._augment=function(e){return e.__proto__=f.prototype,e},f.from=function(e,t,r){return l(null,e,t,r)},f.TYPED_ARRAY_SUPPORT&&(f.prototype.__proto__=Uint8Array.prototype,f.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&f[Symbol.species]===f&&Object.defineProperty(f,Symbol.species,{value:null,configurable:!0})),f.alloc=function(e,t,r){return function(e,t,r,n){return u(t),t<=0?s(e,t):void 0!==r?"string"==typeof n?s(e,t).fill(r,n):s(e,t).fill(r):s(e,t)}(null,e,t,r)},f.allocUnsafe=function(e){return h(null,e)},f.allocUnsafeSlow=function(e){return h(null,e)},f.isBuffer=function(e){return!(null==e||!e._isBuffer)},f.compare=function(e,t){if(!f.isBuffer(e)||!f.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},f.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},f.concat=function(e,t){if(!a(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return f.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=f.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var o=e[r];if(!f.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},f.byteLength=p,f.prototype._isBuffer=!0,f.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},f.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},f.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},f.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?S(this,0,e):function(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return T(this,t,r);case"utf8":case"utf-8":return S(this,t,r);case"ascii":return P(this,t,r);case"latin1":case"binary":return O(this,t,r);case"base64":return k(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}.apply(this,arguments)},f.prototype.equals=function(e){if(!f.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===f.compare(this,e)},f.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},f.prototype.compare=function(e,t,r,n,i){if(!f.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(t>>>=0,r>>>=0,n>>>=0,i>>>=0,this===e)return 0;for(var a=i-n,o=r-t,s=Math.min(a,o),l=this.slice(n,i),u=e.slice(t,r),h=0;h<s;++h)if(l[h]!==u[h]){a=l[h],o=u[h];break}return a<o?-1:o<a?1:0},f.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},f.prototype.indexOf=function(e,t,r){return m(this,e,t,r,!0)},f.prototype.lastIndexOf=function(e,t,r){return m(this,e,t,r,!1)},f.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var a=!1;;)switch(n){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return y(this,e,t,r);case"ascii":return v(this,e,t,r);case"latin1":case"binary":return w(this,e,t,r);case"base64":return E(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,t,r);default:if(a)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),a=!0}},f.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var A=4096;function P(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function O(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function T(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",a=t;a<r;++a)i+=j(e[a]);return i}function R(e,t,r){for(var n=e.slice(t,r),i="",a=0;a<n.length;a+=2)i+=String.fromCharCode(n[a]+256*n[a+1]);return i}function I(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function D(e,t,r,n,i,a){if(!f.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function L(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,a=Math.min(e.length-r,2);i<a;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function F(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,a=Math.min(e.length-r,4);i<a;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function U(e,t,r,n,i,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function B(e,t,r,n,a){return a||U(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function M(e,t,r,n,a){return a||U(e,0,r,8),i.write(e,t,r,n,52,8),r+8}f.prototype.slice=function(e,t){var r,n=this.length;if(e=~~e,t=void 0===t?n:~~t,e<0?(e+=n)<0&&(e=0):e>n&&(e=n),t<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),f.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=f.prototype;else{var i=t-e;r=new f(i,void 0);for(var a=0;a<i;++a)r[a]=this[a+e]}return r},f.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],i=1,a=0;++a<t&&(i*=256);)n+=this[e+a]*i;return n},f.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},f.prototype.readUInt8=function(e,t){return t||I(e,1,this.length),this[e]},f.prototype.readUInt16LE=function(e,t){return t||I(e,2,this.length),this[e]|this[e+1]<<8},f.prototype.readUInt16BE=function(e,t){return t||I(e,2,this.length),this[e]<<8|this[e+1]},f.prototype.readUInt32LE=function(e,t){return t||I(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},f.prototype.readUInt32BE=function(e,t){return t||I(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},f.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],i=1,a=0;++a<t&&(i*=256);)n+=this[e+a]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},f.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=t,i=1,a=this[e+--n];n>0&&(i*=256);)a+=this[e+--n]*i;return a>=(i*=128)&&(a-=Math.pow(2,8*t)),a},f.prototype.readInt8=function(e,t){return t||I(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},f.prototype.readInt16LE=function(e,t){t||I(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},f.prototype.readInt16BE=function(e,t){t||I(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},f.prototype.readInt32LE=function(e,t){return t||I(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},f.prototype.readInt32BE=function(e,t){return t||I(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},f.prototype.readFloatLE=function(e,t){return t||I(e,4,this.length),i.read(this,e,!0,23,4)},f.prototype.readFloatBE=function(e,t){return t||I(e,4,this.length),i.read(this,e,!1,23,4)},f.prototype.readDoubleLE=function(e,t){return t||I(e,8,this.length),i.read(this,e,!0,52,8)},f.prototype.readDoubleBE=function(e,t){return t||I(e,8,this.length),i.read(this,e,!1,52,8)},f.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||D(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,a=0;for(this[t]=255&e;++a<r&&(i*=256);)this[t+a]=e/i&255;return t+r},f.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||D(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,a=1;for(this[t+i]=255&e;--i>=0&&(a*=256);)this[t+i]=e/a&255;return t+r},f.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,1,255,0),f.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},f.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,65535,0),f.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},f.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,65535,0),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},f.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,4294967295,0),f.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):F(this,e,t,!0),t+4},f.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,4294967295,0),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):F(this,e,t,!1),t+4},f.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);D(this,e,t,r,i-1,-i)}var a=0,o=1,s=0;for(this[t]=255&e;++a<r&&(o*=256);)e<0&&0===s&&0!==this[t+a-1]&&(s=1),this[t+a]=(e/o>>0)-s&255;return t+r},f.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);D(this,e,t,r,i-1,-i)}var a=r-1,o=1,s=0;for(this[t+a]=255&e;--a>=0&&(o*=256);)e<0&&0===s&&0!==this[t+a+1]&&(s=1),this[t+a]=(e/o>>0)-s&255;return t+r},f.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,1,127,-128),f.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},f.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,32767,-32768),f.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},f.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,32767,-32768),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},f.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,2147483647,-2147483648),f.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):F(this,e,t,!0),t+4},f.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),f.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):F(this,e,t,!1),t+4},f.prototype.writeFloatLE=function(e,t,r){return B(this,e,t,!0,r)},f.prototype.writeFloatBE=function(e,t,r){return B(this,e,t,!1,r)},f.prototype.writeDoubleLE=function(e,t,r){return M(this,e,t,!0,r)},f.prototype.writeDoubleBE=function(e,t,r){return M(this,e,t,!1,r)},f.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,a=n-r;if(this===e&&r<t&&t<n)for(i=a-1;i>=0;--i)e[i+t]=this[i+r];else if(a<1e3||!f.TYPED_ARRAY_SUPPORT)for(i=0;i<a;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+a),t);return a},f.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!f.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var a;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{var o=f.isBuffer(e)?e:z(new f(e,n).toString()),s=o.length;for(a=0;a<r-t;++a)this[a+t]=o[a%s]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function j(e){return e<16?"0"+e.toString(16):e.toString(16)}function z(e,t){var r;t=t||1/0;for(var n=e.length,i=null,a=[],o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&a.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&a.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return a}function Z(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(N,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function C(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(0))},function(e,t,r){"use strict";var n=r(10),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=h;var a=r(6);a.inherits=r(5);var o=r(35),s=r(18);a.inherits(h,o);for(var f=i(s.prototype),l=0;l<f.length;l++){var u=f[l];h.prototype[u]||(h.prototype[u]=s.prototype[u])}function h(e){if(!(this instanceof h))return new h(e);o.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||n.nextTick(c,this)}function c(e){e.end()}Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),h.prototype._destroy=function(e,t){this.push(null),this.end(),n.nextTick(t,e)}},function(e,t){var r,n,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(e){r=a}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(e){n=o}}();var f,l=[],u=!1,h=-1;function d(){u&&f&&(u=!1,f.length?l=f.concat(l):h=-1,l.length&&c())}function c(){if(!u){var e=s(d);u=!0;for(var t=l.length;t;){for(f=l,l=[];++h<t;)f&&f[h].run();h=-1,t=l.length}f=null,u=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function g(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new p(e,t)),1!==l.length||u||s(c)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(void 0===e)throw"dicomParser.readTag: missing required parameter 'byteStream'";var t=256*e.readUint16()*256,r=e.readUint16();return"x"+("00000000"+(t+r).toString(16)).substr(-8)}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}},function(e,t,r){(function(e){function r(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===r(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===r(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===r(e)},t.isError=function(e){return"[object Error]"===r(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,r(1).Buffer)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=r(14);function a(e,t){return void 0!==e.parser?e.parser:t}var o=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.byteArrayParser=t,this.byteArray=r,this.elements=n}return n(e,[{key:"uint16",value:function(e,t){var r=this.elements[e];if(t=void 0!==t?t:0,r&&0!==r.length)return a(r,this.byteArrayParser).readUint16(this.byteArray,r.dataOffset+2*t)}},{key:"int16",value:function(e,t){var r=this.elements[e];if(t=void 0!==t?t:0,r&&0!==r.length)return a(r,this.byteArrayParser).readInt16(this.byteArray,r.dataOffset+2*t)}},{key:"uint32",value:function(e,t){var r=this.elements[e];if(t=void 0!==t?t:0,r&&0!==r.length)return a(r,this.byteArrayParser).readUint32(this.byteArray,r.dataOffset+4*t)}},{key:"int32",value:function(e,t){var r=this.elements[e];if(t=void 0!==t?t:0,r&&0!==r.length)return a(r,this.byteArrayParser).readInt32(this.byteArray,r.dataOffset+4*t)}},{key:"float",value:function(e,t){var r=this.elements[e];if(t=void 0!==t?t:0,r&&0!==r.length)return a(r,this.byteArrayParser).readFloat(this.byteArray,r.dataOffset+4*t)}},{key:"double",value:function(e,t){var r=this.elements[e];if(t=void 0!==t?t:0,r&&0!==r.length)return a(r,this.byteArrayParser).readDouble(this.byteArray,r.dataOffset+8*t)}},{key:"numStringValues",value:function(e){var t=this.elements[e];if(t&&t.length>0){var r=(0,i.readFixedString)(this.byteArray,t.dataOffset,t.length).match(/\\/g);return null===r?1:r.length+1}}},{key:"string",value:function(e,t){var r=this.elements[e];if(r&&r.length>0){var n=(0,i.readFixedString)(this.byteArray,r.dataOffset,r.length);return t>=0?n.split("\\")[t].trim():n.trim()}}},{key:"text",value:function(e,t){var r=this.elements[e];if(r&&r.length>0){var n=(0,i.readFixedString)(this.byteArray,r.dataOffset,r.length);return t>=0?n.split("\\")[t].replace(/ +$/,""):n.replace(/ +$/,"")}}},{key:"floatString",value:function(e,t){var r=this.elements[e];if(r&&r.length>0){t=void 0!==t?t:0;var n=this.string(e,t);if(void 0!==n)return parseFloat(n)}}},{key:"intString",value:function(e,t){var r=this.elements[e];if(r&&r.length>0){t=void 0!==t?t:0;var n=this.string(e,t);if(void 0!==n)return parseInt(n)}}},{key:"attributeTag",value:function(e){var t=this.elements[e];if(t&&4===t.length){var r=a(t,this.byteArrayParser).readUint16,n=this.byteArray,i=t.dataOffset;return"x"+("00000000"+(256*r(n,i)*256+r(n,i+2)).toString(16)).substr(-8)}}}]),e}();t.default=o},function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function i(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)i(r,n)&&(e[n]=r[n])}}return e},t.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var a={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var a=0;a<n;a++)e[i+a]=t[r+a]},flattenChunks:function(e){var t,r,n,i,a,o;for(n=0,t=0,r=e.length;t<r;t++)n+=e[t].length;for(o=new Uint8Array(n),i=0,t=0,r=e.length;t<r;t++)a=e[t],o.set(a,i),i+=a.length;return o}},o={arraySet:function(e,t,r,n,i){for(var a=0;a<n;a++)e[i+a]=t[r+a]},flattenChunks:function(e){return[].concat.apply([],e)}};t.setTyped=function(e){e?(t.Buf8=Uint8Array,t.Buf16=Uint16Array,t.Buf32=Int32Array,t.assign(t,a)):(t.Buf8=Array,t.Buf16=Array,t.Buf32=Array,t.assign(t,o))},t.setTyped(n)},function(e,t,r){var n=r(1),i=n.Buffer;function a(e,t){for(var r in e)t[r]=e[r]}function o(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(a(n,t),t.Buffer=o),a(i,o),o.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},o.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,r){"use strict";(function(t){!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,r,n,i){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var a,o,s=arguments.length;switch(s){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick(function(){e.call(null,r)});case 3:return t.nextTick(function(){e.call(null,r,n)});case 4:return t.nextTick(function(){e.call(null,r,n,i)});default:for(a=new Array(s-1),o=0;o<a.length;)a[o++]=arguments[o];return t.nextTick(function(){e.apply(null,a)})}}}:e.exports=t}).call(this,r(3))},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(t,r,n){if(void 0!==e&&t instanceof e)return t.slice(r,r+n);if(t instanceof Uint8Array)return new Uint8Array(t.buffer,t.byteOffset+r,n);throw"dicomParser.from: unknown type for byteArray"}}).call(this,r(1).Buffer)},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n,i=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(11),o=(n=a)&&n.__esModule?n:{default:n},s=r(14);var f=function(){function t(r,n,i){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),void 0===r)throw"dicomParser.ByteStream: missing required parameter 'byteArrayParser'";if(void 0===n)throw"dicomParser.ByteStream: missing required parameter 'byteArray'";if(n instanceof Uint8Array==!1&&n instanceof e==!1)throw"dicomParser.ByteStream: parameter byteArray is not of type Uint8Array or Buffer";if(i<0)throw"dicomParser.ByteStream: parameter 'position' cannot be less than 0";if(i>=n.length)throw"dicomParser.ByteStream: parameter 'position' cannot be greater than or equal to 'byteArray' length";this.byteArrayParser=r,this.byteArray=n,this.position=i||0,this.warnings=[]}return i(t,[{key:"seek",value:function(e){if(this.position+e<0)throw"dicomParser.ByteStream.prototype.seek: cannot seek to position < 0";this.position+=e}},{key:"readByteStream",value:function(e){if(this.position+e>this.byteArray.length)throw"dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread";var r=(0,o.default)(this.byteArray,this.position,e);return this.position+=e,new t(this.byteArrayParser,r)}},{key:"readUint16",value:function(){var e=this.byteArrayParser.readUint16(this.byteArray,this.position);return this.position+=2,e}},{key:"readUint32",value:function(){var e=this.byteArrayParser.readUint32(this.byteArray,this.position);return this.position+=4,e}},{key:"readFixedString",value:function(e){var t=(0,s.readFixedString)(this.byteArray,this.position,e);return this.position+=e,t}}]),t}();t.default=f}).call(this,r(1).Buffer)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(void 0===e)throw"dicomParser.readSequenceItem: missing required parameter 'byteStream'";var t={tag:(0,a.default)(e),length:e.readUint32(),dataOffset:e.position};if("xfffee000"!==t.tag)throw"dicomParser.readSequenceItem: item tag (FFFE,E000) not found at offset "+e.position;return t};var n,i=r(4),a=(n=i)&&n.__esModule?n:{default:n}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.readFixedString=function(e,t,r){if(r<0)throw"dicomParser.readFixedString - length cannot be less than 0";if(t+r>e.length)throw"dicomParser.readFixedString: attempt to read past end of buffer";for(var n,i="",a=0;a<r;a++){if(0===(n=e[t+a]))return t+=r,i;i+=String.fromCharCode(n)}return i}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(void 0===e)throw"dicomParser.readDicomElementExplicit: missing required parameter 'byteStream'";var f={tag:(0,o.default)(e),vr:e.readFixedString(2)};2===l(f.vr)?(f.length=e.readUint16(),f.dataOffset=e.position):(e.seek(2),f.length=e.readUint32(),f.dataOffset=e.position);4294967295===f.length&&(f.hadUndefinedLength=!0);if(f.tag===r)return f;if("SQ"===f.vr)return(0,s.default)(e,f,t),f;if(4294967295===f.length)return"x7fe00010"===f.tag?((0,n.default)(e,f,t),f):"UN"===f.vr?((0,i.default)(e,f),f):((0,a.default)(e,f),f);return e.seek(f.length),f};var n=f(r(42)),i=f(r(41)),a=f(r(24)),o=f(r(4)),s=f(r(40));function f(e){return e&&e.__esModule?e:{default:e}}var l=function(e){return"OB"===e||"OW"===e||"SQ"===e||"OF"===e||"UT"===e||"UN"===e?4:2}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseDicomDataSetExplicit=function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(r=void 0===r?t.byteArray.length:r,void 0===t)throw"dicomParser.parseDicomDataSetExplicit: missing required parameter 'byteStream'";if(r<t.position||r>t.byteArray.length)throw"dicomParser.parseDicomDataSetExplicit: invalid value for parameter 'maxP osition'";var a=e.elements;for(;t.position<r;){var o=(0,n.default)(t,e.warnings,i.untilTag);if(a[o.tag]=o,o.tag===i.untilTag)return}if(t.position>r)throw"dicomParser:parseDicomDataSetExplicit: buffer overrun"},t.parseDicomDataSetImplicit=function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(r=void 0===r?e.byteArray.length:r,void 0===t)throw"dicomParser.parseDicomDataSetImplicit: missing required parameter 'byteStream'";if(r<t.position||r>t.byteArray.length)throw"dicomParser.parseDicomDataSetImplicit: invalid value for parameter 'maxPosition'";var a=e.elements;for(;t.position<r;){var o=(0,i.default)(t,n.untilTag,n.vrCallback);if(a[o.tag]=o,o.tag===n.untilTag)return}};var n=a(r(15)),i=a(r(23));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,s,l){if(s=s||1,l=l||t.fragments,void 0===e)throw"dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'dataSet'";if(void 0===t)throw"dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'pixelDataElement'";if(void 0===r)throw"dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'startFragmentIndex'";if(void 0===s)throw"dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'numFragments'";if("x7fe00010"!==t.tag)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to non pixel data tag (expected tag = x7fe00010";if(!0!==t.encapsulatedPixelData)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(!0!==t.hadUndefinedLength)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(void 0===t.basicOffsetTable)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(void 0===t.fragments)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(t.fragments.length<=0)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(r<0)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'startFragmentIndex' must be >= 0";if(r>=t.fragments.length)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'startFragmentIndex' must be < number of fragments";if(s<1)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'numFragments' must be > 0";if(r+s>t.fragments.length)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'startFragment' + 'numFragments' < number of fragments";var u=new i.default(e.byteArrayParser,e.byteArray,t.dataOffset),h=(0,a.default)(u);if("xfffee000"!==h.tag)throw"dicomParser.readEncapsulatedPixelData: missing basic offset table xfffee000";u.seek(h.length);var d=u.position;if(1===s)return(0,o.default)(u.byteArray,d+l[r].offset+8,l[r].length);for(var c=f(l,r,s),p=(0,n.default)(u.byteArray,c),g=0,m=r;m<r+s;m++)for(var _=d+l[m].offset+8,b=0;b<l[m].length;b++)p[g++]=u.byteArray[_++];return p};var n=s(r(22)),i=s(r(12)),a=s(r(13)),o=s(r(11));function s(e){return e&&e.__esModule?e:{default:e}}var f=function(e,t,r){for(var n=0,i=t;i<t+r;i++)n+=e[i].length;return n}},function(e,t,r){"use strict";(function(t,n,i){var a=r(10);function o(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;e.entry=null;for(;n;){var i=n.callback;t.pendingcb--,i(r),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=b;var s,f=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?n:a.nextTick;b.WritableState=_;var l=r(6);l.inherits=r(5);var u={deprecate:r(61)},h=r(34),d=r(9).Buffer,c=i.Uint8Array||function(){};var p,g=r(33);function m(){}function _(e,t){s=s||r(2),e=e||{};var n=t instanceof s;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,l=e.writableHighWaterMark,u=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(l||0===l)?l:u,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===e.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,i){--t.pendingcb,r?(a.nextTick(i,n),a.nextTick(k,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(i(n),e._writableState.errorEmitted=!0,e.emit("error",n),k(e,t))}(e,r,n,t,i);else{var o=E(r);o||r.corked||r.bufferProcessing||!r.bufferedRequest||w(e,r),n?f(v,e,r,o,i):v(e,r,o,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function b(e){if(s=s||r(2),!(p.call(b,this)||this instanceof s))return new b(e);this._writableState=new _(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),h.call(this)}function y(e,t,r,n,i,a,o){t.writelen=n,t.writecb=o,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,a,t.onwrite),t.sync=!1}function v(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),k(e,t)}function w(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),a=t.corkedRequestsFree;a.entry=r;for(var s=0,f=!0;r;)i[s]=r,r.isBuf||(f=!1),r=r.next,s+=1;i.allBuffers=f,y(e,t,!0,t.length,i,"",a.finish),t.pendingcb++,t.lastBufferedRequest=null,a.next?(t.corkedRequestsFree=a.next,a.next=null):t.corkedRequestsFree=new o(t),t.bufferedRequestCount=0}else{for(;r;){var l=r.chunk,u=r.encoding,h=r.callback;if(y(e,t,!1,t.objectMode?1:l.length,l,u,h),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function E(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function x(e,t){e._final(function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),k(e,t)})}function k(e,t){var r=E(t);return r&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,a.nextTick(x,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}l.inherits(b,h),_.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(_.prototype,"buffer",{get:u.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(b,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===b&&(e&&e._writableState instanceof _)}})):p=function(e){return e instanceof this},b.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},b.prototype.write=function(e,t,r){var n,i=this._writableState,o=!1,s=!i.objectMode&&(n=e,d.isBuffer(n)||n instanceof c);return s&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(r=t,t=null),s?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=m),i.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),a.nextTick(t,r)}(this,r):(s||function(e,t,r,n){var i=!0,o=!1;return null===r?o=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),a.nextTick(n,o),i=!1),i}(this,i,e,r))&&(i.pendingcb++,o=function(e,t,r,n,i,a){if(!r){var o=function(e,t,r){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,r));return t}(t,n,i);n!==o&&(r=!0,i="buffer",n=o)}var s=t.objectMode?1:n.length;t.length+=s;var f=t.length<t.highWaterMark;f||(t.needDrain=!0);if(t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:a,next:null},l?l.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else y(e,t,!1,s,n,i,a);return f}(this,i,s,e,t,r)),o},b.prototype.cork=function(){this._writableState.corked++},b.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||w(this,e))},b.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},b.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},b.prototype._writev=null,b.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!==e&&void 0!==e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,k(e,t),r&&(t.finished?a.nextTick(r):e.once("finish",r));t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),b.prototype.destroy=g.destroy,b.prototype._undestroy=g.undestroy,b.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,r(3),r(63).setImmediate,r(0))},function(e,t,r){(t=e.exports=r(35)).Stream=t,t.Readable=t,t.Writable=r(18),t.Duplex=r(2),t.Transform=r(31),t.PassThrough=r(60)},function(e,t){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function n(e){return"function"==typeof e}function i(e){return"object"==typeof e&&null!==e}function a(e){return void 0===e}e.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,r,o,s,f,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var u=new Error('Uncaught, unspecified "error" event. ('+t+")");throw u.context=t,u}if(a(r=this._events[e]))return!1;if(n(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),r.apply(this,s)}else if(i(r))for(s=Array.prototype.slice.call(arguments,1),o=(l=r.slice()).length,f=0;f<o;f++)l[f].apply(this,s);return!0},r.prototype.addListener=function(e,t){var o;if(!n(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,n(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(o=a(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&o>0&&this._events[e].length>o&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){if(!n(t))throw TypeError("listener must be a function");var r=!1;function i(){this.removeListener(e,i),r||(r=!0,t.apply(this,arguments))}return i.listener=t,this.on(e,i),this},r.prototype.removeListener=function(e,t){var r,a,o,s;if(!n(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(o=(r=this._events[e]).length,a=-1,r===t||n(r.listener)&&r.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(r)){for(s=o;s-- >0;)if(r[s]===t||r[s].listener&&r[s].listener===t){a=s;break}if(a<0)return this;1===r.length?(r.length=0,delete this._events[e]):r.splice(a,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n(r=this._events[e]))this.removeListener(e,r);else if(r)for(;r.length;)this.removeListener(e,r[r.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){return this._events&&this._events[e]?n(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(n(t))return 1;if(t)return t.length}return 0},r.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={readUint16:function(e,t){if(t<0)throw"littleEndianByteArrayParser.readUint16: position cannot be less than 0";if(t+2>e.length)throw"littleEndianByteArrayParser.readUint16: attempt to read past end of buffer";return e[t]+256*e[t+1]},readInt16:function(e,t){if(t<0)throw"littleEndianByteArrayParser.readInt16: position cannot be less than 0";if(t+2>e.length)throw"littleEndianByteArrayParser.readInt16: attempt to read past end of buffer";var r=e[t]+(e[t+1]<<8);return 32768&r&&(r=r-65535-1),r},readUint32:function(e,t){if(t<0)throw"littleEndianByteArrayParser.readUint32: position cannot be less than 0";if(t+4>e.length)throw"littleEndianByteArrayParser.readUint32: attempt to read past end of buffer";return e[t]+256*e[t+1]+256*e[t+2]*256+256*e[t+3]*256*256},readInt32:function(e,t){if(t<0)throw"littleEndianByteArrayParser.readInt32: position cannot be less than 0";if(t+4>e.length)throw"littleEndianByteArrayParser.readInt32: attempt to read past end of buffer";return e[t]+(e[t+1]<<8)+(e[t+2]<<16)+(e[t+3]<<24)},readFloat:function(e,t){if(t<0)throw"littleEndianByteArrayParser.readFloat: position cannot be less than 0";if(t+4>e.length)throw"littleEndianByteArrayParser.readFloat: attempt to read past end of buffer";var r=new Uint8Array(4);return r[0]=e[t],r[1]=e[t+1],r[2]=e[t+2],r[3]=e[t+3],new Float32Array(r.buffer)[0]},readDouble:function(e,t){if(t<0)throw"littleEndianByteArrayParser.readDouble: position cannot be less than 0";if(t+8>e.length)throw"littleEndianByteArrayParser.readDouble: attempt to read past end of buffer";var r=new Uint8Array(8);return r[0]=e[t],r[1]=e[t+1],r[2]=e[t+2],r[3]=e[t+3],r[4]=e[t+4],r[5]=e[t+5],r[6]=e[t+6],r[7]=e[t+7],new Float64Array(r.buffer)[0]}}},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(t,r){if(void 0!==e&&t instanceof e)return e.alloc(r);if(t instanceof Uint8Array)return new Uint8Array(r);throw"dicomParser.alloc: unknown type for byteArray"}}).call(this,r(1).Buffer)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(void 0===e)throw"dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'";var o={tag:(0,a.default)(e),length:e.readUint32(),dataOffset:e.position};4294967295===o.length&&(o.hadUndefinedLength=!0);if(o.tag===t)return o;if(s(o,e,r))return(0,i.default)(e,o),o;if(o.hadUndefinedLength)return(0,n.default)(e,o),o;return e.seek(o.length),o};var n=o(r(24)),i=o(r(39)),a=o(r(4));function o(e){return e&&e.__esModule?e:{default:e}}var s=function(e,t,r){if(void 0!==r)return"SQ"===r(e.tag);if(t.position+4<=t.byteArray.length){var n=(0,a.default)(t);return t.seek(-4),"xfffee000"===n||"xfffee0dd"===n}return t.warnings.push("eof encountered before finding sequence item tag or sequence delimiter tag in peeking to determine VR"),!1}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(void 0===e)throw"dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'";var r=e.byteArray.length-8;for(;e.position<=r;){var n=e.readUint16();if(65534===n){var i=e.readUint16();if(57357===i){var a=e.readUint32();return 0!==a&&e.warnings("encountered non zero length following item delimiter at position "+(e.position-4)+" while reading element of undefined length with tag "+t.tag),void(t.length=e.position-t.dataOffset)}}}t.length=e.byteArray.length-t.dataOffset,e.seek(e.byteArray.length-e.position)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={AE:!0,AS:!0,AT:!1,CS:!0,DA:!0,DS:!0,DT:!0,FL:!1,FD:!1,IS:!0,LO:!0,LT:!0,OB:!1,OD:!1,OF:!1,OW:!1,PN:!0,SH:!0,SL:!1,SQ:!1,SS:!1,ST:!0,TM:!0,UI:!0,UL:!1,UN:void 0,UR:!0,US:!1,UT:!0};t.isStringVr=function(e){return n[e]},t.isPrivateTag=function(e){return parseInt(e[4],10)%2==1},t.parsePN=function(e){if(void 0!==e){var t=e.split("^");return{familyName:t[0],givenName:t[1],middleName:t[2],prefix:t[3],suffix:t[4]}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,n,i){if(n=n||t.basicOffsetTable,i=i||t.fragments,void 0===e)throw"dicomParser.readEncapsulatedImageFrame: missing required parameter 'dataSet'";if(void 0===t)throw"dicomParser.readEncapsulatedImageFrame: missing required parameter 'pixelDataElement'";if(void 0===r)throw"dicomParser.readEncapsulatedImageFrame: missing required parameter 'frameIndex'";if(void 0===n)throw"dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' does not have basicOffsetTable";if("x7fe00010"!==t.tag)throw"dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to non pixel data tag (expected tag = x7fe00010)";if(!0!==t.encapsulatedPixelData)throw"dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(!0!==t.hadUndefinedLength)throw"dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to pixel data element that does not have undefined length";if(void 0===t.fragments)throw"dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to pixel data element that does not have fragments";if(0===n.length)throw"dicomParser.readEncapsulatedImageFrame: basicOffsetTable has zero entries";if(r<0)throw"dicomParser.readEncapsulatedImageFrame: parameter 'frameIndex' must be >= 0";if(r>=n.length)throw"dicomParser.readEncapsulatedImageFrame: parameter 'frameIndex' must be < basicOffsetTable.length";var f=n[r],l=o(i,f);if(void 0===l)throw"dicomParser.readEncapsulatedImageFrame: unable to find fragment that matches basic offset table entry";var u=s(r,n,i,l);return(0,a.default)(e,t,l,u,i)};var n,i=r(17),a=(n=i)&&n.__esModule?n:{default:n};var o=function(e,t){for(var r=0;r<e.length;r++)if(e[r].offset===t)return r},s=function(e,t,r,n){if(e===t.length-1)return r.length-n;for(var i=t[e+1],a=n+1;a<r.length;a++)if(r[a].offset===i)return a-n;throw"dicomParser.calculateNumberOfFragmentsForFrame: could not find fragment with offset matching basic offset table"}},function(e,t,r){"use strict";var n=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();e.exports=function(e,t,r,i){var a=n,o=i+r;e^=-1;for(var s=i;s<o;s++)e=e>>>8^a[255&(e^t[s])];return-1^e}},function(e,t,r){"use strict";e.exports=function(e,t,r,n){for(var i=65535&e|0,a=e>>>16&65535|0,o=0;0!==r;){r-=o=r>2e3?2e3:r;do{a=a+(i=i+t[n++]|0)|0}while(--o);i%=65521,a%=65521}return i|a<<16|0}},function(e,t,r){(function(e,n){var i=/%[sdj%]/g;t.format=function(e){if(!_(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(s(arguments[r]));return t.join(" ")}r=1;for(var n=arguments,a=n.length,o=String(e).replace(i,function(e){if("%%"===e)return"%";if(r>=a)return e;switch(e){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(e){return"[Circular]"}default:return e}}),f=n[r];r<a;f=n[++r])g(f)||!v(f)?o+=" "+f:o+=" "+s(f);return o},t.deprecate=function(r,i){if(b(e.process))return function(){return t.deprecate(r,i).apply(this,arguments)};if(!0===n.noDeprecation)return r;var a=!1;return function(){if(!a){if(n.throwDeprecation)throw new Error(i);n.traceDeprecation?console.trace(i):console.error(i),a=!0}return r.apply(this,arguments)}};var a,o={};function s(e,r){var n={seen:[],stylize:l};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),p(r)?n.showHidden=r:r&&t._extend(n,r),b(n.showHidden)&&(n.showHidden=!1),b(n.depth)&&(n.depth=2),b(n.colors)&&(n.colors=!1),b(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=f),u(n,e,n.depth)}function f(e,t){var r=s.styles[t];return r?"["+s.colors[r][0]+"m"+e+"["+s.colors[r][1]+"m":e}function l(e,t){return e}function u(e,r,n){if(e.customInspect&&r&&x(r.inspect)&&r.inspect!==t.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,e);return _(i)||(i=u(e,i,n)),i}var a=function(e,t){if(b(t))return e.stylize("undefined","undefined");if(_(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}if(m(t))return e.stylize(""+t,"number");if(p(t))return e.stylize(""+t,"boolean");if(g(t))return e.stylize("null","null")}(e,r);if(a)return a;var o=Object.keys(r),s=function(e){var t={};return e.forEach(function(e,r){t[e]=!0}),t}(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(r)),E(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return h(r);if(0===o.length){if(x(r)){var f=r.name?": "+r.name:"";return e.stylize("[Function"+f+"]","special")}if(y(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(w(r))return e.stylize(Date.prototype.toString.call(r),"date");if(E(r))return h(r)}var l,v="",k=!1,S=["{","}"];(c(r)&&(k=!0,S=["[","]"]),x(r))&&(v=" [Function"+(r.name?": "+r.name:"")+"]");return y(r)&&(v=" "+RegExp.prototype.toString.call(r)),w(r)&&(v=" "+Date.prototype.toUTCString.call(r)),E(r)&&(v=" "+h(r)),0!==o.length||k&&0!=r.length?n<0?y(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special"):(e.seen.push(r),l=k?function(e,t,r,n,i){for(var a=[],o=0,s=t.length;o<s;++o)P(t,String(o))?a.push(d(e,t,r,n,String(o),!0)):a.push("");return i.forEach(function(i){i.match(/^\d+$/)||a.push(d(e,t,r,n,i,!0))}),a}(e,r,n,s,o):o.map(function(t){return d(e,r,n,s,t,k)}),e.seen.pop(),function(e,t,r){if(e.reduce(function(e,t){return 0,t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1];return r[0]+t+" "+e.join(", ")+" "+r[1]}(l,v,S)):S[0]+v+S[1]}function h(e){return"["+Error.prototype.toString.call(e)+"]"}function d(e,t,r,n,i,a){var o,s,f;if((f=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?s=f.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):f.set&&(s=e.stylize("[Setter]","special")),P(n,i)||(o="["+i+"]"),s||(e.seen.indexOf(f.value)<0?(s=g(r)?u(e,f.value,null):u(e,f.value,r-1)).indexOf("\n")>-1&&(s=a?s.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+s.split("\n").map(function(e){return"   "+e}).join("\n")):s=e.stylize("[Circular]","special")),b(o)){if(a&&i.match(/^\d+$/))return s;(o=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=e.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=e.stylize(o,"string"))}return o+": "+s}function c(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function g(e){return null===e}function m(e){return"number"==typeof e}function _(e){return"string"==typeof e}function b(e){return void 0===e}function y(e){return v(e)&&"[object RegExp]"===k(e)}function v(e){return"object"==typeof e&&null!==e}function w(e){return v(e)&&"[object Date]"===k(e)}function E(e){return v(e)&&("[object Error]"===k(e)||e instanceof Error)}function x(e){return"function"==typeof e}function k(e){return Object.prototype.toString.call(e)}function S(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(b(a)&&(a=n.env.NODE_DEBUG||""),e=e.toUpperCase(),!o[e])if(new RegExp("\\b"+e+"\\b","i").test(a)){var r=n.pid;o[e]=function(){var n=t.format.apply(t,arguments);console.error("%s %d: %s",e,r,n)}}else o[e]=function(){};return o[e]},t.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=c,t.isBoolean=p,t.isNull=g,t.isNullOrUndefined=function(e){return null==e},t.isNumber=m,t.isString=_,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=b,t.isRegExp=y,t.isObject=v,t.isDate=w,t.isError=E,t.isFunction=x,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=r(54);var A=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function P(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){var e,r;console.log("%s - %s",(e=new Date,r=[S(e.getHours()),S(e.getMinutes()),S(e.getSeconds())].join(":"),[e.getDate(),A[e.getMonth()],r].join(" ")),t.format.apply(t,arguments))},t.inherits=r(53),t._extend=function(e,t){if(!t||!v(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e}}).call(this,r(0),r(3))},function(e,t,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function n(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}function i(e){return t.Buffer&&"function"==typeof t.Buffer.isBuffer?t.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var a=r(29),o=Object.prototype.hasOwnProperty,s=Array.prototype.slice,f="foo"===function(){}.name;function l(e){return Object.prototype.toString.call(e)}function u(e){return!i(e)&&("function"==typeof t.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var h=e.exports=_,d=/\s*function\s+([^\(\s]*)\s*/;function c(e){if(a.isFunction(e)){if(f)return e.name;var t=e.toString().match(d);return t&&t[1]}}function p(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function g(e){if(f||!a.isFunction(e))return a.inspect(e);var t=c(e);return"[Function"+(t?": "+t:"")+"]"}function m(e,t,r,n,i){throw new h.AssertionError({message:r,actual:e,expected:t,operator:n,stackStartFunction:i})}function _(e,t){e||m(e,!0,t,"==",h.ok)}function b(e,t,r,o){if(e===t)return!0;if(i(e)&&i(t))return 0===n(e,t);if(a.isDate(e)&&a.isDate(t))return e.getTime()===t.getTime();if(a.isRegExp(e)&&a.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(u(e)&&u(t)&&l(e)===l(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===n(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(i(e)!==i(t))return!1;var f=(o=o||{actual:[],expected:[]}).actual.indexOf(e);return-1!==f&&f===o.expected.indexOf(t)||(o.actual.push(e),o.expected.push(t),function(e,t,r,n){if(null===e||void 0===e||null===t||void 0===t)return!1;if(a.isPrimitive(e)||a.isPrimitive(t))return e===t;if(r&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=y(e),o=y(t);if(i&&!o||!i&&o)return!1;if(i)return e=s.call(e),t=s.call(t),b(e,t,r);var f,l,u=E(e),h=E(t);if(u.length!==h.length)return!1;for(u.sort(),h.sort(),l=u.length-1;l>=0;l--)if(u[l]!==h[l])return!1;for(l=u.length-1;l>=0;l--)if(f=u[l],!b(e[f],t[f],r,n))return!1;return!0}(e,t,r,o))}return r?e===t:e==t}function y(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function v(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function w(e,t,r,n){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=function(e){var t;try{e()}catch(e){t=e}return t}(t),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),e&&!i&&m(i,r,"Missing expected exception"+n);var o="string"==typeof n,s=!e&&a.isError(i),f=!e&&i&&!r;if((s&&o&&v(i,r)||f)&&m(i,r,"Got unwanted exception"+n),e&&i&&r&&!v(i,r)||!e&&i)throw i}h.AssertionError=function(e){var t;this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=p(g((t=this).actual),128)+" "+t.operator+" "+p(g(t.expected),128),this.generatedMessage=!0);var r=e.stackStartFunction||m;if(Error.captureStackTrace)Error.captureStackTrace(this,r);else{var n=new Error;if(n.stack){var i=n.stack,a=c(r),o=i.indexOf("\n"+a);if(o>=0){var s=i.indexOf("\n",o+1);i=i.substring(s+1)}this.stack=i}}},a.inherits(h.AssertionError,Error),h.fail=m,h.ok=_,h.equal=function(e,t,r){e!=t&&m(e,t,r,"==",h.equal)},h.notEqual=function(e,t,r){e==t&&m(e,t,r,"!=",h.notEqual)},h.deepEqual=function(e,t,r){b(e,t,!1)||m(e,t,r,"deepEqual",h.deepEqual)},h.deepStrictEqual=function(e,t,r){b(e,t,!0)||m(e,t,r,"deepStrictEqual",h.deepStrictEqual)},h.notDeepEqual=function(e,t,r){b(e,t,!1)&&m(e,t,r,"notDeepEqual",h.notDeepEqual)},h.notDeepStrictEqual=function e(t,r,n){b(t,r,!0)&&m(t,r,n,"notDeepStrictEqual",e)},h.strictEqual=function(e,t,r){e!==t&&m(e,t,r,"===",h.strictEqual)},h.notStrictEqual=function(e,t,r){e===t&&m(e,t,r,"!==",h.notStrictEqual)},h.throws=function(e,t,r){w(!0,e,t,r)},h.doesNotThrow=function(e,t,r){w(!1,e,t,r)},h.ifError=function(e){if(e)throw e};var E=Object.keys||function(e){var t=[];for(var r in e)o.call(e,r)&&t.push(r);return t}}).call(this,r(0))},function(e,t,r){"use strict";e.exports=a;var n=r(2),i=r(6);function a(e){if(!(this instanceof a))return new a(e);n.call(this,e),this._transformState={afterTransform:function(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",o)}function o(){var e=this;"function"==typeof this._flush?this._flush(function(t,r){s(e,t,r)}):s(this,null,null)}function s(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=r(5),i.inherits(a,n),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,n.prototype.push.call(this,e,t)},a.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},a.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},a.prototype._destroy=function(e,t){var r=this;n.prototype._destroy.call(this,e,function(e){t(e),r.emit("close")})}},function(e,t,r){"use strict";var n=r(9).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function a(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=f,this.end=l,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=u,this.end=h,t=3;break;default:return this.write=d,void(this.end=c)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function o(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:-1}function s(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�".repeat(r);if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�".repeat(r+1);if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�".repeat(r+2)}}(this,e,t);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function f(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function l(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function u(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function h(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function c(e){return e&&e.length?this.write(e):""}t.StringDecoder=a,a.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},a.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�".repeat(this.lastTotal-this.lastNeed):t},a.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=o(t[n]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--n<r)return 0;if((i=o(t[n]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--n<r)return 0;if((i=o(t[n]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},a.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,r){"use strict";var n=r(10);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,a=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return a||o?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(n.nextTick(i,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,r){e.exports=r(20).EventEmitter},function(e,t,r){"use strict";(function(t,n){var i=r(10);e.exports=y;var a,o=r(38);y.ReadableState=b;r(20).EventEmitter;var s=function(e,t){return e.listeners(t).length},f=r(34),l=r(9).Buffer,u=t.Uint8Array||function(){};var h=r(6);h.inherits=r(5);var d=r(66),c=void 0;c=d&&d.debuglog?d.debuglog("stream"):function(){};var p,g=r(65),m=r(33);h.inherits(y,f);var _=["error","close","destroy","pause","resume"];function b(e,t){a=a||r(2),e=e||{};var n=t instanceof a;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,o=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(o||0===o)?o:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new g,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=r(32).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function y(e){if(a=a||r(2),!(this instanceof y))return new y(e);this._readableState=new b(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),f.call(this)}function v(e,t,r,n,i){var a,o=e._readableState;null===t?(o.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,k(e)}(e,o)):(i||(a=function(e,t){var r;n=t,l.isBuffer(n)||n instanceof u||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));var n;return r}(o,t)),a?e.emit("error",a):o.objectMode||t&&t.length>0?("string"==typeof t||o.objectMode||Object.getPrototypeOf(t)===l.prototype||(t=function(e){return l.from(e)}(t)),n?o.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):w(e,o,t,!0):o.ended?e.emit("error",new Error("stream.push() after EOF")):(o.reading=!1,o.decoder&&!r?(t=o.decoder.write(t),o.objectMode||0!==t.length?w(e,o,t,!1):A(e,o)):w(e,o,t,!1))):n||(o.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(o)}function w(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&k(e)),A(e,t)}Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),y.prototype.destroy=m.destroy,y.prototype._undestroy=m.undestroy,y.prototype._destroy=function(e,t){this.push(null),t(e)},y.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=l.from(e,t),t=""),r=!0),v(this,e,t,!1,r)},y.prototype.unshift=function(e){return v(this,e,null,!0,!1)},y.prototype.isPaused=function(){return!1===this._readableState.flowing},y.prototype.setEncoding=function(e){return p||(p=r(32).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};var E=8388608;function x(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=E?e=E:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function k(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(c("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(S,e):S(e))}function S(e){c("emit readable"),e.emit("readable"),R(e)}function A(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(P,e,t))}function P(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(c("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function O(e){c("readable nexttick read 0"),e.read(0)}function T(e,t){t.reading||(c("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),R(e),t.flowing&&!t.reading&&e.read(0)}function R(e){var t=e._readableState;for(c("flow",t.flowing);t.flowing&&null!==e.read(););}function I(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,i=r.data;e-=i.length;for(;r=r.next;){var a=r.data,o=e>a.length?a.length:e;if(o===a.length?i+=a:i+=a.slice(0,e),0===(e-=o)){o===a.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=a.slice(o));break}++n}return t.length-=n,i}(e,t):function(e,t){var r=l.allocUnsafe(e),n=t.head,i=1;n.data.copy(r),e-=n.data.length;for(;n=n.next;){var a=n.data,o=e>a.length?a.length:e;if(a.copy(r,r.length-e,0,o),0===(e-=o)){o===a.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=a.slice(o));break}++i}return t.length-=i,r}(e,t);return n}(e,t.buffer,t.decoder),r);var r}function D(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(L,t,e))}function L(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function F(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}y.prototype.read=function(e){c("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return c("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?D(this):k(this),null;if(0===(e=x(e,t))&&t.ended)return 0===t.length&&D(this),null;var n,i=t.needReadable;return c("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&c("length less than watermark",i=!0),t.ended||t.reading?c("reading or ended",i=!1):i&&(c("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=x(r,t))),null===(n=e>0?I(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&D(this)),null!==n&&this.emit("data",n),n},y.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},y.prototype.pipe=function(e,t){var r=this,a=this._readableState;switch(a.pipesCount){case 0:a.pipes=e;break;case 1:a.pipes=[a.pipes,e];break;default:a.pipes.push(e)}a.pipesCount+=1,c("pipe count=%d opts=%j",a.pipesCount,t);var f=(!t||!1!==t.end)&&e!==n.stdout&&e!==n.stderr?u:y;function l(t,n){c("onunpipe"),t===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,c("cleanup"),e.removeListener("close",_),e.removeListener("finish",b),e.removeListener("drain",h),e.removeListener("error",m),e.removeListener("unpipe",l),r.removeListener("end",u),r.removeListener("end",y),r.removeListener("data",g),d=!0,!a.awaitDrain||e._writableState&&!e._writableState.needDrain||h())}function u(){c("onend"),e.end()}a.endEmitted?i.nextTick(f):r.once("end",f),e.on("unpipe",l);var h=function(e){return function(){var t=e._readableState;c("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,R(e))}}(r);e.on("drain",h);var d=!1;var p=!1;function g(t){c("ondata"),p=!1,!1!==e.write(t)||p||((1===a.pipesCount&&a.pipes===e||a.pipesCount>1&&-1!==F(a.pipes,e))&&!d&&(c("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function m(t){c("onerror",t),y(),e.removeListener("error",m),0===s(e,"error")&&e.emit("error",t)}function _(){e.removeListener("finish",b),y()}function b(){c("onfinish"),e.removeListener("close",_),y()}function y(){c("unpipe"),r.unpipe(e)}return r.on("data",g),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?o(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",m),e.once("close",_),e.once("finish",b),e.emit("pipe",r),a.flowing||(c("pipe resume"),r.resume()),e},y.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r),this);if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var a=0;a<i;a++)n[a].emit("unpipe",this,r);return this}var o=F(t.pipes,e);return-1===o?this:(t.pipes.splice(o,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r),this)},y.prototype.on=function(e,t){var r=f.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&k(this):i.nextTick(O,this))}return r},y.prototype.addListener=y.prototype.on,y.prototype.resume=function(){var e=this._readableState;return e.flowing||(c("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(T,e,t))}(this,e)),this},y.prototype.pause=function(){return c("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(c("pause"),this._readableState.flowing=!1,this.emit("pause")),this},y.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",function(){if(c("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(i){(c("wrapped data"),r.decoder&&(i=r.decoder.write(i)),!r.objectMode||null!==i&&void 0!==i)&&((r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause())))}),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var a=0;a<_.length;a++)e.on(_[a],this.emit.bind(this,_[a]));return this._read=function(t){c("wrapped _read",t),n&&(n=!1,e.resume())},this},y._fromList=I}).call(this,r(0),r(3))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(void 0===e)throw"dicomParser.readPart10Header: missing required parameter 'byteArray'";var r=new n.default(a.default,e);return function(){!function(){if(r.seek(128),"DICM"!==r.readFixedString(4))throw"dicomParser.readPart10Header: DICM prefix not found at location 132 - this is not a valid DICOM P10 file."}();var e=[],t={};for(;r.position<r.byteArray.length;){var n=r.position,s=(0,o.default)(r,e);if(s.tag>"x0002ffff"){r.position=n;break}s.parser=a.default,t[s.tag]=s}var f=new i.default(r.byteArrayParser,r.byteArray,t);return f.warnings=r.warnings,f.position=r.position,f}()};var n=s(r(12)),i=s(r(7)),a=s(r(21)),o=s(r(15));function s(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={readUint16:function(e,t){if(t<0)throw"bigEndianByteArrayParser.readUint16: position cannot be less than 0";if(t+2>e.length)throw"bigEndianByteArrayParser.readUint16: attempt to read past end of buffer";return(e[t]<<8)+e[t+1]},readInt16:function(e,t){if(t<0)throw"bigEndianByteArrayParser.readInt16: position cannot be less than 0";if(t+2>e.length)throw"bigEndianByteArrayParser.readInt16: attempt to read past end of buffer";var r=(e[t]<<8)+e[t+1];return 32768&r&&(r=r-65535-1),r},readUint32:function(e,t){if(t<0)throw"bigEndianByteArrayParser.readUint32: position cannot be less than 0";if(t+4>e.length)throw"bigEndianByteArrayParser.readUint32: attempt to read past end of buffer";return 256*(256*(256*e[t]+e[t+1])+e[t+2])+e[t+3]},readInt32:function(e,t){if(t<0)throw"bigEndianByteArrayParser.readInt32: position cannot be less than 0";if(t+4>e.length)throw"bigEndianByteArrayParser.readInt32: attempt to read past end of buffer";return(e[t]<<24)+(e[t+1]<<16)+(e[t+2]<<8)+e[t+3]},readFloat:function(e,t){if(t<0)throw"bigEndianByteArrayParser.readFloat: position cannot be less than 0";if(t+4>e.length)throw"bigEndianByteArrayParser.readFloat: attempt to read past end of buffer";var r=new Uint8Array(4);return r[3]=e[t],r[2]=e[t+1],r[1]=e[t+2],r[0]=e[t+3],new Float32Array(r.buffer)[0]},readDouble:function(e,t){if(t<0)throw"bigEndianByteArrayParser.readDouble: position cannot be less than 0";if(t+8>e.length)throw"bigEndianByteArrayParser.readDouble: attempt to read past end of buffer";var r=new Uint8Array(8);return r[7]=e[t],r[6]=e[t+1],r[5]=e[t+2],r[4]=e[t+3],r[3]=e[t+4],r[2]=e[t+5],r[1]=e[t+6],r[0]=e[t+7],new Float64Array(r.buffer)[0]}}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(void 0===e)throw"dicomParser.readSequenceItemsImplicit: missing required parameter 'byteStream'";if(void 0===t)throw"dicomParser.readSequenceItemsImplicit: missing required parameter 'element'";t.items=[],4294967295===t.length?function(e,t,r){for(;e.position+4<=e.byteArray.length;){var n=(0,o.default)(e);if(e.seek(-4),"xfffee0dd"===n)return t.length=e.position-t.dataOffset,e.seek(8),t;var i=l(e,r);t.items.push(i)}e.warnings.push("eof encountered before finding sequence delimiter in sequence of undefined length"),t.length=e.byteArray.length-t.dataOffset}(e,t,r):function(e,t,r){var n=t.dataOffset+t.length;for(;e.position<n;){var i=l(e,r);t.items.push(i)}}(e,t,r)};var n=f(r(7)),i=f(r(23)),a=f(r(13)),o=f(r(4)),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(16));function f(e){return e&&e.__esModule?e:{default:e}}function l(e,t){var r=(0,a.default)(e);return 4294967295===r.length?(r.hadUndefinedLength=!0,r.dataSet=function(e,t){for(var r={};e.position<e.byteArray.length;){var a=(0,i.default)(e,void 0,t);if(r[a.tag]=a,"xfffee00d"===a.tag)return new n.default(e.byteArrayParser,e.byteArray,r)}return e.warnings.push("eof encountered before finding sequence item delimiter in sequence item of undefined length"),new n.default(e.byteArrayParser,e.byteArray,r)}(e,t),r.length=e.position-r.dataOffset):(r.dataSet=new n.default(e.byteArrayParser,e.byteArray,{}),s.parseDicomDataSetImplicit(r.dataSet,e,e.position+r.length,{vrCallback:t})),r}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(void 0===e)throw"dicomParser.readSequenceItemsExplicit: missing required parameter 'byteStream'";if(void 0===t)throw"dicomParser.readSequenceItemsExplicit: missing required parameter 'element'";t.items=[],4294967295===t.length?function(e,t,r){for(;e.position+4<=e.byteArray.length;){var n=(0,o.default)(e);if(e.seek(-4),"xfffee0dd"===n)return t.length=e.position-t.dataOffset,e.seek(8),t;var i=l(e,r);t.items.push(i)}r.push("eof encountered before finding sequence delimitation tag while reading sequence of undefined length"),t.length=e.position-t.dataOffset}(e,t,r):function(e,t,r){var n=t.dataOffset+t.length;for(;e.position<n;){var i=l(e,r);t.items.push(i)}}(e,t,r)};var n=f(r(7)),i=f(r(15)),a=f(r(13)),o=f(r(4)),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(16));function f(e){return e&&e.__esModule?e:{default:e}}function l(e,t){var r=(0,a.default)(e);return 4294967295===r.length?(r.hadUndefinedLength=!0,r.dataSet=function(e,t){for(var r={};e.position<e.byteArray.length;){var a=(0,i.default)(e,t);if(r[a.tag]=a,"xfffee00d"===a.tag)return new n.default(e.byteArrayParser,e.byteArray,r)}return t.push("eof encountered before finding item delimiter tag while reading sequence item of undefined length"),new n.default(e.byteArrayParser,e.byteArray,r)}(e,t),r.length=e.position-r.dataOffset):(r.dataSet=new n.default(e.byteArrayParser,e.byteArray,{}),s.parseDicomDataSetExplicit(r.dataSet,e,e.position+r.length)),r}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(void 0===e)throw"dicomParser.findAndSetUNElementLength: missing required parameter 'byteStream'";var r=e.byteArray.length-8;for(;e.position<=r;){var n=e.readUint16();if(65534===n){var i=e.readUint16();if(57565===i){var a=e.readUint32();return 0!==a&&e.warnings("encountered non zero length following item delimiter at position "+(e.position-4)+" while reading element of undefined length with tag "+t.tag),void(t.length=e.position-t.dataOffset)}}}t.length=e.byteArray.length-t.dataOffset,e.seek(e.byteArray.length-e.position)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(void 0===e)throw"dicomParser.findEndOfEncapsulatedElement: missing required parameter 'byteStream'";if(void 0===t)throw"dicomParser.findEndOfEncapsulatedElement: missing required parameter 'element'";if(t.encapsulatedPixelData=!0,t.basicOffsetTable=[],t.fragments=[],"xfffee000"!==(0,a.default)(e))throw"dicomParser.findEndOfEncapsulatedElement: basic offset table not found";for(var n=e.readUint32()/4,i=0;i<n;i++){var o=e.readUint32();t.basicOffsetTable.push(o)}var s=e.position;for(;e.position<e.byteArray.length;){var f=(0,a.default)(e),l=e.readUint32();if("xfffee0dd"===f)return e.seek(l),void(t.length=e.position-t.dataOffset);if("xfffee000"!==f)return r&&r.push("unexpected tag "+f+" while searching for end of pixel data element with undefined length"),l>e.byteArray.length-e.position&&(l=e.byteArray.length-e.position),t.fragments.push({offset:e.position-s-8,position:e.position,length:l}),e.seek(l),void(t.length=e.position-t.dataOffset);t.fragments.push({offset:e.position-s-8,position:e.position,length:l}),e.seek(l)}r&&r.push("pixel data element "+t.tag+" missing sequence delimiter tag xfffee0dd")};var n,i=r(4),a=(n=i)&&n.__esModule?n:{default:n}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(void 0===e||void 0===t)throw"dicomParser.explicitElementToString: missing required parameters";if(void 0===t.vr)throw"dicomParser.explicitElementToString: cannot convert implicit element to string";var r,i=t.vr,a=t.tag;function o(t,r){for(var n="",i=0;i<t;i++)0!==i&&(n+="/"),n+=r.call(e,a,i).toString();return n}if(!0===n.isStringVr(i))r=e.string(a);else{if("AT"===i){var s=e.uint32(a);if(void 0===s)return;return s<0&&(s=4294967295+s+1),"x"+s.toString(16).toUpperCase()}"US"===i?r=o(t.length/2,e.uint16):"SS"===i?r=o(t.length/2,e.int16):"UL"===i?r=o(t.length/4,e.uint32):"SL"===i?r=o(t.length/4,e.int32):"FD"===i?r=o(t.length/8,e.double):"FL"===i&&(r=o(t.length/4,e.float))}return r};var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(25))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){o||(o=!0,console&&console.log&&console.log("WARNING: dicomParser.readEncapsulatedPixelData() has been deprecated"));if(void 0===e)throw"dicomParser.readEncapsulatedPixelData: missing required parameter 'dataSet'";if(void 0===t)throw"dicomParser.readEncapsulatedPixelData: missing required parameter 'element'";if(void 0===r)throw"dicomParser.readEncapsulatedPixelData: missing required parameter 'frame'";if("x7fe00010"!==t.tag)throw"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to non pixel data tag (expected tag = x7fe00010)";if(!0!==t.encapsulatedPixelData)throw"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";if(!0!==t.hadUndefinedLength)throw"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";if(void 0===t.basicOffsetTable)throw"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";if(void 0===t.fragments)throw"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";if(r<0)throw"dicomParser.readEncapsulatedPixelData: parameter 'frame' must be >= 0";if(0!==t.basicOffsetTable.length)return(0,n.default)(e,t,r);return(0,i.default)(e,t,0,t.fragments.length)};var n=a(r(26)),i=a(r(17));function a(e){return e&&e.__esModule?e:{default:e}}var o=!1},function(e,t,r){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(e,t,r){"use strict";var n=r(8),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],a=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],o=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(e,t,r,f,l,u,h,d){var c,p,g,m,_,b,y,v,w,E=d.bits,x=0,k=0,S=0,A=0,P=0,O=0,T=0,R=0,I=0,D=0,L=null,F=0,U=new n.Buf16(16),B=new n.Buf16(16),M=null,N=0;for(x=0;x<=15;x++)U[x]=0;for(k=0;k<f;k++)U[t[r+k]]++;for(P=E,A=15;A>=1&&0===U[A];A--);if(P>A&&(P=A),0===A)return l[u++]=20971520,l[u++]=20971520,d.bits=1,0;for(S=1;S<A&&0===U[S];S++);for(P<S&&(P=S),R=1,x=1;x<=15;x++)if(R<<=1,(R-=U[x])<0)return-1;if(R>0&&(0===e||1!==A))return-1;for(B[1]=0,x=1;x<15;x++)B[x+1]=B[x]+U[x];for(k=0;k<f;k++)0!==t[r+k]&&(h[B[t[r+k]]++]=k);if(0===e?(L=M=h,b=19):1===e?(L=i,F-=257,M=a,N-=257,b=256):(L=o,M=s,b=-1),D=0,k=0,x=S,_=u,O=P,T=0,g=-1,m=(I=1<<P)-1,1===e&&I>852||2===e&&I>592)return 1;for(;;){y=x-T,h[k]<b?(v=0,w=h[k]):h[k]>b?(v=M[N+h[k]],w=L[F+h[k]]):(v=96,w=0),c=1<<x-T,S=p=1<<O;do{l[_+(D>>T)+(p-=c)]=y<<24|v<<16|w|0}while(0!==p);for(c=1<<x-1;D&c;)c>>=1;if(0!==c?(D&=c-1,D+=c):D=0,k++,0==--U[x]){if(x===A)break;x=t[r+h[k]]}if(x>P&&(D&m)!==g){for(0===T&&(T=P),_+=S,R=1<<(O=x-T);O+T<A&&!((R-=U[O+T])<=0);)O++,R<<=1;if(I+=1<<O,1===e&&I>852||2===e&&I>592)return 1;l[g=D&m]=P<<24|O<<16|_-u|0}}return 0!==D&&(l[_+D]=x-T<<24|64<<16|0),d.bits=P,0}},function(e,t,r){"use strict";e.exports=function(e,t){var r,n,i,a,o,s,f,l,u,h,d,c,p,g,m,_,b,y,v,w,E,x,k,S,A;r=e.state,n=e.next_in,S=e.input,i=n+(e.avail_in-5),a=e.next_out,A=e.output,o=a-(t-e.avail_out),s=a+(e.avail_out-257),f=r.dmax,l=r.wsize,u=r.whave,h=r.wnext,d=r.window,c=r.hold,p=r.bits,g=r.lencode,m=r.distcode,_=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;e:do{p<15&&(c+=S[n++]<<p,p+=8,c+=S[n++]<<p,p+=8),y=g[c&_];t:for(;;){if(c>>>=v=y>>>24,p-=v,0===(v=y>>>16&255))A[a++]=65535&y;else{if(!(16&v)){if(0==(64&v)){y=g[(65535&y)+(c&(1<<v)-1)];continue t}if(32&v){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}w=65535&y,(v&=15)&&(p<v&&(c+=S[n++]<<p,p+=8),w+=c&(1<<v)-1,c>>>=v,p-=v),p<15&&(c+=S[n++]<<p,p+=8,c+=S[n++]<<p,p+=8),y=m[c&b];r:for(;;){if(c>>>=v=y>>>24,p-=v,!(16&(v=y>>>16&255))){if(0==(64&v)){y=m[(65535&y)+(c&(1<<v)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(E=65535&y,p<(v&=15)&&(c+=S[n++]<<p,(p+=8)<v&&(c+=S[n++]<<p,p+=8)),(E+=c&(1<<v)-1)>f){e.msg="invalid distance too far back",r.mode=30;break e}if(c>>>=v,p-=v,E>(v=a-o)){if((v=E-v)>u&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(x=0,k=d,0===h){if(x+=l-v,v<w){w-=v;do{A[a++]=d[x++]}while(--v);x=a-E,k=A}}else if(h<v){if(x+=l+h-v,(v-=h)<w){w-=v;do{A[a++]=d[x++]}while(--v);if(x=0,h<w){w-=v=h;do{A[a++]=d[x++]}while(--v);x=a-E,k=A}}}else if(x+=h-v,v<w){w-=v;do{A[a++]=d[x++]}while(--v);x=a-E,k=A}for(;w>2;)A[a++]=k[x++],A[a++]=k[x++],A[a++]=k[x++],w-=3;w&&(A[a++]=k[x++],w>1&&(A[a++]=k[x++]))}else{x=a-E;do{A[a++]=A[x++],A[a++]=A[x++],A[a++]=A[x++],w-=3}while(w>2);w&&(A[a++]=A[x++],w>1&&(A[a++]=A[x++]))}break}}break}}while(n<i&&a<s);n-=w=p>>3,c&=(1<<(p-=w<<3))-1,e.next_in=n,e.next_out=a,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=a<s?s-a+257:257-(a-s),r.hold=c,r.bits=p}},function(e,t,r){"use strict";var n=r(8),i=r(28),a=r(27),o=r(47),s=r(46),f=0,l=1,u=2,h=4,d=5,c=6,p=0,g=1,m=2,_=-2,b=-3,y=-4,v=-5,w=8,E=1,x=2,k=3,S=4,A=5,P=6,O=7,T=8,R=9,I=10,D=11,L=12,F=13,U=14,B=15,M=16,N=17,j=18,z=19,Z=20,C=21,q=22,Y=23,W=24,H=25,G=26,V=27,K=28,J=29,X=30,$=31,Q=32,ee=852,te=592,re=15;function ne(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function ie(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=E,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new n.Buf32(ee),t.distcode=t.distdyn=new n.Buf32(te),t.sane=1,t.back=-1,p):_}function ae(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,ie(e)):_}function oe(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?_:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,ae(e))):_}function se(e,t){var r,i;return e?(i=new function(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0},e.state=i,i.window=null,(r=oe(e,t))!==p&&(e.state=null),r):_}var fe,le,ue=!0;function he(e){if(ue){var t;for(fe=new n.Buf32(512),le=new n.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(s(l,e.lens,0,288,fe,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;s(u,e.lens,0,32,le,0,e.work,{bits:5}),ue=!1}e.lencode=fe,e.lenbits=9,e.distcode=le,e.distbits=5}function de(e,t,r,i){var a,o=e.state;return null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new n.Buf8(o.wsize)),i>=o.wsize?(n.arraySet(o.window,t,r-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):((a=o.wsize-o.wnext)>i&&(a=i),n.arraySet(o.window,t,r-i,a,o.wnext),(i-=a)?(n.arraySet(o.window,t,r-i,i,0),o.wnext=i,o.whave=o.wsize):(o.wnext+=a,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=a))),0}t.inflateReset=ae,t.inflateReset2=oe,t.inflateResetKeep=ie,t.inflateInit=function(e){return se(e,re)},t.inflateInit2=se,t.inflate=function(e,t){var r,ee,te,re,ie,ae,oe,se,fe,le,ue,ce,pe,ge,me,_e,be,ye,ve,we,Ee,xe,ke,Se,Ae=0,Pe=new n.Buf8(4),Oe=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return _;(r=e.state).mode===L&&(r.mode=F),ie=e.next_out,te=e.output,oe=e.avail_out,re=e.next_in,ee=e.input,ae=e.avail_in,se=r.hold,fe=r.bits,le=ae,ue=oe,xe=p;e:for(;;)switch(r.mode){case E:if(0===r.wrap){r.mode=F;break}for(;fe<16;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}if(2&r.wrap&&35615===se){r.check=0,Pe[0]=255&se,Pe[1]=se>>>8&255,r.check=a(r.check,Pe,2,0),se=0,fe=0,r.mode=x;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&se)<<8)+(se>>8))%31){e.msg="incorrect header check",r.mode=X;break}if((15&se)!==w){e.msg="unknown compression method",r.mode=X;break}if(fe-=4,Ee=8+(15&(se>>>=4)),0===r.wbits)r.wbits=Ee;else if(Ee>r.wbits){e.msg="invalid window size",r.mode=X;break}r.dmax=1<<Ee,e.adler=r.check=1,r.mode=512&se?I:L,se=0,fe=0;break;case x:for(;fe<16;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}if(r.flags=se,(255&r.flags)!==w){e.msg="unknown compression method",r.mode=X;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=X;break}r.head&&(r.head.text=se>>8&1),512&r.flags&&(Pe[0]=255&se,Pe[1]=se>>>8&255,r.check=a(r.check,Pe,2,0)),se=0,fe=0,r.mode=k;case k:for(;fe<32;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}r.head&&(r.head.time=se),512&r.flags&&(Pe[0]=255&se,Pe[1]=se>>>8&255,Pe[2]=se>>>16&255,Pe[3]=se>>>24&255,r.check=a(r.check,Pe,4,0)),se=0,fe=0,r.mode=S;case S:for(;fe<16;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}r.head&&(r.head.xflags=255&se,r.head.os=se>>8),512&r.flags&&(Pe[0]=255&se,Pe[1]=se>>>8&255,r.check=a(r.check,Pe,2,0)),se=0,fe=0,r.mode=A;case A:if(1024&r.flags){for(;fe<16;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}r.length=se,r.head&&(r.head.extra_len=se),512&r.flags&&(Pe[0]=255&se,Pe[1]=se>>>8&255,r.check=a(r.check,Pe,2,0)),se=0,fe=0}else r.head&&(r.head.extra=null);r.mode=P;case P:if(1024&r.flags&&((ce=r.length)>ae&&(ce=ae),ce&&(r.head&&(Ee=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,ee,re,ce,Ee)),512&r.flags&&(r.check=a(r.check,ee,ce,re)),ae-=ce,re+=ce,r.length-=ce),r.length))break e;r.length=0,r.mode=O;case O:if(2048&r.flags){if(0===ae)break e;ce=0;do{Ee=ee[re+ce++],r.head&&Ee&&r.length<65536&&(r.head.name+=String.fromCharCode(Ee))}while(Ee&&ce<ae);if(512&r.flags&&(r.check=a(r.check,ee,ce,re)),ae-=ce,re+=ce,Ee)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=T;case T:if(4096&r.flags){if(0===ae)break e;ce=0;do{Ee=ee[re+ce++],r.head&&Ee&&r.length<65536&&(r.head.comment+=String.fromCharCode(Ee))}while(Ee&&ce<ae);if(512&r.flags&&(r.check=a(r.check,ee,ce,re)),ae-=ce,re+=ce,Ee)break e}else r.head&&(r.head.comment=null);r.mode=R;case R:if(512&r.flags){for(;fe<16;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}if(se!==(65535&r.check)){e.msg="header crc mismatch",r.mode=X;break}se=0,fe=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=L;break;case I:for(;fe<32;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}e.adler=r.check=ne(se),se=0,fe=0,r.mode=D;case D:if(0===r.havedict)return e.next_out=ie,e.avail_out=oe,e.next_in=re,e.avail_in=ae,r.hold=se,r.bits=fe,m;e.adler=r.check=1,r.mode=L;case L:if(t===d||t===c)break e;case F:if(r.last){se>>>=7&fe,fe-=7&fe,r.mode=V;break}for(;fe<3;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}switch(r.last=1&se,fe-=1,3&(se>>>=1)){case 0:r.mode=U;break;case 1:if(he(r),r.mode=Z,t===c){se>>>=2,fe-=2;break e}break;case 2:r.mode=N;break;case 3:e.msg="invalid block type",r.mode=X}se>>>=2,fe-=2;break;case U:for(se>>>=7&fe,fe-=7&fe;fe<32;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}if((65535&se)!=(se>>>16^65535)){e.msg="invalid stored block lengths",r.mode=X;break}if(r.length=65535&se,se=0,fe=0,r.mode=B,t===c)break e;case B:r.mode=M;case M:if(ce=r.length){if(ce>ae&&(ce=ae),ce>oe&&(ce=oe),0===ce)break e;n.arraySet(te,ee,re,ce,ie),ae-=ce,re+=ce,oe-=ce,ie+=ce,r.length-=ce;break}r.mode=L;break;case N:for(;fe<14;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}if(r.nlen=257+(31&se),se>>>=5,fe-=5,r.ndist=1+(31&se),se>>>=5,fe-=5,r.ncode=4+(15&se),se>>>=4,fe-=4,r.nlen>286||r.ndist>30){e.msg="too many length or distance symbols",r.mode=X;break}r.have=0,r.mode=j;case j:for(;r.have<r.ncode;){for(;fe<3;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}r.lens[Oe[r.have++]]=7&se,se>>>=3,fe-=3}for(;r.have<19;)r.lens[Oe[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,ke={bits:r.lenbits},xe=s(f,r.lens,0,19,r.lencode,0,r.work,ke),r.lenbits=ke.bits,xe){e.msg="invalid code lengths set",r.mode=X;break}r.have=0,r.mode=z;case z:for(;r.have<r.nlen+r.ndist;){for(;_e=(Ae=r.lencode[se&(1<<r.lenbits)-1])>>>16&255,be=65535&Ae,!((me=Ae>>>24)<=fe);){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}if(be<16)se>>>=me,fe-=me,r.lens[r.have++]=be;else{if(16===be){for(Se=me+2;fe<Se;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}if(se>>>=me,fe-=me,0===r.have){e.msg="invalid bit length repeat",r.mode=X;break}Ee=r.lens[r.have-1],ce=3+(3&se),se>>>=2,fe-=2}else if(17===be){for(Se=me+3;fe<Se;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}fe-=me,Ee=0,ce=3+(7&(se>>>=me)),se>>>=3,fe-=3}else{for(Se=me+7;fe<Se;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}fe-=me,Ee=0,ce=11+(127&(se>>>=me)),se>>>=7,fe-=7}if(r.have+ce>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=X;break}for(;ce--;)r.lens[r.have++]=Ee}}if(r.mode===X)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=X;break}if(r.lenbits=9,ke={bits:r.lenbits},xe=s(l,r.lens,0,r.nlen,r.lencode,0,r.work,ke),r.lenbits=ke.bits,xe){e.msg="invalid literal/lengths set",r.mode=X;break}if(r.distbits=6,r.distcode=r.distdyn,ke={bits:r.distbits},xe=s(u,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,ke),r.distbits=ke.bits,xe){e.msg="invalid distances set",r.mode=X;break}if(r.mode=Z,t===c)break e;case Z:r.mode=C;case C:if(ae>=6&&oe>=258){e.next_out=ie,e.avail_out=oe,e.next_in=re,e.avail_in=ae,r.hold=se,r.bits=fe,o(e,ue),ie=e.next_out,te=e.output,oe=e.avail_out,re=e.next_in,ee=e.input,ae=e.avail_in,se=r.hold,fe=r.bits,r.mode===L&&(r.back=-1);break}for(r.back=0;_e=(Ae=r.lencode[se&(1<<r.lenbits)-1])>>>16&255,be=65535&Ae,!((me=Ae>>>24)<=fe);){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}if(_e&&0==(240&_e)){for(ye=me,ve=_e,we=be;_e=(Ae=r.lencode[we+((se&(1<<ye+ve)-1)>>ye)])>>>16&255,be=65535&Ae,!(ye+(me=Ae>>>24)<=fe);){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}se>>>=ye,fe-=ye,r.back+=ye}if(se>>>=me,fe-=me,r.back+=me,r.length=be,0===_e){r.mode=G;break}if(32&_e){r.back=-1,r.mode=L;break}if(64&_e){e.msg="invalid literal/length code",r.mode=X;break}r.extra=15&_e,r.mode=q;case q:if(r.extra){for(Se=r.extra;fe<Se;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}r.length+=se&(1<<r.extra)-1,se>>>=r.extra,fe-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=Y;case Y:for(;_e=(Ae=r.distcode[se&(1<<r.distbits)-1])>>>16&255,be=65535&Ae,!((me=Ae>>>24)<=fe);){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}if(0==(240&_e)){for(ye=me,ve=_e,we=be;_e=(Ae=r.distcode[we+((se&(1<<ye+ve)-1)>>ye)])>>>16&255,be=65535&Ae,!(ye+(me=Ae>>>24)<=fe);){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}se>>>=ye,fe-=ye,r.back+=ye}if(se>>>=me,fe-=me,r.back+=me,64&_e){e.msg="invalid distance code",r.mode=X;break}r.offset=be,r.extra=15&_e,r.mode=W;case W:if(r.extra){for(Se=r.extra;fe<Se;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}r.offset+=se&(1<<r.extra)-1,se>>>=r.extra,fe-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=X;break}r.mode=H;case H:if(0===oe)break e;if(ce=ue-oe,r.offset>ce){if((ce=r.offset-ce)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=X;break}ce>r.wnext?(ce-=r.wnext,pe=r.wsize-ce):pe=r.wnext-ce,ce>r.length&&(ce=r.length),ge=r.window}else ge=te,pe=ie-r.offset,ce=r.length;ce>oe&&(ce=oe),oe-=ce,r.length-=ce;do{te[ie++]=ge[pe++]}while(--ce);0===r.length&&(r.mode=C);break;case G:if(0===oe)break e;te[ie++]=r.length,oe--,r.mode=C;break;case V:if(r.wrap){for(;fe<32;){if(0===ae)break e;ae--,se|=ee[re++]<<fe,fe+=8}if(ue-=oe,e.total_out+=ue,r.total+=ue,ue&&(e.adler=r.check=r.flags?a(r.check,te,ue,ie-ue):i(r.check,te,ue,ie-ue)),ue=oe,(r.flags?se:ne(se))!==r.check){e.msg="incorrect data check",r.mode=X;break}se=0,fe=0}r.mode=K;case K:if(r.wrap&&r.flags){for(;fe<32;){if(0===ae)break e;ae--,se+=ee[re++]<<fe,fe+=8}if(se!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=X;break}se=0,fe=0}r.mode=J;case J:xe=g;break e;case X:xe=b;break e;case $:return y;case Q:default:return _}return e.next_out=ie,e.avail_out=oe,e.next_in=re,e.avail_in=ae,r.hold=se,r.bits=fe,(r.wsize||ue!==e.avail_out&&r.mode<X&&(r.mode<V||t!==h))&&de(e,e.output,e.next_out,ue-e.avail_out)?(r.mode=$,y):(le-=e.avail_in,ue-=e.avail_out,e.total_in+=le,e.total_out+=ue,r.total+=ue,r.wrap&&ue&&(e.adler=r.check=r.flags?a(r.check,te,ue,e.next_out-ue):i(r.check,te,ue,e.next_out-ue)),e.data_type=r.bits+(r.last?64:0)+(r.mode===L?128:0)+(r.mode===Z||r.mode===B?256:0),(0===le&&0===ue||t===h)&&xe===p&&(xe=v),xe)},t.inflateEnd=function(e){if(!e||!e.state)return _;var t=e.state;return t.window&&(t.window=null),e.state=null,p},t.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?_:(r.head=t,t.done=!1,p):_},t.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&r.mode!==D?_:r.mode===D&&i(1,t,n,0)!==r.check?b:de(e,t,n,n)?(r.mode=$,y):(r.havedict=1,p):_},t.inflateInfo="pako inflate (from Nodeca project)"},function(e,t,r){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(e,t,r){"use strict";var n=r(8),i=4,a=0,o=1,s=2;function f(e){for(var t=e.length;--t>=0;)e[t]=0}var l=0,u=1,h=2,d=29,c=256,p=c+1+d,g=30,m=19,_=2*p+1,b=15,y=16,v=7,w=256,E=16,x=17,k=18,S=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],A=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],P=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],O=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],T=new Array(2*(p+2));f(T);var R=new Array(2*g);f(R);var I=new Array(512);f(I);var D=new Array(256);f(D);var L=new Array(d);f(L);var F,U,B,M=new Array(g);function N(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function j(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function z(e){return e<256?I[e]:I[256+(e>>>7)]}function Z(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function C(e,t,r){e.bi_valid>y-r?(e.bi_buf|=t<<e.bi_valid&65535,Z(e,e.bi_buf),e.bi_buf=t>>y-e.bi_valid,e.bi_valid+=r-y):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function q(e,t,r){C(e,r[2*t],r[2*t+1])}function Y(e,t){var r=0;do{r|=1&e,e>>>=1,r<<=1}while(--t>0);return r>>>1}function W(e,t,r){var n,i,a=new Array(b+1),o=0;for(n=1;n<=b;n++)a[n]=o=o+r[n-1]<<1;for(i=0;i<=t;i++){var s=e[2*i+1];0!==s&&(e[2*i]=Y(a[s]++,s))}}function H(e){var t;for(t=0;t<p;t++)e.dyn_ltree[2*t]=0;for(t=0;t<g;t++)e.dyn_dtree[2*t]=0;for(t=0;t<m;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*w]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function G(e){e.bi_valid>8?Z(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function V(e,t,r,n){var i=2*t,a=2*r;return e[i]<e[a]||e[i]===e[a]&&n[t]<=n[r]}function K(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&V(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!V(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function J(e,t,r){var n,i,a,o,s=0;if(0!==e.last_lit)do{n=e.pending_buf[e.d_buf+2*s]<<8|e.pending_buf[e.d_buf+2*s+1],i=e.pending_buf[e.l_buf+s],s++,0===n?q(e,i,t):(q(e,(a=D[i])+c+1,t),0!==(o=S[a])&&C(e,i-=L[a],o),q(e,a=z(--n),r),0!==(o=A[a])&&C(e,n-=M[a],o))}while(s<e.last_lit);q(e,w,t)}function X(e,t){var r,n,i,a=t.dyn_tree,o=t.stat_desc.static_tree,s=t.stat_desc.has_stree,f=t.stat_desc.elems,l=-1;for(e.heap_len=0,e.heap_max=_,r=0;r<f;r++)0!==a[2*r]?(e.heap[++e.heap_len]=l=r,e.depth[r]=0):a[2*r+1]=0;for(;e.heap_len<2;)a[2*(i=e.heap[++e.heap_len]=l<2?++l:0)]=1,e.depth[i]=0,e.opt_len--,s&&(e.static_len-=o[2*i+1]);for(t.max_code=l,r=e.heap_len>>1;r>=1;r--)K(e,a,r);i=f;do{r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],K(e,a,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,a[2*i]=a[2*r]+a[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,a[2*r+1]=a[2*n+1]=i,e.heap[1]=i++,K(e,a,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,a,o,s,f=t.dyn_tree,l=t.max_code,u=t.stat_desc.static_tree,h=t.stat_desc.has_stree,d=t.stat_desc.extra_bits,c=t.stat_desc.extra_base,p=t.stat_desc.max_length,g=0;for(a=0;a<=b;a++)e.bl_count[a]=0;for(f[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<_;r++)(a=f[2*f[2*(n=e.heap[r])+1]+1]+1)>p&&(a=p,g++),f[2*n+1]=a,n>l||(e.bl_count[a]++,o=0,n>=c&&(o=d[n-c]),s=f[2*n],e.opt_len+=s*(a+o),h&&(e.static_len+=s*(u[2*n+1]+o)));if(0!==g){do{for(a=p-1;0===e.bl_count[a];)a--;e.bl_count[a]--,e.bl_count[a+1]+=2,e.bl_count[p]--,g-=2}while(g>0);for(a=p;0!==a;a--)for(n=e.bl_count[a];0!==n;)(i=e.heap[--r])>l||(f[2*i+1]!==a&&(e.opt_len+=(a-f[2*i+1])*f[2*i],f[2*i+1]=a),n--)}}(e,t),W(a,l,e.bl_count)}function $(e,t,r){var n,i,a=-1,o=t[1],s=0,f=7,l=4;for(0===o&&(f=138,l=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=o,o=t[2*(n+1)+1],++s<f&&i===o||(s<l?e.bl_tree[2*i]+=s:0!==i?(i!==a&&e.bl_tree[2*i]++,e.bl_tree[2*E]++):s<=10?e.bl_tree[2*x]++:e.bl_tree[2*k]++,s=0,a=i,0===o?(f=138,l=3):i===o?(f=6,l=3):(f=7,l=4))}function Q(e,t,r){var n,i,a=-1,o=t[1],s=0,f=7,l=4;for(0===o&&(f=138,l=3),n=0;n<=r;n++)if(i=o,o=t[2*(n+1)+1],!(++s<f&&i===o)){if(s<l)do{q(e,i,e.bl_tree)}while(0!=--s);else 0!==i?(i!==a&&(q(e,i,e.bl_tree),s--),q(e,E,e.bl_tree),C(e,s-3,2)):s<=10?(q(e,x,e.bl_tree),C(e,s-3,3)):(q(e,k,e.bl_tree),C(e,s-11,7));s=0,a=i,0===o?(f=138,l=3):i===o?(f=6,l=3):(f=7,l=4)}}f(M);var ee=!1;function te(e,t,r,i){C(e,(l<<1)+(i?1:0),3),function(e,t,r,i){G(e),i&&(Z(e,r),Z(e,~r)),n.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r,!0)}t._tr_init=function(e){ee||(function(){var e,t,r,n,i,a=new Array(b+1);for(r=0,n=0;n<d-1;n++)for(L[n]=r,e=0;e<1<<S[n];e++)D[r++]=n;for(D[r-1]=n,i=0,n=0;n<16;n++)for(M[n]=i,e=0;e<1<<A[n];e++)I[i++]=n;for(i>>=7;n<g;n++)for(M[n]=i<<7,e=0;e<1<<A[n]-7;e++)I[256+i++]=n;for(t=0;t<=b;t++)a[t]=0;for(e=0;e<=143;)T[2*e+1]=8,e++,a[8]++;for(;e<=255;)T[2*e+1]=9,e++,a[9]++;for(;e<=279;)T[2*e+1]=7,e++,a[7]++;for(;e<=287;)T[2*e+1]=8,e++,a[8]++;for(W(T,p+1,a),e=0;e<g;e++)R[2*e+1]=5,R[2*e]=Y(e,5);F=new N(T,S,c+1,p,b),U=new N(R,A,0,g,b),B=new N(new Array(0),P,0,m,v)}(),ee=!0),e.l_desc=new j(e.dyn_ltree,F),e.d_desc=new j(e.dyn_dtree,U),e.bl_desc=new j(e.bl_tree,B),e.bi_buf=0,e.bi_valid=0,H(e)},t._tr_stored_block=te,t._tr_flush_block=function(e,t,r,n){var f,l,d=0;e.level>0?(e.strm.data_type===s&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return a;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return o;for(t=32;t<c;t++)if(0!==e.dyn_ltree[2*t])return o;return a}(e)),X(e,e.l_desc),X(e,e.d_desc),d=function(e){var t;for($(e,e.dyn_ltree,e.l_desc.max_code),$(e,e.dyn_dtree,e.d_desc.max_code),X(e,e.bl_desc),t=m-1;t>=3&&0===e.bl_tree[2*O[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),f=e.opt_len+3+7>>>3,(l=e.static_len+3+7>>>3)<=f&&(f=l)):f=l=r+5,r+4<=f&&-1!==t?te(e,t,r,n):e.strategy===i||l===f?(C(e,(u<<1)+(n?1:0),3),J(e,T,R)):(C(e,(h<<1)+(n?1:0),3),function(e,t,r,n){var i;for(C(e,t-257,5),C(e,r-1,5),C(e,n-4,4),i=0;i<n;i++)C(e,e.bl_tree[2*O[i]+1],3);Q(e,e.dyn_ltree,t-1),Q(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,d+1),J(e,e.dyn_ltree,e.dyn_dtree)),H(e),n&&G(e)},t._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(D[r]+c+1)]++,e.dyn_dtree[2*z(t)]++),e.last_lit===e.lit_bufsize-1},t._tr_align=function(e){C(e,u<<1,3),q(e,w,T),function(e){16===e.bi_valid?(Z(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},function(e,t,r){"use strict";var n,i=r(8),a=r(50),o=r(28),s=r(27),f=r(49),l=0,u=1,h=3,d=4,c=5,p=0,g=1,m=-2,_=-3,b=-5,y=-1,v=1,w=2,E=3,x=4,k=0,S=2,A=8,P=9,O=15,T=8,R=286,I=30,D=19,L=2*R+1,F=15,U=3,B=258,M=B+U+1,N=32,j=42,z=69,Z=73,C=91,q=103,Y=113,W=666,H=1,G=2,V=3,K=4,J=3;function X(e,t){return e.msg=f[t],t}function $(e){return(e<<1)-(e>4?9:0)}function Q(e){for(var t=e.length;--t>=0;)e[t]=0}function ee(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(i.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function te(e,t){a._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,ee(e.strm)}function re(e,t){e.pending_buf[e.pending++]=t}function ne(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function ie(e,t){var r,n,i=e.max_chain_length,a=e.strstart,o=e.prev_length,s=e.nice_match,f=e.strstart>e.w_size-M?e.strstart-(e.w_size-M):0,l=e.window,u=e.w_mask,h=e.prev,d=e.strstart+B,c=l[a+o-1],p=l[a+o];e.prev_length>=e.good_match&&(i>>=2),s>e.lookahead&&(s=e.lookahead);do{if(l[(r=t)+o]===p&&l[r+o-1]===c&&l[r]===l[a]&&l[++r]===l[a+1]){a+=2,r++;do{}while(l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&a<d);if(n=B-(d-a),a=d-B,n>o){if(e.match_start=t,o=n,n>=s)break;c=l[a+o-1],p=l[a+o]}}}while((t=h[t&u])>f&&0!=--i);return o<=e.lookahead?o:e.lookahead}function ae(e){var t,r,n,a,f,l,u,h,d,c,p=e.w_size;do{if(a=e.window_size-e.lookahead-e.strstart,e.strstart>=p+(p-M)){i.arraySet(e.window,e.window,p,p,0),e.match_start-=p,e.strstart-=p,e.block_start-=p,t=r=e.hash_size;do{n=e.head[--t],e.head[t]=n>=p?n-p:0}while(--r);t=r=p;do{n=e.prev[--t],e.prev[t]=n>=p?n-p:0}while(--r);a+=p}if(0===e.strm.avail_in)break;if(l=e.strm,u=e.window,h=e.strstart+e.lookahead,d=a,c=void 0,(c=l.avail_in)>d&&(c=d),r=0===c?0:(l.avail_in-=c,i.arraySet(u,l.input,l.next_in,c,h),1===l.state.wrap?l.adler=o(l.adler,u,c,h):2===l.state.wrap&&(l.adler=s(l.adler,u,c,h)),l.next_in+=c,l.total_in+=c,c),e.lookahead+=r,e.lookahead+e.insert>=U)for(f=e.strstart-e.insert,e.ins_h=e.window[f],e.ins_h=(e.ins_h<<e.hash_shift^e.window[f+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[f+U-1])&e.hash_mask,e.prev[f&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=f,f++,e.insert--,!(e.lookahead+e.insert<U)););}while(e.lookahead<M&&0!==e.strm.avail_in)}function oe(e,t){for(var r,n;;){if(e.lookahead<M){if(ae(e),e.lookahead<M&&t===l)return H;if(0===e.lookahead)break}if(r=0,e.lookahead>=U&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+U-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-M&&(e.match_length=ie(e,r)),e.match_length>=U)if(n=a._tr_tally(e,e.strstart-e.match_start,e.match_length-U),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=U){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+U-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=a._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(te(e,!1),0===e.strm.avail_out))return H}return e.insert=e.strstart<U-1?e.strstart:U-1,t===d?(te(e,!0),0===e.strm.avail_out?V:K):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?H:G}function se(e,t){for(var r,n,i;;){if(e.lookahead<M){if(ae(e),e.lookahead<M&&t===l)return H;if(0===e.lookahead)break}if(r=0,e.lookahead>=U&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+U-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=U-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-M&&(e.match_length=ie(e,r),e.match_length<=5&&(e.strategy===v||e.match_length===U&&e.strstart-e.match_start>4096)&&(e.match_length=U-1)),e.prev_length>=U&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-U,n=a._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-U),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+U-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=U-1,e.strstart++,n&&(te(e,!1),0===e.strm.avail_out))return H}else if(e.match_available){if((n=a._tr_tally(e,0,e.window[e.strstart-1]))&&te(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return H}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=a._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<U-1?e.strstart:U-1,t===d?(te(e,!0),0===e.strm.avail_out?V:K):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?H:G}function fe(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function le(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=S,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?j:Y,e.adler=2===t.wrap?0:1,t.last_flush=l,a._tr_init(t),p):X(e,m)}function ue(e){var t,r=le(e);return r===p&&((t=e.state).window_size=2*t.w_size,Q(t.head),t.max_lazy_match=n[t.level].max_lazy,t.good_match=n[t.level].good_length,t.nice_match=n[t.level].nice_length,t.max_chain_length=n[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=U-1,t.match_available=0,t.ins_h=0),r}function he(e,t,r,n,a,o){if(!e)return m;var s=1;if(t===y&&(t=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),a<1||a>P||r!==A||n<8||n>15||t<0||t>9||o<0||o>x)return X(e,m);8===n&&(n=9);var f=new function(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=A,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*L),this.dyn_dtree=new i.Buf16(2*(2*I+1)),this.bl_tree=new i.Buf16(2*(2*D+1)),Q(this.dyn_ltree),Q(this.dyn_dtree),Q(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(F+1),this.heap=new i.Buf16(2*R+1),Q(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*R+1),Q(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0};return e.state=f,f.strm=e,f.wrap=s,f.gzhead=null,f.w_bits=n,f.w_size=1<<f.w_bits,f.w_mask=f.w_size-1,f.hash_bits=a+7,f.hash_size=1<<f.hash_bits,f.hash_mask=f.hash_size-1,f.hash_shift=~~((f.hash_bits+U-1)/U),f.window=new i.Buf8(2*f.w_size),f.head=new i.Buf16(f.hash_size),f.prev=new i.Buf16(f.w_size),f.lit_bufsize=1<<a+6,f.pending_buf_size=4*f.lit_bufsize,f.pending_buf=new i.Buf8(f.pending_buf_size),f.d_buf=1*f.lit_bufsize,f.l_buf=3*f.lit_bufsize,f.level=t,f.strategy=o,f.method=r,ue(e)}n=[new fe(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(ae(e),0===e.lookahead&&t===l)return H;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,te(e,!1),0===e.strm.avail_out))return H;if(e.strstart-e.block_start>=e.w_size-M&&(te(e,!1),0===e.strm.avail_out))return H}return e.insert=0,t===d?(te(e,!0),0===e.strm.avail_out?V:K):(e.strstart>e.block_start&&(te(e,!1),e.strm.avail_out),H)}),new fe(4,4,8,4,oe),new fe(4,5,16,8,oe),new fe(4,6,32,32,oe),new fe(4,4,16,16,se),new fe(8,16,32,32,se),new fe(8,16,128,128,se),new fe(8,32,128,256,se),new fe(32,128,258,1024,se),new fe(32,258,258,4096,se)],t.deflateInit=function(e,t){return he(e,t,A,O,T,k)},t.deflateInit2=he,t.deflateReset=ue,t.deflateResetKeep=le,t.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?m:(e.state.gzhead=t,p):m},t.deflate=function(e,t){var r,i,o,f;if(!e||!e.state||t>c||t<0)return e?X(e,m):m;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||i.status===W&&t!==d)return X(e,0===e.avail_out?b:m);if(i.strm=e,r=i.last_flush,i.last_flush=t,i.status===j)if(2===i.wrap)e.adler=0,re(i,31),re(i,139),re(i,8),i.gzhead?(re(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),re(i,255&i.gzhead.time),re(i,i.gzhead.time>>8&255),re(i,i.gzhead.time>>16&255),re(i,i.gzhead.time>>24&255),re(i,9===i.level?2:i.strategy>=w||i.level<2?4:0),re(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(re(i,255&i.gzhead.extra.length),re(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=s(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=z):(re(i,0),re(i,0),re(i,0),re(i,0),re(i,0),re(i,9===i.level?2:i.strategy>=w||i.level<2?4:0),re(i,J),i.status=Y);else{var _=A+(i.w_bits-8<<4)<<8;_|=(i.strategy>=w||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(_|=N),_+=31-_%31,i.status=Y,ne(i,_),0!==i.strstart&&(ne(i,e.adler>>>16),ne(i,65535&e.adler)),e.adler=1}if(i.status===z)if(i.gzhead.extra){for(o=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),ee(e),o=i.pending,i.pending!==i.pending_buf_size));)re(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=Z)}else i.status=Z;if(i.status===Z)if(i.gzhead.name){o=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),ee(e),o=i.pending,i.pending===i.pending_buf_size)){f=1;break}f=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,re(i,f)}while(0!==f);i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),0===f&&(i.gzindex=0,i.status=C)}else i.status=C;if(i.status===C)if(i.gzhead.comment){o=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),ee(e),o=i.pending,i.pending===i.pending_buf_size)){f=1;break}f=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,re(i,f)}while(0!==f);i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),0===f&&(i.status=q)}else i.status=q;if(i.status===q&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&ee(e),i.pending+2<=i.pending_buf_size&&(re(i,255&e.adler),re(i,e.adler>>8&255),e.adler=0,i.status=Y)):i.status=Y),0!==i.pending){if(ee(e),0===e.avail_out)return i.last_flush=-1,p}else if(0===e.avail_in&&$(t)<=$(r)&&t!==d)return X(e,b);if(i.status===W&&0!==e.avail_in)return X(e,b);if(0!==e.avail_in||0!==i.lookahead||t!==l&&i.status!==W){var y=i.strategy===w?function(e,t){for(var r;;){if(0===e.lookahead&&(ae(e),0===e.lookahead)){if(t===l)return H;break}if(e.match_length=0,r=a._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(te(e,!1),0===e.strm.avail_out))return H}return e.insert=0,t===d?(te(e,!0),0===e.strm.avail_out?V:K):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?H:G}(i,t):i.strategy===E?function(e,t){for(var r,n,i,o,s=e.window;;){if(e.lookahead<=B){if(ae(e),e.lookahead<=B&&t===l)return H;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=U&&e.strstart>0&&(n=s[i=e.strstart-1])===s[++i]&&n===s[++i]&&n===s[++i]){o=e.strstart+B;do{}while(n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&i<o);e.match_length=B-(o-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=U?(r=a._tr_tally(e,1,e.match_length-U),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=a._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(te(e,!1),0===e.strm.avail_out))return H}return e.insert=0,t===d?(te(e,!0),0===e.strm.avail_out?V:K):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?H:G}(i,t):n[i.level].func(i,t);if(y!==V&&y!==K||(i.status=W),y===H||y===V)return 0===e.avail_out&&(i.last_flush=-1),p;if(y===G&&(t===u?a._tr_align(i):t!==c&&(a._tr_stored_block(i,0,0,!1),t===h&&(Q(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),ee(e),0===e.avail_out))return i.last_flush=-1,p}return t!==d?p:i.wrap<=0?g:(2===i.wrap?(re(i,255&e.adler),re(i,e.adler>>8&255),re(i,e.adler>>16&255),re(i,e.adler>>24&255),re(i,255&e.total_in),re(i,e.total_in>>8&255),re(i,e.total_in>>16&255),re(i,e.total_in>>24&255)):(ne(i,e.adler>>>16),ne(i,65535&e.adler)),ee(e),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?p:g)},t.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==j&&t!==z&&t!==Z&&t!==C&&t!==q&&t!==Y&&t!==W?X(e,m):(e.state=null,t===Y?X(e,_):p):m},t.deflateSetDictionary=function(e,t){var r,n,a,s,f,l,u,h,d=t.length;if(!e||!e.state)return m;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==j||r.lookahead)return m;for(1===s&&(e.adler=o(e.adler,t,d,0)),r.wrap=0,d>=r.w_size&&(0===s&&(Q(r.head),r.strstart=0,r.block_start=0,r.insert=0),h=new i.Buf8(r.w_size),i.arraySet(h,t,d-r.w_size,r.w_size,0),t=h,d=r.w_size),f=e.avail_in,l=e.next_in,u=e.input,e.avail_in=d,e.next_in=0,e.input=t,ae(r);r.lookahead>=U;){n=r.strstart,a=r.lookahead-(U-1);do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+U-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++}while(--a);r.strstart=n,r.lookahead=U-1,ae(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=U-1,r.match_available=0,e.next_in=l,e.input=u,e.avail_in=f,r.wrap=s,p},t.deflateInfo="pako deflate (from Nodeca project)"},function(e,t,r){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t,r){"use strict";(function(e,n){var i=r(30),a=r(52),o=r(51),s=r(48),f=r(45);for(var l in f)t[l]=f[l];t.NONE=0,t.DEFLATE=1,t.INFLATE=2,t.GZIP=3,t.GUNZIP=4,t.DEFLATERAW=5,t.INFLATERAW=6,t.UNZIP=7;function u(e){if("number"!=typeof e||e<t.DEFLATE||e>t.UNZIP)throw new TypeError("Bad argument");this.dictionary=null,this.err=0,this.flush=0,this.init_done=!1,this.level=0,this.memLevel=0,this.mode=e,this.strategy=0,this.windowBits=0,this.write_in_progress=!1,this.pending_close=!1,this.gzip_id_bytes_read=0}u.prototype.close=function(){this.write_in_progress?this.pending_close=!0:(this.pending_close=!1,i(this.init_done,"close before init"),i(this.mode<=t.UNZIP),this.mode===t.DEFLATE||this.mode===t.GZIP||this.mode===t.DEFLATERAW?o.deflateEnd(this.strm):this.mode!==t.INFLATE&&this.mode!==t.GUNZIP&&this.mode!==t.INFLATERAW&&this.mode!==t.UNZIP||s.inflateEnd(this.strm),this.mode=t.NONE,this.dictionary=null)},u.prototype.write=function(e,t,r,n,i,a,o){return this._write(!0,e,t,r,n,i,a,o)},u.prototype.writeSync=function(e,t,r,n,i,a,o){return this._write(!1,e,t,r,n,i,a,o)},u.prototype._write=function(r,a,o,s,f,l,u,h){if(i.equal(arguments.length,8),i(this.init_done,"write before init"),i(this.mode!==t.NONE,"already finalized"),i.equal(!1,this.write_in_progress,"write already in progress"),i.equal(!1,this.pending_close,"close is pending"),this.write_in_progress=!0,i.equal(!1,void 0===a,"must provide flush value"),this.write_in_progress=!0,a!==t.Z_NO_FLUSH&&a!==t.Z_PARTIAL_FLUSH&&a!==t.Z_SYNC_FLUSH&&a!==t.Z_FULL_FLUSH&&a!==t.Z_FINISH&&a!==t.Z_BLOCK)throw new Error("Invalid flush value");if(null==o&&(o=e.alloc(0),f=0,s=0),this.strm.avail_in=f,this.strm.input=o,this.strm.next_in=s,this.strm.avail_out=h,this.strm.output=l,this.strm.next_out=u,this.flush=a,!r)return this._process(),this._checkError()?this._afterSync():void 0;var d=this;return n.nextTick(function(){d._process(),d._after()}),this},u.prototype._afterSync=function(){var e=this.strm.avail_out,t=this.strm.avail_in;return this.write_in_progress=!1,[t,e]},u.prototype._process=function(){var e=null;switch(this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=o.deflate(this.strm,this.flush);break;case t.UNZIP:switch(this.strm.avail_in>0&&(e=this.strm.next_in),this.gzip_id_bytes_read){case 0:if(null===e)break;if(31!==this.strm.input[e]){this.mode=t.INFLATE;break}if(this.gzip_id_bytes_read=1,e++,1===this.strm.avail_in)break;case 1:if(null===e)break;139===this.strm.input[e]?(this.gzip_id_bytes_read=2,this.mode=t.GUNZIP):this.mode=t.INFLATE;break;default:throw new Error("invalid number of gzip magic number bytes read")}case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:for(this.err=s.inflate(this.strm,this.flush),this.err===t.Z_NEED_DICT&&this.dictionary&&(this.err=s.inflateSetDictionary(this.strm,this.dictionary),this.err===t.Z_OK?this.err=s.inflate(this.strm,this.flush):this.err===t.Z_DATA_ERROR&&(this.err=t.Z_NEED_DICT));this.strm.avail_in>0&&this.mode===t.GUNZIP&&this.err===t.Z_STREAM_END&&0!==this.strm.next_in[0];)this.reset(),this.err=s.inflate(this.strm,this.flush);break;default:throw new Error("Unknown mode "+this.mode)}},u.prototype._checkError=function(){switch(this.err){case t.Z_OK:case t.Z_BUF_ERROR:if(0!==this.strm.avail_out&&this.flush===t.Z_FINISH)return this._error("unexpected end of file"),!1;break;case t.Z_STREAM_END:break;case t.Z_NEED_DICT:return null==this.dictionary?this._error("Missing dictionary"):this._error("Bad dictionary"),!1;default:return this._error("Zlib error"),!1}return!0},u.prototype._after=function(){if(this._checkError()){var e=this.strm.avail_out,t=this.strm.avail_in;this.write_in_progress=!1,this.callback(t,e),this.pending_close&&this.close()}},u.prototype._error=function(e){this.strm.msg&&(e=this.strm.msg),this.onerror(e,this.err),this.write_in_progress=!1,this.pending_close&&this.close()},u.prototype.init=function(e,r,n,a,o){i(4===arguments.length||5===arguments.length,"init(windowBits, level, memLevel, strategy, [dictionary])"),i(e>=8&&e<=15,"invalid windowBits"),i(r>=-1&&r<=9,"invalid compression level"),i(n>=1&&n<=9,"invalid memlevel"),i(a===t.Z_FILTERED||a===t.Z_HUFFMAN_ONLY||a===t.Z_RLE||a===t.Z_FIXED||a===t.Z_DEFAULT_STRATEGY,"invalid strategy"),this._init(r,e,n,a,o),this._setDictionary()},u.prototype.params=function(){throw new Error("deflateParams Not supported")},u.prototype.reset=function(){this._reset(),this._setDictionary()},u.prototype._init=function(e,r,n,i,f){switch(this.level=e,this.windowBits=r,this.memLevel=n,this.strategy=i,this.flush=t.Z_NO_FLUSH,this.err=t.Z_OK,this.mode!==t.GZIP&&this.mode!==t.GUNZIP||(this.windowBits+=16),this.mode===t.UNZIP&&(this.windowBits+=32),this.mode!==t.DEFLATERAW&&this.mode!==t.INFLATERAW||(this.windowBits=-1*this.windowBits),this.strm=new a,this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=o.deflateInit2(this.strm,this.level,t.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:case t.UNZIP:this.err=s.inflateInit2(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}this.err!==t.Z_OK&&this._error("Init error"),this.dictionary=f,this.write_in_progress=!1,this.init_done=!0},u.prototype._setDictionary=function(){if(null!=this.dictionary){switch(this.err=t.Z_OK,this.mode){case t.DEFLATE:case t.DEFLATERAW:this.err=o.deflateSetDictionary(this.strm,this.dictionary)}this.err!==t.Z_OK&&this._error("Failed to set dictionary")}},u.prototype._reset=function(){switch(this.err=t.Z_OK,this.mode){case t.DEFLATE:case t.DEFLATERAW:case t.GZIP:this.err=o.deflateReset(this.strm);break;case t.INFLATE:case t.INFLATERAW:case t.GUNZIP:this.err=s.inflateReset(this.strm)}this.err!==t.Z_OK&&this._error("Failed to reset stream")},t.Zlib=u}).call(this,r(1).Buffer,r(3))},function(e,t,r){e.exports=r(19).PassThrough},function(e,t,r){e.exports=r(19).Transform},function(e,t,r){e.exports=r(2)},function(e,t,r){e.exports=r(18)},function(e,t,r){"use strict";e.exports=a;var n=r(31),i=r(6);function a(e){if(!(this instanceof a))return new a(e);n.call(this,e)}i.inherits=r(5),i.inherits(a,n),a.prototype._transform=function(e,t,r){r(null,e)}},function(e,t,r){(function(t){function r(e){try{if(!t.localStorage)return!1}catch(e){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(e,t){if(r("noDeprecation"))return e;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(t);r("traceDeprecation")?console.trace(t):console.warn(t),n=!0}return e.apply(this,arguments)}}}).call(this,r(0))},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var n,i,a,o,s,f=1,l={},u=!1,h=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick(function(){p(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?e.MessageChannel?((a=new MessageChannel).port1.onmessage=function(e){p(e.data)},n=function(e){a.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(i=h.documentElement,n=function(e){var t=h.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):n=function(e){setTimeout(p,0,e)}:(o="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&p(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),n=function(t){e.postMessage(o+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var i={callback:e,args:t};return l[f]=i,n(f),f++},d.clearImmediate=c}function c(e){delete l[e]}function p(e){if(u)setTimeout(p,0,e);else{var t=l[e];if(t){u=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(r,n)}}(t)}finally{c(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,r(0),r(3))},function(e,t,r){(function(e){var n=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(n.call(setTimeout,window,arguments),clearTimeout)},t.setInterval=function(){return new i(n.call(setInterval,window,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(window,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},r(62),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,r(0))},function(e,t){},function(e,t,r){"use strict";var n=r(9).Buffer,i=r(64);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var t,r,i,a=n.allocUnsafe(e>>>0),o=this.head,s=0;o;)t=o.data,r=a,i=s,t.copy(r,i),s+=o.data.length,o=o.next;return a},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,r){e.exports=i;var n=r(20).EventEmitter;function i(){n.call(this)}r(5)(i,n),i.Readable=r(19),i.Writable=r(59),i.Duplex=r(58),i.Transform=r(57),i.PassThrough=r(56),i.Stream=i,i.prototype.pipe=function(e,t){var r=this;function i(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function a(){r.readable&&r.resume&&r.resume()}r.on("data",i),e.on("drain",a),e._isStdio||t&&!1===t.end||(r.on("end",s),r.on("close",f));var o=!1;function s(){o||(o=!0,e.end())}function f(){o||(o=!0,"function"==typeof e.destroy&&e.destroy())}function l(e){if(u(),0===n.listenerCount(this,"error"))throw e}function u(){r.removeListener("data",i),e.removeListener("drain",a),r.removeListener("end",s),r.removeListener("close",f),r.removeListener("error",l),e.removeListener("error",l),r.removeListener("end",u),r.removeListener("close",u),e.removeListener("close",u)}return r.on("error",l),e.on("error",l),r.on("end",u),r.on("close",u),e.on("close",u),e.emit("pipe",r),e}},function(e,t,r){"use strict";(function(e){var n=r(1).Buffer,i=r(67).Transform,a=r(55),o=r(29),s=r(30).ok,f=r(1).kMaxLength,l="Cannot create final Buffer. It would be larger than 0x"+f.toString(16)+" bytes";a.Z_MIN_WINDOWBITS=8,a.Z_MAX_WINDOWBITS=15,a.Z_DEFAULT_WINDOWBITS=15,a.Z_MIN_CHUNK=64,a.Z_MAX_CHUNK=1/0,a.Z_DEFAULT_CHUNK=16384,a.Z_MIN_MEMLEVEL=1,a.Z_MAX_MEMLEVEL=9,a.Z_DEFAULT_MEMLEVEL=8,a.Z_MIN_LEVEL=-1,a.Z_MAX_LEVEL=9,a.Z_DEFAULT_LEVEL=a.Z_DEFAULT_COMPRESSION;for(var u=Object.keys(a),h=0;h<u.length;h++){var d=u[h];d.match(/^Z/)&&Object.defineProperty(t,d,{enumerable:!0,value:a[d],writable:!1})}for(var c={Z_OK:a.Z_OK,Z_STREAM_END:a.Z_STREAM_END,Z_NEED_DICT:a.Z_NEED_DICT,Z_ERRNO:a.Z_ERRNO,Z_STREAM_ERROR:a.Z_STREAM_ERROR,Z_DATA_ERROR:a.Z_DATA_ERROR,Z_MEM_ERROR:a.Z_MEM_ERROR,Z_BUF_ERROR:a.Z_BUF_ERROR,Z_VERSION_ERROR:a.Z_VERSION_ERROR},p=Object.keys(c),g=0;g<p.length;g++){var m=p[g];c[c[m]]=m}function _(e,t,r){var i=[],a=0;function o(){for(var t;null!==(t=e.read());)i.push(t),a+=t.length;e.once("readable",o)}function s(){var t,o=null;a>=f?o=new RangeError(l):t=n.concat(i,a),i=[],e.close(),r(o,t)}e.on("error",function(t){e.removeListener("end",s),e.removeListener("readable",o),r(t)}),e.on("end",s),e.end(t),o()}function b(e,t){if("string"==typeof t&&(t=n.from(t)),!n.isBuffer(t))throw new TypeError("Not a string or buffer");var r=e._finishFlushFlag;return e._processChunk(t,r)}function y(e){if(!(this instanceof y))return new y(e);P.call(this,e,a.DEFLATE)}function v(e){if(!(this instanceof v))return new v(e);P.call(this,e,a.INFLATE)}function w(e){if(!(this instanceof w))return new w(e);P.call(this,e,a.GZIP)}function E(e){if(!(this instanceof E))return new E(e);P.call(this,e,a.GUNZIP)}function x(e){if(!(this instanceof x))return new x(e);P.call(this,e,a.DEFLATERAW)}function k(e){if(!(this instanceof k))return new k(e);P.call(this,e,a.INFLATERAW)}function S(e){if(!(this instanceof S))return new S(e);P.call(this,e,a.UNZIP)}function A(e){return e===a.Z_NO_FLUSH||e===a.Z_PARTIAL_FLUSH||e===a.Z_SYNC_FLUSH||e===a.Z_FULL_FLUSH||e===a.Z_FINISH||e===a.Z_BLOCK}function P(e,r){var o=this;if(this._opts=e=e||{},this._chunkSize=e.chunkSize||t.Z_DEFAULT_CHUNK,i.call(this,e),e.flush&&!A(e.flush))throw new Error("Invalid flush flag: "+e.flush);if(e.finishFlush&&!A(e.finishFlush))throw new Error("Invalid flush flag: "+e.finishFlush);if(this._flushFlag=e.flush||a.Z_NO_FLUSH,this._finishFlushFlag=void 0!==e.finishFlush?e.finishFlush:a.Z_FINISH,e.chunkSize&&(e.chunkSize<t.Z_MIN_CHUNK||e.chunkSize>t.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+e.chunkSize);if(e.windowBits&&(e.windowBits<t.Z_MIN_WINDOWBITS||e.windowBits>t.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+e.windowBits);if(e.level&&(e.level<t.Z_MIN_LEVEL||e.level>t.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+e.level);if(e.memLevel&&(e.memLevel<t.Z_MIN_MEMLEVEL||e.memLevel>t.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+e.memLevel);if(e.strategy&&e.strategy!=t.Z_FILTERED&&e.strategy!=t.Z_HUFFMAN_ONLY&&e.strategy!=t.Z_RLE&&e.strategy!=t.Z_FIXED&&e.strategy!=t.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+e.strategy);if(e.dictionary&&!n.isBuffer(e.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._handle=new a.Zlib(r);var s=this;this._hadError=!1,this._handle.onerror=function(e,r){O(s),s._hadError=!0;var n=new Error(e);n.errno=r,n.code=t.codes[r],s.emit("error",n)};var f=t.Z_DEFAULT_COMPRESSION;"number"==typeof e.level&&(f=e.level);var l=t.Z_DEFAULT_STRATEGY;"number"==typeof e.strategy&&(l=e.strategy),this._handle.init(e.windowBits||t.Z_DEFAULT_WINDOWBITS,f,e.memLevel||t.Z_DEFAULT_MEMLEVEL,l,e.dictionary),this._buffer=n.allocUnsafe(this._chunkSize),this._offset=0,this._level=f,this._strategy=l,this.once("end",this.close),Object.defineProperty(this,"_closed",{get:function(){return!o._handle},configurable:!0,enumerable:!0})}function O(t,r){r&&e.nextTick(r),t._handle&&(t._handle.close(),t._handle=null)}function T(e){e.emit("close")}Object.defineProperty(t,"codes",{enumerable:!0,value:Object.freeze(c),writable:!1}),t.Deflate=y,t.Inflate=v,t.Gzip=w,t.Gunzip=E,t.DeflateRaw=x,t.InflateRaw=k,t.Unzip=S,t.createDeflate=function(e){return new y(e)},t.createInflate=function(e){return new v(e)},t.createDeflateRaw=function(e){return new x(e)},t.createInflateRaw=function(e){return new k(e)},t.createGzip=function(e){return new w(e)},t.createGunzip=function(e){return new E(e)},t.createUnzip=function(e){return new S(e)},t.deflate=function(e,t,r){return"function"==typeof t&&(r=t,t={}),_(new y(t),e,r)},t.deflateSync=function(e,t){return b(new y(t),e)},t.gzip=function(e,t,r){return"function"==typeof t&&(r=t,t={}),_(new w(t),e,r)},t.gzipSync=function(e,t){return b(new w(t),e)},t.deflateRaw=function(e,t,r){return"function"==typeof t&&(r=t,t={}),_(new x(t),e,r)},t.deflateRawSync=function(e,t){return b(new x(t),e)},t.unzip=function(e,t,r){return"function"==typeof t&&(r=t,t={}),_(new S(t),e,r)},t.unzipSync=function(e,t){return b(new S(t),e)},t.inflate=function(e,t,r){return"function"==typeof t&&(r=t,t={}),_(new v(t),e,r)},t.inflateSync=function(e,t){return b(new v(t),e)},t.gunzip=function(e,t,r){return"function"==typeof t&&(r=t,t={}),_(new E(t),e,r)},t.gunzipSync=function(e,t){return b(new E(t),e)},t.inflateRaw=function(e,t,r){return"function"==typeof t&&(r=t,t={}),_(new k(t),e,r)},t.inflateRawSync=function(e,t){return b(new k(t),e)},o.inherits(P,i),P.prototype.params=function(r,n,i){if(r<t.Z_MIN_LEVEL||r>t.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+r);if(n!=t.Z_FILTERED&&n!=t.Z_HUFFMAN_ONLY&&n!=t.Z_RLE&&n!=t.Z_FIXED&&n!=t.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+n);if(this._level!==r||this._strategy!==n){var o=this;this.flush(a.Z_SYNC_FLUSH,function(){s(o._handle,"zlib binding closed"),o._handle.params(r,n),o._hadError||(o._level=r,o._strategy=n,i&&i())})}else e.nextTick(i)},P.prototype.reset=function(){return s(this._handle,"zlib binding closed"),this._handle.reset()},P.prototype._flush=function(e){this._transform(n.alloc(0),"",e)},P.prototype.flush=function(t,r){var i=this,o=this._writableState;("function"==typeof t||void 0===t&&!r)&&(r=t,t=a.Z_FULL_FLUSH),o.ended?r&&e.nextTick(r):o.ending?r&&this.once("end",r):o.needDrain?r&&this.once("drain",function(){return i.flush(t,r)}):(this._flushFlag=t,this.write(n.alloc(0),"",r))},P.prototype.close=function(t){O(this,t),e.nextTick(T,this)},P.prototype._transform=function(e,t,r){var i,o=this._writableState,s=(o.ending||o.ended)&&(!e||o.length===e.length);return null===e||n.isBuffer(e)?this._handle?(s?i=this._finishFlushFlag:(i=this._flushFlag,e.length>=o.length&&(this._flushFlag=this._opts.flush||a.Z_NO_FLUSH)),void this._processChunk(e,i,r)):r(new Error("zlib binding closed")):r(new Error("invalid input"))},P.prototype._processChunk=function(e,t,r){var i=e&&e.length,a=this._chunkSize-this._offset,o=0,u=this,h="function"==typeof r;if(!h){var d,c=[],p=0;this.on("error",function(e){d=e}),s(this._handle,"zlib binding closed");do{var g=this._handle.writeSync(t,e,o,i,this._buffer,this._offset,a)}while(!this._hadError&&b(g[0],g[1]));if(this._hadError)throw d;if(p>=f)throw O(this),new RangeError(l);var m=n.concat(c,p);return O(this),m}s(this._handle,"zlib binding closed");var _=this._handle.write(t,e,o,i,this._buffer,this._offset,a);function b(f,l){if(this&&(this.buffer=null,this.callback=null),!u._hadError){var d=a-l;if(s(d>=0,"have should not go down"),d>0){var g=u._buffer.slice(u._offset,u._offset+d);u._offset+=d,h?u.push(g):(c.push(g),p+=g.length)}if((0===l||u._offset>=u._chunkSize)&&(a=u._chunkSize,u._offset=0,u._buffer=n.allocUnsafe(u._chunkSize)),0===l){if(o+=i-f,i=f,!h)return!0;var m=u._handle.write(t,e,o,i,u._buffer,u._offset,u._chunkSize);return m.callback=b,void(m.buffer=e)}if(!h)return!1;r()}}_.buffer=e,_.callback=b},o.inherits(y,P),o.inherits(v,P),o.inherits(w,P),o.inherits(E,P),o.inherits(x,P),o.inherits(k,P),o.inherits(S,P)}).call(this,r(3))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(t,d){if(void 0===t)throw"dicomParser.parseDicom: missing required parameter 'byteArray'";function c(f){var c=function(e){if(void 0===e.elements.x00020010)throw"dicomParser.parseDicom: missing required meta header attribute 0002,0010";var r=e.elements.x00020010;return u.readFixedString(t,r.dataOffset,r.length)}(f),p=function(e){if("1.2.840.10008.1.2"===e)return!1;return!0}(c),g=function(o,f){if("1.2.840.10008.1.2.1.99"===o){if(d&&d.inflater){var u=d.inflater(t,f);return new a.default(s.default,u,0)}if(void 0!==e&&this.module!==e){var h=r(68),c=(0,l.default)(t,f,t.length-f),p=h.inflateRawSync(c),g=(0,n.default)(t,p.length+f);return t.copy(g,0,0,f),p.copy(g,f),new a.default(s.default,g,0)}if("undefined"!=typeof pako){var m=t.slice(f),_=pako.inflateRaw(m),b=(0,n.default)(t,_.length+f);return b.set(t.slice(0,f),0),b.set(_,f),new a.default(s.default,b,0)}throw"dicomParser.parseDicom: no inflater available to handle deflate transfer syntax"}if("1.2.840.10008.1.2.2"===o)return new a.default(i.default,t,f);return new a.default(s.default,t,f)}(c,f.position),m=new o.default(g.byteArrayParser,g.byteArray,{});m.warnings=g.warnings;try{p?h.parseDicomDataSetExplicit(m,g,g.byteArray.length,d):h.parseDicomDataSetImplicit(m,g,g.byteArray.length,d)}catch(e){var _={exception:e,dataSet:m};throw _}return m}return p=(0,f.default)(t,d),g=c(p),function(e,t){for(var r in e.elements)e.elements.hasOwnProperty(r)&&(t.elements[r]=e.elements[r]);return void 0!==e.warnings&&(t.warnings=e.warnings.concat(t.warnings)),t}(p,g);var p,g};var n=c(r(22)),i=c(r(37)),a=c(r(12)),o=c(r(7)),s=c(r(21)),f=c(r(36)),l=c(r(11)),u=d(r(14)),h=d(r(16));function d(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function c(e){return e&&e.__esModule?e:{default:e}}}).call(this,r(69)(e))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="1.8.1"},function(e,t){t.read=function(e,t,r,n,i){var a,o,s=8*i-n-1,f=(1<<s)-1,l=f>>1,u=-7,h=r?i-1:0,d=r?-1:1,c=e[t+h];for(h+=d,a=c&(1<<-u)-1,c>>=-u,u+=s;u>0;a=256*a+e[t+h],h+=d,u-=8);for(o=a&(1<<-u)-1,a>>=-u,u+=n;u>0;o=256*o+e[t+h],h+=d,u-=8);if(0===a)a=1-l;else{if(a===f)return o?NaN:1/0*(c?-1:1);o+=Math.pow(2,n),a-=l}return(c?-1:1)*o*Math.pow(2,a-n)},t.write=function(e,t,r,n,i,a){var o,s,f,l=8*a-i-1,u=(1<<l)-1,h=u>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,c=n?0:a-1,p=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,o=u):(o=Math.floor(Math.log(t)/Math.LN2),t*(f=Math.pow(2,-o))<1&&(o--,f*=2),(t+=o+h>=1?d/f:d*Math.pow(2,1-h))*f>=2&&(o++,f/=2),o+h>=u?(s=0,o=u):o+h>=1?(s=(t*f-1)*Math.pow(2,i),o+=h):(s=t*Math.pow(2,h-1)*Math.pow(2,i),o=0));i>=8;e[r+c]=255&s,c+=p,s/=256,i-=8);for(o=o<<i|s,l+=i;l>0;e[r+c]=255&o,c+=p,o/=256,l-=8);e[r+c-p]|=128*g}},function(e,t,r){"use strict";t.byteLength=function(e){return 3*e.length/4-l(e)},t.toByteArray=function(e){var t,r,n,o,s,f=e.length;o=l(e),s=new a(3*f/4-o),r=o>0?f-4:f;var u=0;for(t=0;t<r;t+=4)n=i[e.charCodeAt(t)]<<18|i[e.charCodeAt(t+1)]<<12|i[e.charCodeAt(t+2)]<<6|i[e.charCodeAt(t+3)],s[u++]=n>>16&255,s[u++]=n>>8&255,s[u++]=255&n;2===o?(n=i[e.charCodeAt(t)]<<2|i[e.charCodeAt(t+1)]>>4,s[u++]=255&n):1===o&&(n=i[e.charCodeAt(t)]<<10|i[e.charCodeAt(t+1)]<<4|i[e.charCodeAt(t+2)]>>2,s[u++]=n>>8&255,s[u++]=255&n);return s},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,a="",o=[],s=0,f=r-i;s<f;s+=16383)o.push(u(e,s,s+16383>f?f:s+16383));1===i?(t=e[r-1],a+=n[t>>2],a+=n[t<<4&63],a+="=="):2===i&&(t=(e[r-2]<<8)+e[r-1],a+=n[t>>10],a+=n[t>>4&63],a+=n[t<<2&63],a+="=");return o.push(a),o.join("")};for(var n=[],i=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,f=o.length;s<f;++s)n[s]=o[s],i[o.charCodeAt(s)]=s;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===e[t-2]?2:"="===e[t-1]?1:0}function u(e,t,r){for(var i,a,o=[],s=t;s<r;s+=3)i=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),o.push(n[(a=i)>>18&63]+n[a>>12&63]+n[a>>6&63]+n[63&a]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t,r){"use strict";function n(e,t){return 255===e.byteArray[t]&&217===e.byteArray[t+1]}function i(e,t,r){var i=t.fragments[r];return!(!n(e,i.position+i.length-2)&&!n(e,i.position+i.length-3))}function a(e,t,r){for(var n=r;n<t.fragments.length;n++)if(i(e,t,n))return n}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(void 0===e)throw"dicomParser.createJPEGBasicOffsetTable: missing required parameter dataSet";if(void 0===t)throw"dicomParser.createJPEGBasicOffsetTable: missing required parameter pixelDataElement";if("x7fe00010"!==t.tag)throw"dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to non pixel data tag (expected tag = x7fe00010'";if(!0!==t.encapsulatedPixelData)throw"dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(!0!==t.hadUndefinedLength)throw"dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(void 0===t.basicOffsetTable)throw"dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(void 0===t.fragments)throw"dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(t.fragments.length<=0)throw"dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(r&&r.length<=0)throw"dicomParser.createJPEGBasicOffsetTable: parameter 'fragments' must not be zero length";r=r||t.fragments;var n=[],i=0;for(;;){n.push(t.fragments[i].offset);var o=a(e,t,i);if(void 0===o||o===t.fragments.length-1)return n;i=o+1}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t,r){if(void 0===t)throw"dicomParser.explicitDataSetToJS: missing required parameter dataSet";r=r||{omitPrivateAttibutes:!0,maxElementLength:128};var n={};for(var i in t.elements){var s=t.elements[i];if(!0!==r.omitPrivateAttibutes||!o.isPrivateTag(i))if(s.items){for(var f=[],l=0;l<s.items.length;l++)f.push(e(s.items[l].dataSet,r));n[i]=f}else{var u;u=void 0,s.length<r.maxElementLength&&(u=(0,a.default)(t,s)),n[i]=void 0!==u?u:{dataOffset:s.dataOffset,length:s.length}}}return n};var n,i=r(43),a=(n=i)&&n.__esModule?n:{default:n},o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(25))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(e&&8===e.length){var r=parseInt(e.substring(0,4),10),n=parseInt(e.substring(4,6),10),i=parseInt(e.substring(6,8),10);if(t&&!0!==function(e,t,r){if(isNaN(r))return!1;return t>0&&t<=12&&e>0&&e<=function(e,t){switch(e){case 2:return t%4==0&&t%100||t%400==0?29:28;case 9:case 4:case 6:case 11:return 30;default:return 31}}(t,r)}(i,n,r))throw"invalid DA '"+e+"'";return{year:r,month:n,day:i}}if(t)throw"invalid DA '"+e+"'";return}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(e.length>=2){var r=parseInt(e.substring(0,2),10),n=e.length>=4?parseInt(e.substring(2,4),10):void 0,i=e.length>=6?parseInt(e.substring(4,6),10):void 0,a=e.length>=8?parseInt(e.substring(7,13),10):void 0;if(t&&(isNaN(r)||void 0!==n&&isNaN(n)||void 0!==i&&isNaN(i)||void 0!==a&&isNaN(a)||r<0||r>23||n&&(n<0||n>59)||i&&(i<0||i>59)||a&&(a<0||a>999999)))throw"invalid TM '"+e+"'";return{hours:r,minutes:n,seconds:i,fractionalSeconds:a}}if(t)throw"invalid TM '"+e+"'";return}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(25);Object.keys(n).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return n[e]}})});var i=r(77);Object.defineProperty(t,"parseTM",{enumerable:!0,get:function(){return l(i).default}});var a=r(76);Object.defineProperty(t,"parseDA",{enumerable:!0,get:function(){return l(a).default}});var o=r(43);Object.defineProperty(t,"explicitElementToString",{enumerable:!0,get:function(){return l(o).default}});var s=r(75);Object.defineProperty(t,"explicitDataSetToJS",{enumerable:!0,get:function(){return l(s).default}});var f=r(74);function l(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"createJPEGBasicOffsetTable",{enumerable:!0,get:function(){return l(f).default}})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(78);Object.keys(n).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return n[e]}})});var i=r(16);Object.keys(i).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return i[e]}})});var a=r(14);Object.keys(a).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}})});var o=r(22);Object.defineProperty(t,"alloc",{enumerable:!0,get:function(){return P(o).default}});var s=r(71);Object.defineProperty(t,"version",{enumerable:!0,get:function(){return P(s).default}});var f=r(37);Object.defineProperty(t,"bigEndianByteArrayParser",{enumerable:!0,get:function(){return P(f).default}});var l=r(12);Object.defineProperty(t,"ByteStream",{enumerable:!0,get:function(){return P(l).default}});var u=r(11);Object.defineProperty(t,"sharedCopy",{enumerable:!0,get:function(){return P(u).default}});var h=r(7);Object.defineProperty(t,"DataSet",{enumerable:!0,get:function(){return P(h).default}});var d=r(41);Object.defineProperty(t,"findAndSetUNElementLength",{enumerable:!0,get:function(){return P(d).default}});var c=r(42);Object.defineProperty(t,"findEndOfEncapsulatedElement",{enumerable:!0,get:function(){return P(c).default}});var p=r(24);Object.defineProperty(t,"findItemDelimitationItemAndSetElementLength",{enumerable:!0,get:function(){return P(p).default}});var g=r(21);Object.defineProperty(t,"littleEndianByteArrayParser",{enumerable:!0,get:function(){return P(g).default}});var m=r(70);Object.defineProperty(t,"parseDicom",{enumerable:!0,get:function(){return P(m).default}});var _=r(15);Object.defineProperty(t,"readDicomElementExplicit",{enumerable:!0,get:function(){return P(_).default}});var b=r(23);Object.defineProperty(t,"readDicomElementImplicit",{enumerable:!0,get:function(){return P(b).default}});var y=r(26);Object.defineProperty(t,"readEncapsulatedImageFrame",{enumerable:!0,get:function(){return P(y).default}});var v=r(44);Object.defineProperty(t,"readEncapsulatedPixelData",{enumerable:!0,get:function(){return P(v).default}});var w=r(17);Object.defineProperty(t,"readEncapsulatedPixelDataFromFragments",{enumerable:!0,get:function(){return P(w).default}});var E=r(36);Object.defineProperty(t,"readPart10Header",{enumerable:!0,get:function(){return P(E).default}});var x=r(40);Object.defineProperty(t,"readSequenceItemsExplicit",{enumerable:!0,get:function(){return P(x).default}});var k=r(39);Object.defineProperty(t,"readSequenceItemsImplicit",{enumerable:!0,get:function(){return P(k).default}});var S=r(13);Object.defineProperty(t,"readSequenceItem",{enumerable:!0,get:function(){return P(S).default}});var A=r(4);function P(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"readTag",{enumerable:!0,get:function(){return P(A).default}})}])});
//# sourceMappingURL=dicomParser.min.js.map

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/jpeg-lossless-decoder-js/src/component-spec.js":
/*!*********************************************************************!*\
  !*** ./node_modules/jpeg-lossless-decoder-js/src/component-spec.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (C) 2015 Michael Martinez
 * Changes: Added support for selection values 2-7, fixed minor bugs &
 * warnings, split into multiple class files, and general clean up.
 *
 * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
 */

/*
 * Copyright (C) Helmut Dersch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/
var jpeg = jpeg || {};
jpeg.lossless = jpeg.lossless || {};


/*** Constructor ***/
jpeg.lossless.ComponentSpec = jpeg.lossless.ComponentSpec || function () {
    this.hSamp = 0; // Horizontal sampling factor
    this.quantTableSel = 0; // Quantization table destination selector
    this.vSamp = 0; // Vertical
};


/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = jpeg.lossless.ComponentSpec;
}


/***/ }),

/***/ "./node_modules/jpeg-lossless-decoder-js/src/data-stream.js":
/*!******************************************************************!*\
  !*** ./node_modules/jpeg-lossless-decoder-js/src/data-stream.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (C) 2015 Michael Martinez
 * Changes: Added support for selection values 2-7, fixed minor bugs &
 * warnings, split into multiple class files, and general clean up.
 *
 * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
 */

/*
 * Copyright (C) Helmut Dersch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/
var jpeg = jpeg || {};
jpeg.lossless = jpeg.lossless || {};


/*** Constructor ***/
jpeg.lossless.DataStream = jpeg.lossless.DataStream || function (data, offset, length) {
    this.buffer = new DataView(data, offset, length);
    this.index = 0;
};



jpeg.lossless.DataStream.prototype.get16 = function () {
    var value = this.buffer.getUint16(this.index, false);
    this.index += 2;
    return value;
};



jpeg.lossless.DataStream.prototype.get8 = function () {
    var value = this.buffer.getUint8(this.index);
    this.index += 1;
    return value;
};


/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = jpeg.lossless.DataStream;
}


/***/ }),

/***/ "./node_modules/jpeg-lossless-decoder-js/src/decoder.js":
/*!**************************************************************!*\
  !*** ./node_modules/jpeg-lossless-decoder-js/src/decoder.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (C) 2015 Michael Martinez
 * Changes: Added support for selection values 2-7, fixed minor bugs &
 * warnings, split into multiple class files, and general clean up.
 *
 * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
 */

/*
 * Copyright (C) Helmut Dersch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/
var jpeg = jpeg || {};
jpeg.lossless = jpeg.lossless || {};
jpeg.lossless.DataStream = jpeg.lossless.DataStream || (( true) ? __webpack_require__(/*! ./data-stream.js */ "./node_modules/jpeg-lossless-decoder-js/src/data-stream.js") : undefined);
jpeg.lossless.HuffmanTable = jpeg.lossless.HuffmanTable || (( true) ? __webpack_require__(/*! ./huffman-table.js */ "./node_modules/jpeg-lossless-decoder-js/src/huffman-table.js") : undefined);
jpeg.lossless.QuantizationTable = jpeg.lossless.QuantizationTable || (( true) ? __webpack_require__(/*! ./quantization-table.js */ "./node_modules/jpeg-lossless-decoder-js/src/quantization-table.js") : undefined);
jpeg.lossless.ScanHeader = jpeg.lossless.ScanHeader || (( true) ? __webpack_require__(/*! ./scan-header.js */ "./node_modules/jpeg-lossless-decoder-js/src/scan-header.js") : undefined);
jpeg.lossless.FrameHeader = jpeg.lossless.FrameHeader || (( true) ? __webpack_require__(/*! ./frame-header.js */ "./node_modules/jpeg-lossless-decoder-js/src/frame-header.js") : undefined);
jpeg.lossless.Utils = jpeg.lossless.Utils || (( true) ? __webpack_require__(/*! ./utils.js */ "./node_modules/jpeg-lossless-decoder-js/src/utils.js") : undefined);


/*** Constructor ***/
jpeg.lossless.Decoder = jpeg.lossless.Decoder || function (buffer, numBytes) {
    this.buffer = buffer;
    this.frame = new jpeg.lossless.FrameHeader();
    this.huffTable = new jpeg.lossless.HuffmanTable();
    this.quantTable = new jpeg.lossless.QuantizationTable();
    this.scan = new jpeg.lossless.ScanHeader();
    this.DU = jpeg.lossless.Utils.createArray(10, 4, 64); // at most 10 data units in a MCU, at most 4 data units in one component
    this.HuffTab = jpeg.lossless.Utils.createArray(4, 2, 50 * 256);
    this.IDCT_Source = [];
    this.nBlock = []; // number of blocks in the i-th Comp in a scan
    this.acTab = jpeg.lossless.Utils.createArray(10, 1); // ac HuffTab for the i-th Comp in a scan
    this.dcTab = jpeg.lossless.Utils.createArray(10, 1); // dc HuffTab for the i-th Comp in a scan
    this.qTab = jpeg.lossless.Utils.createArray(10, 1); // quantization table for the i-th Comp in a scan
    this.marker = 0;
    this.markerIndex = 0;
    this.numComp = 0;
    this.restartInterval = 0;
    this.selection = 0;
    this.xDim = 0;
    this.yDim = 0;
    this.xLoc = 0;
    this.yLoc = 0;
    this.numBytes = 0;
    this.outputData = null;
    this.restarting = false;
    this.mask = 0;

    if (typeof numBytes !== "undefined") {
        this.numBytes = numBytes;
    }
};


/*** Static Pseudo-constants ***/

jpeg.lossless.Decoder.IDCT_P = [0, 5, 40, 16, 45, 2, 7, 42, 21, 56, 8, 61, 18, 47, 1, 4, 41, 23, 58, 13, 32, 24, 37, 10, 63, 17, 44, 3, 6, 43, 20,
    57, 15, 34, 29, 48, 53, 26, 39, 9, 60, 19, 46, 22, 59, 12, 33, 31, 50, 55, 25, 36, 11, 62, 14, 35, 28, 49, 52, 27, 38, 30, 51, 54];
jpeg.lossless.Decoder.TABLE = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53,
    10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];
jpeg.lossless.Decoder.MAX_HUFFMAN_SUBTREE = 50;
jpeg.lossless.Decoder.MSB = 0x80000000;
jpeg.lossless.Decoder.RESTART_MARKER_BEGIN = 0xFFD0;
jpeg.lossless.Decoder.RESTART_MARKER_END = 0xFFD7;

/*** Prototype Methods ***/

jpeg.lossless.Decoder.prototype.decompress = function (buffer, offset, length) {
    return this.decode(buffer, offset, length).buffer;
};



jpeg.lossless.Decoder.prototype.decode = function (buffer, offset, length, numBytes) {
    /*jslint bitwise: true */

    var current, scanNum = 0, pred = [], i, compN, temp = [], index = [], mcuNum;

    if (typeof buffer !== "undefined") {
        this.buffer = buffer;
    }

    if (typeof numBytes !== "undefined") {
        this.numBytes = numBytes;
    }

    this.stream = new jpeg.lossless.DataStream(this.buffer, offset, length);
    this.buffer = null;

    this.xLoc = 0;
    this.yLoc = 0;
    current = this.stream.get16();

    if (current !== 0xFFD8) { // SOI
        throw new Error("Not a JPEG file");
    }

    current = this.stream.get16();

    while ((((current >> 4) !== 0x0FFC) || (current === 0xFFC4))) { // SOF 0~15
        switch (current) {
            case 0xFFC4: // DHT
                this.huffTable.read(this.stream, this.HuffTab);
                break;
            case 0xFFCC: // DAC
                throw new Error("Program doesn't support arithmetic coding. (format throw new IOException)");
            case 0xFFDB:
                this.quantTable.read(this.stream, jpeg.lossless.Decoder.TABLE);
                break;
            case 0xFFDD:
                this.restartInterval = this.readNumber();
                break;
            case 0xFFE0:
            case 0xFFE1:
            case 0xFFE2:
            case 0xFFE3:
            case 0xFFE4:
            case 0xFFE5:
            case 0xFFE6:
            case 0xFFE7:
            case 0xFFE8:
            case 0xFFE9:
            case 0xFFEA:
            case 0xFFEB:
            case 0xFFEC:
            case 0xFFED:
            case 0xFFEE:
            case 0xFFEF:
                this.readApp();
                break;
            case 0xFFFE:
                this.readComment();
                break;
            default:
                if ((current >> 8) !== 0xFF) {
                    throw new Error("ERROR: format throw new IOException! (decode)");
                }
        }

        current = this.stream.get16();
    }

    if ((current < 0xFFC0) || (current > 0xFFC7)) {
        throw new Error("ERROR: could not handle arithmetic code!");
    }

    this.frame.read(this.stream);
    current = this.stream.get16();

    do {
        while (current !== 0x0FFDA) { // SOS
            switch (current) {
                case 0xFFC4: // DHT
                    this.huffTable.read(this.stream, this.HuffTab);
                    break;
                case 0xFFCC: // DAC
                    throw new Error("Program doesn't support arithmetic coding. (format throw new IOException)");
                case 0xFFDB:
                    this.quantTable.read(this.stream, jpeg.lossless.Decoder.TABLE);
                    break;
                case 0xFFDD:
                    this.restartInterval = this.readNumber();
                    break;
                case 0xFFE0:
                case 0xFFE1:
                case 0xFFE2:
                case 0xFFE3:
                case 0xFFE4:
                case 0xFFE5:
                case 0xFFE6:
                case 0xFFE7:
                case 0xFFE8:
                case 0xFFE9:
                case 0xFFEA:
                case 0xFFEB:
                case 0xFFEC:
                case 0xFFED:
                case 0xFFEE:
                case 0xFFEF:
                    this.readApp();
                    break;
                case 0xFFFE:
                    this.readComment();
                    break;
                default:
                    if ((current >> 8) !== 0xFF) {
                        throw new Error("ERROR: format throw new IOException! (Parser.decode)");
                    }
            }

            current = this.stream.get16();
        }

        this.precision = this.frame.precision;
        this.components = this.frame.components;

        if (!this.numBytes) {
            this.numBytes = parseInt(Math.ceil(this.precision / 8));
        }

        if (this.numBytes == 1) {
            this.mask = 0xFF;
        } else {
            this.mask = 0xFFFF;
        }

        this.scan.read(this.stream);
        this.numComp = this.scan.numComp;
        this.selection = this.scan.selection;

        if (this.numBytes === 1) {
            if (this.numComp === 3) {
                this.getter = this.getValueRGB;
                this.setter = this.setValueRGB;
                this.output = this.outputRGB;
            } else {
                this.getter = this.getValue8;
                this.setter = this.setValue8;
                this.output = this.outputSingle;
            }
        } else {
            this.getter = this.getValue16;
            this.setter = this.setValue16;
            this.output = this.outputSingle;
        }

        switch (this.selection) {
            case 2:
                this.selector = this.select2;
                break;
            case 3:
                this.selector = this.select3;
                break;
            case 4:
                this.selector = this.select4;
                break;
            case 5:
                this.selector = this.select5;
                break;
            case 6:
                this.selector = this.select6;
                break;
            case 7:
                this.selector = this.select7;
                break;
            default:
                this.selector = this.select1;
                break;
        }

        this.scanComps = this.scan.components;
        this.quantTables = this.quantTable.quantTables;

        for (i = 0; i < this.numComp; i+=1) {
            compN = this.scanComps[i].scanCompSel;
            this.qTab[i] = this.quantTables[this.components[compN].quantTableSel];
            this.nBlock[i] = this.components[compN].vSamp * this.components[compN].hSamp;
            this.dcTab[i] = this.HuffTab[this.scanComps[i].dcTabSel][0];
            this.acTab[i] = this.HuffTab[this.scanComps[i].acTabSel][1];
        }

        this.xDim = this.frame.dimX;
        this.yDim = this.frame.dimY;
        this.outputData = new DataView(new ArrayBuffer(this.xDim * this.yDim * this.numBytes * this.numComp));

        scanNum+=1;

        while (true) { // Decode one scan
            temp[0] = 0;
            index[0] = 0;

            for (i = 0; i < 10; i+=1) {
                pred[i] = (1 << (this.precision - 1));
            }

            if (this.restartInterval === 0) {
                current = this.decodeUnit(pred, temp, index);

                while ((current === 0) && ((this.xLoc < this.xDim) && (this.yLoc < this.yDim))) {
                    this.output(pred);
                    current = this.decodeUnit(pred, temp, index);
                }

                break; //current=MARKER
            }

            for (mcuNum = 0; mcuNum < this.restartInterval; mcuNum+=1) {
                this.restarting = (mcuNum == 0);
                current = this.decodeUnit(pred, temp, index);
                this.output(pred);

                if (current !== 0) {
                    break;
                }
            }

            if (current === 0) {
                if (this.markerIndex !== 0) {
                    current = (0xFF00 | this.marker);
                    this.markerIndex = 0;
                } else {
                    current = this.stream.get16();
                }
            }

            if (!((current >= jpeg.lossless.Decoder.RESTART_MARKER_BEGIN) &&
                (current <= jpeg.lossless.Decoder.RESTART_MARKER_END))) {
                break; //current=MARKER
            }
        }

        if ((current === 0xFFDC) && (scanNum === 1)) { //DNL
            this.readNumber();
            current = this.stream.get16();
        }
    } while ((current !== 0xFFD9) && ((this.xLoc < this.xDim) && (this.yLoc < this.yDim)) && (scanNum === 0));

    return this.outputData;
};



jpeg.lossless.Decoder.prototype.decodeUnit = function (prev, temp, index) {
    if (this.numComp == 1) {
        return this.decodeSingle(prev, temp, index);
    } else if (this.numComp == 3) {
        return this.decodeRGB(prev, temp, index);
    } else {
        return -1;
    }
};



jpeg.lossless.Decoder.prototype.select1 = function (compOffset) {
    return this.getPreviousX(compOffset);
};



jpeg.lossless.Decoder.prototype.select2 = function (compOffset) {
    return this.getPreviousY(compOffset);
};



jpeg.lossless.Decoder.prototype.select3 = function (compOffset) {
    return this.getPreviousXY(compOffset);
};



jpeg.lossless.Decoder.prototype.select4 = function (compOffset) {
    return (this.getPreviousX(compOffset) + this.getPreviousY(compOffset)) - this.getPreviousXY(compOffset);
};



jpeg.lossless.Decoder.prototype.select5 = function (compOffset) {
    return this.getPreviousX(compOffset) + ((this.getPreviousY(compOffset) - this.getPreviousXY(compOffset)) >> 1);
};



jpeg.lossless.Decoder.prototype.select6 = function (compOffset) {
    return this.getPreviousY(compOffset) + ((this.getPreviousX(compOffset) - this.getPreviousXY(compOffset)) >> 1);
};



jpeg.lossless.Decoder.prototype.select7 = function (compOffset) {
    return ((this.getPreviousX(compOffset) + this.getPreviousY(compOffset)) / 2);
};



jpeg.lossless.Decoder.prototype.decodeRGB = function (prev, temp, index) {
    /*jslint bitwise: true */

    var value, actab, dctab, qtab, ctrC, i, k, j;

    prev[0] = this.selector(0);
    prev[1] = this.selector(1);
    prev[2] = this.selector(2);

    for (ctrC = 0; ctrC < this.numComp; ctrC+=1) {
        qtab = this.qTab[ctrC];
        actab = this.acTab[ctrC];
        dctab = this.dcTab[ctrC];
        for (i = 0; i < this.nBlock[ctrC]; i+=1) {
            for (k = 0; k < this.IDCT_Source.length; k+=1) {
                this.IDCT_Source[k] = 0;
            }

            value = this.getHuffmanValue(dctab, temp, index);

            if (value >= 0xFF00) {
                return value;
            }

            prev[ctrC] = this.IDCT_Source[0] = prev[ctrC] + this.getn(index, value, temp, index);
            this.IDCT_Source[0] *= qtab[0];

            for (j = 1; j < 64; j+=1) {
                value = this.getHuffmanValue(actab, temp, index);

                if (value >= 0xFF00) {
                    return value;
                }

                j += (value >> 4);

                if ((value & 0x0F) === 0) {
                    if ((value >> 4) === 0) {
                        break;
                    }
                } else {
                    this.IDCT_Source[jpeg.lossless.Decoder.IDCT_P[j]] = this.getn(index, value & 0x0F, temp, index) * qtab[j];
                }
            }
        }
    }

    return 0;
};



jpeg.lossless.Decoder.prototype.decodeSingle = function (prev, temp, index) {
    /*jslint bitwise: true */

    var value, i, n, nRestart;

    if (this.restarting) {
        this.restarting = false;
        prev[0] = (1 << (this.frame.precision - 1));
    } else {
        prev[0] = this.selector();
    }

    for (i = 0; i < this.nBlock[0]; i+=1) {
        value = this.getHuffmanValue(this.dcTab[0], temp, index);
        if (value >= 0xFF00) {
            return value;
        }

        n = this.getn(prev, value, temp, index);
        nRestart = (n >> 8);

        if ((nRestart >= jpeg.lossless.Decoder.RESTART_MARKER_BEGIN) && (nRestart <= jpeg.lossless.Decoder.RESTART_MARKER_END)) {
            return nRestart;
        }

        prev[0] += n;
    }

    return 0;
};



//	Huffman table for fast search: (HuffTab) 8-bit Look up table 2-layer search architecture, 1st-layer represent 256 node (8 bits) if codeword-length > 8
//	bits, then the entry of 1st-layer = (# of 2nd-layer table) | MSB and it is stored in the 2nd-layer Size of tables in each layer are 256.
//	HuffTab[*][*][0-256] is always the only 1st-layer table.
//
//	An entry can be: (1) (# of 2nd-layer table) | MSB , for code length > 8 in 1st-layer (2) (Code length) << 8 | HuffVal
//
//	HuffmanValue(table   HuffTab[x][y] (ex) HuffmanValue(HuffTab[1][0],...)
//	                ):
//	    return: Huffman Value of table
//	            0xFF?? if it receives a MARKER
//	    Parameter:  table   HuffTab[x][y] (ex) HuffmanValue(HuffTab[1][0],...)
//	                temp    temp storage for remainded bits
//	                index   index to bit of temp
//	                in      FILE pointer
//	    Effect:
//	        temp  store new remainded bits
//	        index change to new index
//	        in    change to new position
//	    NOTE:
//	      Initial by   temp=0; index=0;
//	    NOTE: (explain temp and index)
//	      temp: is always in the form at calling time or returning time
//	       |  byte 4  |  byte 3  |  byte 2  |  byte 1  |
//	       |     0    |     0    | 00000000 | 00000??? |  if not a MARKER
//	                                               ^index=3 (from 0 to 15)
//	                                               321
//	    NOTE (marker and marker_index):
//	      If get a MARKER from 'in', marker=the low-byte of the MARKER
//	        and marker_index=9
//	      If marker_index=9 then index is always > 8, or HuffmanValue()
//	        will not be called
jpeg.lossless.Decoder.prototype.getHuffmanValue = function (table, temp, index) {
    /*jslint bitwise: true */

    var code, input, mask;
    mask = 0xFFFF;

    if (index[0] < 8) {
        temp[0] <<= 8;
        input = this.stream.get8();
        if (input === 0xFF) {
            this.marker = this.stream.get8();
            if (this.marker !== 0) {
                this.markerIndex = 9;
            }
        }
        temp[0] |= input;
    } else {
        index[0] -= 8;
    }

    code = table[temp[0] >> index[0]];

    if ((code & jpeg.lossless.Decoder.MSB) !== 0) {
        if (this.markerIndex !== 0) {
            this.markerIndex = 0;
            return 0xFF00 | this.marker;
        }

        temp[0] &= (mask >> (16 - index[0]));
        temp[0] <<= 8;
        input = this.stream.get8();

        if (input === 0xFF) {
            this.marker = this.stream.get8();
            if (this.marker !== 0) {
                this.markerIndex = 9;
            }
        }

        temp[0] |= input;
        code = table[((code & 0xFF) * 256) + (temp[0] >> index[0])];
        index[0] += 8;
    }

    index[0] += 8 - (code >> 8);

    if (index[0] < 0) {
        throw new Error("index=" + index[0] + " temp=" + temp[0] + " code=" + code + " in HuffmanValue()");
    }

    if (index[0] < this.markerIndex) {
        this.markerIndex = 0;
        return 0xFF00 | this.marker;
    }

    temp[0] &= (mask >> (16 - index[0]));
    return code & 0xFF;
};



jpeg.lossless.Decoder.prototype.getn = function (PRED, n, temp, index) {
    /*jslint bitwise: true */

    var result, one, n_one, mask, input;
    one = 1;
    n_one = -1;
    mask = 0xFFFF;

    if (n === 0) {
        return 0;
    }

    if (n === 16) {
        if (PRED[0] >= 0) {
            return -32768;
        } else {
            return 32768;
        }
    }

    index[0] -= n;

    if (index[0] >= 0) {
        if ((index[0] < this.markerIndex) && !this.isLastPixel()) { // this was corrupting the last pixel in some cases
            this.markerIndex = 0;
            return (0xFF00 | this.marker) << 8;
        }

        result = temp[0] >> index[0];
        temp[0] &= (mask >> (16 - index[0]));
    } else {
        temp[0] <<= 8;
        input = this.stream.get8();

        if (input === 0xFF) {
            this.marker = this.stream.get8();
            if (this.marker !== 0) {
                this.markerIndex = 9;
            }
        }

        temp[0] |= input;
        index[0] += 8;

        if (index[0] < 0) {
            if (this.markerIndex !== 0) {
                this.markerIndex = 0;
                return (0xFF00 | this.marker) << 8;
            }

            temp[0] <<= 8;
            input = this.stream.get8();

            if (input === 0xFF) {
                this.marker = this.stream.get8();
                if (this.marker !== 0) {
                    this.markerIndex = 9;
                }
            }

            temp[0] |= input;
            index[0] += 8;
        }

        if (index[0] < 0) {
            throw new Error("index=" + index[0] + " in getn()");
        }

        if (index[0] < this.markerIndex) {
            this.markerIndex = 0;
            return (0xFF00 | this.marker) << 8;
        }

        result = temp[0] >> index[0];
        temp[0] &= (mask >> (16 - index[0]));
    }

    if (result < (one << (n - 1))) {
        result += (n_one << n) + 1;
    }

    return result;
};



jpeg.lossless.Decoder.prototype.getPreviousX = function (compOffset) {
    /*jslint bitwise: true */

    if (this.xLoc > 0) {
        return this.getter((((this.yLoc * this.xDim) + this.xLoc) - 1), compOffset);
    } else if (this.yLoc > 0) {
        return this.getPreviousY(compOffset);
    } else {
        return (1 << (this.frame.precision - 1));
    }
};



jpeg.lossless.Decoder.prototype.getPreviousXY = function (compOffset) {
    /*jslint bitwise: true */

    if ((this.xLoc > 0) && (this.yLoc > 0)) {
        return this.getter(((((this.yLoc - 1) * this.xDim) + this.xLoc) - 1), compOffset);
    } else {
        return this.getPreviousY(compOffset);
    }
};



jpeg.lossless.Decoder.prototype.getPreviousY = function (compOffset) {
    /*jslint bitwise: true */

    if (this.yLoc > 0) {
        return this.getter((((this.yLoc - 1) * this.xDim) + this.xLoc), compOffset);
    } else {
        return this.getPreviousX(compOffset);
    }
};



jpeg.lossless.Decoder.prototype.isLastPixel = function () {
    return (this.xLoc === (this.xDim - 1)) && (this.yLoc === (this.yDim - 1));
};



jpeg.lossless.Decoder.prototype.outputSingle = function (PRED) {
    if ((this.xLoc < this.xDim) && (this.yLoc < this.yDim)) {
        this.setter((((this.yLoc * this.xDim) + this.xLoc)), this.mask & PRED[0]);

        this.xLoc+=1;

        if (this.xLoc >= this.xDim) {
            this.yLoc+=1;
            this.xLoc = 0;
        }
    }
};



jpeg.lossless.Decoder.prototype.outputRGB = function (PRED) {
    var offset = ((this.yLoc * this.xDim) + this.xLoc);

    if ((this.xLoc < this.xDim) && (this.yLoc < this.yDim)) {
        this.setter(offset, PRED[0], 0);
        this.setter(offset, PRED[1], 1);
        this.setter(offset, PRED[2], 2);

        this.xLoc+=1;

        if (this.xLoc >= this.xDim) {
            this.yLoc+=1;
            this.xLoc = 0;
        }
    }
};



jpeg.lossless.Decoder.prototype.setValue16 = function (index, val) {
    this.outputData.setInt16(index * 2, val, true);
};



jpeg.lossless.Decoder.prototype.getValue16 = function (index) {
    return this.outputData.getInt16(index * 2, true);
};



jpeg.lossless.Decoder.prototype.setValue8 = function (index, val) {
    this.outputData.setInt8(index, val);
};



jpeg.lossless.Decoder.prototype.getValue8 = function (index) {
    return this.outputData.getInt8(index);
};



jpeg.lossless.Decoder.prototype.setValueRGB = function (index, val, compOffset) {
    this.outputData.setUint8(index * 3 + compOffset, val);
};



jpeg.lossless.Decoder.prototype.getValueRGB = function (index, compOffset) {
    return this.outputData.getUint8(index * 3 + compOffset);
};



jpeg.lossless.Decoder.prototype.readApp = function() {
    var count = 0, length = this.stream.get16();
    count += 2;

    while (count < length) {
        this.stream.get8();
        count+=1;
    }

    return length;
};



jpeg.lossless.Decoder.prototype.readComment = function () {
    var sb = "", count = 0, length;

    length = this.stream.get16();
    count += 2;

    while (count < length) {
        sb += this.stream.get8();
        count+=1;
    }

    return sb;
};



jpeg.lossless.Decoder.prototype.readNumber = function() {
    var Ld = this.stream.get16();

    if (Ld !== 4) {
        throw new Error("ERROR: Define number format throw new IOException [Ld!=4]");
    }

    return this.stream.get16();
};



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = jpeg.lossless.Decoder;
}


/***/ }),

/***/ "./node_modules/jpeg-lossless-decoder-js/src/frame-header.js":
/*!*******************************************************************!*\
  !*** ./node_modules/jpeg-lossless-decoder-js/src/frame-header.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (C) 2015 Michael Martinez
 * Changes: Added support for selection values 2-7, fixed minor bugs &
 * warnings, split into multiple class files, and general clean up.
 *
 * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
 */

/*
 * Copyright (C) Helmut Dersch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/
var jpeg = jpeg || {};
jpeg.lossless = jpeg.lossless || {};
jpeg.lossless.ComponentSpec = jpeg.lossless.ComponentSpec || (( true) ? __webpack_require__(/*! ./component-spec.js */ "./node_modules/jpeg-lossless-decoder-js/src/component-spec.js") : undefined);
jpeg.lossless.DataStream = jpeg.lossless.DataStream || (( true) ? __webpack_require__(/*! ./data-stream.js */ "./node_modules/jpeg-lossless-decoder-js/src/data-stream.js") : undefined);


/*** Constructor ***/
jpeg.lossless.FrameHeader = jpeg.lossless.FrameHeader || function () {
    this.components = []; // Components
    this.dimX = 0; // Number of samples per line
    this.dimY = 0; // Number of lines
    this.numComp = 0; // Number of component in the frame
    this.precision = 0; // Sample Precision (from the original image)
};



/*** Prototype Methods ***/

jpeg.lossless.FrameHeader.prototype.read = function (data) {
    /*jslint bitwise: true */

    var count = 0, length, i, c, temp;

    length = data.get16();
    count += 2;

    this.precision = data.get8();
    count+=1;

    this.dimY = data.get16();
    count += 2;

    this.dimX = data.get16();
    count += 2;

    this.numComp = data.get8();
    count+=1;
    for (i = 1; i <= this.numComp; i+=1) {
        if (count > length) {
            throw new Error("ERROR: frame format error");
        }

        c = data.get8();
        count+=1;

        if (count >= length) {
            throw new Error("ERROR: frame format error [c>=Lf]");
        }

        temp = data.get8();
        count+=1;

        if (!this.components[c]) {
            this.components[c] = new jpeg.lossless.ComponentSpec();
        }

        this.components[c].hSamp = temp >> 4;
        this.components[c].vSamp = temp & 0x0F;
        this.components[c].quantTableSel = data.get8();
        count+=1;
    }

    if (count !== length) {
        throw new Error("ERROR: frame format error [Lf!=count]");
    }

    return 1;
};


/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = jpeg.lossless.FrameHeader;
}


/***/ }),

/***/ "./node_modules/jpeg-lossless-decoder-js/src/huffman-table.js":
/*!********************************************************************!*\
  !*** ./node_modules/jpeg-lossless-decoder-js/src/huffman-table.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (C) 2015 Michael Martinez
 * Changes: Added support for selection values 2-7, fixed minor bugs &
 * warnings, split into multiple class files, and general clean up.
 *
 * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
 */

/*
 * Copyright (C) Helmut Dersch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/
var jpeg = jpeg || {};
jpeg.lossless = jpeg.lossless || {};
jpeg.lossless.DataStream = jpeg.lossless.DataStream || (( true) ? __webpack_require__(/*! ./data-stream.js */ "./node_modules/jpeg-lossless-decoder-js/src/data-stream.js") : undefined);
jpeg.lossless.Utils = jpeg.lossless.Utils || (( true) ? __webpack_require__(/*! ./utils.js */ "./node_modules/jpeg-lossless-decoder-js/src/utils.js") : undefined);


/*** Constructor ***/
jpeg.lossless.HuffmanTable = jpeg.lossless.HuffmanTable || function () {
    this.l = jpeg.lossless.Utils.createArray(4, 2, 16);
    this.th = [];
    this.v = jpeg.lossless.Utils.createArray(4, 2, 16, 200);
    this.tc = jpeg.lossless.Utils.createArray(4, 2);

    this.tc[0][0] = 0;
    this.tc[1][0] = 0;
    this.tc[2][0] = 0;
    this.tc[3][0] = 0;
    this.tc[0][1] = 0;
    this.tc[1][1] = 0;
    this.tc[2][1] = 0;
    this.tc[3][1] = 0;
    this.th[0] = 0;
    this.th[1] = 0;
    this.th[2] = 0;
    this.th[3] = 0;
};



/*** Static Pseudo-constants ***/

jpeg.lossless.HuffmanTable.MSB = 0x80000000;


/*** Prototype Methods ***/

jpeg.lossless.HuffmanTable.prototype.read = function(data, HuffTab) {
    /*jslint bitwise: true */

    var count = 0, length, temp, t, c, i, j;

    length = data.get16();
    count += 2;

    while (count < length) {
        temp = data.get8();
        count+=1;
        t = temp & 0x0F;
        if (t > 3) {
            throw new Error("ERROR: Huffman table ID > 3");
        }

        c = temp >> 4;
        if (c > 2) {
            throw new Error("ERROR: Huffman table [Table class > 2 ]");
        }

        this.th[t] = 1;
        this.tc[t][c] = 1;

        for (i = 0; i < 16; i+=1) {
            this.l[t][c][i] = data.get8();
            count+=1;
        }

        for (i = 0; i < 16; i+=1) {
            for (j = 0; j < this.l[t][c][i]; j+=1) {
                if (count > length) {
                    throw new Error("ERROR: Huffman table format error [count>Lh]");
                }

                this.v[t][c][i][j] = data.get8();
                count+=1;
            }
        }
    }

    if (count !== length) {
        throw new Error("ERROR: Huffman table format error [count!=Lf]");
    }

    for (i = 0; i < 4; i+=1) {
        for (j = 0; j < 2; j+=1) {
            if (this.tc[i][j] !== 0) {
                this.buildHuffTable(HuffTab[i][j], this.l[i][j], this.v[i][j]);
            }
        }
    }

    return 1;
};



//	Build_HuffTab()
//	Parameter:  t       table ID
//	            c       table class ( 0 for DC, 1 for AC )
//	            L[i]    # of codewords which length is i
//	            V[i][j] Huffman Value (length=i)
//	Effect:
//	    build up HuffTab[t][c] using L and V.
jpeg.lossless.HuffmanTable.prototype.buildHuffTable = function(tab, L, V) {
    /*jslint bitwise: true */

    var currentTable, temp, k, i, j, n;
    temp = 256;
    k = 0;

    for (i = 0; i < 8; i+=1) { // i+1 is Code length
        for (j = 0; j < L[i]; j+=1) {
            for (n = 0; n < (temp >> (i + 1)); n+=1) {
                tab[k] = V[i][j] | ((i + 1) << 8);
                k+=1;
            }
        }
    }

    for (i = 1; k < 256; i+=1, k+=1) {
        tab[k] = i | jpeg.lossless.HuffmanTable.MSB;
    }

    currentTable = 1;
    k = 0;

    for (i = 8; i < 16; i+=1) { // i+1 is Code length
        for (j = 0; j < L[i]; j+=1) {
            for (n = 0; n < (temp >> (i - 7)); n+=1) {
                tab[(currentTable * 256) + k] = V[i][j] | ((i + 1) << 8);
                k+=1;
            }

            if (k >= 256) {
                if (k > 256) {
                    throw new Error("ERROR: Huffman table error(1)!");
                }

                k = 0;
                currentTable+=1;
            }
        }
    }
};


/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = jpeg.lossless.HuffmanTable;
}


/***/ }),

/***/ "./node_modules/jpeg-lossless-decoder-js/src/main.js":
/*!***********************************************************!*\
  !*** ./node_modules/jpeg-lossless-decoder-js/src/main.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/
var jpeg = jpeg || {};
jpeg.lossless = jpeg.lossless || {};
jpeg.lossless.ComponentSpec = jpeg.lossless.ComponentSpec || (( true) ? __webpack_require__(/*! ./component-spec.js */ "./node_modules/jpeg-lossless-decoder-js/src/component-spec.js") : undefined);
jpeg.lossless.DataStream = jpeg.lossless.DataStream || (( true) ? __webpack_require__(/*! ./data-stream.js */ "./node_modules/jpeg-lossless-decoder-js/src/data-stream.js") : undefined);
jpeg.lossless.Decoder = jpeg.lossless.Decoder || (( true) ? __webpack_require__(/*! ./decoder.js */ "./node_modules/jpeg-lossless-decoder-js/src/decoder.js") : undefined);
jpeg.lossless.FrameHeader = jpeg.lossless.FrameHeader || (( true) ? __webpack_require__(/*! ./frame-header.js */ "./node_modules/jpeg-lossless-decoder-js/src/frame-header.js") : undefined);
jpeg.lossless.HuffmanTable = jpeg.lossless.HuffmanTable || (( true) ? __webpack_require__(/*! ./huffman-table.js */ "./node_modules/jpeg-lossless-decoder-js/src/huffman-table.js") : undefined);
jpeg.lossless.QuantizationTable = jpeg.lossless.QuantizationTable || (( true) ? __webpack_require__(/*! ./quantization-table.js */ "./node_modules/jpeg-lossless-decoder-js/src/quantization-table.js") : undefined);
jpeg.lossless.ScanComponent = jpeg.lossless.ScanComponent || (( true) ? __webpack_require__(/*! ./scan-component.js */ "./node_modules/jpeg-lossless-decoder-js/src/scan-component.js") : undefined);
jpeg.lossless.ScanHeader = jpeg.lossless.ScanHeader || (( true) ? __webpack_require__(/*! ./scan-header.js */ "./node_modules/jpeg-lossless-decoder-js/src/scan-header.js") : undefined);
jpeg.lossless.Utils = jpeg.lossless.Utils || (( true) ? __webpack_require__(/*! ./utils.js */ "./node_modules/jpeg-lossless-decoder-js/src/utils.js") : undefined);


/*** Exports ***/
var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = jpeg;
}


/***/ }),

/***/ "./node_modules/jpeg-lossless-decoder-js/src/quantization-table.js":
/*!*************************************************************************!*\
  !*** ./node_modules/jpeg-lossless-decoder-js/src/quantization-table.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (C) 2015 Michael Martinez
 * Changes: Added support for selection values 2-7, fixed minor bugs &
 * warnings, split into multiple class files, and general clean up.
 *
 * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
 */

/*
 * Copyright (C) Helmut Dersch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/
var jpeg = jpeg || {};
jpeg.lossless = jpeg.lossless || {};
jpeg.lossless.DataStream = jpeg.lossless.DataStream || (( true) ? __webpack_require__(/*! ./data-stream.js */ "./node_modules/jpeg-lossless-decoder-js/src/data-stream.js") : undefined);
jpeg.lossless.Utils = jpeg.lossless.Utils || (( true) ? __webpack_require__(/*! ./utils.js */ "./node_modules/jpeg-lossless-decoder-js/src/utils.js") : undefined);


/*** Constructor ***/
jpeg.lossless.QuantizationTable = jpeg.lossless.QuantizationTable || function () {
    this.precision = []; // Quantization precision 8 or 16
    this.tq = []; // 1: this table is presented
    this.quantTables = jpeg.lossless.Utils.createArray(4, 64); // Tables

    this.tq[0] = 0;
    this.tq[1] = 0;
    this.tq[2] = 0;
    this.tq[3] = 0;
};



/*** Static Methods ***/

jpeg.lossless.QuantizationTable.enhanceQuantizationTable = function(qtab, table) {
    /*jslint bitwise: true */

    var i;

    for (i = 0; i < 8; i+=1) {
        qtab[table[(0 * 8) + i]] *= 90;
        qtab[table[(4 * 8) + i]] *= 90;
        qtab[table[(2 * 8) + i]] *= 118;
        qtab[table[(6 * 8) + i]] *= 49;
        qtab[table[(5 * 8) + i]] *= 71;
        qtab[table[(1 * 8) + i]] *= 126;
        qtab[table[(7 * 8) + i]] *= 25;
        qtab[table[(3 * 8) + i]] *= 106;
    }

    for (i = 0; i < 8; i+=1) {
        qtab[table[0 + (8 * i)]] *= 90;
        qtab[table[4 + (8 * i)]] *= 90;
        qtab[table[2 + (8 * i)]] *= 118;
        qtab[table[6 + (8 * i)]] *= 49;
        qtab[table[5 + (8 * i)]] *= 71;
        qtab[table[1 + (8 * i)]] *= 126;
        qtab[table[7 + (8 * i)]] *= 25;
        qtab[table[3 + (8 * i)]] *= 106;
    }

    for (i = 0; i < 64; i+=1) {
        qtab[i] >>= 6;
    }
};


/*** Prototype Methods ***/

jpeg.lossless.QuantizationTable.prototype.read = function (data, table) {
    /*jslint bitwise: true */

    var count = 0, length, temp, t, i;

    length = data.get16();
    count += 2;

    while (count < length) {
        temp = data.get8();
        count+=1;
        t = temp & 0x0F;

        if (t > 3) {
            throw new Error("ERROR: Quantization table ID > 3");
        }

        this.precision[t] = temp >> 4;

        if (this.precision[t] === 0) {
            this.precision[t] = 8;
        } else if (this.precision[t] === 1) {
            this.precision[t] = 16;
        } else {
            throw new Error("ERROR: Quantization table precision error");
        }

        this.tq[t] = 1;

        if (this.precision[t] === 8) {
            for (i = 0; i < 64; i+=1) {
                if (count > length) {
                    throw new Error("ERROR: Quantization table format error");
                }

                this.quantTables[t][i] = data.get8();
                count+=1;
            }

            jpeg.lossless.QuantizationTable.enhanceQuantizationTable(this.quantTables[t], table);
        } else {
            for (i = 0; i < 64; i+=1) {
                if (count > length) {
                    throw new Error("ERROR: Quantization table format error");
                }

                this.quantTables[t][i] = data.get16();
                count += 2;
            }

            jpeg.lossless.QuantizationTable.enhanceQuantizationTable(this.quantTables[t], table);
        }
    }

    if (count !== length) {
        throw new Error("ERROR: Quantization table error [count!=Lq]");
    }

    return 1;
};



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = jpeg.lossless.QuantizationTable;
}


/***/ }),

/***/ "./node_modules/jpeg-lossless-decoder-js/src/scan-component.js":
/*!*********************************************************************!*\
  !*** ./node_modules/jpeg-lossless-decoder-js/src/scan-component.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (C) 2015 Michael Martinez
 * Changes: Added support for selection values 2-7, fixed minor bugs &
 * warnings, split into multiple class files, and general clean up.
 *
 * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
 */

/*
 * Copyright (C) Helmut Dersch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/
var jpeg = jpeg || {};
jpeg.lossless = jpeg.lossless || {};


/*** Constructor ***/
jpeg.lossless.ScanComponent = jpeg.lossless.ScanComponent || function () {
    this.acTabSel = 0; // AC table selector
    this.dcTabSel = 0; // DC table selector
    this.scanCompSel = 0; // Scan component selector
};



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = jpeg.lossless.ScanComponent;
}


/***/ }),

/***/ "./node_modules/jpeg-lossless-decoder-js/src/scan-header.js":
/*!******************************************************************!*\
  !*** ./node_modules/jpeg-lossless-decoder-js/src/scan-header.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (C) 2015 Michael Martinez
 * Changes: Added support for selection values 2-7, fixed minor bugs &
 * warnings, split into multiple class files, and general clean up.
 *
 * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
 */

/*
 * Copyright (C) Helmut Dersch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/
var jpeg = jpeg || {};
jpeg.lossless = jpeg.lossless || {};
jpeg.lossless.DataStream = jpeg.lossless.DataStream || (( true) ? __webpack_require__(/*! ./data-stream.js */ "./node_modules/jpeg-lossless-decoder-js/src/data-stream.js") : undefined);
jpeg.lossless.ScanComponent = jpeg.lossless.ScanComponent || (( true) ? __webpack_require__(/*! ./scan-component.js */ "./node_modules/jpeg-lossless-decoder-js/src/scan-component.js") : undefined);


/*** Constructor ***/
jpeg.lossless.ScanHeader = jpeg.lossless.ScanHeader || function () {
    this.ah = 0;
    this.al = 0;
    this.numComp = 0; // Number of components in the scan
    this.selection = 0; // Start of spectral or predictor selection
    this.spectralEnd = 0; // End of spectral selection
    this.components = [];
};


/*** Prototype Methods ***/

jpeg.lossless.ScanHeader.prototype.read = function(data) {
    /*jslint bitwise: true */

    var count = 0, length, i, temp;

    length = data.get16();
    count += 2;

    this.numComp = data.get8();
    count+=1;

    for (i = 0; i < this.numComp; i+=1) {
        this.components[i] = new jpeg.lossless.ScanComponent();

        if (count > length) {
            throw new Error("ERROR: scan header format error");
        }

        this.components[i].scanCompSel = data.get8();
        count+=1;

        temp = data.get8();
        count+=1;

        this.components[i].dcTabSel = (temp >> 4);
        this.components[i].acTabSel = (temp & 0x0F);
    }

    this.selection = data.get8();
    count+=1;

    this.spectralEnd = data.get8();
    count+=1;

    temp = data.get8();
    this.ah = (temp >> 4);
    this.al = (temp & 0x0F);
    count+=1;

    if (count !== length) {
        throw new Error("ERROR: scan header format error [count!=Ns]");
    }

    return 1;
};



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = jpeg.lossless.ScanHeader;
}


/***/ }),

/***/ "./node_modules/jpeg-lossless-decoder-js/src/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/jpeg-lossless-decoder-js/src/utils.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (C) 2015 Michael Martinez
 * Changes: Added support for selection values 2-7, fixed minor bugs &
 * warnings, split into multiple class files, and general clean up.
 *
 * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
 */

/*
 * Copyright (C) Helmut Dersch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/
var jpeg = jpeg || {};
jpeg.lossless = jpeg.lossless || {};


/*** Constructor ***/
jpeg.lossless.Utils = jpeg.lossless.Utils || {};


/*** Static methods ***/

// http://stackoverflow.com/questions/966225/how-can-i-create-a-two-dimensional-array-in-javascript
jpeg.lossless.Utils.createArray = function (length) {
    var arr = new Array(length || 0),
        i = length;

    if (arguments.length > 1) {
        var args = Array.prototype.slice.call(arguments, 1);
        while(i--) arr[length-1 - i] = jpeg.lossless.Utils.createArray.apply(this, args);
    }

    return arr;
};


// http://stackoverflow.com/questions/18638900/javascript-crc32
jpeg.lossless.Utils.makeCRCTable = function(){
    var c;
    var crcTable = [];
    for(var n =0; n < 256; n++){
        c = n;
        for(var k =0; k < 8; k++){
            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        crcTable[n] = c;
    }
    return crcTable;
};

jpeg.lossless.Utils.crc32 = function(dataView) {
    var crcTable = jpeg.lossless.Utils.crcTable || (jpeg.lossless.Utils.crcTable = jpeg.lossless.Utils.makeCRCTable());
    var crc = 0 ^ (-1);

    for (var i = 0; i < dataView.byteLength; i++ ) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xFF];
    }

    return (crc ^ (-1)) >>> 0;
};


/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = jpeg.lossless.Utils;
}


/***/ }),

/***/ "./node_modules/math-abs/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/math-abs/lib/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
* FUNCTION: abs( x )
*	Computes the absolute value of `x`.
*
* @param {Number} x - input value
* @returns {Number} absolute value
*/
function abs( x ) {
	if ( x < 0 ) {
		return -x;
	}
	if ( x === 0 ) {
		return 0; // handle negative zero
	}
	return x;
} // end FUNCTION abs()


// EXPORTS //

module.exports = abs;


/***/ }),

/***/ "./node_modules/math-ceil/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/math-ceil/lib/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// EXPORTS //

module.exports = Math.ceil;


/***/ }),

/***/ "./node_modules/math-float32-to-binary-string/lib/div2.js":
/*!****************************************************************!*\
  !*** ./node_modules/math-float32-to-binary-string/lib/div2.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// MODULES //

var floor = __webpack_require__( /*! math-floor */ "./node_modules/math-floor/lib/index.js" );


// DIV2 //

/**
* FUNCTION: div2( x )
*	Converts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.
*
* @param {Number} x - nonnegative integer
* @returns {String} bit representation
*/
function div2( x ) {
	var str = '';
	var y;

	// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...
	while ( x > 0 ) {
		y = x / 2;
		x = floor( y );
		if ( y === x ) {
			str = '0' + str;
		} else {
			str = '1' + str;
		}
	}
	return str;
} // end FUNCTION div2()


// EXPORTS //

module.exports = div2;


/***/ }),

/***/ "./node_modules/math-float32-to-binary-string/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/math-float32-to-binary-string/lib/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// MODULES //

var pinf = __webpack_require__( /*! const-pinf-float32 */ "./node_modules/const-pinf-float32/lib/index.js" );
var ninf = __webpack_require__( /*! const-ninf-float32 */ "./node_modules/const-ninf-float32/lib/index.js" );
var abs = __webpack_require__( /*! math-abs */ "./node_modules/math-abs/lib/index.js" );
var floor = __webpack_require__( /*! math-floor */ "./node_modules/math-floor/lib/index.js" );
var rpad = __webpack_require__( /*! utils-right-pad-string */ "./node_modules/utils-right-pad-string/lib/index.js" );
var lpad = __webpack_require__( /*! utils-left-pad-string */ "./node_modules/utils-left-pad-string/lib/index.js" );
var repeat = __webpack_require__( /*! utils-repeat-string */ "./node_modules/utils-repeat-string/lib/index.js" );
var div2 = __webpack_require__( /*! ./div2.js */ "./node_modules/math-float32-to-binary-string/lib/div2.js" );
var mult2 = __webpack_require__( /*! ./mult2.js */ "./node_modules/math-float32-to-binary-string/lib/mult2.js" );


// CONSTANTS //

var BIAS = 127; // exponent bias => (2**8)/2 - 1


// BINARY STRING //

/**
* FUNCTION: binaryString( x )
*	Returns a string giving the literal bit representation of a single-precision floating-point number.
*
* @param {Number} x - input value
* @returns {String} bit representation
*/
function binaryString( x ) {
	var nbits;
	var sign;
	var str;
	var exp;
	var n;
	var f;
	var i;

	// Check for a negative value or negative zero...
	if ( x < 0 || 1/x === ninf ) {
		sign = '1';
	} else {
		sign = '0';
	}
	// Special case: +-infinity
	if ( x === pinf || x === ninf ) {
		// Based on IEEE 754-2008...
		exp = repeat( '1', 8 ); // all 1s
		str = repeat( '0', 23 ); // all 0s
		return sign + exp + str;
	}
	// Special case: NaN
	if ( x !== x ) {
		// Based on IEEE 754-2008...
		exp = repeat( '1', 8 ); // all 1s
		str = '1' + repeat( '0', 22 ); // can't be all 0s
		return sign + exp + str;
	}
	// Special case: +-0
	if ( x === 0 ) {
		// Based on IEEE 754-2008...
		exp = repeat( '0', 8 ); // all 0s
		str = repeat( '0', 23 ); // all 0s
		return sign + exp + str;
	}
	x = abs( x );

	// Isolate the integer part (digits before the decimal):
	n = floor( x );

	// Isolate the fractional part (digits after the decimal):
	f = x - n;

	// Convert the integer and fractional parts to bit strings:
	n = div2( n );
	f = mult2( f );

	// Determine the exponent needed to normalize the integer+fractional parts...
	if ( n ) {
		// Move the decimal `d` digits to the left:
		exp = n.length - 1;
	} else {
		// Find the first '1' bit...
		for ( i = 0; i < f.length; i++ ) {
			if ( f[ i ] === '1' ) {
				nbits = i + 1;
				break;
			}
		}
		// Move the decimal `d` digits to the right:
		exp = -nbits;
	}
	// Normalize the combined integer+fractional string...
	str = n + f;
	if ( exp < 0 ) {
		// Handle subnormals...
		if ( exp <= -BIAS ) {
			// Cap the number of bits removed:
			nbits = BIAS - 1;
		}
		// Remove all leading zeros and the first '1' for normal values, and, for subnormals, remove at most BIAS-1 leading bits:
		str = str.substring( nbits );
	} else {
		// Remove the leading '1' (implicit/hidden bit):
		str = str.substring( 1 );
	}
	// Convert the exponent to a bit string:
	exp = div2( exp + BIAS );
	exp = lpad( exp, 8, '0' );

	// Fill in any trailing zeros and ensure we have only 23 fraction bits:
	str = rpad( str, 23, '0' ).substring( 0, 23 );

	// Return a bit representation:
	return sign + exp + str;
} // end FUNCTION binaryString()


// EXPORTS //

module.exports = binaryString;


/***/ }),

/***/ "./node_modules/math-float32-to-binary-string/lib/mult2.js":
/*!*****************************************************************!*\
  !*** ./node_modules/math-float32-to-binary-string/lib/mult2.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// VARIABLES //

var MAX_ITER = 149; // 127+22 (subnormals)
var MAX_BITS = 24; // only 23 bits for fraction


// MULT2 //

/**
* FUNCTION: mult2( x )
*	Converts a fraction to a literal bit representation using the multiply-by-2 algorithm.
*
* @param {Number} x - number less than 1
* @returns {String} bit representation
*/
function mult2( x ) {
	var str;
	var y;
	var i;
	var j;

	str = '';
	if ( x === 0 ) {
		return str;
	}
	j = MAX_ITER;

	// Each time we multiply by 2 and find a ones digit, add a '1'; otherwise, add a '0'..
	for ( i = 0; i < MAX_ITER; i++ ) {
		y = x * 2;
		if ( y >= 1 ) {
			x = y - 1;
			str += '1';
			if ( j === MAX_ITER ) {
				j = i; // first '1'
			}
		} else {
			x = y;
			str += '0';
		}
		// Stop when we have no more decimals to process or in the event we found a fraction which cannot be represented in a finite number of bits...
		if ( y === 1 || i-j > MAX_BITS ) {
			break;
		}
	}
	return str;
} // end FUNCTION mult2()


// EXPORTS //

module.exports = mult2;


/***/ }),

/***/ "./node_modules/math-floor/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/math-floor/lib/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// EXPORTS //

module.exports = Math.floor;


/***/ }),

/***/ "./node_modules/nifti-reader-js/src/nifti.js":
/*!***************************************************!*\
  !*** ./node_modules/nifti-reader-js/src/nifti.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/

/**
 * nifti
 * @type {*|{}}
 */
var nifti = nifti || {};
nifti.NIFTI1 = nifti.NIFTI1 || (( true) ? __webpack_require__(/*! ./nifti1.js */ "./node_modules/nifti-reader-js/src/nifti1.js") : undefined);
nifti.NIFTI2 = nifti.NIFTI2 || (( true) ? __webpack_require__(/*! ./nifti2.js */ "./node_modules/nifti-reader-js/src/nifti2.js") : undefined);
nifti.Utils = nifti.Utils || (( true) ? __webpack_require__(/*! ./utilities.js */ "./node_modules/nifti-reader-js/src/utilities.js") : undefined);

var pako = pako || (( true) ? __webpack_require__(/*! pako */ "./node_modules/pako/index.js") : undefined);



/*** Static Methods ***/

/**
 * Returns true if this data represents a NIFTI-1 header.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isNIFTI1 = function (data) {
    var buf, mag1, mag2, mag3;

    buf = new DataView(data);
    mag1 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION);
    mag2 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 1);
    mag3 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 2);

    return !!((mag1 === nifti.NIFTI1.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI1.MAGIC_NUMBER[1]) &&
        (mag3 === nifti.NIFTI1.MAGIC_NUMBER[2]));
};


/**
 * Returns true if this data represents a NIFTI-2 header.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isNIFTI2 = function (data) {
    var buf, mag1, mag2, mag3;

    buf = new DataView(data);
    mag1 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION);
    mag2 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 1);
    mag3 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 2);

    return !!((mag1 === nifti.NIFTI2.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI2.MAGIC_NUMBER[1]) &&
    (mag3 === nifti.NIFTI2.MAGIC_NUMBER[2]));
};



/**
 * Returns true if this data represents a NIFTI header.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isNIFTI = function (data) {
    return (nifti.isNIFTI1(data) || nifti.isNIFTI2(data));
};



/**
 * Returns true if this data is GZIP compressed.
 * @param {ArrayBuffer} data
 * @returns {boolean}
 */
nifti.isCompressed = function (data) {
    var buf, magicCookie1, magicCookie2;

    if (data) {
        buf = new DataView(data);

        magicCookie1 = buf.getUint8(0);
        magicCookie2 = buf.getUint8(1);

        if (magicCookie1 === nifti.Utils.GUNZIP_MAGIC_COOKIE1) {
            return true;
        }

        if (magicCookie2 === nifti.Utils.GUNZIP_MAGIC_COOKIE2) {
            return true;
        }
    }

    return false;
};



/**
 * Returns decompressed data.
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.decompress = function (data) {
    return pako.inflate(data).buffer;
};



/**
 * Reads and returns the header object.
 * @param {ArrayBuffer} data
 * @returns {nifti.NIFTI1|nifti.NIFTI2|null}
 */
nifti.readHeader = function (data) {
    var header = null;

    if (nifti.isCompressed(data)) {
        data = nifti.decompress(data);
    }

    if (nifti.isNIFTI1(data)) {
        header = new nifti.NIFTI1();
    } else if (nifti.isNIFTI2(data)) {
        header = new nifti.NIFTI2();
    }

    if (header) {
        header.readHeader(data);
    } else {
        console.error("That file does not appear to be NIFTI!");
    }

    return header;
};



/**
 * Returns true if this header contains an extension.
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @returns {boolean}
 */
nifti.hasExtension = function (header) {
    return (header.extensionFlag[0] != 0);
};



/**
 * Returns the image data.
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.readImage = function (header, data) {
    var imageOffset = header.vox_offset,
        timeDim = 1,
        statDim = 1;

    if (header.dims[4]) {
        timeDim = header.dims[4];
    }

    if (header.dims[5]) {
        statDim = header.dims[5];
    }

    var imageSize = header.dims[1] * header.dims[2] * header.dims[3] * timeDim * statDim * (header.numBitsPerVoxel / 8);
    return data.slice(imageOffset, imageOffset + imageSize);
};



/**
 * Returns the extension data (including extension header).
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.readExtension = function (header, data) {
    var loc = header.getExtensionLocation(),
        size = header.extensionSize;

    return data.slice(loc, loc + size);
};



/**
 * Returns the extension data.
 * @param {nifti.NIFTI1|nifti.NIFTI2} header
 * @param {ArrayBuffer} data
 * @returns {ArrayBuffer}
 */
nifti.readExtensionData = function (header, data) {
    var loc = header.getExtensionLocation(),
        size = header.extensionSize;

    return data.slice(loc + 8, loc + size - 8);
};


/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti;
}


/***/ }),

/***/ "./node_modules/nifti-reader-js/src/nifti1.js":
/*!****************************************************!*\
  !*** ./node_modules/nifti-reader-js/src/nifti1.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global */



/*** Imports ***/

var nifti = nifti || {};
nifti.Utils = nifti.Utils || (( true) ? __webpack_require__(/*! ./utilities.js */ "./node_modules/nifti-reader-js/src/utilities.js") : undefined);



/*** Constructor ***/

/**
 * The NIFTI1 constructor.
 * @constructor
 * @property {boolean} littleEndian
 * @property {number} dim_info
 * @property {number[]} dims - image dimensions
 * @property {number} intent_p1
 * @property {number} intent_p2
 * @property {number} intent_p3
 * @property {number} intent_code
 * @property {number} datatypeCode
 * @property {number} numBitsPerVoxel
 * @property {number} slice_start
 * @property {number} slice_end
 * @property {number} slice_code
 * @property {number[]} pixDims - voxel dimensions
 * @property {number} vox_offset
 * @property {number} scl_slope
 * @property {number} scl_inter
 * @property {number} xyzt_units
 * @property {number} cal_max
 * @property {number} cal_min
 * @property {number} slice_duration
 * @property {number} toffset
 * @property {string} description
 * @property {string} aux_file
 * @property {string} intent_name
 * @property {number} qform_code
 * @property {number} sform_code
 * @property {number} quatern_b
 * @property {number} quatern_c
 * @property {number} quatern_d
 * @property {number} quatern_x
 * @property {number} quatern_y
 * @property {number} quatern_z
 * @property {Array.<Array.<number>>} affine
 * @property {string} magic
 * @property {boolean} isHDR - if hdr/img format
 * @property {number[]} extensionFlag
 * @property {number} extensionSize
 * @property {number} extensionCode
 * @type {Function}
 */
nifti.NIFTI1 = nifti.NIFTI1 || function () {
    this.littleEndian = false;
    this.dim_info = 0;
    this.dims = [];
    this.intent_p1 = 0;
    this.intent_p2 = 0;
    this.intent_p3 = 0;
    this.intent_code = 0;
    this.datatypeCode = 0;
    this.numBitsPerVoxel = 0;
    this.slice_start = 0;
    this.slice_end = 0;
    this.slice_code = 0;
    this.pixDims = [];
    this.vox_offset = 0;
    this.scl_slope = 1;
    this.scl_inter = 0;
    this.xyzt_units = 0;
    this.cal_max = 0;
    this.cal_min = 0;
    this.slice_duration = 0;
    this.toffset = 0;
    this.description = "";
    this.aux_file = "";
    this.intent_name = "";
    this.qform_code = 0;
    this.sform_code = 0;
    this.quatern_b = 0;
    this.quatern_c = 0;
    this.quatern_d = 0;
    this.qoffset_x = 0;
    this.qoffset_y = 0;
    this.qoffset_z = 0;
    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
    this.magic = 0;
    this.isHDR = false;
    this.extensionFlag = [0, 0, 0, 0];
    this.extensionSize = 0;
    this.extensionCode = 0;
};



/*** Static Pseudo-constants ***/

// datatype codes
nifti.NIFTI1.TYPE_NONE            = 0;
nifti.NIFTI1.TYPE_BINARY          = 1;
nifti.NIFTI1.TYPE_UINT8           = 2;
nifti.NIFTI1.TYPE_INT16           = 4;
nifti.NIFTI1.TYPE_INT32           = 8;
nifti.NIFTI1.TYPE_FLOAT32        = 16;
nifti.NIFTI1.TYPE_COMPLEX64      = 32;
nifti.NIFTI1.TYPE_FLOAT64        = 64;
nifti.NIFTI1.TYPE_RGB24         = 128;
nifti.NIFTI1.TYPE_INT8          = 256;
nifti.NIFTI1.TYPE_UINT16        = 512;
nifti.NIFTI1.TYPE_UINT32        = 768;
nifti.NIFTI1.TYPE_INT64        = 1024;
nifti.NIFTI1.TYPE_UINT64       = 1280;
nifti.NIFTI1.TYPE_FLOAT128     = 1536;
nifti.NIFTI1.TYPE_COMPLEX128   = 1792;
nifti.NIFTI1.TYPE_COMPLEX256   = 2048;

// transform codes
nifti.NIFTI1.XFORM_UNKNOWN        = 0;
nifti.NIFTI1.XFORM_SCANNER_ANAT   = 1;
nifti.NIFTI1.XFORM_ALIGNED_ANAT   = 2;
nifti.NIFTI1.XFORM_TALAIRACH      = 3;
nifti.NIFTI1.XFORM_MNI_152        = 4;

// unit codes
nifti.NIFTI1.SPATIAL_UNITS_MASK = 0x07;
nifti.NIFTI1.TEMPORAL_UNITS_MASK = 0x38;
nifti.NIFTI1.UNITS_UNKNOWN        = 0;
nifti.NIFTI1.UNITS_METER          = 1;
nifti.NIFTI1.UNITS_MM             = 2;
nifti.NIFTI1.UNITS_MICRON         = 3;
nifti.NIFTI1.UNITS_SEC            = 8;
nifti.NIFTI1.UNITS_MSEC          = 16;
nifti.NIFTI1.UNITS_USEC          = 24;
nifti.NIFTI1.UNITS_HZ            = 32;
nifti.NIFTI1.UNITS_PPM           = 40;
nifti.NIFTI1.UNITS_RADS          = 48;

// nifti1 codes
nifti.NIFTI1.MAGIC_COOKIE = 348;
nifti.NIFTI1.MAGIC_NUMBER_LOCATION = 344;
nifti.NIFTI1.MAGIC_NUMBER = [0x6E, 0x2B, 0x31];  // n+1 (.nii)
nifti.NIFTI1.MAGIC_NUMBER2 = [0x6E, 0x69, 0x31];  // ni1 (.hdr/.img)
nifti.NIFTI1.EXTENSION_HEADER_SIZE = 8;


/*** Prototype Methods ***/

/**
 * Reads the header data.
 * @param {ArrayBuffer} data
 */
nifti.NIFTI1.prototype.readHeader = function (data) {
    var rawData = new DataView(data),
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),
        ctr,
        ctrOut,
        ctrIn,
        index;

    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {  // try as little endian
        this.littleEndian = true;
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);
    }

    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {
        throw new Error("This does not appear to be a NIFTI file!");
    }

    this.dim_info = nifti.Utils.getByteAt(rawData, 39);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 40 + (ctr * 2);
        this.dims[ctr] = nifti.Utils.getShortAt(rawData, index, this.littleEndian);
    }

    this.intent_p1 = nifti.Utils.getFloatAt(rawData, 56, this.littleEndian);
    this.intent_p2 = nifti.Utils.getFloatAt(rawData, 60, this.littleEndian);
    this.intent_p3 = nifti.Utils.getFloatAt(rawData, 64, this.littleEndian);
    this.intent_code = nifti.Utils.getShortAt(rawData, 68, this.littleEndian);

    this.datatypeCode = nifti.Utils.getShortAt(rawData, 70, this.littleEndian);
    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 72, this.littleEndian);

    this.slice_start = nifti.Utils.getShortAt(rawData, 74, this.littleEndian);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 76 + (ctr * 4);
        this.pixDims[ctr] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);
    }

    this.vox_offset = nifti.Utils.getFloatAt(rawData, 108, this.littleEndian);

    this.scl_slope = nifti.Utils.getFloatAt(rawData, 112, this.littleEndian);
    this.scl_inter = nifti.Utils.getFloatAt(rawData, 116, this.littleEndian);

    this.slice_end = nifti.Utils.getShortAt(rawData, 120, this.littleEndian);
    this.slice_code = nifti.Utils.getByteAt(rawData, 122);

    this.xyzt_units = nifti.Utils.getByteAt(rawData, 123);

    this.cal_max = nifti.Utils.getFloatAt(rawData, 124, this.littleEndian);
    this.cal_min = nifti.Utils.getFloatAt(rawData, 128, this.littleEndian);

    this.slice_duration = nifti.Utils.getFloatAt(rawData, 132, this.littleEndian);
    this.toffset = nifti.Utils.getFloatAt(rawData, 136, this.littleEndian);

    this.description = nifti.Utils.getStringAt(rawData, 148, 228);
    this.aux_file = nifti.Utils.getStringAt(rawData, 228, 252);

    this.qform_code = nifti.Utils.getShortAt(rawData, 252, this.littleEndian);
    this.sform_code = nifti.Utils.getShortAt(rawData, 254, this.littleEndian);

    this.quatern_b = nifti.Utils.getFloatAt(rawData, 256, this.littleEndian);
    this.quatern_c = nifti.Utils.getFloatAt(rawData, 260, this.littleEndian);
    this.quatern_d = nifti.Utils.getFloatAt(rawData, 264, this.littleEndian);
    this.qoffset_x = nifti.Utils.getFloatAt(rawData, 268, this.littleEndian);
    this.qoffset_y = nifti.Utils.getFloatAt(rawData, 272, this.littleEndian);
    this.qoffset_z = nifti.Utils.getFloatAt(rawData, 276, this.littleEndian);

    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {
        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {
            index = 280 + (((ctrOut * 4) + ctrIn) * 4);
            this.affine[ctrOut][ctrIn] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);
        }
    }

    this.affine[3][0] = 0;
    this.affine[3][1] = 0;
    this.affine[3][2] = 0;
    this.affine[3][3] = 1;

    this.intent_name = nifti.Utils.getStringAt(rawData, 328, 344);
    this.magic = nifti.Utils.getStringAt(rawData, 344, 348);

    this.isHDR = (this.magic === nifti.NIFTI1.MAGIC_NUMBER2);

    if (rawData.byteLength > nifti.NIFTI1.MAGIC_COOKIE) {
        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 348);
        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 348 + 1);
        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 348 + 2);
        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 348 + 3);

        if (this.extensionFlag[0]) {
            this.extensionSize = this.getExtensionSize(rawData);
            this.extensionCode = this.getExtensionCode(rawData);
        }
    }
};


/**
 * Returns a formatted string of header fields.
 * @returns {string}
 */
nifti.NIFTI1.prototype.toFormattedString = function () {
    var fmt = nifti.Utils.formatNumber,
        string = "";

    string += ("Dim Info = " + this.dim_info + "\n");

    string += ("Image Dimensions (1-8): " +
        this.dims[0] + ", " +
        this.dims[1] + ", " +
        this.dims[2] + ", " +
        this.dims[3] + ", " +
        this.dims[4] + ", " +
        this.dims[5] + ", " +
        this.dims[6] + ", " +
        this.dims[7] + "\n");

    string += ("Intent Parameters (1-3): " +
        this.intent_p1 + ", " +
        this.intent_p2 + ", " +
        this.intent_p3) + "\n";

    string += ("Intent Code = " + this.intent_code + "\n");
    string += ("Datatype = " + this.datatypeCode +  " (" + this.getDatatypeCodeString(this.datatypeCode) + ")\n");
    string += ("Bits Per Voxel = " + this.numBitsPerVoxel + "\n");
    string += ("Slice Start = " + this.slice_start + "\n");
    string += ("Voxel Dimensions (1-8): " +
        fmt(this.pixDims[0]) + ", " +
        fmt(this.pixDims[1]) + ", " +
        fmt(this.pixDims[2]) + ", " +
        fmt(this.pixDims[3]) + ", " +
        fmt(this.pixDims[4]) + ", " +
        fmt(this.pixDims[5]) + ", " +
        fmt(this.pixDims[6]) + ", " +
        fmt(this.pixDims[7]) + "\n");

    string += ("Image Offset = " + this.vox_offset + "\n");
    string += ("Data Scale:  Slope = " + fmt(this.scl_slope) + "  Intercept = " + fmt(this.scl_inter) + "\n");
    string += ("Slice End = " + this.slice_end + "\n");
    string += ("Slice Code = " + this.slice_code + "\n");
    string += ("Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + ", " + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + ")\n");
    string += ("Display Range:  Max = " + fmt(this.cal_max) + "  Min = " + fmt(this.cal_min) + "\n");
    string += ("Slice Duration = " + this.slice_duration + "\n");
    string += ("Time Axis Shift = " + this.toffset + "\n");
    string += ("Description: \"" + this.description + "\"\n");
    string += ("Auxiliary File: \"" + this.aux_file + "\"\n");
    string += ("Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + ")\n");
    string += ("S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + ")\n");
    string += ("Quaternion Parameters:  " +
        "b = " + fmt(this.quatern_b) + "  " +
        "c = " + fmt(this.quatern_c) + "  " +
        "d = " + fmt(this.quatern_d) + "\n");

    string += ("Quaternion Offsets:  " +
        "x = " + this.qoffset_x + "  " +
        "y = " + this.qoffset_y + "  " +
        "z = " + this.qoffset_z + "\n");

    string += ("S-Form Parameters X: " +
        fmt(this.affine[0][0]) + ", " +
        fmt(this.affine[0][1]) + ", " +
        fmt(this.affine[0][2]) + ", " +
        fmt(this.affine[0][3]) + "\n");

    string += ("S-Form Parameters Y: " +
        fmt(this.affine[1][0]) + ", " +
        fmt(this.affine[1][1]) + ", " +
        fmt(this.affine[1][2]) + ", " +
        fmt(this.affine[1][3]) + "\n");

    string += ("S-Form Parameters Z: " +
        fmt(this.affine[2][0]) + ", " +
        fmt(this.affine[2][1]) + ", " +
        fmt(this.affine[2][2]) + ", " +
        fmt(this.affine[2][3]) + "\n");

    string += ("Intent Name: \"" + this.intent_name + "\"\n");

    if (this.extensionFlag[0]) {
        string += ("Extension: Size = " + this.extensionSize + "  Code = " + this.extensionCode + "\n");

    }

    return string;
};


/**
 * Returns a human-readable string of datatype.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI1.prototype.getDatatypeCodeString = function (code) {
    if (code === nifti.NIFTI1.TYPE_UINT8) {
        return "1-Byte Unsigned Integer";
    } else if (code === nifti.NIFTI1.TYPE_INT16) {
        return "2-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_INT32) {
        return "4-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_FLOAT32) {
        return "4-Byte Float";
    } else if (code === nifti.NIFTI1.TYPE_FLOAT64) {
        return "8-Byte Float";
    } else if (code === nifti.NIFTI1.TYPE_RGB24) {
        return "RGB";
    } else if (code === nifti.NIFTI1.TYPE_INT8) {
        return "1-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_UINT16) {
        return "2-Byte Unsigned Integer";
    } else if (code === nifti.NIFTI1.TYPE_UINT32) {
        return "4-Byte Unsigned Integer";
    } else if (code === nifti.NIFTI1.TYPE_INT64) {
        return "8-Byte Signed Integer";
    } else if (code === nifti.NIFTI1.TYPE_UINT64) {
        return "8-Byte Unsigned Integer";
    } else {
        return "Unknown";
    }
};


/**
 * Returns a human-readable string of transform type.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI1.prototype.getTransformCodeString = function (code) {
    if (code === nifti.NIFTI1.XFORM_SCANNER_ANAT) {
        return "Scanner";
    } else if (code === nifti.NIFTI1.XFORM_ALIGNED_ANAT) {
        return "Aligned";
    } else if (code === nifti.NIFTI1.XFORM_TALAIRACH) {
        return "Talairach";
    } else if (code === nifti.NIFTI1.XFORM_MNI_152) {
        return "MNI";
    } else {
        return "Unknown";
    }
};


/**
 * Returns a human-readable string of spatial and temporal units.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI1.prototype.getUnitsCodeString = function (code) {
    if (code === nifti.NIFTI1.UNITS_METER) {
        return "Meters";
    } else if (code === nifti.NIFTI1.UNITS_MM) {
        return "Millimeters";
    } else if (code === nifti.NIFTI1.UNITS_MICRON) {
        return "Microns";
    } else if (code === nifti.NIFTI1.UNITS_SEC) {
        return "Seconds";
    } else if (code === nifti.NIFTI1.UNITS_MSEC) {
        return "Milliseconds";
    } else if (code === nifti.NIFTI1.UNITS_USEC) {
        return "Microseconds";
    } else if (code === nifti.NIFTI1.UNITS_HZ) {
        return "Hz";
    } else if (code === nifti.NIFTI1.UNITS_PPM) {
        return "PPM";
    } else if (code === nifti.NIFTI1.UNITS_RADS) {
        return "Rads";
    } else {
        return "Unknown";
    }
};


/**
 * Returns the qform matrix.
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI1.prototype.getQformMat = function () {
    return this.convertNiftiQFormToNiftiSForm(this.quatern_b, this.quatern_c, this.quatern_d, this.qoffset_x,
        this.qoffset_y, this.qoffset_z, this.pixDims[1], this.pixDims[2], this.pixDims[3], this.pixDims[0]);
};



/**
 * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {number} qb
 * @param {number} qc
 * @param {number} qd
 * @param {number} qx
 * @param {number} qy
 * @param {number} qz
 * @param {number} dx
 * @param {number} dy
 * @param {number} dz
 * @param {number} qfac
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm = function (qb, qc, qd, qx, qy, qz, dx, dy, dz,
                                                qfac) {
    var R = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        a,
        b = qb,
        c = qc,
        d = qd,
        xd,
        yd,
        zd;

    // last row is always [ 0 0 0 1 ]
    R[3][0] = R[3][1] = R[3][2] = 0.0;
    R[3][3] = 1.0;

    // compute a parameter from b,c,d
    a = 1.0 - (b * b + c * c + d * d);
    if (a < 0.0000001) {                   /* special case */

        a = 1.0 / Math.sqrt(b * b + c * c + d * d);
        b *= a;
        c *= a;
        d *= a;        /* normalize (b,c,d) vector */
        a = 0.0;                        /* a = 0 ==> 180 degree rotation */
    } else {

        a = Math.sqrt(a);                     /* angle = 2*arccos(a) */
    }

    // load rotation matrix, including scaling factors for voxel sizes
    xd = (dx > 0.0) ? dx : 1.0;       /* make sure are positive */
    yd = (dy > 0.0) ? dy : 1.0;
    zd = (dz > 0.0) ? dz : 1.0;

    if (qfac < 0.0) {
        zd = -zd;         /* left handedness? */
    }

    R[0][0] =       (a * a + b * b - c * c - d * d) * xd;
    R[0][1] = 2.0 * (b * c - a * d) * yd;
    R[0][2] = 2.0 * (b * d + a * c) * zd;
    R[1][0] = 2.0 * (b * c + a * d) * xd;
    R[1][1] =       (a * a + c * c - b * b - d * d) * yd;
    R[1][2] = 2.0 * (c * d - a * b) * zd;
    R[2][0] = 2.0 * (b * d - a * c) * xd;
    R[2][1] = 2.0 * (c * d + a * b) * yd;
    R[2][2] =       (a * a + d * d - c * c - b * b) * zd;

    // load offsets
    R[0][3] = qx;
    R[1][3] = qy;
    R[2][3] = qz;

    return R;
};



/**
 * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {Array.<Array.<number>>} R
 * @returns {string}
 */
nifti.NIFTI1.prototype.convertNiftiSFormToNEMA = function (R) {
    var xi, xj, xk, yi, yj, yk, zi, zj, zk, val, detQ, detP, i, j, k, p, q, r, ibest, jbest, kbest, pbest, qbest, rbest,
        M, vbest, Q, P, iChar, jChar, kChar, iSense, jSense, kSense;
    k = 0;

    Q = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
    P = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];

    //if( icod == NULL || jcod == NULL || kcod == NULL ) return ; /* bad */

    //*icod = *jcod = *kcod = 0 ; /* this.errorMessage returns, if sh*t happens */

    /* load column vectors for each (i,j,k) direction from matrix */

    /*-- i axis --*/ /*-- j axis --*/ /*-- k axis --*/

    xi = R[0][0];
    xj = R[0][1];
    xk = R[0][2];

    yi = R[1][0];
    yj = R[1][1];
    yk = R[1][2];

    zi = R[2][0];
    zj = R[2][1];
    zk = R[2][2];

    /* normalize column vectors to get unit vectors along each ijk-axis */

    /* normalize i axis */
    val = Math.sqrt(xi * xi + yi * yi + zi * zi);
    if (val === 0.0) {  /* stupid input */
        return null;
    }

    xi /= val;
    yi /= val;
    zi /= val;

    /* normalize j axis */
    val = Math.sqrt(xj * xj + yj * yj + zj * zj);
    if (val === 0.0) {  /* stupid input */
        return null;
    }

    xj /= val;
    yj /= val;
    zj /= val;

    /* orthogonalize j axis to i axis, if needed */
    val = xi * xj + yi * yj + zi * zj;    /* dot product between i and j */
    if (Math.abs(val) > 1.E-4) {
        xj -= val * xi;
        yj -= val * yi;
        zj -= val * zi;
        val = Math.sqrt(xj * xj + yj * yj + zj * zj);  /* must renormalize */
        if (val === 0.0) {              /* j was parallel to i? */
            return null;
        }
        xj /= val;
        yj /= val;
        zj /= val;
    }

    /* normalize k axis; if it is zero, make it the cross product i x j */
    val = Math.sqrt(xk * xk + yk * yk + zk * zk);
    if (val === 0.0) {
        xk = yi * zj - zi * yj;
        yk = zi * xj - zj * xi;
        zk = xi * yj - yi * xj;
    } else {
        xk /= val;
        yk /= val;
        zk /= val;
    }

    /* orthogonalize k to i */
    val = xi * xk + yi * yk + zi * zk;    /* dot product between i and k */
    if (Math.abs(val) > 1.E-4) {
        xk -= val * xi;
        yk -= val * yi;
        zk -= val * zi;
        val = Math.sqrt(xk * xk + yk * yk + zk * zk);
        if (val === 0.0) {    /* bad */
            return null;
        }
        xk /= val;
        yk /= val;
        zk /= val;
    }

    /* orthogonalize k to j */
    val = xj * xk + yj * yk + zj * zk;    /* dot product between j and k */
    if (Math.abs(val) > 1.e-4) {
        xk -= val * xj;
        yk -= val * yj;
        zk -= val * zj;
        val = Math.sqrt(xk * xk + yk * yk + zk * zk);
        if (val === 0.0) {     /* bad */
            return null;
        }
        xk /= val;
        yk /= val;
        zk /= val;
    }

    Q[0][0] = xi;
    Q[0][1] = xj;
    Q[0][2] = xk;
    Q[1][0] = yi;
    Q[1][1] = yj;
    Q[1][2] = yk;
    Q[2][0] = zi;
    Q[2][1] = zj;
    Q[2][2] = zk;

    /* at this point, Q is the rotation matrix from the (i,j,k) to (x,y,z) axes */

    detQ = this.nifti_mat33_determ(Q);
    if (detQ === 0.0) { /* shouldn't happen unless user is a DUFIS */
        return null;
    }

    /* Build and test all possible +1/-1 coordinate permutation matrices P;
     then find the P such that the rotation matrix M=PQ is closest to the
     identity, in the sense of M having the smallest total rotation angle. */

    /* Despite the formidable looking 6 nested loops, there are
     only 3*3*3*2*2*2 = 216 passes, which will run very quickly. */

    vbest = -666.0;
    ibest = pbest = qbest = rbest = 1;
    jbest = 2;
    kbest = 3;

    for (i = 1; i <= 3; i += 1) {     /* i = column number to use for row #1 */
        for (j = 1; j <= 3; j += 1) {    /* j = column number to use for row #2 */
            if (i !== j) {
                for (k = 1; k <= 3; k += 1) {  /* k = column number to use for row #3 */
                    if (!(i === k || j === k)) {
                        P[0][0] = P[0][1] = P[0][2] = P[1][0] = P[1][1] = P[1][2] = P[2][0] = P[2][1] = P[2][2] = 0.0;
                        for (p = -1; p <= 1; p += 2) {    /* p,q,r are -1 or +1      */
                            for (q = -1; q <= 1; q += 2) {   /* and go into rows #1,2,3 */
                                for (r = -1; r <= 1; r += 2) {
                                    P[0][i - 1] = p;
                                    P[1][j - 1] = q;
                                    P[2][k - 1] = r;
                                    detP = this.nifti_mat33_determ(P);           /* sign of permutation */
                                    if ((detP * detQ) > 0.0) {
                                        M = this.nifti_mat33_mul(P, Q);

                                        /* angle of M rotation = 2.0*acos(0.5*sqrt(1.0+trace(M)))       */
                                        /* we want largest trace(M) == smallest angle == M nearest to I */

                                        val = M[0][0] + M[1][1] + M[2][2]; /* trace */
                                        if (val > vbest) {
                                            vbest = val;
                                            ibest = i;
                                            jbest = j;
                                            kbest = k;
                                            pbest = p;
                                            qbest = q;
                                            rbest = r;
                                        }
                                    }  /* doesn't match sign of Q */
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /* At this point ibest is 1 or 2 or 3; pbest is -1 or +1; etc.

     The matrix P that corresponds is the best permutation approximation
     to Q-inverse; that is, P (approximately) takes (x,y,z) coordinates
     to the (i,j,k) axes.

     For example, the first row of P (which contains pbest in column ibest)
     determines the way the i axis points relative to the anatomical
     (x,y,z) axes.  If ibest is 2, then the i axis is along the y axis,
     which is direction P2A (if pbest > 0) or A2P (if pbest < 0).

     So, using ibest and pbest, we can assign the output code for
     the i axis.  Mutatis mutandis for the j and k axes, of course. */

    iChar = jChar = kChar = iSense = jSense = kSense = 0;

    switch (ibest * pbest) {
        case 1: /*i = NIFTI_L2R*/
            iChar = 'X';
            iSense = '+';
            break;
        case -1: /*i = NIFTI_R2L*/
            iChar = 'X';
            iSense = '-';
            break;
        case 2: /*i = NIFTI_P2A*/
            iChar = 'Y';
            iSense = '+';
            break;
        case -2: /*i = NIFTI_A2P*/
            iChar = 'Y';
            iSense = '-';
            break;
        case 3: /*i = NIFTI_I2S*/
            iChar = 'Z';
            iSense = '+';
            break;
        case -3: /*i = NIFTI_S2I*/
            iChar = 'Z';
            iSense = '-';
            break;
    }

    switch (jbest * qbest) {
        case 1: /*j = NIFTI_L2R*/
            jChar = 'X';
            jSense = '+';
            break;
        case -1: /*j = NIFTI_R2L*/
            jChar = 'X';
            jSense = '-';
            break;
        case 2: /*j = NIFTI_P2A*/
            jChar = 'Y';
            jSense = '+';
            break;
        case -2: /*j = NIFTI_A2P*/
            jChar = 'Y';
            jSense = '-';
            break;
        case 3: /*j = NIFTI_I2S*/
            jChar = 'Z';
            jSense = '+';
            break;
        case -3: /*j = NIFTI_S2I*/
            jChar = 'Z';
            jSense = '-';
            break;
    }

    switch (kbest * rbest) {
        case 1: /*k = NIFTI_L2R*/
            kChar = 'X';
            kSense = '+';
            break;
        case -1: /*k = NIFTI_R2L*/
            kChar = 'X';
            kSense = '-';
            break;
        case 2: /*k = NIFTI_P2A*/
            kChar = 'Y';
            kSense = '+';
            break;
        case -2: /*k = NIFTI_A2P*/
            kChar = 'Y';
            kSense = '-';
            break;
        case 3: /*k = NIFTI_I2S*/
            kChar = 'Z';
            kSense = '+';
            break;
        case -3: /*k = NIFTI_S2I*/
            kChar = 'Z';
            kSense = '-';
            break;
    }

    return (iChar + jChar + kChar + iSense + jSense + kSense);
};



nifti.NIFTI1.prototype.nifti_mat33_mul = function (A, B) {
    var C = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
        i,
        j;

    for (i = 0; i < 3; i += 1) {
        for (j = 0; j < 3; j += 1) {
            C[i][j] =  A[i][0] * B[0][j]  + A[i][1] * B[1][j] + A[i][2] * B[2][j];
        }
    }

    return C;
};



nifti.NIFTI1.prototype.nifti_mat33_determ = function (R) {
    var r11, r12, r13, r21, r22, r23, r31, r32, r33;
    /*  INPUT MATRIX:  */
    r11 = R[0][0];
    r12 = R[0][1];
    r13 = R[0][2];
    r21 = R[1][0];
    r22 = R[1][1];
    r23 = R[1][2];
    r31 = R[2][0];
    r32 = R[2][1];
    r33 = R[2][2];

    return (r11 * r22 * r33 - r11 * r32 * r23 - r21 * r12 * r33 + r21 * r32 * r13 + r31 * r12 * r23 - r31 * r22 * r13);
};


/**
 * Returns the byte index of the extension.
 * @returns {number}
 */
nifti.NIFTI1.prototype.getExtensionLocation = function() {
    return nifti.NIFTI1.MAGIC_COOKIE + 4;
};


/**
 * Returns the extension size.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI1.prototype.getExtensionSize = function(data) {
    return nifti.Utils.getIntAt(data, this.getExtensionLocation(), this.littleEndian);
};



/**
 * Returns the extension code.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI1.prototype.getExtensionCode = function(data) {
    return nifti.Utils.getIntAt(data, this.getExtensionLocation() + 4, this.littleEndian);
};



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti.NIFTI1;
}


/***/ }),

/***/ "./node_modules/nifti-reader-js/src/nifti2.js":
/*!****************************************************!*\
  !*** ./node_modules/nifti-reader-js/src/nifti2.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global */



/*** Imports ***/

var nifti = nifti || {};
nifti.Utils = nifti.Utils || (( true) ? __webpack_require__(/*! ./utilities.js */ "./node_modules/nifti-reader-js/src/utilities.js") : undefined);
nifti.NIFTI1 = nifti.NIFTI1 || (( true) ? __webpack_require__(/*! ./nifti1.js */ "./node_modules/nifti-reader-js/src/nifti1.js") : undefined);


/*** Constructor ***/

/**
 * The NIFTI2 constructor.
 * @constructor
 * @property {boolean} littleEndian
 * @property {number} dim_info
 * @property {number[]} dims - image dimensions
 * @property {number} intent_p1
 * @property {number} intent_p2
 * @property {number} intent_p3
 * @property {number} intent_code
 * @property {number} datatypeCode
 * @property {number} numBitsPerVoxel
 * @property {number} slice_start
 * @property {number} slice_end
 * @property {number} slice_code
 * @property {number[]} pixDims - voxel dimensions
 * @property {number} vox_offset
 * @property {number} scl_slope
 * @property {number} scl_inter
 * @property {number} xyzt_units
 * @property {number} cal_max
 * @property {number} cal_min
 * @property {number} slice_duration
 * @property {number} toffset
 * @property {string} description
 * @property {string} aux_file
 * @property {string} intent_name
 * @property {number} qform_code
 * @property {number} sform_code
 * @property {number} quatern_b
 * @property {number} quatern_c
 * @property {number} quatern_d
 * @property {number} quatern_x
 * @property {number} quatern_y
 * @property {number} quatern_z
 * @property {Array.<Array.<number>>} affine
 * @property {string} magic
 * @property {number[]} extensionFlag
 * @type {Function}
 */
nifti.NIFTI2 = nifti.NIFTI2 || function () {
    this.littleEndian = false;
    this.dim_info = 0;
    this.dims = [];
    this.intent_p1 = 0;
    this.intent_p2 = 0;
    this.intent_p3 = 0;
    this.intent_code = 0;
    this.datatypeCode = 0;
    this.numBitsPerVoxel = 0;
    this.slice_start = 0;
    this.slice_end = 0;
    this.slice_code = 0;
    this.pixDims = [];
    this.vox_offset = 0;
    this.scl_slope = 1;
    this.scl_inter = 0;
    this.xyzt_units = 0;
    this.cal_max = 0;
    this.cal_min = 0;
    this.slice_duration = 0;
    this.toffset = 0;
    this.description = "";
    this.aux_file = "";
    this.intent_name = "";
    this.qform_code = 0;
    this.sform_code = 0;
    this.quatern_b = 0;
    this.quatern_c = 0;
    this.quatern_d = 0;
    this.qoffset_x = 0;
    this.qoffset_y = 0;
    this.qoffset_z = 0;
    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
    this.magic = 0;
    this.extensionFlag = [0, 0, 0, 0];
};



/*** Static Pseudo-constants ***/

nifti.NIFTI2.MAGIC_COOKIE = 540;
nifti.NIFTI2.MAGIC_NUMBER_LOCATION = 4;
nifti.NIFTI2.MAGIC_NUMBER = [0x6E, 0x2B, 0x32, 0, 0x0D, 0x0A, 0x1A, 0x0A];  // n+2\0



/*** Prototype Methods ***/

/**
 * Reads the header data.
 * @param {ArrayBuffer} data
 */
nifti.NIFTI2.prototype.readHeader = function (data) {
    var rawData = new DataView(data),
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),
        ctr,
        ctrOut,
        ctrIn,
        index,
        array;

    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {  // try as little endian
        this.littleEndian = true;
        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);
    }

    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {
        throw new Error("This does not appear to be a NIFTI file!");
    }

    this.datatypeCode = nifti.Utils.getShortAt(rawData, 12, this.littleEndian);
    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 14, this.littleEndian);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 16 + (ctr * 8);
        this.dims[ctr] = nifti.Utils.getLongAt(rawData, index, this.littleEndian);
    }

    this.intent_p1 = nifti.Utils.getDoubleAt(rawData, 80, this.littleEndian);
    this.intent_p2 = nifti.Utils.getDoubleAt(rawData, 88, this.littleEndian);
    this.intent_p3 = nifti.Utils.getDoubleAt(rawData, 96, this.littleEndian);

    for (ctr = 0; ctr < 8; ctr += 1) {
        index = 104 + (ctr * 8);
        this.pixDims[ctr] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);
    }

    this.vox_offset = nifti.Utils.getLongAt(rawData, 168, this.littleEndian);

    this.scl_slope = nifti.Utils.getDoubleAt(rawData, 176, this.littleEndian);
    this.scl_inter = nifti.Utils.getDoubleAt(rawData, 184, this.littleEndian);

    this.cal_max = nifti.Utils.getDoubleAt(rawData, 192, this.littleEndian);
    this.cal_min = nifti.Utils.getDoubleAt(rawData, 200, this.littleEndian);

    this.slice_duration = nifti.Utils.getDoubleAt(rawData, 208, this.littleEndian);

    this.toffset = nifti.Utils.getDoubleAt(rawData, 216, this.littleEndian);

    this.slice_start = nifti.Utils.getLongAt(rawData, 224, this.littleEndian);
    this.slice_end = nifti.Utils.getLongAt(rawData, 232, this.littleEndian);

    this.description = nifti.Utils.getStringAt(rawData, 240, 240 + 80);
    this.aux_file = nifti.Utils.getStringAt(rawData, 320, 320 + 24);

    this.qform_code = nifti.Utils.getIntAt(rawData, 344, this.littleEndian);
    this.sform_code = nifti.Utils.getIntAt(rawData, 348, this.littleEndian);

    this.quatern_b = nifti.Utils.getDoubleAt(rawData, 352, this.littleEndian);
    this.quatern_c = nifti.Utils.getDoubleAt(rawData, 360, this.littleEndian);
    this.quatern_d = nifti.Utils.getDoubleAt(rawData, 368, this.littleEndian);
    this.qoffset_x = nifti.Utils.getDoubleAt(rawData, 376, this.littleEndian);
    this.qoffset_y = nifti.Utils.getDoubleAt(rawData, 384, this.littleEndian);
    this.qoffset_z = nifti.Utils.getDoubleAt(rawData, 392, this.littleEndian);

    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {
        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {
            index = 400 + (((ctrOut * 4) + ctrIn) * 8);
            this.affine[ctrOut][ctrIn] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);
        }
    }

    this.affine[3][0] = 0;
    this.affine[3][1] = 0;
    this.affine[3][2] = 0;
    this.affine[3][3] = 1;

    this.slice_code = nifti.Utils.getIntAt(rawData, 496, this.littleEndian);
    this.xyzt_units = nifti.Utils.getIntAt(rawData, 500, this.littleEndian);
    this.intent_code = nifti.Utils.getIntAt(rawData, 504, this.littleEndian);
    this.intent_name = nifti.Utils.getStringAt(rawData, 508, 508 + 16);

    this.dim_info = nifti.Utils.getByteAt(rawData, 524);

    if (rawData.byteLength > nifti.NIFTI2.MAGIC_COOKIE) {
        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 540);
        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 540 + 1);
        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 540 + 2);
        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 540 + 3);

        if (this.extensionFlag[0]) {
            this.extensionSize = this.getExtensionSize(rawData);
            this.extensionCode = this.getExtensionCode(rawData);
        }
    }
};



/**
 * Returns a formatted string of header fields.
 * @returns {string}
 */
nifti.NIFTI2.prototype.toFormattedString = function () {
    var fmt = nifti.Utils.formatNumber,
        string = "";

    string += ("Datatype = " +  + this.datatypeCode + " (" + this.getDatatypeCodeString(this.datatypeCode) + ")\n");
    string += ("Bits Per Voxel = " + " = " + this.numBitsPerVoxel + "\n");
    string += ("Image Dimensions" + " (1-8): " +
        this.dims[0] + ", " +
        this.dims[1] + ", " +
        this.dims[2] + ", " +
        this.dims[3] + ", " +
        this.dims[4] + ", " +
        this.dims[5] + ", " +
        this.dims[6] + ", " +
        this.dims[7] + "\n");

    string += ("Intent Parameters (1-3): " +
        this.intent_p1 + ", " +
        this.intent_p2 + ", " +
        this.intent_p3) + "\n";

    string += ("Voxel Dimensions (1-8): " +
        fmt(this.pixDims[0]) + ", " +
        fmt(this.pixDims[1]) + ", " +
        fmt(this.pixDims[2]) + ", " +
        fmt(this.pixDims[3]) + ", " +
        fmt(this.pixDims[4]) + ", " +
        fmt(this.pixDims[5]) + ", " +
        fmt(this.pixDims[6]) + ", " +
        fmt(this.pixDims[7]) + "\n");

    string += ("Image Offset = " + this.vox_offset + "\n");
    string += ("Data Scale:  Slope = " + fmt(this.scl_slope) + "  Intercept = " + fmt(this.scl_inter) + "\n");
    string += ("Display Range:  Max = " + fmt(this.cal_max) + "  Min = " + fmt(this.cal_min) + "\n");
    string += ("Slice Duration = " + this.slice_duration + "\n");
    string += ("Time Axis Shift = " + this.toffset + "\n");
    string += ("Slice Start = " + this.slice_start + "\n");
    string += ("Slice End = " + this.slice_end + "\n");
    string += ("Description: \"" + this.description + "\"\n");
    string += ("Auxiliary File: \"" + this.aux_file + "\"\n");
    string += ("Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + ")\n");
    string += ("S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + ")\n");
    string += ("Quaternion Parameters:  " +
    "b = " + fmt(this.quatern_b) + "  " +
    "c = " + fmt(this.quatern_c) + "  " +
    "d = " + fmt(this.quatern_d) + "\n");

    string += ("Quaternion Offsets:  " +
    "x = " + this.qoffset_x + "  " +
    "y = " + this.qoffset_y + "  " +
    "z = " + this.qoffset_z + "\n");

    string += ("S-Form Parameters X: " +
    fmt(this.affine[0][0]) + ", " +
    fmt(this.affine[0][1]) + ", " +
    fmt(this.affine[0][2]) + ", " +
    fmt(this.affine[0][3]) + "\n");

    string += ("S-Form Parameters Y: " +
    fmt(this.affine[1][0]) + ", " +
    fmt(this.affine[1][1]) + ", " +
    fmt(this.affine[1][2]) + ", " +
    fmt(this.affine[1][3]) + "\n");

    string += ("S-Form Parameters Z: " +
    fmt(this.affine[2][0]) + ", " +
    fmt(this.affine[2][1]) + ", " +
    fmt(this.affine[2][2]) + ", " +
    fmt(this.affine[2][3]) + "\n");

    string += ("Slice Code = " + this.slice_code + "\n");
    string += ("Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + ", " + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + ")\n");
    string += ("Intent Code = " + this.intent_code + "\n");
    string += ("Intent Name: \"" + this.intent_name + "\"\n");

    string += ("Dim Info = " + this.dim_info + "\n");

    return string;
};



/**
 * Returns the byte index of the extension.
 * @returns {number}
 */
nifti.NIFTI2.prototype.getExtensionLocation = function() {
    return nifti.NIFTI2.MAGIC_COOKIE + 4;
};



/**
 * Returns the extension size.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI2.prototype.getExtensionSize = nifti.NIFTI1.prototype.getExtensionSize;



/**
 * Returns the extension code.
 * @param {DataView} data
 * @returns {number}
 */
nifti.NIFTI2.prototype.getExtensionCode = nifti.NIFTI1.prototype.getExtensionCode;



/**
 * Returns a human-readable string of datatype.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI2.prototype.getDatatypeCodeString = nifti.NIFTI1.prototype.getDatatypeCodeString;



/**
 * Returns a human-readable string of transform type.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI2.prototype.getTransformCodeString = nifti.NIFTI1.prototype.getTransformCodeString;



/**
 * Returns a human-readable string of spatial and temporal units.
 * @param {number} code
 * @returns {string}
 */
nifti.NIFTI2.prototype.getUnitsCodeString = nifti.NIFTI1.prototype.getUnitsCodeString;



/**
 * Returns the qform matrix.
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI2.prototype.getQformMat = nifti.NIFTI1.prototype.getQformMat;



/**
 * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {number} qb
 * @param {number} qc
 * @param {number} qd
 * @param {number} qx
 * @param {number} qy
 * @param {number} qz
 * @param {number} dx
 * @param {number} dy
 * @param {number} dz
 * @param {number} qfac
 * @returns {Array.<Array.<number>>}
 */
nifti.NIFTI2.prototype.convertNiftiQFormToNiftiSForm = nifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm;



/**
 * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
 * @param {Array.<Array.<number>>} R
 * @returns {string}
 */
nifti.NIFTI2.prototype.convertNiftiSFormToNEMA = nifti.NIFTI1.prototype.convertNiftiSFormToNEMA;



nifti.NIFTI2.prototype.nifti_mat33_mul = nifti.NIFTI1.prototype.nifti_mat33_mul;



nifti.NIFTI2.prototype.nifti_mat33_determ = nifti.NIFTI1.prototype.nifti_mat33_determ;



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti.NIFTI2;
}


/***/ }),

/***/ "./node_modules/nifti-reader-js/src/utilities.js":
/*!*******************************************************!*\
  !*** ./node_modules/nifti-reader-js/src/utilities.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*jslint browser: true, node: true */
/*global require, module */



/*** Imports ***/

var nifti = nifti || {};
nifti.Utils = nifti.Utils || {};



/*** Static Pseudo-constants ***/

nifti.Utils.crcTable = null;
nifti.Utils.GUNZIP_MAGIC_COOKIE1 = 31;
nifti.Utils.GUNZIP_MAGIC_COOKIE2 = 139;



/*** Static methods ***/

nifti.Utils.getStringAt = function (data, start, end) {
    var str = "", ctr, ch;

    for (ctr = start; ctr < end; ctr += 1) {
        ch = data.getUint8(ctr);

        if (ch !== 0) {
            str += String.fromCharCode(ch);
        }
    }

    return str;
};



nifti.Utils.getByteAt = function (data, start) {
    return data.getInt8(start);
};



nifti.Utils.getShortAt = function (data, start, littleEndian) {
    return data.getInt16(start, littleEndian);
};



nifti.Utils.getIntAt = function (data, start, littleEndian) {
    return data.getInt32(start, littleEndian);
};



nifti.Utils.getFloatAt = function (data, start, littleEndian) {
    return data.getFloat32(start, littleEndian);
};



nifti.Utils.getDoubleAt = function (data, start, littleEndian) {
    return data.getFloat64(start, littleEndian);
};



nifti.Utils.getLongAt = function (data, start, littleEndian) {
    var ctr, array = [], value = 0;

    for (ctr = 0; ctr < 8; ctr += 1) {
        array[ctr] = nifti.Utils.getByteAt(data, start + ctr, littleEndian);
    }

    for (ctr = array.length - 1; ctr >= 0; ctr--) {
        value = (value * 256) + array[ctr];
    }

    return value;
};



nifti.Utils.toArrayBuffer = function (buffer) {
    var ab, view, i;

    ab = new ArrayBuffer(buffer.length);
    view = new Uint8Array(ab);
    for (i = 0; i < buffer.length; i += 1) {
        view[i] = buffer[i];
    }
    return ab;
};



nifti.Utils.isString = function (obj) {
    return (typeof obj === "string" || obj instanceof String);
};


nifti.Utils.formatNumber = function (num, shortFormat) {
    var val = 0;

    if (nifti.Utils.isString(num)) {
        val = Number(num);
    } else {
        val = num;
    }

    if (shortFormat) {
        val = val.toPrecision(5);
    } else {
        val = val.toPrecision(7);
    }

    return parseFloat(val);
};



// http://stackoverflow.com/questions/18638900/javascript-crc32
nifti.Utils.makeCRCTable = function(){
    var c;
    var crcTable = [];
    for(var n =0; n < 256; n++){
        c = n;
        for(var k =0; k < 8; k++){
            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        crcTable[n] = c;
    }
    return crcTable;
};



nifti.Utils.crc32 = function(dataView) {
    var crcTable = nifti.Utils.crcTable || (nifti.Utils.crcTable = nifti.Utils.makeCRCTable());
    var crc = 0 ^ (-1);

    for (var i = 0; i < dataView.byteLength; i++ ) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xFF];
    }

    return (crc ^ (-1)) >>> 0;
};



/*** Exports ***/

var moduleType = typeof module;
if ((moduleType !== 'undefined') && module.exports) {
    module.exports = nifti.Utils;
}


/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./node_modules/nrrd-js/nrrd.js":
/*!**************************************!*\
  !*** ./node_modules/nrrd-js/nrrd.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var assert = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");

var lineSeparatorRE = /[ \f\t\v]*\r?\n/;
var NRRDMagicRE = /^NRRD\d{4}$/;
var lineRE = /^([^:]*)(:[ =])(.*)$/;
var dataFileListRE = /^LIST(?: (\d+))?$/;

// The minimal object this accepts is formed like this:
//   {data: SomeTypedArray, sizes: [...]}
// On the other hand, if data is not given it must have a form like this:
//   {buffer: SomeArrayBuffer, type: ..., endian: ..., sizes: [...]}
// Of course, if 'type' is an 8-bit type, endian is not needed, and if 'type' equals 'block', 'blockSize' should be set instead of 'endian'. In this case, no interpretation of buffer is done (at all, it is written serialized directly to the buffer).
// TODO: For now this only supports serializing "inline" files, or files for which you have already prepared the data.
module.exports.serialize = function (nrrdOrg) {
    var i, buffer, arr, totalLen = 1, nrrd = {}, prop, nativeType, nativeSize, bufferData, arrData, line, lines = [], header;

    // Copy nrrdOrg to nrrd to allow modifications without altering the original
    for(prop in nrrdOrg) {
        nrrd[prop] = nrrdOrg[prop];
    }

    // For saving files we allow inferring certain information if it is not explicitly given.
    // Also we normalize some fields to make our own lives easier.
    if (nrrd.sizes===undefined) { // 'sizes' should ALWAYS be given
        throw new Error("Sizes missing from NRRD file!");
    } else if (nrrd.dimension===undefined) {
        nrrd.dimension = nrrd.sizes.length;
    }
    if (nrrd.data instanceof Int8Array) {
        nativeType = "int8";
    } else if (nrrd.data instanceof Uint8Array) {
        nativeType = "uint8";
    } else if (nrrd.data instanceof Int16Array) {
        nativeType = "int16";
    } else if (nrrd.data instanceof Uint16Array) {
        nativeType = "uint16";
    } else if (nrrd.data instanceof Int32Array) {
        nativeType = "int32";
    } else if (nrrd.data instanceof Uint32Array) {
        nativeType = "uint32";
    //} else if (nrrd.data instanceof Int64Array) {
    //    nativeType = "int64";
    //} else if (nrrd.data instanceof Uint64Array) {
    //    nativeType = "uint64";
    } else if (nrrd.data instanceof Float32Array) {
        nativeType = "float";
    } else if (nrrd.data instanceof Float64Array) {
        nativeType = "double";
    }
    if (nrrd.type===undefined && nativeType!==undefined) {
        nrrd.type = nativeType;
    } else if (nrrd.type===undefined) {
        throw new Error("Type of data is not given and cannot be inferred!");
    } else if ((typeof nrrd.type) == "string" || nrrd.type instanceof String) {
        nrrd.type = parseNRRDType(nrrd.type);
    }
    if (nrrd.encoding===undefined) {
        nrrd.encoding = "raw";
    } else if ((typeof nrrd.encoding) == "string" || nrrd.encoding instanceof String) {
        nrrd.encoding = parseNRRDEncoding(nrrd.encoding);
    }
    if (nrrd.data && nrrd.type != 'block' && nrrd.type != 'int8' && nrrd.type != 'uint8' && nrrd.encoding != 'ascii') {
        nrrd.endian = systemEndianness;
    } else if (nrrd.type == 'block' || nrrd.type == 'int8' || nrrd.type == 'uint8' || nrrd.encoding == 'ascii') {
        nrrd.endian = undefined;
    } else if ((typeof nrrd.endian) == "string" || nrrd.endian instanceof String) {
        nrrd.endian = parseNRRDEndian(nrrd.endian);
    }

    // Try to infer spatial dimension
    var spaceDimension = undefined;
    if (nrrd.spaceDimension!==undefined) {
        spaceDimension = nrrd.spaceDimension;
    } else if (nrrd.space!==undefined) {
        switch(nrrd.space) {
        case "right-anterior-superior":
        case "RAS":
            spaceDimension = 3;
            break;
        case "left-anterior-superior":
        case "LAS":
            spaceDimension = 3;
            break;
        case "left-posterior-superior":
        case "LPS":
            spaceDimension = 3;
            break;
     	  case "right-anterior-superior-time":
     	  case "RAST":
     	      spaceDimension = 4;
     	      break;
        case "left-anterior-superior-time":
        case "LAST":
            spaceDimension = 4;
            break;
        case "left-posterior-superior-time":
        case "LPST":
            spaceDimension = 4;
            break;
        case "scanner-xyz":
            spaceDimension = 3;
            break;
        case "scanner-xyz-time":
            spaceDimension = 4;
            break;
        case "3D-right-handed":
            spaceDimension = 3;
            break;
        case "3D-left-handed":
            spaceDimension = 3;
            break;
        case "3D-right-handed-time":
            spaceDimension = 4;
            break;
        case "3D-left-handed-time":
            spaceDimension = 4;
            break;
        default:
            console.warn("Unrecognized space: " + nrrd.space);
        }
    }

    // Now check that we have a valid nrrd structure.
    checkNRRD(nrrd);

    // Determine number of elements and check that we have enough data (if possible)
    for(i=0; i<nrrd.sizes.length; i++) {
        if (nrrd.sizes[i]<=0) throw new Error("Sizes should be a list of positive (>0) integers!");
        totalLen *= nrrd.sizes[i];
    }
    if (nrrd.data) {
        if (nrrd.data.length < totalLen) {
            throw new Error("Missing data to serialize!");
        }
    } else if (nrrd.buffer) {
        if (nrrd.encoding == "raw") {
            if (nrrd.type=="block" && nrrd.blockSize!==undefined) {
                nativeSize = nrrd.blockSize;
            } else {
                nativeSize = getNRRDTypeSize(nrrd.type);
            }
            if (nrrd.buffer.byteLength < totalLen*nativeSize) {
                throw new Error("Missing data to serialize!");
            }
        }
    } else if (nrrd.dataFile) {
        // Okay, if you have your data ready, we'll just write a header.
    } else {
        throw new Error("Will not serialize an empty NRRD file!");
    }

    // Make sure we have the correct buffer in bufferData.
    if (nrrd.data) {
        switch(nrrd.encoding) {
        case 'raw':
            if (nrrd.type == nativeType && nrrd.endian == systemEndianness) {
                bufferData = nrrd.data.buffer.slice(nrrd.data.byteOffset, nrrd.data.byteOffset+nrrd.data.byteLength);
            } else if (nrrd.endian == systemEndianness) {
                bufferData = castTypedArray(nrrd.data, nrrd.type);
                bufferData = bufferData.buffer.slice(bufferData.byteOffset, bufferData.byteOffset+bufferData.byteLength);
            } else {
                bufferData = serializeToBuffer(nrrd.data, nrrd.type, nrrd.endian);
            }
            break;
        case 'ascii':
            if (nrrd.type == nativeType) {
                bufferData = serializeToTextBuffer(nrrd.data);
            } else {
                bufferData = serializeToTextBuffer(castTypedArray(nrrd.data, nrrd.type));
            }
            break;
        default:
            throw new Error("Unsupported NRRD encoding: " + nrrd.encoding);
        }
    } else if (nrrd.buffer) {
        bufferData = nrrd.buffer;
    }

    // Start header
    lines.push("NRRD0005"); // TODO: Adjust version based on features that are actually used and/or the version specified by the user (if any).
    lines.push("# Generated by nrrd-js");

    // Put in dimension and space dimension (the NRRD spec requires that these are present before any lists whose length depends on them)
    var firstProps = ['dimension', 'spaceDimension', 'space'];
    for(i=0; i<firstProps.length; i++) {
        prop = firstProps[i];
        if (nrrd[prop] === undefined) continue; // Skip things we explicitly set to undefined.
        line = serializeField(prop, nrrd[prop], nrrd.dimension, spaceDimension);
        if (line!==undefined) lines.push(line);
    }

    // Put in field specifications
    for(prop in nrrd) {
        if (nrrd[prop] === undefined) continue; // Skip things we explicitly set to undefined.
        if (firstProps.indexOf(prop)>=0) continue; // Skip the fields we already output.
        line = serializeField(prop, nrrd[prop], nrrd.dimension, spaceDimension);
        if (line!==undefined) lines.push(line);
    }

    // Put in keys (if any)
    if (nrrd.keys) for(prop in nrrd.keys) {
        if (prop.indexOf(":=")>=0) throw new Error("The combination ':=' is not allowed in an NRRD key!");
        lines.push(prop + ":=" + escapeValue(nrrd[prop]));
    }

    // Put in data file list (if any)
    if (nrrd.dataFile && nrrd.dataFile.length) {
        lines.push("data file: LIST");
        Array.prototype.push.apply(lines, nrrd.dataFile);
    } else if (nrrd.dataFile && nrrd.dataFile.files && 'subdim' in nrrd.dataFile) {
        lines.push("data file: LIST " + nrrd.dataFile.subdim);
        Array.prototype.push.apply(lines, nrrd.dataFile.files);
    }

    // Put in empty line and inline data (if we have inline data) and convert lines to buffer
    if (bufferData && !('dataFile' in nrrd)) {
        lines.push("");
        lines.push(""); // We actually need an extra blank line to make sure the previous is terminated.
        header = lines.join("\n");
        buffer = new ArrayBuffer(header.length + bufferData.byteLength);
        arr = new Uint8Array(buffer);
        for(i=0; i<header.length; i++) {
            arr[i] = header.charCodeAt(i);
        }
        arrData = new Uint8Array(bufferData);
        arr.set(arrData, header.length);
    } else {
        lines.push(""); // Blank line to at least terminate the last line.
        header = lines.join("\n");
        buffer = new ArrayBuffer(header.length);
        arr = new Uint8Array(buffer);
        for(i=0; i<header.length; i++) {
            arr[i] = header.charCodeAt(i);
        }
    }

    return buffer;
};

// This expects an ArrayBuffer.
module.exports.parse = function (buffer) {
    var i, header, dataStart, ret = {data: undefined/* parsed data */, buffer: undefined/* raw buffer holding data */, keys: {}, version: undefined},
        lines, match, match2,
        buf8 = new Uint8Array(buffer);

    // A work-around for incompatibilities between Node's Buffer and ArrayBuffer.
    if (buf8.buffer !== buffer) buffer = buf8.buffer;

    // First find the separation between the header and the data (if there is one)
    // Note that we need to deal with with LF and CRLF as possible line endings.
    // Luckily this means the line always ends with LF, so we only need to consider
    // LFLF and LFCRLF as patterns for the separating empty line.
    i=2; // It is safe to start at position 2 (in fact, we could start even later), as the file HAS to start with a magic word.
    while(i<buf8.length) {
        if (buf8[i] == 10) { // We hit an LF
            if (buf8[i-1] == 10 || (buf8[i-1] == 13 && buf8[i-2] == 10)) { // Safe because we start at position 2 and never move backwards
                dataStart = i+1;
                break;
            } else {
                i++; // Move forward just once
            }
        } else if (buf8[i] == 13) { // We hit a CR
            i++; // Move forward just once
        } else {
            i += 2; // Move forward two places,
        }
    }

    // Now split up the header and data
    if (dataStart === undefined) {
        header = String.fromCharCode.apply(null, buf8);
    } else {
        header = String.fromCharCode.apply(null, buf8.subarray(0,dataStart));
        ret.buffer = buffer.slice(dataStart);
    }

    // Split header into lines, remove comments (and blank lines) and check magic.
    // All remaining lines except the first should be field specifications or key/value pairs.
    // TODO: This explicitly removes any whitespace at the end of lines, however, I am not sure that this is actually desired behaviour for all kinds of lines.
    lines = header.split(lineSeparatorRE);
    lines = lines.filter(function (l) { return l.length>0 && l[0] != '#'; }); // Remove comment lines
    if (!NRRDMagicRE.test(lines[0])) {
        throw new Error("File is not an NRRD file!");
    }
    ret.version = parseInt(lines[0].substring(4, 8), 10);
    if (ret.version>5) {
        console.warn("Reading an unsupported version of the NRRD format; things may go haywire.");
    }

    // Parse lines
    for(i=1; i<lines.length; i++) {
        match = lineRE.exec(lines[i]);
        if (!match) {
            console.warn("Unrecognized line in NRRD header: " + lines[i]);
            continue;
        }
        if (match[2] == ': ') { // Field specification
            match[1] = mapNRRDToJavascript(match[1]);
            if ( match[1] == 'dataFile' &&
                 (match2 = dataFileListRE.exec(match[3]))) {
                // This should be the last field specification,
                // and the rest of the lines should contain file names.
                if (match2.length == 2 && match2[1]) { // subdim specification
                    ret[match[1]] = {
                        files: lines.slice(i+1),
                        subdim: parseNRRDInteger(match2[1])
                    };
                } else {
                    ret[match[1]] = lines.slice(i+1);
                }
                lines.length = i;
            } else {
                ret[match[1]] = parseField(match[1], match[3]);
            }
        } else if (match[2] == ':=') { // Key/value pair
            ret.keys[match[1]] = unescapeValue(match[3]);
        } else {
            throw new Error("Logic error in NRRD parser."); // This should never happen (unless the NRRD syntax is extended and the regexp is updated, but this section is not, or some other programmer error).
        }
    }

    // Make sure the file satisfies the requirements of the NRRD format
    checkNRRD(ret);

    // "Parse" data
    if ('dataFile' in ret) {
        console.warn("No support for external data yet!");
    } else {
        switch(ret.encoding) {
        case 'raw':
            ret.data = parseNRRDRawData(ret.buffer, ret.type, ret.sizes, {
                endian: ret.endian, blockSize: ret.blockSize
            });
            break;
        case 'ascii':
            ret.data = parseNRRDTextData(ret.buffer, ret.type, ret.sizes);
            break;
        default:
            console.warn("Unsupported NRRD encoding: " + ret.encoding);
        }
    }

    return ret;
};

function escapeValue(val) {
    return val.replace('\\', '\\\\').replace('\n', '\\n');
}

function unescapeValue(val) {
    return val.split('\\\\').map(
        function(s) { return s.replace('\\n', '\n'); }
        ).join('\\');
}

// Serializes NRRD fields
function serializeField(prop, value, dimension, spaceDimension) {
    var line;
    var propNRRD = mapJavascriptToNRRD(prop);
    switch(prop) {
    // nrrd-js stuff: skip
    case 'data':
    case 'buffer':
    case 'keys':
    case 'version':
        break;
    // Literal (uninterpreted) fields
    case 'content':
    case 'number':
    case 'sampleUnits':
    case 'space':
        line = propNRRD + ": " + value;
        break;
    // Integers (no infinity or whatever, just a plain integer, so the default serialization is good enough)
    case 'blockSize':
    case 'lineSkip':
    case 'byteSkip':
    case 'dimension':
    case 'spaceDimension':
        assert((typeof value) == "number" || value instanceof Number, "Field " + prop + " should at least contain a number!");
        line = propNRRD + ": " + value;
        break;
    // Floats (default serialization is good enough, as NaN contains nan, ignoring case, and similarly for Infinity inf)
    case 'min':
    case 'max':
    case 'oldMin':
    case 'oldMax':
        assert((typeof value) == "number" || value instanceof Number, "Field " + prop + " should contain a number!");
        line = propNRRD + ": " + value;
        break;
    // Vectors
    case 'spaceOrigin':
        assert(value.length === spaceDimension, "Field " + prop + " should be a list with length equal to the space dimension!");
        value.forEach(function (val) { assert((typeof val) == "number" || val instanceof Number, "Field " + prop + " should be a list of numbers!"); });
        line = propNRRD + ": (" + value.join(",") + ")";
        break;
    // Lists of strings
    case 'labels':
    case 'units':
    case 'spaceUnits':
        assert(value.length !== undefined && value.length == dimension, "Field " + prop + " should be a list with length equal to the dimension!");
        value.forEach(function (val) { assert((typeof val) == "string" || val instanceof String, "Field " + prop + " should be a list of numbers!"); });
        line = propNRRD + ": " + value.map(serializeNRRDQuotedString).join(" ");
        break;
    // Lists of integers
    case 'sizes':
        assert(value.length !== undefined && value.length == dimension, "Field " + prop + " should be a list with length equal to the dimension!");
        value.forEach(function (val) { assert((typeof val) == "number" || val instanceof Number, "Field " + prop + " should be a list of numbers!"); });
        line = propNRRD + ": " + value.join(" ");
        break;
    // Lists of floats
    case 'spacings':
    case 'thicknesses':
    case 'axisMins':
    case 'axisMaxs':
        assert(value.length !== undefined && value.length == dimension, "Field " + prop + " should be a list with length equal to the dimension!");
        value.forEach(function (val) { assert((typeof val) == "number" || val instanceof Number, "Field " + prop + " should be a list of numbers!"); });
        line = propNRRD + ": " + value.join(" ");
        break;
    // Lists of vectors (dimension sized)
    case 'spaceDirections':
        assert(value.length !== undefined && value.length === dimension, "Field " + prop + " should be a list with length equal to the dimension!");
        value.forEach(function (vec) {
          assert(vec === null || (vec.length !== undefined && vec.length === spaceDimension), "The elements of field " + prop + " should be lists with length equal to the space dimension!");
          if (vec !== null) vec.forEach(function (val) { assert((typeof val) == "number" || val instanceof Number, "The elements of field " + prop + " should be lists of numbers!"); });
        });
        line = propNRRD + ": " + value.map(function(vec) { return vec === null ? "none" : ("(" + vec.join(",") + ")"); }).join(" ");
        break;
    // Lists of vectors (space dimension sized)
    case 'measurementFrame':
        assert(value.length !== undefined && value.length === spaceDimension, "Field " + prop + " should be a list with length equal to the space dimension!");
        value.forEach(function (vec) {
          assert(vec === null || (vec.length !== undefined && vec.length === spaceDimension), "The elements of field " + prop + " should be lists with length equal to the space dimension!");
          if (vec !== null) vec.forEach(function (val) { assert((typeof val) == "number" || val instanceof Number, "The elements of field " + prop + " should be lists of numbers!"); });
        });
        line = propNRRD + ": " + value.map(function(vec) { return vec === null ? "none" : ("(" + vec.join(",") + ")"); }).join(" ");
        break;
    // One-of-a-kind fields
    case 'type':
        assert((typeof value) == "string" || value instanceof String, "Field " + prop + " should contain a string!");
        line = propNRRD + ": " + value;
        break;
    case 'encoding':
        assert((typeof value) == "string" || value instanceof String, "Field " + prop + " should contain a string!");
        line = propNRRD + ": " + value;
        break;
    case 'endian':
        assert((typeof value) == "string" || value instanceof String, "Field " + prop + " should contain a string!");
        line = propNRRD + ": " + value;
        break;
    case 'dataFile':
        if (value.length || (value.files && 'subdim' in value)) {
            // List of data files: skip for now
        } else {
            line = propNRRD + ": " + serializeNRRDDataFile(value);
        }
        break;
    case 'centers':
        assert(value.length !== undefined && value.length == dimension, "Field " + prop + " should be a list with length equal to the dimension!");
        line = propNRRD + ": " + value.map(serializeNRRDOptional).join(" ");
        break;
    case 'kinds':
        assert(value.length !== undefined && value.length == dimension, "Field " + prop + " should be a list with length equal to the dimension!");
        line = propNRRD + ": " + value.map(serializeNRRDOptional).join(" ");
        break;
    // Something unknown
    default:
        console.warn("Unrecognized NRRD field: " + prop + ", skipping.");
    }
    return line;
}

// Parses and normalizes NRRD fields, assumes the field names are already lower case.
function parseField(identifier, descriptor) {
    switch(identifier) {
    // Literal (uninterpreted) fields
    case 'content':
    case 'number':
    case 'sampleUnits':
        break;
    // Integers
    case 'dimension':
    case 'blockSize':
    case 'lineSkip':
    case 'byteSkip':
    case 'spaceDimension':
        descriptor = parseNRRDInteger(descriptor);
        break;
    // Floats
    case 'min':
    case 'max':
    case 'oldMin':
    case 'oldMax':
        descriptor = parseNRRDFloat(descriptor);
        break;
    // Vectors
    case 'spaceOrigin':
        descriptor = parseNRRDVector(descriptor);
        break;
    // Lists of strings
    case 'labels':
    case 'units':
    case 'spaceUnits':
        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDQuotedString);
        break;
    // Lists of integers
    case 'sizes':
        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDInteger);
        break;
    // Lists of floats
    case 'spacings':
    case 'thicknesses':
    case 'axisMins':
    case 'axisMaxs':
        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDFloat);
        break;
    // Lists of vectors
    case 'spaceDirections':
    case 'measurementFrame':
        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDVector);
        break;
    // One-of-a-kind fields
    case 'type':
        descriptor = parseNRRDType(descriptor);
        break;
    case 'encoding':
        descriptor = parseNRRDEncoding(descriptor);
        break;
    case 'endian':
        descriptor = parseNRRDEndian(descriptor);
        break;
    case 'dataFile':
        descriptor = parseNRRDDataFile(descriptor);
        break;
    case 'centers':
        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDCenter);
        break;
    case 'kinds':
        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDKind);
        break;
    case 'space':
        descriptor = parseNRRDSpace(descriptor);
        break;
    // Something unknown
    default:
        console.warn("Unrecognized NRRD field: " + identifier);
    }
    return descriptor;
}

// This only includes names whose lower case form is different from the Javascript form.
var mapNRRDToJavascriptStatic = {
    'block size': 'blockSize',
    'blocksize': 'blockSize',
    'old min': 'oldMin',
    'oldmin': 'oldMin',
    'old max': 'oldMax',
    'oldmax': 'oldMax',
    'data file': 'dataFile',
    'datafile': 'dataFile',
    'line skip': 'lineSkip',
    'lineskip': 'lineSkip',
    'byte skip': 'byteSkip',
    'byteskip': 'byteSkip',
    'sample units': 'sampleUnits',
    'sampleunits': 'sampleUnits',
    'axis mins': 'axisMins',
    'axis maxs': 'axisMaxs',
    'centers': 'centers', // Not different, just included so it is clear why centerings maps to centers
    'centerings': 'centers',
    'space dimension': 'spaceDimension',
    'space units': 'spaceUnits',
    'space origin': 'spaceOrigin',
    'space directions': 'spaceDirections',
    'measurement frame': 'measurementFrame'
};
var mapJavascriptToNRRDStatic = function() {
  var id, m = {};
  for(id in mapNRRDToJavascriptStatic) {
    m[mapNRRDToJavascriptStatic[id]] = id;
  }
  return m;
}();
function mapNRRDToJavascript(id) {
    // In any case, use the lower case version of the id
    id = id.toLowerCase();
    // Filter out any fields for which we have an explicit Javascript name
    if (id in mapNRRDToJavascriptStatic) return mapNRRDToJavascriptStatic[id];
    // Otherwise, just return the (lower case) id
    return id;
}
function mapJavascriptToNRRD(id) {
    // Filter out any fields for which we have an explicit NRRD name
    if (id in mapJavascriptToNRRDStatic) return mapJavascriptToNRRDStatic[id];
    // Otherwise, just return the id
    return id;
}

function parseNRRDInteger(str) {
    var val = parseInt(str, 10);
    if (Number.isNaN(val)) throw new Error("Malformed NRRD integer: " + str);
    return val;
}

function parseNRRDFloat(str) {
    str = str.toLowerCase();
    if (str.indexOf('nan')>=0) return NaN;
    if (str.indexOf('-inf')>=0) return -Infinity;
    if (str.indexOf('inf')>=0) return Infinity;
    var val = parseFloat(str);
    if (Number.isNaN(val)) throw new Error("Malformed NRRD float: " + str);
    return val;
}

function parseNRRDVector(str) {
    if (str == "none") return null;
    if (str.length<2 || str[0]!=="(" || str[str.length-1]!==")") throw new Error("Malformed NRRD vector: " + str);
    return str.slice(1, -1).split(",").map(parseNRRDFloat);
}

function parseNRRDQuotedString(str) {
    if (length<2 || str[0]!='"' || str[str.length-1]!='"') {
        throw new Error("Invalid NRRD quoted string: " + str);
    }
    return str.slice(1, -1).replace('\\"', '"');
}

function serializeNRRDQuotedString(str) {
    return '"' + str.replace('"', '\\"') + '"';
}

var whitespaceListSeparator = /[ \t]+/; // Note that this excludes other types of whitespace on purpose!
function parseNRRDWhitespaceSeparatedList(str, parseElement) {
    return str.split(whitespaceListSeparator).map(parseElement);
}

function parseNRRDType(descriptor) {
    switch(descriptor.toLowerCase()) {
    case "signed char":
    case "int8":
    case "int8_t":
        return 'int8';
    case "uchar":
    case "unsigned char":
    case "uint8":
    case "uint8_t":
        return 'uint8';
    case "short":
    case "short int":
    case "signed short":
    case "signed short int":
    case "int16":
    case "int16_t":
        return 'int16';
    case "ushort":
    case "unsigned short":
    case "unsigned short int":
    case "uint16":
    case "uint16_t":
        return 'uint16';
    case "int":
    case "signed int":
    case "int32":
    case "int32_t":
        return 'int32';
    case "uint":
    case "unsigned int":
    case "uint32":
    case "uint32_t":
        return 'uint32';
    case "longlong":
    case "long long":
    case "long long int":
    case "signed long long":
    case "signed long long int":
    case "int64":
    case "int64_t":
        return 'int64';
    case "ulonglong":
    case "unsigned long long":
    case "unsigned long long int":
    case "uint64":
    case "uint64_t":
        return 'uint64';
    case "float":
        return 'float';
    case "double":
        return 'double';
    case "block":
        return 'block';
    default:
        console.warn("Unrecognized NRRD type: " + descriptor);
        return descriptor;
    }
}

function parseNRRDEncoding(encoding) {
    switch(encoding.toLowerCase()) {
    case "raw":
        return "raw";
    case "txt":
    case "text":
    case "ascii":
        return "ascii";
    case "hex":
        return "hex";
    case "gz":
    case "gzip":
        return "gzip";
    case "bz2":
    case "bzip2":
        return "bzip2";
    default:
        console.warn("Unrecognized NRRD encoding: " + encoding);
        return encoding;
    }
}

function parseNRRDSpace(space) {
    switch(space.toLowerCase()) {
    case "right-anterior-superior":
    case "ras":
        return "right-anterior-superior";
    case "left-anterior-superior":
    case "las":
        return "left-anterior-superior";
    case "left-posterior-superior":
    case "lps":
        return "left-posterior-superior";
 	  case "right-anterior-superior-time":
 	  case "rast":
        return "right-anterior-superior-time";
    case "left-anterior-superior-time":
    case "last":
        return "left-anterior-superior-time";
    case "left-posterior-superior-time":
    case "lpst":
        return "left-posterior-superior-time";
    case "scanner-xyz":
        return "scanner-xyz";
    case "scanner-xyz-time":
        return "scanner-xyz-time";
    case "3d-right-handed":
        return "3D-right-handed";
    case "3d-left-handed":
        return "3D-left-handed";
    case "3d-right-handed-time":
        return "3D-right-handed-time";
    case "3d-left-handed-time":
        return "3D-left-handed-time";
    default:
        console.warn("Unrecognized space: " + space);
        return space;
    }
}

function parseNRRDEndian(endian) {
    switch(endian.toLowerCase()) {
    case 'little':
        return 'little';
    case 'big':
        return 'big';
    default:
        console.warn("Unrecognized NRRD endianness: " + endian);
        return endian;
    }
}

// Note that this function will never encounter the LIST data file specification format, as this is handled elsewhere.
var dataFileFormatRE = / (-?\d+) (-?\d+) (-?\d+)(?: (\d+))?$/;
function parseNRRDDataFile(dataFile) {
    var match = dataFileFormatRE.exec(dataFile);
    if (match) { // We have a format specification
        if (match.length == 5 && match[4]) { // subdim specification
            return {
                format: dataFile.substring(0, match.index),
                min: parseNRRDInteger(match[1]),
                max: parseNRRDInteger(match[2]),
                step: parseNRRDInteger(match[3]),
                subdim: parseNRRDInteger(match[4])
            };
        } else {
            return {
                format: dataFile.substring(0, match.index),
                min: parseNRRDInteger(match[1]),
                max: parseNRRDInteger(match[2]),
                step: parseNRRDInteger(match[3])
            };
        }
    } else { // Just a file
        return dataFile;
    }
}

function serializeNRRDDataFile(dataFile) {
    if ((typeof dataFile) == "string" || dataFile instanceof String) {
        return dataFile;
    } else if ('format' in dataFile && 'min' in dataFile && 'max' in dataFile && 'step' in dataFile) {
        if ('subdim' in dataFile) {
            return dataFile.format + " " + dataFile.min + " " + dataFile.max + " " + dataFile.step + " " + dataFile.subdim;
        } else {
            return dataFile.format + " " + dataFile.min + " " + dataFile.max + " " + dataFile.step;
        }
    } else {
        throw new Error("Unrecognized data file format!");
    }
}

function parseNRRDCenter(center) {
    switch(center.toLowerCase()) {
    case "cell":
        return "cell";
    case "node":
        return "node";
    case "???":
    case "none":
        return null;
    default:
        console.warn("Unrecognized NRRD center: " + center);
        return center;
    }
}

var NRRDKinds = {
    "domain": "domain",
    "space": "space",
    "time": "time",
    "list": "list",
    "point": "point",
    "vector": "vector",
    "covariant-vector": "covariant-vector",
    "normal": "normal",
    "stub": "stub",
    "scalar": "scalar",
    "complex": "complex",
    "2-vector": "2-vector",
    "3-color": "3-color",
    "rgb-color": "RGB-color",
    "hsv-color": "HSV-color",
    "xyz-color": "XYZ-color",
    "4-color": "4-color",
    "rgba-color": "RGBA-color",
    "3-vector": "3-vector",
    "3-gradient": "3-gradient",
    "3-normal": "3-normal",
    "4-vector": "4-vector",
    "quaternion": "quaternion",
    "2d-symmetric-matrix": "2D-symmetric-matrix",
    "2d-masked-symmetric-matrix": "2D-masked-symmetric-matrix",
    "2d-matrix": "2D-matrix",
    "2d-masked-matrix": "2D-masked-matrix",
    "3d-symmetric-matrix": "3D-symmetric-matrix",
    "3d-masked-symmetric-matrix": "3D-masked-symmetric-matrix",
    "3d-matrix": "3D-matrix",
    "3d-masked-matrix": "3D-masked-matrix",
    "???": null,
    "none": null
};
function parseNRRDKind(kind) {
    var kindLC = kind.toLowerCase();
    if (kindLC in NRRDKinds) return NRRDKinds[kindLC];
    console.warn("Unrecognized NRRD kind: " + kind);
    return kind;
}

function serializeNRRDOptional(a) {
    return a===null ? "???" : a;
}

var systemEndianness = (function() {
    var buf = new ArrayBuffer(4),
        intArr = new Uint32Array(buf),
        byteArr = new Uint8Array(buf);
    intArr[0] = 0x01020304;
    if (byteArr[0]==1 && byteArr[1]==2 && byteArr[2]==3 && byteArr[3]==4) {
        return 'big';
    } else if (byteArr[0]==4 && byteArr[1]==3 && byteArr[2]==2 && byteArr[3]==1) {
        return 'little';
    }
    console.warn("Unrecognized system endianness!");
    return undefined;
})();

function parseNRRDRawData(buffer, type, sizes, options) {
    var i, arr, view, totalLen = 1, endianFlag;
    for(i=0; i<sizes.length; i++) {
        if (sizes[i]<=0) throw new Error("Sizes should be a list of positive (>0) integers!");
        totalLen *= sizes[i];
    }
    if (type == 'block') {
        // Don't do anything special, just return the slice containing all blocks.
        return buffer.slice(0,totalLen*options.blockSize);
    } else if (type == 'int8' || type == 'uint8' || options.endian == systemEndianness) {
        switch(type) {
        case "int8":
            checkSize(1);
            return new Int8Array(buffer.slice(0,totalLen));
        case "uint8":
            checkSize(1);
            return new Uint8Array(buffer.slice(0,totalLen));
        case "int16":
            checkSize(2);
            return new Int16Array(buffer.slice(0,totalLen*2));
        case "uint16":
            checkSize(2);
            return new Uint16Array(buffer.slice(0,totalLen*2));
        case "int32":
            checkSize(4);
            return new Int32Array(buffer.slice(0,totalLen*4));
        case "uint32":
            checkSize(4);
            return new Uint32Array(buffer.slice(0,totalLen*4));
        //case "int64":
        //    checkSize(8);
        //    return new Int64Array(buffer.slice(0,totalLen*8));
        //case "uint64":
        //    checkSize(8);
        //    return new Uint64Array(buffer.slice(0,totalLen*8));
        case "float":
            checkSize(4);
            return new Float32Array(buffer.slice(0,totalLen*4));
        case "double":
            checkSize(8);
            return new Float64Array(buffer.slice(0,totalLen*8));
        default:
            console.warn("Unsupported NRRD type: " + type + ", returning raw buffer.");
            return undefined;
        }
    } else {
        switch(options.endian) {
        case 'big':
            endianFlag = false;
            break;
        case 'little':
            endianFlag = true;
            break;
        default:
            console.warn("Unsupported endianness in NRRD file: " + options.endian);
            return undefined;
        }
        view = new DataView(buffer);
        switch(type) {
        case "int8": // Note that here we do not need to check the size of the buffer, as the DataView.get methods should throw an exception if we read beyond the buffer.
            arr = new Int8Array(totalLen);
            for(i=0; i<totalLen; i++) {
                arr[i] = view.getInt8(i);
            }
            return arr;
        case "uint8":
            arr = new Uint8Array(totalLen);
            for(i=0; i<totalLen; i++) {
                arr[i] = view.getUint8(i);
            }
            return arr;
        case "int16":
            arr = new Int16Array(totalLen);
            for(i=0; i<totalLen; i++) {
                arr[i] = view.getInt16(i*2);
            }
            return arr;
        case "uint16":
            arr = new Uint16Array(totalLen);
            for(i=0; i<totalLen; i++) {
                arr[i] = view.getUint16(i*2);
            }
            return arr;
        case "int32":
            arr = new Int32Array(totalLen);
            for(i=0; i<totalLen; i++) {
                arr[i] = view.getInt32(i*4);
            }
            return arr;
        case "uint32":
            arr = new Uint32Array(totalLen);
            for(i=0; i<totalLen; i++) {
                arr[i] = view.getUint32(i*4);
            }
            return arr;
        //case "int64":
        //    arr = new Int64Array(totalLen);
        //    for(i=0; i<totalLen; i++) {
        //        arr[i] = view.getInt64(i*8);
        //    }
        //    return arr;
        //case "uint64":
        //    arr = new Uint64Array(totalLen);
        //    for(i=0; i<totalLen; i++) {
        //        arr[i] = view.getUint64(i*8);
        //    }
        //    return arr;
        case "float":
            arr = new Float32Array(totalLen);
            for(i=0; i<totalLen; i++) {
                arr[i] = view.getFloat32(i*4);
            }
            return arr;
        case "double":
            arr = new Float64Array(totalLen);
            for(i=0; i<totalLen; i++) {
                arr[i] = view.getFloat64(i*8);
            }
            return arr;
        default:
            console.warn("Unsupported NRRD type: " + type + ", returning raw buffer.");
            return undefined;
        }
    }
    function checkSize(sizeOfType) {
        if (buffer.byteLength<totalLen*sizeOfType) throw new Error("NRRD file does not contain enough data!");
    }
}

var whitespaceDataValueListSeparatorRE = /[ \t\n\r\v\f]+/;
function parseNRRDTextData(buffer, type, sizes) {
    var i, buf8, str, strList, totalLen = 1;
    for(i=0; i<sizes.length; i++) {
        if (sizes[i]<=0) throw new Error("Sizes should be a list of positive (>0) integers!");
        totalLen *= sizes[i];
    }
    buf8 = new Uint8Array(buffer);
    str = String.fromCharCode.apply(null, buf8);
    strList = str.split(whitespaceDataValueListSeparatorRE);
    if (strList.length<totalLen) {
        throw new Error("Not enough data in NRRD file!");
    } else if (strList.length>totalLen) {
        if (strList[0] === '') strList = strList.slice(1); // Strictly speaking the spec doesn't (explicitly) allow whitespace in front of the first number, but let's be lenient.
        strList = strList.slice(0, totalLen);
    }
    switch(type) {
    case "int8":
        return new Int8Array(strList.map(parseNRRDInteger));
    case "uint8":
        return new Uint8Array(strList.map(parseNRRDInteger));
    case "int16":
        return new Int16Array(strList.map(parseNRRDInteger));
    case "uint16":
        return new Uint16Array(strList.map(parseNRRDInteger));
    case "int32":
        return new Int32Array(strList.map(parseNRRDInteger));
    case "uint32":
        return new Uint32Array(strList.map(parseNRRDInteger));
    //case "int64":
    //    return new Int64Array(strList.map(parseNRRDInteger));
    //case "uint64":
    //    return new Uint64Array(strList.map(parseNRRDInteger));
    case "float":
        return new Float32Array(strList.map(parseNRRDFloat));
    case "double":
        return new Float64Array(strList.map(parseNRRDFloat));
    default:
        console.warn("Unsupported NRRD type: " + type + ".");
        return undefined;
    }
}

// This ALWAYS returns an integer, or throws an exception.
function getNRRDTypeSize(type) {
    switch(type) {
    case "int8":
        return 1;
    case "uint8":
        return 1;
    case "int16":
        return 2;
    case "uint16":
        return 2;
    case "int32":
        return 4;
    case "uint32":
        return 4;
    case "int64":
        return 8;
    case "uint64":
        return 8;
    case "float":
        return 4;
    case "double":
        return 8;
    default:
        throw new Error("Do not know the size of NRRD type: " + type);
    }
}

function checkNRRD(ret) {
    // Always necessary fields
    if (ret.dimension===undefined) {
        throw new Error("Dimension missing from NRRD file!");
    } else if (ret.type===undefined) {
        throw new Error("Type missing from NRRD file!");
    } else if (ret.encoding===undefined) {
        throw new Error("Encoding missing from NRRD file!");
    } else if (ret.sizes===undefined) {
        throw new Error("Sizes missing from NRRD file!");
    }

    // Sometimes necessary fields
    if (ret.type != 'block' && ret.type != 'int8' && ret.type != 'uint8' &&
          ret.encoding != 'ascii' && ret.endian === undefined) {
        throw new Error("Endianness missing from NRRD file!");
    } else if (ret.type == 'block' && ret.blockSize === undefined) {
        throw new Error("Missing block size in NRRD file!");
    }

    // Check dimension and per-axis field lengths
    if (ret.dimension === 0) {
        throw new Error("Zero-dimensional NRRD file?");
    } else if (ret.dimension != ret.sizes.length) {
        throw new Error("Length of 'sizes' is different from 'dimension' in an NRRD file!");
    } else if (ret.spacings && ret.dimension != ret.spacings.length) {
        throw new Error("Length of 'spacings' is different from 'dimension' in an NRRD file!");
    } else if (ret.thicknesses && ret.dimension != ret.thicknesses.length) {
        throw new Error("Length of 'thicknesses' is different from 'dimension' in an NRRD file!");
    } else if (ret.axisMins && ret.dimension != ret.axisMins.length) {
        throw new Error("Length of 'axis mins' is different from 'dimension' in an NRRD file!");
    } else if (ret.axisMaxs && ret.dimension != ret.axisMaxs.length) {
        throw new Error("Length of 'axis maxs' is different from 'dimension' in an NRRD file!");
    } else if (ret.centers && ret.dimension != ret.centers.length) {
        throw new Error("Length of 'centers' is different from 'dimension' in an NRRD file!");
    } else if (ret.labels && ret.dimension != ret.labels.length) {
        throw new Error("Length of 'labels' is different from 'dimension' in an NRRD file!");
    } else if (ret.units && ret.dimension != ret.units.length) {
        throw new Error("Length of 'units' is different from 'dimension' in an NRRD file!");
    } else if (ret.kinds && ret.dimension != ret.kinds.length) {
        throw new Error("Length of 'kinds' is different from 'dimension' in an NRRD file!");
    }

    // TODO: Check space/orientation fields.

    // We should either have inline data or external data
    if ((ret.data === undefined || ret.data.length === 0) && (ret.buffer === undefined || ret.buffer.byteLength === 0) && ret.dataFile === undefined) {
        throw new Error("NRRD file has neither inline or external data!");
    }
}

function castTypedArray(data, type) {
    switch(type) {
    case "int8":
        return new Int8Array(data);
    case "uint8":
        return new Uint8Array(data);
    case "int16":
        return new Int16Array(data);
    case "uint16":
        return new Uint16Array(data);
    case "int32":
        return new Int32Array(data);
    case "uint32":
        return new Uint32Array(data);
    //case "int64":
    //    return new Int64Array(data);
    //case "uint64":
    //    return new Uint64Array(data);
    case "float":
        return new Float32Array(data);
    case "double":
        return new Float64Array(data);
    default:
        throw new Error("Cannot cast to NRRD type: " + type);
    }
}

function serializeToBuffer(data, type, endian) {
    var i, endianFlag, view, nativeSize = getNRRDTypeSize(type), buffer = new ArrayBuffer(data.length*nativeSize);
    switch(endian) {
    case 'big':
        endianFlag = false;
        break;
    case 'little':
        endianFlag = true;
        break;
    default:
        console.warn("Unsupported endianness in NRRD file: " + endian);
        return undefined;
    }
    view = new DataView(buffer);
    switch(type) {
    case "int8": // Note that here we do not need to check the size of the buffer, as the DataView.get methods should throw an exception if we read beyond the buffer.
        for(i=0; i<data.length; i++) {
            view.setInt8(i, data[i], endianFlag);
        }
        return buffer;
    case "uint8":
        for(i=0; i<data.length; i++) {
            view.setUint8(i, data[i], endianFlag);
        }
        return buffer;
    case "int16":
        for(i=0; i<data.length; i++) {
            view.setInt16(i*2, data[i], endianFlag);
        }
        return buffer;
    case "uint16":
        for(i=0; i<data.length; i++) {
            view.setUint16(i*2, data[i], endianFlag);
        }
        return buffer;
    case "int32":
        for(i=0; i<data.length; i++) {
            view.setInt32(i*4, data[i], endianFlag);
        }
        return buffer;
    case "uint32":
        for(i=0; i<data.length; i++) {
            view.setUint32(i*4, data[i], endianFlag);
        }
        return buffer;
    //case "int64":
    //    for(i=0; i<data.length; i++) {
    //        view.setInt64(i*8, data[i], endianFlag);
    //    }
    //    return buffer;
    //case "uint64":
    //    for(i=0; i<data.length; i++) {
    //        view.setUint64(i*8, data[i], endianFlag);
    //    }
    //    return buffer;
    case "float":
        for(i=0; i<data.length; i++) {
            view.setFloat32(i*4, data[i], endianFlag);
        }
        return buffer;
    case "double":
        for(i=0; i<data.length; i++) {
            view.setFloat64(i*8, data[i], endianFlag);
        }
        return buffer;
    default:
        console.warn("Cannot serialize NRRD type: " + type + ".");
        return undefined;
    }
}

function serializeToTextBuffer(data) {
    var i, strs = new Array(data.length), str, buffer, arr;
    for(i=0; i<data.length; i++) {
        strs[i] = '' + data[i];
    }
    str = strs.join(" ");
    buffer = new ArrayBuffer(str.length);
    arr = new Uint8Array(buffer);
    for(i=0; i<arr.length; i++) {
        arr[i] = str.charCodeAt(i);
    }
    return buffer;
}


/***/ }),

/***/ "./node_modules/pako/index.js":
/*!************************************!*\
  !*** ./node_modules/pako/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Top level file is just a mixin of submodules & constants


var assign    = __webpack_require__(/*! ./lib/utils/common */ "./node_modules/pako/lib/utils/common.js").assign;

var deflate   = __webpack_require__(/*! ./lib/deflate */ "./node_modules/pako/lib/deflate.js");
var inflate   = __webpack_require__(/*! ./lib/inflate */ "./node_modules/pako/lib/inflate.js");
var constants = __webpack_require__(/*! ./lib/zlib/constants */ "./node_modules/pako/lib/zlib/constants.js");

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;


/***/ }),

/***/ "./node_modules/pako/lib/deflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/deflate.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ "./node_modules/pako/lib/zlib/deflate.js");
var utils        = __webpack_require__(/*! ./utils/common */ "./node_modules/pako/lib/utils/common.js");
var strings      = __webpack_require__(/*! ./utils/strings */ "./node_modules/pako/lib/utils/strings.js");
var msg          = __webpack_require__(/*! ./zlib/messages */ "./node_modules/pako/lib/zlib/messages.js");
var ZStream      = __webpack_require__(/*! ./zlib/zstream */ "./node_modules/pako/lib/zlib/zstream.js");

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;


/***/ }),

/***/ "./node_modules/pako/lib/inflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/inflate.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ "./node_modules/pako/lib/zlib/inflate.js");
var utils        = __webpack_require__(/*! ./utils/common */ "./node_modules/pako/lib/utils/common.js");
var strings      = __webpack_require__(/*! ./utils/strings */ "./node_modules/pako/lib/utils/strings.js");
var c            = __webpack_require__(/*! ./zlib/constants */ "./node_modules/pako/lib/zlib/constants.js");
var msg          = __webpack_require__(/*! ./zlib/messages */ "./node_modules/pako/lib/zlib/messages.js");
var ZStream      = __webpack_require__(/*! ./zlib/zstream */ "./node_modules/pako/lib/zlib/zstream.js");
var GZheader     = __webpack_require__(/*! ./zlib/gzheader */ "./node_modules/pako/lib/zlib/gzheader.js");

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = strings.string2buf(dictionary);
      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = zlib_inflate.inflateSetDictionary(this.strm, dict);

    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;


/***/ }),

/***/ "./node_modules/pako/lib/utils/common.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);


/***/ }),

/***/ "./node_modules/pako/lib/utils/strings.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/utils/strings.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// String encode/decode helpers



var utils = __webpack_require__(/*! ./common */ "./node_modules/pako/lib/utils/common.js");


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/adler32.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/crc32.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/deflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/deflate.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils   = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");
var trees   = __webpack_require__(/*! ./trees */ "./node_modules/pako/lib/zlib/trees.js");
var adler32 = __webpack_require__(/*! ./adler32 */ "./node_modules/pako/lib/zlib/adler32.js");
var crc32   = __webpack_require__(/*! ./crc32 */ "./node_modules/pako/lib/zlib/crc32.js");
var msg     = __webpack_require__(/*! ./messages */ "./node_modules/pako/lib/zlib/messages.js");

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  s.d_buf = s.lit_bufsize >> 1;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/


/***/ }),

/***/ "./node_modules/pako/lib/zlib/gzheader.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/gzheader.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inffast.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var utils         = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");
var adler32       = __webpack_require__(/*! ./adler32 */ "./node_modules/pako/lib/zlib/adler32.js");
var crc32         = __webpack_require__(/*! ./crc32 */ "./node_modules/pako/lib/zlib/crc32.js");
var inflate_fast  = __webpack_require__(/*! ./inffast */ "./node_modules/pako/lib/zlib/inffast.js");
var inflate_table = __webpack_require__(/*! ./inftrees */ "./node_modules/pako/lib/zlib/inftrees.js");

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inftrees.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var utils = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i = 0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/messages.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/trees.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/trees.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var utils = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/zstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/three/package.json":
/*!*****************************************!*\
  !*** ./node_modules/three/package.json ***!
  \*****************************************/
/*! exports provided: name, version, description, main, repository, jsnext:main, module, files, directories, eslintConfig, scripts, keywords, author, license, bugs, homepage, devDependencies, jspm, default */
/***/ (function(module) {

module.exports = {"name":"three","version":"0.99.0","description":"JavaScript 3D library","main":"build/three.js","repository":"mrdoob/three.js","jsnext:main":"build/three.module.js","module":"build/three.module.js","files":["package.json","LICENSE","README.md","build/three.js","build/three.min.js","build/three.module.js","src","examples/js","examples/fonts"],"directories":{"doc":"docs","example":"examples","test":"test"},"eslintConfig":{"extends":"mdcs","plugins":["html"]},"scripts":{"build":"rollup -c","build-test":"rollup -c test/rollup.unit.config.js","build-closure":"rollup -c && java -jar node_modules/google-closure-compiler-java/compiler.jar --warning_level=VERBOSE --jscomp_off=globalThis --jscomp_off=checkTypes --externs utils/build/externs.js --language_in=ECMASCRIPT5_STRICT --js build/three.js --js_output_file build/three.min.js","dev":"concurrently --names \"ROLLUP,HTTP\" -c \"bgBlue.bold,bgGreen.bold\" \"rollup -c -w -m inline\" \"http-server -c-1 -p 8080\"","dev-test":"concurrently --names \"ROLLUP,ROLLUPTEST,HTTP\" -c \"bgBlue.bold,bgRed.bold,bgGreen.bold\" \"rollup -c -w -m inline\" \"rollup -c test/rollup.unit.config.js -w -m inline\" \"http-server -p 8080\"","start":"npm run dev","lint":"eslint src","test":"npm run build-test && qunit test/unit/three.source.unit.js","travis":"npm run lint && npm test","editor":"electron ./editor/main.js"},"keywords":["three","three.js","3d","webgl"],"author":"mrdoob","license":"MIT","bugs":{"url":"https://github.com/mrdoob/three.js/issues"},"homepage":"https://threejs.org/","devDependencies":{"concurrently":"^4.0.1","electron":"^3.0.8","eslint":"^5.9.0","eslint-config-mdcs":"^4.2.3","eslint-plugin-html":"^5.0.0","google-closure-compiler":"20181028.0.1","http-server":"^0.11.1","qunit":"^2.8.0","rollup":"^0.67.1"},"jspm":{"files":["package.json","LICENSE","README.md","build/three.js","build/three.min.js","build/three.module.js"],"directories":{}}};

/***/ }),

/***/ "./node_modules/three/src/constants.js":
/*!*********************************************!*\
  !*** ./node_modules/three/src/constants.js ***!
  \*********************************************/
/*! exports provided: REVISION, MOUSE, CullFaceNone, CullFaceBack, CullFaceFront, CullFaceFrontBack, FrontFaceDirectionCW, FrontFaceDirectionCCW, BasicShadowMap, PCFShadowMap, PCFSoftShadowMap, FrontSide, BackSide, DoubleSide, FlatShading, SmoothShading, NoColors, FaceColors, VertexColors, NoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstAlphaFactor, OneMinusDstAlphaFactor, DstColorFactor, OneMinusDstColorFactor, SrcAlphaSaturateFactor, NeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth, MultiplyOperation, MixOperation, AddOperation, NoToneMapping, LinearToneMapping, ReinhardToneMapping, Uncharted2ToneMapping, CineonToneMapping, ACESFilmicToneMapping, UVMapping, CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping, SphericalReflectionMapping, CubeUVReflectionMapping, CubeUVRefractionMapping, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, NearestFilter, NearestMipMapNearestFilter, NearestMipMapLinearFilter, LinearFilter, LinearMipMapNearestFilter, LinearMipMapLinearFilter, UnsignedByteType, ByteType, ShortType, UnsignedShortType, IntType, UnsignedIntType, FloatType, HalfFloatType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShort565Type, UnsignedInt248Type, AlphaFormat, RGBFormat, RGBAFormat, LuminanceFormat, LuminanceAlphaFormat, RGBEFormat, DepthFormat, DepthStencilFormat, RedFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_ETC1_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, LoopOnce, LoopRepeat, LoopPingPong, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, ZeroCurvatureEnding, ZeroSlopeEnding, WrapAroundEnding, TrianglesDrawMode, TriangleStripDrawMode, TriangleFanDrawMode, LinearEncoding, sRGBEncoding, GammaEncoding, RGBEEncoding, LogLuvEncoding, RGBM7Encoding, RGBM16Encoding, RGBDEncoding, BasicDepthPacking, RGBADepthPacking, TangentSpaceNormalMap, ObjectSpaceNormalMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REVISION", function() { return REVISION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUSE", function() { return MOUSE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceNone", function() { return CullFaceNone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceBack", function() { return CullFaceBack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceFront", function() { return CullFaceFront; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceFrontBack", function() { return CullFaceFrontBack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontFaceDirectionCW", function() { return FrontFaceDirectionCW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontFaceDirectionCCW", function() { return FrontFaceDirectionCCW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicShadowMap", function() { return BasicShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PCFShadowMap", function() { return PCFShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PCFSoftShadowMap", function() { return PCFSoftShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontSide", function() { return FrontSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackSide", function() { return BackSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleSide", function() { return DoubleSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatShading", function() { return FlatShading; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SmoothShading", function() { return SmoothShading; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoColors", function() { return NoColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FaceColors", function() { return FaceColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VertexColors", function() { return VertexColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoBlending", function() { return NoBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NormalBlending", function() { return NormalBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdditiveBlending", function() { return AdditiveBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubtractiveBlending", function() { return SubtractiveBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiplyBlending", function() { return MultiplyBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomBlending", function() { return CustomBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddEquation", function() { return AddEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubtractEquation", function() { return SubtractEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReverseSubtractEquation", function() { return ReverseSubtractEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinEquation", function() { return MinEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxEquation", function() { return MaxEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroFactor", function() { return ZeroFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneFactor", function() { return OneFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcColorFactor", function() { return SrcColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusSrcColorFactor", function() { return OneMinusSrcColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcAlphaFactor", function() { return SrcAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusSrcAlphaFactor", function() { return OneMinusSrcAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DstAlphaFactor", function() { return DstAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusDstAlphaFactor", function() { return OneMinusDstAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DstColorFactor", function() { return DstColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusDstColorFactor", function() { return OneMinusDstColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcAlphaSaturateFactor", function() { return SrcAlphaSaturateFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeverDepth", function() { return NeverDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlwaysDepth", function() { return AlwaysDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessDepth", function() { return LessDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessEqualDepth", function() { return LessEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EqualDepth", function() { return EqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreaterEqualDepth", function() { return GreaterEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreaterDepth", function() { return GreaterDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotEqualDepth", function() { return NotEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiplyOperation", function() { return MultiplyOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MixOperation", function() { return MixOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddOperation", function() { return AddOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoToneMapping", function() { return NoToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearToneMapping", function() { return LinearToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReinhardToneMapping", function() { return ReinhardToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uncharted2ToneMapping", function() { return Uncharted2ToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CineonToneMapping", function() { return CineonToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ACESFilmicToneMapping", function() { return ACESFilmicToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UVMapping", function() { return UVMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeReflectionMapping", function() { return CubeReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeRefractionMapping", function() { return CubeRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquirectangularReflectionMapping", function() { return EquirectangularReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquirectangularRefractionMapping", function() { return EquirectangularRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SphericalReflectionMapping", function() { return SphericalReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeUVReflectionMapping", function() { return CubeUVReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeUVRefractionMapping", function() { return CubeUVRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepeatWrapping", function() { return RepeatWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClampToEdgeWrapping", function() { return ClampToEdgeWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MirroredRepeatWrapping", function() { return MirroredRepeatWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestFilter", function() { return NearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestMipMapNearestFilter", function() { return NearestMipMapNearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestMipMapLinearFilter", function() { return NearestMipMapLinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearFilter", function() { return LinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearMipMapNearestFilter", function() { return LinearMipMapNearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearMipMapLinearFilter", function() { return LinearMipMapLinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedByteType", function() { return UnsignedByteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ByteType", function() { return ByteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShortType", function() { return ShortType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShortType", function() { return UnsignedShortType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntType", function() { return IntType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedIntType", function() { return UnsignedIntType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloatType", function() { return FloatType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HalfFloatType", function() { return HalfFloatType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort4444Type", function() { return UnsignedShort4444Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort5551Type", function() { return UnsignedShort5551Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort565Type", function() { return UnsignedShort565Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedInt248Type", function() { return UnsignedInt248Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlphaFormat", function() { return AlphaFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBFormat", function() { return RGBFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBAFormat", function() { return RGBAFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuminanceFormat", function() { return LuminanceFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuminanceAlphaFormat", function() { return LuminanceAlphaFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBEFormat", function() { return RGBEFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthFormat", function() { return DepthFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthStencilFormat", function() { return DepthStencilFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RedFormat", function() { return RedFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_S3TC_DXT1_Format", function() { return RGB_S3TC_DXT1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT1_Format", function() { return RGBA_S3TC_DXT1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT3_Format", function() { return RGBA_S3TC_DXT3_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT5_Format", function() { return RGBA_S3TC_DXT5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_PVRTC_4BPPV1_Format", function() { return RGB_PVRTC_4BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_PVRTC_2BPPV1_Format", function() { return RGB_PVRTC_2BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_PVRTC_4BPPV1_Format", function() { return RGBA_PVRTC_4BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_PVRTC_2BPPV1_Format", function() { return RGBA_PVRTC_2BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_ETC1_Format", function() { return RGB_ETC1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_4x4_Format", function() { return RGBA_ASTC_4x4_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_5x4_Format", function() { return RGBA_ASTC_5x4_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_5x5_Format", function() { return RGBA_ASTC_5x5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_6x5_Format", function() { return RGBA_ASTC_6x5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_6x6_Format", function() { return RGBA_ASTC_6x6_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_8x5_Format", function() { return RGBA_ASTC_8x5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_8x6_Format", function() { return RGBA_ASTC_8x6_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_8x8_Format", function() { return RGBA_ASTC_8x8_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_10x5_Format", function() { return RGBA_ASTC_10x5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_10x6_Format", function() { return RGBA_ASTC_10x6_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_10x8_Format", function() { return RGBA_ASTC_10x8_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_10x10_Format", function() { return RGBA_ASTC_10x10_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_12x10_Format", function() { return RGBA_ASTC_12x10_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_12x12_Format", function() { return RGBA_ASTC_12x12_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopOnce", function() { return LoopOnce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopRepeat", function() { return LoopRepeat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopPingPong", function() { return LoopPingPong; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateDiscrete", function() { return InterpolateDiscrete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateLinear", function() { return InterpolateLinear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateSmooth", function() { return InterpolateSmooth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroCurvatureEnding", function() { return ZeroCurvatureEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroSlopeEnding", function() { return ZeroSlopeEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WrapAroundEnding", function() { return WrapAroundEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrianglesDrawMode", function() { return TrianglesDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleStripDrawMode", function() { return TriangleStripDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleFanDrawMode", function() { return TriangleFanDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearEncoding", function() { return LinearEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sRGBEncoding", function() { return sRGBEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GammaEncoding", function() { return GammaEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBEEncoding", function() { return RGBEEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogLuvEncoding", function() { return LogLuvEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBM7Encoding", function() { return RGBM7Encoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBM16Encoding", function() { return RGBM16Encoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBDEncoding", function() { return RGBDEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicDepthPacking", function() { return BasicDepthPacking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBADepthPacking", function() { return RGBADepthPacking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TangentSpaceNormalMap", function() { return TangentSpaceNormalMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectSpaceNormalMap", function() { return ObjectSpaceNormalMap; });
var REVISION = '99';
var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
var CullFaceNone = 0;
var CullFaceBack = 1;
var CullFaceFront = 2;
var CullFaceFrontBack = 3;
var FrontFaceDirectionCW = 0;
var FrontFaceDirectionCCW = 1;
var BasicShadowMap = 0;
var PCFShadowMap = 1;
var PCFSoftShadowMap = 2;
var FrontSide = 0;
var BackSide = 1;
var DoubleSide = 2;
var FlatShading = 1;
var SmoothShading = 2;
var NoColors = 0;
var FaceColors = 1;
var VertexColors = 2;
var NoBlending = 0;
var NormalBlending = 1;
var AdditiveBlending = 2;
var SubtractiveBlending = 3;
var MultiplyBlending = 4;
var CustomBlending = 5;
var AddEquation = 100;
var SubtractEquation = 101;
var ReverseSubtractEquation = 102;
var MinEquation = 103;
var MaxEquation = 104;
var ZeroFactor = 200;
var OneFactor = 201;
var SrcColorFactor = 202;
var OneMinusSrcColorFactor = 203;
var SrcAlphaFactor = 204;
var OneMinusSrcAlphaFactor = 205;
var DstAlphaFactor = 206;
var OneMinusDstAlphaFactor = 207;
var DstColorFactor = 208;
var OneMinusDstColorFactor = 209;
var SrcAlphaSaturateFactor = 210;
var NeverDepth = 0;
var AlwaysDepth = 1;
var LessDepth = 2;
var LessEqualDepth = 3;
var EqualDepth = 4;
var GreaterEqualDepth = 5;
var GreaterDepth = 6;
var NotEqualDepth = 7;
var MultiplyOperation = 0;
var MixOperation = 1;
var AddOperation = 2;
var NoToneMapping = 0;
var LinearToneMapping = 1;
var ReinhardToneMapping = 2;
var Uncharted2ToneMapping = 3;
var CineonToneMapping = 4;
var ACESFilmicToneMapping = 5;

var UVMapping = 300;
var CubeReflectionMapping = 301;
var CubeRefractionMapping = 302;
var EquirectangularReflectionMapping = 303;
var EquirectangularRefractionMapping = 304;
var SphericalReflectionMapping = 305;
var CubeUVReflectionMapping = 306;
var CubeUVRefractionMapping = 307;
var RepeatWrapping = 1000;
var ClampToEdgeWrapping = 1001;
var MirroredRepeatWrapping = 1002;
var NearestFilter = 1003;
var NearestMipMapNearestFilter = 1004;
var NearestMipMapLinearFilter = 1005;
var LinearFilter = 1006;
var LinearMipMapNearestFilter = 1007;
var LinearMipMapLinearFilter = 1008;
var UnsignedByteType = 1009;
var ByteType = 1010;
var ShortType = 1011;
var UnsignedShortType = 1012;
var IntType = 1013;
var UnsignedIntType = 1014;
var FloatType = 1015;
var HalfFloatType = 1016;
var UnsignedShort4444Type = 1017;
var UnsignedShort5551Type = 1018;
var UnsignedShort565Type = 1019;
var UnsignedInt248Type = 1020;
var AlphaFormat = 1021;
var RGBFormat = 1022;
var RGBAFormat = 1023;
var LuminanceFormat = 1024;
var LuminanceAlphaFormat = 1025;
var RGBEFormat = RGBAFormat;
var DepthFormat = 1026;
var DepthStencilFormat = 1027;
var RedFormat = 1028;
var RGB_S3TC_DXT1_Format = 33776;
var RGBA_S3TC_DXT1_Format = 33777;
var RGBA_S3TC_DXT3_Format = 33778;
var RGBA_S3TC_DXT5_Format = 33779;
var RGB_PVRTC_4BPPV1_Format = 35840;
var RGB_PVRTC_2BPPV1_Format = 35841;
var RGBA_PVRTC_4BPPV1_Format = 35842;
var RGBA_PVRTC_2BPPV1_Format = 35843;
var RGB_ETC1_Format = 36196;
var RGBA_ASTC_4x4_Format = 37808;
var RGBA_ASTC_5x4_Format = 37809;
var RGBA_ASTC_5x5_Format = 37810;
var RGBA_ASTC_6x5_Format = 37811;
var RGBA_ASTC_6x6_Format = 37812;
var RGBA_ASTC_8x5_Format = 37813;
var RGBA_ASTC_8x6_Format = 37814;
var RGBA_ASTC_8x8_Format = 37815;
var RGBA_ASTC_10x5_Format = 37816;
var RGBA_ASTC_10x6_Format = 37817;
var RGBA_ASTC_10x8_Format = 37818;
var RGBA_ASTC_10x10_Format = 37819;
var RGBA_ASTC_12x10_Format = 37820;
var RGBA_ASTC_12x12_Format = 37821;
var LoopOnce = 2200;
var LoopRepeat = 2201;
var LoopPingPong = 2202;
var InterpolateDiscrete = 2300;
var InterpolateLinear = 2301;
var InterpolateSmooth = 2302;
var ZeroCurvatureEnding = 2400;
var ZeroSlopeEnding = 2401;
var WrapAroundEnding = 2402;
var TrianglesDrawMode = 0;
var TriangleStripDrawMode = 1;
var TriangleFanDrawMode = 2;
var LinearEncoding = 3000;
var sRGBEncoding = 3001;
var GammaEncoding = 3007;
var RGBEEncoding = 3002;
var LogLuvEncoding = 3003;
var RGBM7Encoding = 3004;
var RGBM16Encoding = 3005;
var RGBDEncoding = 3006;
var BasicDepthPacking = 3200;
var RGBADepthPacking = 3201;
var TangentSpaceNormalMap = 0;
var ObjectSpaceNormalMap = 1;


/***/ }),

/***/ "./node_modules/three/src/core/Raycaster.js":
/*!**************************************************!*\
  !*** ./node_modules/three/src/core/Raycaster.js ***!
  \**************************************************/
/*! exports provided: Raycaster */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Raycaster", function() { return Raycaster; });
/* harmony import */ var _math_Ray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Ray.js */ "./node_modules/three/src/math/Ray.js");


/**
 * @author mrdoob / http://mrdoob.com/
 * @author bhouston / http://clara.io/
 * @author stephomi / http://stephaneginier.com/
 */

function Raycaster( origin, direction, near, far ) {

	this.ray = new _math_Ray_js__WEBPACK_IMPORTED_MODULE_0__["Ray"]( origin, direction );
	// direction is assumed to be normalized (for accurate distance calculations)

	this.near = near || 0;
	this.far = far || Infinity;

	this.params = {
		Mesh: {},
		Line: {},
		LOD: {},
		Points: { threshold: 1 },
		Sprite: {}
	};

	Object.defineProperties( this.params, {
		PointCloud: {
			get: function () {

				console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
				return this.Points;

			}
		}
	} );

}

function ascSort( a, b ) {

	return a.distance - b.distance;

}

function intersectObject( object, raycaster, intersects, recursive ) {

	if ( object.visible === false ) return;

	object.raycast( raycaster, intersects );

	if ( recursive === true ) {

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			intersectObject( children[ i ], raycaster, intersects, true );

		}

	}

}

Object.assign( Raycaster.prototype, {

	linePrecision: 1,

	set: function ( origin, direction ) {

		// direction is assumed to be normalized (for accurate distance calculations)

		this.ray.set( origin, direction );

	},

	setFromCamera: function ( coords, camera ) {

		if ( ( camera && camera.isPerspectiveCamera ) ) {

			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

		} else if ( ( camera && camera.isOrthographicCamera ) ) {

			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

		} else {

			console.error( 'THREE.Raycaster: Unsupported camera type.' );

		}

	},

	intersectObject: function ( object, recursive, optionalTarget ) {

		var intersects = optionalTarget || [];

		intersectObject( object, this, intersects, recursive );

		intersects.sort( ascSort );

		return intersects;

	},

	intersectObjects: function ( objects, recursive, optionalTarget ) {

		var intersects = optionalTarget || [];

		if ( Array.isArray( objects ) === false ) {

			console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
			return intersects;

		}

		for ( var i = 0, l = objects.length; i < l; i ++ ) {

			intersectObject( objects[ i ], this, intersects, recursive );

		}

		intersects.sort( ascSort );

		return intersects;

	}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Box3.js":
/*!*********************************************!*\
  !*** ./node_modules/three/src/math/Box3.js ***!
  \*********************************************/
/*! exports provided: Box3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Box3", function() { return Box3; });
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector3.js */ "./node_modules/three/src/math/Vector3.js");
/* harmony import */ var _Sphere_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sphere.js */ "./node_modules/three/src/math/Sphere.js");



/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Box3( min, max ) {

	this.min = ( min !== undefined ) ? min : new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]( + Infinity, + Infinity, + Infinity );
	this.max = ( max !== undefined ) ? max : new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]( - Infinity, - Infinity, - Infinity );

}

Object.assign( Box3.prototype, {

	isBox3: true,

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromArray: function ( array ) {

		var minX = + Infinity;
		var minY = + Infinity;
		var minZ = + Infinity;

		var maxX = - Infinity;
		var maxY = - Infinity;
		var maxZ = - Infinity;

		for ( var i = 0, l = array.length; i < l; i += 3 ) {

			var x = array[ i ];
			var y = array[ i + 1 ];
			var z = array[ i + 2 ];

			if ( x < minX ) minX = x;
			if ( y < minY ) minY = y;
			if ( z < minZ ) minZ = z;

			if ( x > maxX ) maxX = x;
			if ( y > maxY ) maxY = y;
			if ( z > maxZ ) maxZ = z;

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	},

	setFromBufferAttribute: function ( attribute ) {

		var minX = + Infinity;
		var minY = + Infinity;
		var minZ = + Infinity;

		var maxX = - Infinity;
		var maxY = - Infinity;
		var maxZ = - Infinity;

		for ( var i = 0, l = attribute.count; i < l; i ++ ) {

			var x = attribute.getX( i );
			var y = attribute.getY( i );
			var z = attribute.getZ( i );

			if ( x < minX ) minX = x;
			if ( y < minY ) minY = y;
			if ( z < minZ ) minZ = z;

			if ( x > maxX ) maxX = x;
			if ( y > maxY ) maxY = y;
			if ( z > maxZ ) maxZ = z;

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	},

	setFromPoints: function ( points ) {

		this.makeEmpty();

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] );

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function setFromCenterAndSize( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	setFromObject: function ( object ) {

		this.makeEmpty();

		return this.expandByObject( object );

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = this.min.z = + Infinity;
		this.max.x = this.max.y = this.max.z = - Infinity;

		return this;

	},

	isEmpty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

	},

	getCenter: function ( target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Box3: .getCenter() target is now required' );
			target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		}

		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	getSize: function ( target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Box3: .getSize() target is now required' );
			target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		}

		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	},

	expandByObject: function () {

		// Computes the world-axis-aligned bounding box of an object (including its children),
		// accounting for both the object's, and children's, world transforms

		var scope, i, l;

		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		function traverse( node ) {

			var geometry = node.geometry;

			if ( geometry !== undefined ) {

				if ( geometry.isGeometry ) {

					var vertices = geometry.vertices;

					for ( i = 0, l = vertices.length; i < l; i ++ ) {

						v1.copy( vertices[ i ] );
						v1.applyMatrix4( node.matrixWorld );

						scope.expandByPoint( v1 );

					}

				} else if ( geometry.isBufferGeometry ) {

					var attribute = geometry.attributes.position;

					if ( attribute !== undefined ) {

						for ( i = 0, l = attribute.count; i < l; i ++ ) {

							v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );

							scope.expandByPoint( v1 );

						}

					}

				}

			}

		}

		return function expandByObject( object ) {

			scope = this;

			object.updateMatrixWorld( true );

			object.traverse( traverse );

			return this;

		};

	}(),

	containsPoint: function ( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ||
			point.z < this.min.z || point.z > this.max.z ? false : true;

	},

	containsBox: function ( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y &&
			this.min.z <= box.min.z && box.max.z <= this.max.z;

	},

	getParameter: function ( point, target ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		if ( target === undefined ) {

			console.warn( 'THREE.Box3: .getParameter() target is now required' );
			target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		}

		return target.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
			( point.z - this.min.z ) / ( this.max.z - this.min.z )
		);

	},

	intersectsBox: function ( box ) {

		// using 6 splitting planes to rule out intersections.
		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ||
			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

	},

	intersectsSphere: ( function () {

		var closestPoint = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function intersectsSphere( sphere ) {

			// Find the point on the AABB closest to the sphere center.
			this.clampPoint( sphere.center, closestPoint );

			// If that point is inside the sphere, the AABB and sphere intersect.
			return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

		};

	} )(),

	intersectsPlane: function ( plane ) {

		// We compute the minimum and maximum dot product values. If those values
		// are on the same side (back or front) of the plane, then there is no intersection.

		var min, max;

		if ( plane.normal.x > 0 ) {

			min = plane.normal.x * this.min.x;
			max = plane.normal.x * this.max.x;

		} else {

			min = plane.normal.x * this.max.x;
			max = plane.normal.x * this.min.x;

		}

		if ( plane.normal.y > 0 ) {

			min += plane.normal.y * this.min.y;
			max += plane.normal.y * this.max.y;

		} else {

			min += plane.normal.y * this.max.y;
			max += plane.normal.y * this.min.y;

		}

		if ( plane.normal.z > 0 ) {

			min += plane.normal.z * this.min.z;
			max += plane.normal.z * this.max.z;

		} else {

			min += plane.normal.z * this.max.z;
			max += plane.normal.z * this.min.z;

		}

		return ( min <= - plane.constant && max >= - plane.constant );

	},

	intersectsTriangle: ( function () {

		// triangle centered vertices
		var v0 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var v2 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		// triangle edge vectors
		var f0 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var f1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var f2 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		var testAxis = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		var center = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var extents = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		var triangleNormal = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		function satForAxes( axes ) {

			var i, j;

			for ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {

				testAxis.fromArray( axes, i );
				// project the aabb onto the seperating axis
				var r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );
				// project all 3 vertices of the triangle onto the seperating axis
				var p0 = v0.dot( testAxis );
				var p1 = v1.dot( testAxis );
				var p2 = v2.dot( testAxis );
				// actual test, basically see if either of the most extreme of the triangle points intersects r
				if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

					// points of the projected triangle are outside the projected half-length of the aabb
					// the axis is seperating and we can exit
					return false;

				}

			}

			return true;

		}

		return function intersectsTriangle( triangle ) {

			if ( this.isEmpty() ) {

				return false;

			}

			// compute box center and extents
			this.getCenter( center );
			extents.subVectors( this.max, center );

			// translate triangle to aabb origin
			v0.subVectors( triangle.a, center );
			v1.subVectors( triangle.b, center );
			v2.subVectors( triangle.c, center );

			// compute edge vectors for triangle
			f0.subVectors( v1, v0 );
			f1.subVectors( v2, v1 );
			f2.subVectors( v0, v2 );

			// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
			// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
			// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
			var axes = [
				0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,
				f0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,
				- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0
			];
			if ( ! satForAxes( axes ) ) {

				return false;

			}

			// test 3 face normals from the aabb
			axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
			if ( ! satForAxes( axes ) ) {

				return false;

			}

			// finally testing the face normal of the triangle
			// use already existing triangle edge vectors here
			triangleNormal.crossVectors( f0, f1 );
			axes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];
			return satForAxes( axes );

		};

	} )(),

	clampPoint: function ( point, target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Box3: .clampPoint() target is now required' );
			target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		}

		return target.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function distanceToPoint( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	getBoundingSphere: function () {

		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function getBoundingSphere( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .getBoundingSphere() target is now required' );
				target = new _Sphere_js__WEBPACK_IMPORTED_MODULE_1__["Sphere"]();

			}

			this.getCenter( target.center );

			target.radius = this.getSize( v1 ).length() * 0.5;

			return target;

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
		if ( this.isEmpty() ) this.makeEmpty();

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	applyMatrix4: function () {

		var points = [
			new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"](),
			new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"](),
			new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"](),
			new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"](),
			new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"](),
			new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"](),
			new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"](),
			new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]()
		];

		return function applyMatrix4( matrix ) {

			// transform of empty box is an empty box.
			if ( this.isEmpty() ) return this;

			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
			points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
			points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
			points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
			points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
			points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
			points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
			points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
			points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

			this.setFromPoints( points );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Math.js":
/*!*********************************************!*\
  !*** ./node_modules/three/src/math/Math.js ***!
  \*********************************************/
/*! exports provided: _Math */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_Math", function() { return _Math; });
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

var _Math = {

	DEG2RAD: Math.PI / 180,
	RAD2DEG: 180 / Math.PI,

	generateUUID: ( function () {

		// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

		var lut = [];

		for ( var i = 0; i < 256; i ++ ) {

			lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

		}

		return function generateUUID() {

			var d0 = Math.random() * 0xffffffff | 0;
			var d1 = Math.random() * 0xffffffff | 0;
			var d2 = Math.random() * 0xffffffff | 0;
			var d3 = Math.random() * 0xffffffff | 0;
			var uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +
				lut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +
				lut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +
				lut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];

			// .toUpperCase() here flattens concatenated strings to save heap memory space.
			return uuid.toUpperCase();

		};

	} )(),

	clamp: function ( value, min, max ) {

		return Math.max( min, Math.min( max, value ) );

	},

	// compute euclidian modulo of m % n
	// https://en.wikipedia.org/wiki/Modulo_operation

	euclideanModulo: function ( n, m ) {

		return ( ( n % m ) + m ) % m;

	},

	// Linear mapping from range <a1, a2> to range <b1, b2>

	mapLinear: function ( x, a1, a2, b1, b2 ) {

		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

	},

	// https://en.wikipedia.org/wiki/Linear_interpolation

	lerp: function ( x, y, t ) {

		return ( 1 - t ) * x + t * y;

	},

	// http://en.wikipedia.org/wiki/Smoothstep

	smoothstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * ( 3 - 2 * x );

	},

	smootherstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

	},

	// Random integer from <low, high> interval

	randInt: function ( low, high ) {

		return low + Math.floor( Math.random() * ( high - low + 1 ) );

	},

	// Random float from <low, high> interval

	randFloat: function ( low, high ) {

		return low + Math.random() * ( high - low );

	},

	// Random float from <-range/2, range/2> interval

	randFloatSpread: function ( range ) {

		return range * ( 0.5 - Math.random() );

	},

	degToRad: function ( degrees ) {

		return degrees * _Math.DEG2RAD;

	},

	radToDeg: function ( radians ) {

		return radians * _Math.RAD2DEG;

	},

	isPowerOfTwo: function ( value ) {

		return ( value & ( value - 1 ) ) === 0 && value !== 0;

	},

	ceilPowerOfTwo: function ( value ) {

		return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

	},

	floorPowerOfTwo: function ( value ) {

		return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

	}

};





/***/ }),

/***/ "./node_modules/three/src/math/Matrix4.js":
/*!************************************************!*\
  !*** ./node_modules/three/src/math/Matrix4.js ***!
  \************************************************/
/*! exports provided: Matrix4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix4", function() { return Matrix4; });
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector3.js */ "./node_modules/three/src/math/Vector3.js");


/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Matrix4() {

	this.elements = [

		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1

	];

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

	}

}

Object.assign( Matrix4.prototype, {

	isMatrix4: true,

	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	clone: function () {

		return new Matrix4().fromArray( this.elements );

	},

	copy: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

		return this;

	},

	copyPosition: function ( m ) {

		var te = this.elements, me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	},

	extractBasis: function ( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrixColumn( this, 0 );
		yAxis.setFromMatrixColumn( this, 1 );
		zAxis.setFromMatrixColumn( this, 2 );

		return this;

	},

	makeBasis: function ( xAxis, yAxis, zAxis ) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0, 0, 0, 1
		);

		return this;

	},

	extractRotation: function () {

		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function extractRotation( m ) {

			// this method does not support reflection matrices

			var te = this.elements;
			var me = m.elements;

			var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
			var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
			var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

			te[ 0 ] = me[ 0 ] * scaleX;
			te[ 1 ] = me[ 1 ] * scaleX;
			te[ 2 ] = me[ 2 ] * scaleX;
			te[ 3 ] = 0;

			te[ 4 ] = me[ 4 ] * scaleY;
			te[ 5 ] = me[ 5 ] * scaleY;
			te[ 6 ] = me[ 6 ] * scaleY;
			te[ 7 ] = 0;

			te[ 8 ] = me[ 8 ] * scaleZ;
			te[ 9 ] = me[ 9 ] * scaleZ;
			te[ 10 ] = me[ 10 ] * scaleZ;
			te[ 11 ] = 0;

			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		};

	}(),

	makeRotationFromEuler: function ( euler ) {

		if ( ! ( euler && euler.isEuler ) ) {

			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

		}

		var te = this.elements;

		var x = euler.x, y = euler.y, z = euler.z;
		var a = Math.cos( x ), b = Math.sin( x );
		var c = Math.cos( y ), d = Math.sin( y );
		var e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// bottom row
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// last column
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	makeRotationFromQuaternion: function () {

		var zero = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]( 0, 0, 0 );
		var one = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]( 1, 1, 1 );

		return function makeRotationFromQuaternion( q ) {

			return this.compose( zero, q, one );

		};

	}(),

	lookAt: function () {

		var x = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var y = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var z = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function lookAt( eye, target, up ) {

			var te = this.elements;

			z.subVectors( eye, target );

			if ( z.lengthSq() === 0 ) {

				// eye and target are in the same position

				z.z = 1;

			}

			z.normalize();
			x.crossVectors( up, z );

			if ( x.lengthSq() === 0 ) {

				// up and z are parallel

				if ( Math.abs( up.z ) === 1 ) {

					z.x += 0.0001;

				} else {

					z.z += 0.0001;

				}

				z.normalize();
				x.crossVectors( up, z );

			}

			x.normalize();
			y.crossVectors( z, x );

			te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
			te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
			te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

			return this;

		};

	}(),

	multiply: function ( m, n ) {

		if ( n !== undefined ) {

			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
			return this.multiplyMatrices( m, n );

		}

		return this.multiplyMatrices( this, m );

	},

	premultiply: function ( m ) {

		return this.multiplyMatrices( m, this );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	},

	applyToBufferAttribute: function () {

		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function applyToBufferAttribute( attribute ) {

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				v1.x = attribute.getX( i );
				v1.y = attribute.getY( i );
				v1.z = attribute.getZ( i );

				v1.applyMatrix4( this );

				attribute.setXYZ( i, v1.x, v1.y, v1.z );

			}

			return attribute;

		};

	}(),

	determinant: function () {

		var te = this.elements;

		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	},

	transpose: function () {

		var te = this.elements;
		var tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	},

	setPosition: function ( v ) {

		var te = this.elements;

		te[ 12 ] = v.x;
		te[ 13 ] = v.y;
		te[ 14 ] = v.z;

		return this;

	},

	getInverse: function ( m, throwOnDegenerate ) {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		var te = this.elements,
			me = m.elements,

			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if ( det === 0 ) {

			var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";

			if ( throwOnDegenerate === true ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			return this.identity();

		}

		var detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

		te[ 4 ] = t12 * detInv;
		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

		te[ 8 ] = t13 * detInv;
		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

		te[ 12 ] = t14 * detInv;
		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

		return this;

	},

	scale: function ( v ) {

		var te = this.elements;
		var x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	},

	getMaxScaleOnAxis: function () {

		var te = this.elements;

		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	},

	makeTranslation: function ( x, y, z ) {

		this.set(

			1, 0, 0, x,
			0, 1, 0, y,
			0, 0, 1, z,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationX: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0, 0, 0,
			0, c, - s, 0,
			0, s, c, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationY: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	},

	makeRotationZ: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s, c, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationAxis: function ( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		var c = Math.cos( angle );
		var s = Math.sin( angle );
		var t = 1 - c;
		var x = axis.x, y = axis.y, z = axis.z;
		var tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		 return this;

	},

	makeScale: function ( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeShear: function ( x, y, z ) {

		this.set(

			1, y, z, 0,
			x, 1, z, 0,
			x, y, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	compose: function ( position, quaternion, scale ) {

		var te = this.elements;

		var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
		var x2 = x + x,	y2 = y + y, z2 = z + z;
		var xx = x * x2, xy = x * y2, xz = x * z2;
		var yy = y * y2, yz = y * z2, zz = z * z2;
		var wx = w * x2, wy = w * y2, wz = w * z2;

		var sx = scale.x, sy = scale.y, sz = scale.z;

	        te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
	        te[ 1 ] = ( xy + wz ) * sx;
	        te[ 2 ] = ( xz - wy ) * sx;
	        te[ 3 ] = 0;

	        te[ 4 ] = ( xy - wz ) * sy;
	        te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
	        te[ 6 ] = ( yz + wx ) * sy;
	        te[ 7 ] = 0;

	        te[ 8 ] = ( xz + wy ) * sz;
	        te[ 9 ] = ( yz - wx ) * sz;
	        te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
	        te[ 11 ] = 0;

	        te[ 12 ] = position.x;
	        te[ 13 ] = position.y;
	        te[ 14 ] = position.z;
	        te[ 15 ] = 1;

	        return this;

	},

	decompose: function () {

		var vector = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var matrix = new Matrix4();

		return function decompose( position, quaternion, scale ) {

			var te = this.elements;

			var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
			var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
			var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

			// if determine is negative, we need to invert one scale
			var det = this.determinant();
			if ( det < 0 ) sx = - sx;

			position.x = te[ 12 ];
			position.y = te[ 13 ];
			position.z = te[ 14 ];

			// scale the rotation part
			matrix.copy( this );

			var invSX = 1 / sx;
			var invSY = 1 / sy;
			var invSZ = 1 / sz;

			matrix.elements[ 0 ] *= invSX;
			matrix.elements[ 1 ] *= invSX;
			matrix.elements[ 2 ] *= invSX;

			matrix.elements[ 4 ] *= invSY;
			matrix.elements[ 5 ] *= invSY;
			matrix.elements[ 6 ] *= invSY;

			matrix.elements[ 8 ] *= invSZ;
			matrix.elements[ 9 ] *= invSZ;
			matrix.elements[ 10 ] *= invSZ;

			quaternion.setFromRotationMatrix( matrix );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		};

	}(),

	makePerspective: function ( left, right, top, bottom, near, far ) {

		if ( far === undefined ) {

			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

		}

		var te = this.elements;
		var x = 2 * near / ( right - left );
		var y = 2 * near / ( top - bottom );

		var a = ( right + left ) / ( right - left );
		var b = ( top + bottom ) / ( top - bottom );
		var c = - ( far + near ) / ( far - near );
		var d = - 2 * far * near / ( far - near );

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	},

	makeOrthographic: function ( left, right, top, bottom, near, far ) {

		var te = this.elements;
		var w = 1.0 / ( right - left );
		var h = 1.0 / ( top - bottom );
		var p = 1.0 / ( far - near );

		var x = ( right + left ) * w;
		var y = ( top + bottom ) * h;
		var z = ( far + near ) * p;

		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

		return this;

	},

	equals: function ( matrix ) {

		var te = this.elements;
		var me = matrix.elements;

		for ( var i = 0; i < 16; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		for ( var i = 0; i < 16; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		var te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ] = te[ 8 ];
		array[ offset + 9 ] = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Quaternion.js":
/*!***************************************************!*\
  !*** ./node_modules/three/src/math/Quaternion.js ***!
  \***************************************************/
/*! exports provided: Quaternion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Quaternion", function() { return Quaternion; });
/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Math.js */ "./node_modules/three/src/math/Math.js");
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vector3.js */ "./node_modules/three/src/math/Vector3.js");
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */




function Quaternion( x, y, z, w ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._w = ( w !== undefined ) ? w : 1;

}

Object.assign( Quaternion, {

	slerp: function ( qa, qb, qm, t ) {

		return qm.copy( qa ).slerp( qb, t );

	},

	slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

		// fuzz-free, array-based Quaternion SLERP operation

		var x0 = src0[ srcOffset0 + 0 ],
			y0 = src0[ srcOffset0 + 1 ],
			z0 = src0[ srcOffset0 + 2 ],
			w0 = src0[ srcOffset0 + 3 ],

			x1 = src1[ srcOffset1 + 0 ],
			y1 = src1[ srcOffset1 + 1 ],
			z1 = src1[ srcOffset1 + 2 ],
			w1 = src1[ srcOffset1 + 3 ];

		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

			var s = 1 - t,

				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

				dir = ( cos >= 0 ? 1 : - 1 ),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if ( sqrSin > Number.EPSILON ) {

				var sin = Math.sqrt( sqrSin ),
					len = Math.atan2( sin, cos * dir );

				s = Math.sin( s * len ) / sin;
				t = Math.sin( t * len ) / sin;

			}

			var tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if ( s === 1 - t ) {

				var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[ dstOffset ] = x0;
		dst[ dstOffset + 1 ] = y0;
		dst[ dstOffset + 2 ] = z0;
		dst[ dstOffset + 3 ] = w0;

	}

} );

Object.defineProperties( Quaternion.prototype, {

	x: {

		get: function () {

			return this._x;

		},

		set: function ( value ) {

			this._x = value;
			this.onChangeCallback();

		}

	},

	y: {

		get: function () {

			return this._y;

		},

		set: function ( value ) {

			this._y = value;
			this.onChangeCallback();

		}

	},

	z: {

		get: function () {

			return this._z;

		},

		set: function ( value ) {

			this._z = value;
			this.onChangeCallback();

		}

	},

	w: {

		get: function () {

			return this._w;

		},

		set: function ( value ) {

			this._w = value;
			this.onChangeCallback();

		}

	}

} );

Object.assign( Quaternion.prototype, {

	isQuaternion: true,

	set: function ( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this.onChangeCallback();

		return this;

	},

	clone: function () {

		return new this.constructor( this._x, this._y, this._z, this._w );

	},

	copy: function ( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this.onChangeCallback();

		return this;

	},

	setFromEuler: function ( euler, update ) {

		if ( ! ( euler && euler.isEuler ) ) {

			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

		}

		var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		var cos = Math.cos;
		var sin = Math.sin;

		var c1 = cos( x / 2 );
		var c2 = cos( y / 2 );
		var c3 = cos( z / 2 );

		var s1 = sin( x / 2 );
		var s2 = sin( y / 2 );
		var s3 = sin( z / 2 );

		if ( order === 'XYZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'YXZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'ZXY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'ZYX' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'YZX' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'XZY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		}

		if ( update !== false ) this.onChangeCallback();

		return this;

	},

	setFromAxisAngle: function ( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		var halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this.onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33,
			s;

		if ( trace > 0 ) {

			s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this.onChangeCallback();

		return this;

	},

	setFromUnitVectors: function () {

		// assumes direction vectors vFrom and vTo are normalized

		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();
		var r;

		var EPS = 0.000001;

		return function setFromUnitVectors( vFrom, vTo ) {

			if ( v1 === undefined ) v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();

			r = vFrom.dot( vTo ) + 1;

			if ( r < EPS ) {

				r = 0;

				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

					v1.set( - vFrom.y, vFrom.x, 0 );

				} else {

					v1.set( 0, - vFrom.z, vFrom.y );

				}

			} else {

				v1.crossVectors( vFrom, vTo );

			}

			this._x = v1.x;
			this._y = v1.y;
			this._z = v1.z;
			this._w = r;

			return this.normalize();

		};

	}(),

	angleTo: function ( q ) {

		return 2 * Math.acos( Math.abs( _Math_js__WEBPACK_IMPORTED_MODULE_0__["_Math"].clamp( this.dot( q ), - 1, 1 ) ) );

	},

	rotateTowards: function ( q, step ) {

		var angle = this.angleTo( q );

		if ( angle === 0 ) return this;

		var t = Math.min( 1, step / angle );

		this.slerp( q, t );

		return this;

	},

	inverse: function () {

		// quaternion is assumed to have unit length

		return this.conjugate();

	},

	conjugate: function () {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this.onChangeCallback();

		return this;

	},

	dot: function ( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	},

	lengthSq: function () {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	},

	length: function () {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	},

	normalize: function () {

		var l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this.onChangeCallback();

		return this;

	},

	multiply: function ( q, p ) {

		if ( p !== undefined ) {

			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
			return this.multiplyQuaternions( q, p );

		}

		return this.multiplyQuaternions( this, q );

	},

	premultiply: function ( q ) {

		return this.multiplyQuaternions( q, this );

	},

	multiplyQuaternions: function ( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this.onChangeCallback();

		return this;

	},

	slerp: function ( qb, t ) {

		if ( t === 0 ) return this;
		if ( t === 1 ) return this.copy( qb );

		var x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

		if ( sqrSinHalfTheta <= Number.EPSILON ) {

			var s = 1 - t;
			this._w = s * w + t * this._w;
			this._x = s * x + t * this._x;
			this._y = s * y + t * this._y;
			this._z = s * z + t * this._z;

			return this.normalize();

		}

		var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
		var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this.onChangeCallback();

		return this;

	},

	equals: function ( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this.onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	},

	onChange: function ( callback ) {

		this.onChangeCallback = callback;

		return this;

	},

	onChangeCallback: function () {}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Ray.js":
/*!********************************************!*\
  !*** ./node_modules/three/src/math/Ray.js ***!
  \********************************************/
/*! exports provided: Ray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ray", function() { return Ray; });
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector3.js */ "./node_modules/three/src/math/Vector3.js");


/**
 * @author bhouston / http://clara.io
 */

function Ray( origin, direction ) {

	this.origin = ( origin !== undefined ) ? origin : new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
	this.direction = ( direction !== undefined ) ? direction : new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

}

Object.assign( Ray.prototype, {

	set: function ( origin, direction ) {

		this.origin.copy( origin );
		this.direction.copy( direction );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( ray ) {

		this.origin.copy( ray.origin );
		this.direction.copy( ray.direction );

		return this;

	},

	at: function ( t, target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Ray: .at() target is now required' );
			target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		}

		return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );

	},

	lookAt: function ( v ) {

		this.direction.copy( v ).sub( this.origin ).normalize();

		return this;

	},

	recast: function () {

		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function recast( t ) {

			this.origin.copy( this.at( t, v1 ) );

			return this;

		};

	}(),

	closestPointToPoint: function ( point, target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
			target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		}

		target.subVectors( point, this.origin );

		var directionDistance = target.dot( this.direction );

		if ( directionDistance < 0 ) {

			return target.copy( this.origin );

		}

		return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

	},

	distanceToPoint: function ( point ) {

		return Math.sqrt( this.distanceSqToPoint( point ) );

	},

	distanceSqToPoint: function () {

		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function distanceSqToPoint( point ) {

			var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

			// point behind the ray

			if ( directionDistance < 0 ) {

				return this.origin.distanceToSquared( point );

			}

			v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

			return v1.distanceToSquared( point );

		};

	}(),

	distanceSqToSegment: function () {

		var segCenter = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var segDir = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var diff = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
			// It returns the min distance between the ray and the segment
			// defined by v0 and v1
			// It can also set two optional targets :
			// - The closest point on the ray
			// - The closest point on the segment

			segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
			segDir.copy( v1 ).sub( v0 ).normalize();
			diff.copy( this.origin ).sub( segCenter );

			var segExtent = v0.distanceTo( v1 ) * 0.5;
			var a01 = - this.direction.dot( segDir );
			var b0 = diff.dot( this.direction );
			var b1 = - diff.dot( segDir );
			var c = diff.lengthSq();
			var det = Math.abs( 1 - a01 * a01 );
			var s0, s1, sqrDist, extDet;

			if ( det > 0 ) {

				// The ray and segment are not parallel.

				s0 = a01 * b1 - b0;
				s1 = a01 * b0 - b1;
				extDet = segExtent * det;

				if ( s0 >= 0 ) {

					if ( s1 >= - extDet ) {

						if ( s1 <= extDet ) {

							// region 0
							// Minimum at interior points of ray and segment.

							var invDet = 1 / det;
							s0 *= invDet;
							s1 *= invDet;
							sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

						} else {

							// region 1

							s1 = segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						// region 5

						s1 = - segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					if ( s1 <= - extDet ) {

						// region 4

						s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					} else if ( s1 <= extDet ) {

						// region 3

						s0 = 0;
						s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = s1 * ( s1 + 2 * b1 ) + c;

					} else {

						// region 2

						s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				}

			} else {

				// Ray and segment are parallel.

				s1 = ( a01 > 0 ) ? - segExtent : segExtent;
				s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
				sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

			}

			if ( optionalPointOnRay ) {

				optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

			}

			if ( optionalPointOnSegment ) {

				optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

			}

			return sqrDist;

		};

	}(),

	intersectSphere: function () {

		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function intersectSphere( sphere, target ) {

			v1.subVectors( sphere.center, this.origin );
			var tca = v1.dot( this.direction );
			var d2 = v1.dot( v1 ) - tca * tca;
			var radius2 = sphere.radius * sphere.radius;

			if ( d2 > radius2 ) return null;

			var thc = Math.sqrt( radius2 - d2 );

			// t0 = first intersect point - entrance on front of sphere
			var t0 = tca - thc;

			// t1 = second intersect point - exit point on back of sphere
			var t1 = tca + thc;

			// test to see if both t0 and t1 are behind the ray - if so, return null
			if ( t0 < 0 && t1 < 0 ) return null;

			// test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.
			if ( t0 < 0 ) return this.at( t1, target );

			// else t0 is in front of the ray, so return the first collision point scaled by t0
			return this.at( t0, target );

		};

	}(),

	intersectsSphere: function ( sphere ) {

		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

	},

	distanceToPlane: function ( plane ) {

		var denominator = plane.normal.dot( this.direction );

		if ( denominator === 0 ) {

			// line is coplanar, return origin
			if ( plane.distanceToPoint( this.origin ) === 0 ) {

				return 0;

			}

			// Null is preferable to undefined since undefined means.... it is undefined

			return null;

		}

		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

		// Return if the ray never intersects the plane

		return t >= 0 ? t : null;

	},

	intersectPlane: function ( plane, target ) {

		var t = this.distanceToPlane( plane );

		if ( t === null ) {

			return null;

		}

		return this.at( t, target );

	},

	intersectsPlane: function ( plane ) {

		// check if the ray lies on the plane first

		var distToPoint = plane.distanceToPoint( this.origin );

		if ( distToPoint === 0 ) {

			return true;

		}

		var denominator = plane.normal.dot( this.direction );

		if ( denominator * distToPoint < 0 ) {

			return true;

		}

		// ray origin is behind the plane (and is pointing behind it)

		return false;

	},

	intersectBox: function ( box, target ) {

		var tmin, tmax, tymin, tymax, tzmin, tzmax;

		var invdirx = 1 / this.direction.x,
			invdiry = 1 / this.direction.y,
			invdirz = 1 / this.direction.z;

		var origin = this.origin;

		if ( invdirx >= 0 ) {

			tmin = ( box.min.x - origin.x ) * invdirx;
			tmax = ( box.max.x - origin.x ) * invdirx;

		} else {

			tmin = ( box.max.x - origin.x ) * invdirx;
			tmax = ( box.min.x - origin.x ) * invdirx;

		}

		if ( invdiry >= 0 ) {

			tymin = ( box.min.y - origin.y ) * invdiry;
			tymax = ( box.max.y - origin.y ) * invdiry;

		} else {

			tymin = ( box.max.y - origin.y ) * invdiry;
			tymax = ( box.min.y - origin.y ) * invdiry;

		}

		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

		// These lines also handle the case where tmin or tmax is NaN
		// (result of 0 * Infinity). x !== x returns true if x is NaN

		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

		if ( invdirz >= 0 ) {

			tzmin = ( box.min.z - origin.z ) * invdirz;
			tzmax = ( box.max.z - origin.z ) * invdirz;

		} else {

			tzmin = ( box.max.z - origin.z ) * invdirz;
			tzmax = ( box.min.z - origin.z ) * invdirz;

		}

		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

		//return point closest to the ray (positive side)

		if ( tmax < 0 ) return null;

		return this.at( tmin >= 0 ? tmin : tmax, target );

	},

	intersectsBox: ( function () {

		var v = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function intersectsBox( box ) {

			return this.intersectBox( box, v ) !== null;

		};

	} )(),

	intersectTriangle: function () {

		// Compute the offset origin, edges, and normal.
		var diff = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var edge1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var edge2 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var normal = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function intersectTriangle( a, b, c, backfaceCulling, target ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

			edge1.subVectors( b, a );
			edge2.subVectors( c, a );
			normal.crossVectors( edge1, edge2 );

			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
			var DdN = this.direction.dot( normal );
			var sign;

			if ( DdN > 0 ) {

				if ( backfaceCulling ) return null;
				sign = 1;

			} else if ( DdN < 0 ) {

				sign = - 1;
				DdN = - DdN;

			} else {

				return null;

			}

			diff.subVectors( this.origin, a );
			var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

			// b1 < 0, no intersection
			if ( DdQxE2 < 0 ) {

				return null;

			}

			var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

			// b2 < 0, no intersection
			if ( DdE1xQ < 0 ) {

				return null;

			}

			// b1+b2 > 1, no intersection
			if ( DdQxE2 + DdE1xQ > DdN ) {

				return null;

			}

			// Line intersects triangle, check if ray does.
			var QdN = - sign * diff.dot( normal );

			// t < 0, no intersection
			if ( QdN < 0 ) {

				return null;

			}

			// Ray intersects triangle.
			return this.at( QdN / DdN, target );

		};

	}(),

	applyMatrix4: function ( matrix4 ) {

		this.origin.applyMatrix4( matrix4 );
		this.direction.transformDirection( matrix4 );

		return this;

	},

	equals: function ( ray ) {

		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

	}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Sphere.js":
/*!***********************************************!*\
  !*** ./node_modules/three/src/math/Sphere.js ***!
  \***********************************************/
/*! exports provided: Sphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sphere", function() { return Sphere; });
/* harmony import */ var _Box3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Box3.js */ "./node_modules/three/src/math/Box3.js");
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vector3.js */ "./node_modules/three/src/math/Vector3.js");



/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Sphere( center, radius ) {

	this.center = ( center !== undefined ) ? center : new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();
	this.radius = ( radius !== undefined ) ? radius : 0;

}

Object.assign( Sphere.prototype, {

	set: function ( center, radius ) {

		this.center.copy( center );
		this.radius = radius;

		return this;

	},

	setFromPoints: function () {

		var box = new _Box3_js__WEBPACK_IMPORTED_MODULE_0__["Box3"]();

		return function setFromPoints( points, optionalCenter ) {

			var center = this.center;

			if ( optionalCenter !== undefined ) {

				center.copy( optionalCenter );

			} else {

				box.setFromPoints( points ).getCenter( center );

			}

			var maxRadiusSq = 0;

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

			}

			this.radius = Math.sqrt( maxRadiusSq );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( sphere ) {

		this.center.copy( sphere.center );
		this.radius = sphere.radius;

		return this;

	},

	empty: function () {

		return ( this.radius <= 0 );

	},

	containsPoint: function ( point ) {

		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

	},

	distanceToPoint: function ( point ) {

		return ( point.distanceTo( this.center ) - this.radius );

	},

	intersectsSphere: function ( sphere ) {

		var radiusSum = this.radius + sphere.radius;

		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

	},

	intersectsBox: function ( box ) {

		return box.intersectsSphere( this );

	},

	intersectsPlane: function ( plane ) {

		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

	},

	clampPoint: function ( point, target ) {

		var deltaLengthSq = this.center.distanceToSquared( point );

		if ( target === undefined ) {

			console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
			target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();

		}

		target.copy( point );

		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

			target.sub( this.center ).normalize();
			target.multiplyScalar( this.radius ).add( this.center );

		}

		return target;

	},

	getBoundingBox: function ( target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
			target = new _Box3_js__WEBPACK_IMPORTED_MODULE_0__["Box3"]();

		}

		target.set( this.center, this.center );
		target.expandByScalar( this.radius );

		return target;

	},

	applyMatrix4: function ( matrix ) {

		this.center.applyMatrix4( matrix );
		this.radius = this.radius * matrix.getMaxScaleOnAxis();

		return this;

	},

	translate: function ( offset ) {

		this.center.add( offset );

		return this;

	},

	equals: function ( sphere ) {

		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

	}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Triangle.js":
/*!*************************************************!*\
  !*** ./node_modules/three/src/math/Triangle.js ***!
  \*************************************************/
/*! exports provided: Triangle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Triangle", function() { return Triangle; });
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector3.js */ "./node_modules/three/src/math/Vector3.js");


/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Triangle( a, b, c ) {

	this.a = ( a !== undefined ) ? a : new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
	this.b = ( b !== undefined ) ? b : new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
	this.c = ( c !== undefined ) ? c : new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

}

Object.assign( Triangle, {

	getNormal: function () {

		var v0 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function getNormal( a, b, c, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getNormal() target is now required' );
				target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

			}

			target.subVectors( c, b );
			v0.subVectors( a, b );
			target.cross( v0 );

			var targetLengthSq = target.lengthSq();
			if ( targetLengthSq > 0 ) {

				return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

			}

			return target.set( 0, 0, 0 );

		};

	}(),

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	getBarycoord: function () {

		var v0 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var v2 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function getBarycoord( point, a, b, c, target ) {

			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );

			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
				target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

			}

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return target.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return target.set( 1 - u - v, v, u );

		};

	}(),

	containsPoint: function () {

		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function containsPoint( point, a, b, c ) {

			Triangle.getBarycoord( point, a, b, c, v1 );

			return ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );

		};

	}(),

	getUV: function () {

		var barycoord = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {

			this.getBarycoord( point, p1, p2, p3, barycoord );

			target.set( 0, 0 );
			target.addScaledVector( uv1, barycoord.x );
			target.addScaledVector( uv2, barycoord.y );
			target.addScaledVector( uv3, barycoord.z );

			return target;

		};

	}()

} );

Object.assign( Triangle.prototype, {

	set: function ( a, b, c ) {

		this.a.copy( a );
		this.b.copy( b );
		this.c.copy( c );

		return this;

	},

	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

		this.a.copy( points[ i0 ] );
		this.b.copy( points[ i1 ] );
		this.c.copy( points[ i2 ] );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( triangle ) {

		this.a.copy( triangle.a );
		this.b.copy( triangle.b );
		this.c.copy( triangle.c );

		return this;

	},

	getArea: function () {

		var v0 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function getArea() {

			v0.subVectors( this.c, this.b );
			v1.subVectors( this.a, this.b );

			return v0.cross( v1 ).length() * 0.5;

		};

	}(),

	getMidpoint: function ( target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
			target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		}

		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

	},

	getNormal: function ( target ) {

		return Triangle.getNormal( this.a, this.b, this.c, target );

	},

	getPlane: function ( target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Triangle: .getPlane() target is now required' );
			target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		}

		return target.setFromCoplanarPoints( this.a, this.b, this.c );

	},

	getBarycoord: function ( point, target ) {

		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

	},

	containsPoint: function ( point ) {

		return Triangle.containsPoint( point, this.a, this.b, this.c );

	},

	getUV: function ( point, uv1, uv2, uv3, result ) {

		return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, result );

	},

	intersectsBox: function ( box ) {

		return box.intersectsTriangle( this );

	},

	closestPointToPoint: function () {

		var vab = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var vac = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var vbc = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var vap = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var vbp = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
		var vcp = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

		return function closestPointToPoint( p, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
				target = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

			}

			var a = this.a, b = this.b, c = this.c;
			var v, w;

			// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
			// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
			// under the accompanying license; see chapter 5.1.5 for detailed explanation.
			// basically, we're distinguishing which of the voronoi regions of the triangle
			// the point lies in with the minimum amount of redundant computation.

			vab.subVectors( b, a );
			vac.subVectors( c, a );
			vap.subVectors( p, a );
			var d1 = vab.dot( vap );
			var d2 = vac.dot( vap );
			if ( d1 <= 0 && d2 <= 0 ) {

				// vertex region of A; barycentric coords (1, 0, 0)
				return target.copy( a );

			}

			vbp.subVectors( p, b );
			var d3 = vab.dot( vbp );
			var d4 = vac.dot( vbp );
			if ( d3 >= 0 && d4 <= d3 ) {

				// vertex region of B; barycentric coords (0, 1, 0)
				return target.copy( b );

			}

			var vc = d1 * d4 - d3 * d2;
			if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

				v = d1 / ( d1 - d3 );
				// edge region of AB; barycentric coords (1-v, v, 0)
				return target.copy( a ).addScaledVector( vab, v );

			}

			vcp.subVectors( p, c );
			var d5 = vab.dot( vcp );
			var d6 = vac.dot( vcp );
			if ( d6 >= 0 && d5 <= d6 ) {

				// vertex region of C; barycentric coords (0, 0, 1)
				return target.copy( c );

			}

			var vb = d5 * d2 - d1 * d6;
			if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

				w = d2 / ( d2 - d6 );
				// edge region of AC; barycentric coords (1-w, 0, w)
				return target.copy( a ).addScaledVector( vac, w );

			}

			var va = d3 * d6 - d5 * d4;
			if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

				vbc.subVectors( c, b );
				w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
				// edge region of BC; barycentric coords (0, 1-w, w)
				return target.copy( b ).addScaledVector( vbc, w ); // edge region of BC

			}

			// face region
			var denom = 1 / ( va + vb + vc );
			// u = va * denom
			v = vb * denom;
			w = vc * denom;
			return target.copy( a ).addScaledVector( vab, v ).addScaledVector( vac, w );

		};

	}(),

	equals: function ( triangle ) {

		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

	}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Vector2.js":
/*!************************************************!*\
  !*** ./node_modules/three/src/math/Vector2.js ***!
  \************************************************/
/*! exports provided: Vector2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector2", function() { return Vector2; });
/**
 * @author mrdoob / http://mrdoob.com/
 * @author philogb / http://blog.thejit.org/
 * @author egraether / http://egraether.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

function Vector2( x, y ) {

	this.x = x || 0;
	this.y = y || 0;

}

Object.defineProperties( Vector2.prototype, {

	"width": {

		get: function () {

			return this.x;

		},

		set: function ( value ) {

			this.x = value;

		}

	},

	"height": {

		get: function () {

			return this.y;

		},

		set: function ( value ) {

			this.y = value;

		}

	}

} );

Object.assign( Vector2.prototype, {

	isVector2: true,

	set: function ( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	},

	multiply: function ( v ) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;

		return this;

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	applyMatrix3: function ( m ) {

		var x = this.x, y = this.y;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

		return this;

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

		return this;

	},

	clampScalar: function () {

		var min = new Vector2();
		var max = new Vector2();

		return function clampScalar( minVal, maxVal ) {

			min.set( minVal, minVal );
			max.set( maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y;

	},

	cross: function ( v ) {

		return this.x * v.y - this.y * v.x;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	},

	manhattanLength: function () {

		return Math.abs( this.x ) + Math.abs( this.y );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	angle: function () {

		// computes the angle in radians with respect to the positive x-axis

		var angle = Math.atan2( this.y, this.x );

		if ( angle < 0 ) angle += 2 * Math.PI;

		return angle;

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	},

	manhattanDistanceTo: function ( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );

		return this;

	},

	rotateAround: function ( center, angle ) {

		var c = Math.cos( angle ), s = Math.sin( angle );

		var x = this.x - center.x;
		var y = this.y - center.y;

		this.x = x * c - y * s + center.x;
		this.y = x * s + y * c + center.y;

		return this;

	}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Vector3.js":
/*!************************************************!*\
  !*** ./node_modules/three/src/math/Vector3.js ***!
  \************************************************/
/*! exports provided: Vector3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector3", function() { return Vector3; });
/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Math.js */ "./node_modules/three/src/math/Math.js");
/* harmony import */ var _Matrix4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Matrix4.js */ "./node_modules/three/src/math/Matrix4.js");
/* harmony import */ var _Quaternion_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Quaternion.js */ "./node_modules/three/src/math/Quaternion.js");




/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function Vector3( x, y, z ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;

}

Object.assign( Vector3.prototype, {

	isVector3: true,

	set: function ( x, y, z ) {

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y, this.z );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	},

	multiply: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
			return this.multiplyVectors( v, w );

		}

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	},

	multiplyVectors: function ( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	},

	applyEuler: function () {

		var quaternion = new _Quaternion_js__WEBPACK_IMPORTED_MODULE_2__["Quaternion"]();

		return function applyEuler( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			return this.applyQuaternion( quaternion.setFromEuler( euler ) );

		};

	}(),

	applyAxisAngle: function () {

		var quaternion = new _Quaternion_js__WEBPACK_IMPORTED_MODULE_2__["Quaternion"]();

		return function applyAxisAngle( axis, angle ) {

			return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

		};

	}(),

	applyMatrix3: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	},

	applyMatrix4: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

		return this;

	},

	applyQuaternion: function ( q ) {

		var x = this.x, y = this.y, z = this.z;
		var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		var ix = qw * x + qy * z - qz * y;
		var iy = qw * y + qz * x - qx * z;
		var iz = qw * z + qx * y - qy * x;
		var iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	},

	project: function ( camera ) {

		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

	},

	unproject: function () {

		var matrix = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_1__["Matrix4"]();

		return function unproject( camera ) {

			return this.applyMatrix4( matrix.getInverse( camera.projectionMatrix ) ).applyMatrix4( camera.matrixWorld );

		};

	}(),

	transformDirection: function ( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		return this.normalize();

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

		return this;

	},

	clampScalar: function () {

		var min = new Vector3();
		var max = new Vector3();

		return function clampScalar( minVal, maxVal ) {

			min.set( minVal, minVal, minVal );
			max.set( maxVal, maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	},

	// TODO lengthSquared?

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	},

	manhattanLength: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	cross: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
			return this.crossVectors( v, w );

		}

		return this.crossVectors( this, v );

	},

	crossVectors: function ( a, b ) {

		var ax = a.x, ay = a.y, az = a.z;
		var bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	},

	projectOnVector: function ( vector ) {

		var scalar = vector.dot( this ) / vector.lengthSq();

		return this.copy( vector ).multiplyScalar( scalar );

	},

	projectOnPlane: function () {

		var v1 = new Vector3();

		return function projectOnPlane( planeNormal ) {

			v1.copy( this ).projectOnVector( planeNormal );

			return this.sub( v1 );

		};

	}(),

	reflect: function () {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		var v1 = new Vector3();

		return function reflect( normal ) {

			return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

		};

	}(),

	angleTo: function ( v ) {

		var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

		// clamp, to handle numerical problems

		return Math.acos( _Math_js__WEBPACK_IMPORTED_MODULE_0__["_Math"].clamp( theta, - 1, 1 ) );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	},

	manhattanDistanceTo: function ( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	},

	setFromSpherical: function ( s ) {

		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

	},

	setFromSphericalCoords: function ( radius, phi, theta ) {

		var sinPhiRadius = Math.sin( phi ) * radius;

		this.x = sinPhiRadius * Math.sin( theta );
		this.y = Math.cos( phi ) * radius;
		this.z = sinPhiRadius * Math.cos( theta );

		return this;

	},

	setFromCylindrical: function ( c ) {

		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

	},

	setFromCylindricalCoords: function ( radius, theta, y ) {

		this.x = radius * Math.sin( theta );
		this.y = y;
		this.z = radius * Math.cos( theta );

		return this;

	},

	setFromMatrixPosition: function ( m ) {

		var e = m.elements;

		this.x = e[ 12 ];
		this.y = e[ 13 ];
		this.z = e[ 14 ];

		return this;

	},

	setFromMatrixScale: function ( m ) {

		var sx = this.setFromMatrixColumn( m, 0 ).length();
		var sy = this.setFromMatrixColumn( m, 1 ).length();
		var sz = this.setFromMatrixColumn( m, 2 ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	},

	setFromMatrixColumn: function ( m, index ) {

		return this.fromArray( m.elements, index * 4 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );

		return this;

	}

} );





/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/utils-left-pad-string/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/utils-left-pad-string/lib/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// MODULES //

var isString = __webpack_require__( /*! validate.io-string-primitive */ "./node_modules/validate.io-string-primitive/lib/index.js" );
var isNonNegativeInteger = __webpack_require__( /*! validate.io-nonnegative-integer */ "./node_modules/validate.io-nonnegative-integer/lib/index.js" );
var ceil = __webpack_require__( /*! math-ceil */ "./node_modules/math-ceil/lib/index.js" );
var repeat = __webpack_require__( /*! utils-repeat-string */ "./node_modules/utils-repeat-string/lib/index.js" );


// CONSTANTS //

var MAX_SAFE_INTEGER = 9007199254740991; // 2**53 - 1


// LEFT PAD //

/**
* FUNCTION: lpad( str, len[, pad] )
*	Left pads a string such that the padded string has a length of at least `len`.
*
* @param {String} str - string to pad
* @param {Number} len - minimum string length
* @param {String} [pad=' '] - string used to pad
* @returns {String} padded string
*/
function lpad( str, len, pad ) {
	var n;
	var p;
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a string. Value: `' + str + '`.' );
	}
	if ( !isNonNegativeInteger( len ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a nonnegative integer. Value: `' + len + '`.' );
	}
	if ( arguments.length > 2 ) {
		p = pad;
		if ( !isString( p ) ) {
			throw new TypeError( 'invalid input argument. Third argument must be a string. Value: `' + p + '`.' );
		}
		if ( p.length === 0 ) {
			throw new RangeError( 'invalid input argument. Pad string must not be an empty string.' );
		}
	} else {
		p = ' ';
	}
	if ( len > MAX_SAFE_INTEGER ) {
		throw new RangeError( 'invalid input argument. Output string length exceeds maximum allowed string length.' );
	}
	n = ( len - str.length ) / p.length;
	if ( n <= 0 ) {
		return str;
	}
	n = ceil( n );
	return repeat( p, n ) + str;
} // end FUNCTION lpad()


// EXPORTS //

module.exports = lpad;


/***/ }),

/***/ "./node_modules/utils-repeat-string/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/utils-repeat-string/lib/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// MODULES //

var isString = __webpack_require__( /*! validate.io-string-primitive */ "./node_modules/validate.io-string-primitive/lib/index.js" );
var isNonNegativeInteger = __webpack_require__( /*! validate.io-nonnegative-integer */ "./node_modules/validate.io-nonnegative-integer/lib/index.js" );


// NOTES //

/**
* The algorithmic trick used in the implementation is to treat string concatenation the same as binary addition (i.e., any natural number (nonnegative integer) can be expressed as a sum of powers of two).
*
* For example,
*
*  n = 10 => 1010 => 2^3 + 2^0 + 2^1 + 2^0
*
* We can produce a 10-repeat string by "adding" the results of a 8-repeat string and a 2-repeat string.
*
* The implementation is then as follows:
*  : Let `s` be the string to be repeated and `o` be an output string.
*  0) Initialize an output string `o`.
*  1) Check the least significant bit to determine if the current `s` string should be "added" to the output "total".
*     - if the bit is a one, add
*     - otherwise, move on
*  2) Double the string `s` by adding `s` to `s`.
*  3) Right-shift the bits of `n`.
*  4) Check if we have shifted off all bits.
*     - if yes, done.
*     - otherwise, move on
*  5) Repeat 1-4.
*
* The result is that, as the string is repeated, we continually check to see if the doubled string is one which we want to add to our "total".
*
* The algorithm runs in O(log_2(n)) compared to O(n).
*/


// CONSTANTS //

var MAX_SAFE_INTEGER = 9007199254740991; // 2**53 - 1


// REPEAT //

/**
* FUNCTION: repeat( str, n )
*	Repeats a string a specified number of times and returns the concatenated result.
*
* @param {String} str - string to repeat
* @param {Number} n - number of times to repeat the string
* @returns {String}
*/
function repeat( str, n ) {
	var rpt;
	var cnt;
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a string. Value: `' + str + '`.' );
	}
	if ( !isNonNegativeInteger( n ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a nonnegative integer. Value: `' + n + '`.' );
	}
	if ( str.length === 0 || n === 0 ) {
		return '';
	}
	// Check that output string will not exceed the maximum string length:
	if ( str.length * n > MAX_SAFE_INTEGER ) {
		throw new RangeError( 'invalid input argument. Output string length exceeds maximum allowed string length.' );
	}
	rpt = '';
	cnt = n;
	for( ; ; ) {
		// If the count is odd, append the current concatenated string:
		if ( (cnt&1) === 1 ) {
			rpt += str;
		}
		// Right-shift the bits:
		cnt >>>= 1;
		if ( cnt === 0 ) {
			break;
		}
		// Double the string:
		str += str;
	}
	return rpt;
} // end FUNCTION repeat()


// EXPORTS //

module.exports = repeat;


/***/ }),

/***/ "./node_modules/utils-right-pad-string/lib/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/utils-right-pad-string/lib/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// MODULES //

var isString = __webpack_require__( /*! validate.io-string-primitive */ "./node_modules/validate.io-string-primitive/lib/index.js" );
var isNonNegativeInteger = __webpack_require__( /*! validate.io-nonnegative-integer */ "./node_modules/validate.io-nonnegative-integer/lib/index.js" );
var ceil = __webpack_require__( /*! math-ceil */ "./node_modules/math-ceil/lib/index.js" );
var repeat = __webpack_require__( /*! utils-repeat-string */ "./node_modules/utils-repeat-string/lib/index.js" );


// CONSTANTS //

var MAX_SAFE_INTEGER = 9007199254740991; // 2**53 - 1


// RIGHT PAD //

/**
* FUNCTION: rpad( str, len[, pad] )
*	Right pads a string such that the padded string has a length of at least `len`.
*
* @param {String} str - string to pad
* @param {Number} len - minimum string length
* @param {String} [pad=' '] - string used to pad
* @returns {String} padded string
*/
function rpad( str, len, pad ) {
	var n;
	var p;
	if ( !isString( str ) ) {
		throw new TypeError( 'invalid input argument. First argument must be a string. Value: `' + str + '`.' );
	}
	if ( !isNonNegativeInteger( len ) ) {
		throw new TypeError( 'invalid input argument. Second argument must be a nonnegative integer. Value: `' + len + '`.' );
	}
	if ( arguments.length > 2 ) {
		p = pad;
		if ( !isString( p ) ) {
			throw new TypeError( 'invalid input argument. Third argument must be a string. Value: `' + p + '`.' );
		}
		if ( p.length === 0 ) {
			throw new RangeError( 'invalid input argument. Pad string must not be an empty string.' );
		}
	} else {
		p = ' ';
	}
	if ( len > MAX_SAFE_INTEGER ) {
		throw new RangeError( 'invalid input argument. Output string length exceeds maximum allowed string length.' );
	}
	n = ( len - str.length ) / p.length;
	if ( n <= 0 ) {
		return str;
	}
	n = ceil( n );
	return str + repeat( p, n );
} // end FUNCTION rpad()


// EXPORTS //

module.exports = rpad;


/***/ }),

/***/ "./node_modules/validate.io-integer/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/validate.io-integer/lib/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
*
*	VALIDATE: integer
*
*
*	DESCRIPTION:
*		- Validates if a value is an integer.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/



// MODULES //

var isNumber = __webpack_require__( /*! validate.io-number */ "./node_modules/validate.io-number/lib/index.js" );


// ISINTEGER //

/**
* FUNCTION: isInteger( value )
*	Validates if a value is an integer.
*
* @param {Number} value - value to be validated
* @returns {Boolean} boolean indicating whether value is an integer
*/
function isInteger( value ) {
	return isNumber( value ) && value%1 === 0;
} // end FUNCTION isInteger()


// EXPORTS //

module.exports = isInteger;


/***/ }),

/***/ "./node_modules/validate.io-nonnegative-integer/lib/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/validate.io-nonnegative-integer/lib/index.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
*
*	VALIDATE: nonnegative-integer
*
*
*	DESCRIPTION:
*		- Validates if a value is a nonnegative integer.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2015. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2015.
*
*/



// MODULES //

var isInteger = __webpack_require__( /*! validate.io-integer */ "./node_modules/validate.io-integer/lib/index.js" );


// IS NONNEGATIVE INTEGER //

/**
* FUNCTION: isNonNegativeInteger( value )
*	Validates if a value is a nonnegative integer.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating if a value is a nonnegative integer
*/
function isNonNegativeInteger( value ) {
	return isInteger( value ) && value >= 0;
} // end FUNCTION isNonNegativeInteger()


// EXPORTS //

module.exports = isNonNegativeInteger;


/***/ }),

/***/ "./node_modules/validate.io-number/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/validate.io-number/lib/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
*
*	VALIDATE: number
*
*
*	DESCRIPTION:
*		- Validates if a value is a number.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/



/**
* FUNCTION: isNumber( value )
*	Validates if a value is a number.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating whether value is a number
*/
function isNumber( value ) {
	return ( typeof value === 'number' || Object.prototype.toString.call( value ) === '[object Number]' ) && value.valueOf() === value.valueOf();
} // end FUNCTION isNumber()


// EXPORTS //

module.exports = isNumber;


/***/ }),

/***/ "./node_modules/validate.io-string-primitive/lib/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/validate.io-string-primitive/lib/index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
* Tests if a value is a string primitive.
*
* @param {*} value - value to test
* @returns {Boolean} boolean indicating if a value is a string primitive
*/
function isString( value ) {
	return typeof value === 'string';
} // end FUNCTION isString()


// EXPORTS //

module.exports = isString;


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, main, keywords, author, license, repository, config, lint-staged, prettier, sideEffects, dependencies, scripts, devDependencies, engines, default */
/***/ (function(module) {

module.exports = {"name":"ami.js","version":"0.27.0","main":"build/ami.js","keywords":["ami","ami.js","three.js","webgl","dicom","nifti","awesome","medical","imaging","xtk","nrrd","vtk","stl","trk"],"author":{"name":"Nicolas Rannou","email":"nicolas@eunate.ch","url":"https://eunate.ch"},"license":"Apache-2.0","repository":{"type":"git","url":"https://fnndsc.github.io/ami"},"config":{"gaKey":"UA-39303022-3","babel":"--module-bind js=babel-loader --colors --display-error-details"},"lint-staged":{"{{src/**,examples/**, lessons/**}/,}.{js,jsx,json,css,ts,tsx}":["prettier --write","git add"]},"prettier":{"printWidth":100,"singleQuote":true,"trailingComma":"es5","overrides":[{"files":"*.css","options":{"useTabs":false,"tabWidth":2}}]},"sideEffects":false,"dependencies":{"OpenJPEG.js":"joedrago/openjpeg#master","dicom-parser":"1.8.1","image-JPEG2000":"ReflexionMed/image-JPEG2000#master","jpeg-lossless-decoder-js":"1.2.3","math-float32-to-binary-string":"^1.0.0","nifti-reader-js":"v0.5.3","nrrd-js":"^0.2.1","pako":"1.0.1","three":"latest"},"scripts":{"precommit":"lint-staged","tslint-check":"tslint-config-prettier-check ./tslint.json","check-codestyle":"prettier-check 'src/**/*.{js,jsx,json,css,ts,tsx}'","fix-all-code-style":"prettier --write '{{src/**,examples/**, lessons/**}/,}*.{js,jsx,json,css,ts,tsx}'","build:ami":"webpack --config webpack.config.build.js --display-error-details","build:ami:prod":"cross-env NODE_ENV=production yarn build:ami","build:clean":"rimraf -rf build/*","build:clean:hot":"rimraf -rf build/*.hot-update.*","dev:ami":"webpack --config webpack.config.build.js --hot --watch --colors","dist:ami":"yarn build:clean && yarn build:ami && yarn build:ami:prod && yarn doc","dist:examples":"node ./scripts/buildDist.js && node ./scripts/router.js examples deploy","dist:clean":"rimraf -rf dist/*","analyze:ami":"cross-env NODE_WEBPACK_ANALYZE=true yarn build:ami","analyze:ami:prod":"cross-env NODE_WEBPACK_ANALYZE=true yarn build:ami:prod","clean":"yarn build:clean && yarn dist:clean","example":"node ./scripts/router.js examples","gen:index:examples":"node ./scripts/genIndexFiles.js examples","gen:index:examples:ga":"cross-env NODE_GA=true node ./scripts/genIndexFiles.js examples","test":"karma start","testExamples":"yarn dist:clean && yarn dist:examples","doc":"jsdoc -p -r -R README.md -c jsdoc.json -d dist/doc src","ami":"yarn dist:ami && yarn test","deploy":"yarn dist:clean && yarn build:clean && yarn dist:ami && yarn dist:examples && gh-pages -d dist"},"devDependencies":{"@types/jasmine":"^3.3.2","@types/node":"^10.11.3","@types/three":"^0.93.13","babel-cli":"latest","babel-core":"^6.26.0","babel-loader":"^7.1.2","babel-preset-env":"^1.6.0","babel-runtime":"^6.26.0","compression-webpack-plugin":"^1.0.1","cross-env":"^3.2.3","gh-pages":"^1.2.0","husky":"^1.1.3","jasmine-core":"^2.99.1","jsdoc":"jsdoc3/jsdoc#master","karma":"^2.0.5","karma-chrome-launcher":"^2.2.0","karma-jasmine":"^1.1.2","karma-sinon":"^1.0.5","karma-spec-reporter":"^0.0.32","karma-webpack":"3.0.0","lint-staged":"^8.0.4","live-server":"^1.1.0","node-pre-gyp":"^0.10.0","prettier":"^1.15.1","prettier-check":"^2.0.0","puppeteer":"^1.6.1","rimraf":"^2.6.1","rollup-plugin-node-builtins":"^2.1.2","shelljs":"^0.8.2","sinon":"^2.0.0","ts-loader":"^5.2.1","tslint":"^5.11.0","tslint-config-prettier":"^1.15.0","tslint-loader":"^3.6.0","typescript":"^3.1.1","uglifyjs-webpack-plugin":"^1.2.7","webpack":"^4.16.3","webpack-bundle-analyzer":"^2.9.0","webpack-cli":"^3.1.0","webpack-dev-server":"^3.1.5","webpack-watch-livereload-plugin":"^0.0.1"},"engines":{"node":">=6.9.0"}};

/***/ }),

/***/ "./src/ami.ts":
/*!********************!*\
  !*** ./src/ami.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./cameras/cameras */ "./src/cameras/cameras.js"));
__export(__webpack_require__(/*! ./controls/controls */ "./src/controls/controls.js"));
__export(__webpack_require__(/*! ./core/core */ "./src/core/core.js"));
__export(__webpack_require__(/*! ./geometries/geometries */ "./src/geometries/geometries.js"));
__export(__webpack_require__(/*! ./helpers/helpers */ "./src/helpers/helpers.js"));
__export(__webpack_require__(/*! ./loaders/loaders */ "./src/loaders/loaders.js"));
__export(__webpack_require__(/*! ./models/models */ "./src/models/models.js"));
__export(__webpack_require__(/*! ./parsers/parsers */ "./src/parsers/parsers.js"));
__export(__webpack_require__(/*! ./presets/presets */ "./src/presets/presets.js"));
__export(__webpack_require__(/*! ./shaders/shaders */ "./src/shaders/shaders.js"));
__export(__webpack_require__(/*! ./widgets/widgets */ "./src/widgets/widgets.js"));
var packageVersion = __webpack_require__(/*! ../package.json */ "./package.json").version;
var d3Version = __webpack_require__(/*! ../node_modules/three/package.json */ "./node_modules/three/package.json").version;
window.console.log("ami " + packageVersion + " (three " + d3Version + ")");


/***/ }),

/***/ "./src/cameras/cameras.js":
/*!********************************!*\
  !*** ./src/cameras/cameras.js ***!
  \********************************/
/*! exports provided: OrthographicCamera, orthographicCameraFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _cameras_orthographic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cameras.orthographic */ "./src/cameras/cameras.orthographic.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OrthographicCamera", function() { return _cameras_orthographic__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "orthographicCameraFactory", function() { return _cameras_orthographic__WEBPACK_IMPORTED_MODULE_0__["camerasOrthographic"]; });





/***/ }),

/***/ "./src/cameras/cameras.orthographic.js":
/*!*********************************************!*\
  !*** ./src/cameras/cameras.orthographic.js ***!
  \*********************************************/
/*! exports provided: camerasOrthographic, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "camerasOrthographic", function() { return camerasOrthographic; });
/* harmony import */ var _core_core_intersections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core.intersections */ "./src/core/core.intersections.js");
/* harmony import */ var _core_core_validators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/core.validators */ "./src/core/core.validators.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * Orthographic camera from THREE.JS with some extra convenience
 * functionalities.
 *
 * @example
 * //
 * //
 *
 * @module cameras/orthographic
 */

var camerasOrthographic = function camerasOrthographic() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.OrthographicCamera === undefined) {
    return null;
  }

  var Constructor = three.OrthographicCamera;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(left, right, top, bottom, near, far) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, left, right, top, bottom, near, far));

      _this._front = null;
      _this._back = null;

      _this._directions = [new three.Vector3(1, 0, 0), new three.Vector3(0, 1, 0), new three.Vector3(0, 0, 1)];

      _this._directionsLabel = ['A', 'P', // TOP/BOTTOM
      'L', 'R', // LEFT/RIGHT
      'I', 'S'];

      _this._orientation = 'default';
      _this._convention = 'radio';
      _this._stackOrientation = 0;

      _this._right = null;
      _this._up = null;
      _this._direction = null;

      _this._controls = null;
      _this._box = null;
      _this._canvas = {
        width: null,
        height: null
      };

      _this._fromFront = true;
      _this._angle = 0;
      return _this;
    }

    /**
     * Initialize orthographic camera variables
     */


    _class.prototype.init = function init(xCosine, yCosine, zCosine, controls, box, canvas) {
      // DEPRECATION NOTICE
      window.console.warn('cameras.orthographic.init(...) is deprecated.\n        Use .cosines, .controls, .box and .canvas instead.');

      //
      if (!(_core_core_validators__WEBPACK_IMPORTED_MODULE_1__["default"].vector3(xCosine) && _core_core_validators__WEBPACK_IMPORTED_MODULE_1__["default"].vector3(yCosine) && _core_core_validators__WEBPACK_IMPORTED_MODULE_1__["default"].vector3(zCosine) && _core_core_validators__WEBPACK_IMPORTED_MODULE_1__["default"].box(box) && controls)) {
        window.console.log('Invalid input provided.');

        return false;
      }

      this._right = xCosine;
      this._up = this._adjustTopDirection(xCosine, yCosine);
      this._direction = new three.Vector3().crossVectors(this._right, this._up);
      this._controls = controls;
      this._box = box;
      this._canvas = canvas;

      var ray = {
        position: this._box.center,
        direction: this._direction
      };

      var intersections = this._orderIntersections(_core_core_intersections__WEBPACK_IMPORTED_MODULE_0__["default"].rayBox(ray, this._box), this._direction);
      this._front = intersections[0];
      this._back = intersections[1];

      // set default values
      this.up.set(this._up.x, this._up.y, this._up.z);
      this._updateCanvas();
      this._updatePositionAndTarget(this._front, this._back);
      this._updateMatrices();
      this._updateDirections();
    };

    _class.prototype.update = function update() {
      // http://www.grahamwideman.com/gw/brain/orientation/orientterms.htm
      // do magics depending on orientation and convention
      // also needs a default mode

      if (this._orientation === 'default') {
        switch (this._getMaxIndex(this._directions[2])) {
          case 0:
            this._orientation = 'sagittal';
            break;

          case 1:
            this._orientation = 'coronal';
            break;

          case 2:
            this._orientation = 'axial';
            break;

          default:
            this._orientation = 'free';
            break;
        }
      }

      if (this._orientation === 'free') {
        this._right = this._directions[0];
        this._up = this._directions[1];
        this._direction = this._directions[2];
      } else {
        var leftIndex = this.leftDirection();
        var leftDirection = this._directions[leftIndex];
        var posteriorIndex = this.posteriorDirection();
        var posteriorDirection = this._directions[posteriorIndex];
        var superiorIndex = this.superiorDirection();
        var superiorDirection = this._directions[superiorIndex];

        if (this._convention === 'radio') {
          switch (this._orientation) {
            case 'axial':
              // up vector is 'anterior'
              if (posteriorDirection.y > 0) {
                posteriorDirection.negate();
              }

              // looking towards superior
              if (superiorDirection.z < 0) {
                superiorDirection.negate();
              }

              //
              this._right = leftDirection; // does not matter right/left
              this._up = posteriorDirection;
              this._direction = superiorDirection;
              break;

            case 'coronal':
              // up vector is 'superior'
              if (superiorDirection.z < 0) {
                superiorDirection.negate();
              }

              // looking towards posterior
              if (posteriorDirection.y < 0) {
                posteriorDirection.negate();
              }

              //
              this._right = leftDirection; // does not matter right/left
              this._up = superiorDirection;
              this._direction = posteriorDirection;
              break;

            case 'sagittal':
              // up vector is 'superior'
              if (superiorDirection.z < 0) {
                superiorDirection.negate();
              }

              // looking towards right
              if (leftDirection.x > 0) {
                leftDirection.negate();
              }

              //
              this._right = posteriorDirection; // does not matter right/left
              this._up = superiorDirection;
              this._direction = leftDirection;

              break;

            default:
              window.console.warn('"' + this._orientation + '" orientation is not valid.\n                  (choices: axial, coronal, sagittal)');
              break;
          }
        } else if (this._convention === 'neuro') {
          switch (this._orientation) {
            case 'axial':
              // up vector is 'anterior'
              if (posteriorDirection.y > 0) {
                posteriorDirection.negate();
              }

              // looking towards inferior
              if (superiorDirection.z > 0) {
                superiorDirection.negate();
              }

              //
              this._right = leftDirection; // does not matter right/left
              this._up = posteriorDirection;
              this._direction = superiorDirection;
              break;

            case 'coronal':
              // up vector is 'superior'
              if (superiorDirection.z < 0) {
                superiorDirection.negate();
              }

              // looking towards anterior
              if (posteriorDirection.y > 0) {
                posteriorDirection.negate();
              }

              //
              this._right = leftDirection; // does not matter right/left
              this._up = superiorDirection;
              this._direction = posteriorDirection;
              break;

            case 'sagittal':
              // up vector is 'superior'
              if (superiorDirection.z < 0) {
                superiorDirection.negate();
              }

              // looking towards right
              if (leftDirection.x > 0) {
                leftDirection.negate();
              }

              //
              this._right = posteriorDirection; // does not matter right/left
              this._up = superiorDirection;
              this._direction = leftDirection;

              break;

            default:
              window.console.warn('"' + this._orientation + '" orientation is not valid.\n                  (choices: axial, coronal, sagittal)');
              break;
          }
        } else {
          window.console.warn(this._convention + ' is not valid (choices: radio, neuro)');
        }
      }

      // that is what determines left/right
      var ray = {
        position: this._box.center,
        direction: this._direction
      };

      var intersections = this._orderIntersections(_core_core_intersections__WEBPACK_IMPORTED_MODULE_0__["default"].rayBox(ray, this._box), this._direction);
      this._front = intersections[0];
      this._back = intersections[1];

      // set default values
      this.up.set(this._up.x, this._up.y, this._up.z);
      this._updateCanvas();
      this._updatePositionAndTarget(this._front, this._back);
      this._updateMatrices();
      this._updateDirections();
    };

    _class.prototype.leftDirection = function leftDirection() {
      return this._findMaxIndex(this._directions, 0);
    };

    _class.prototype.posteriorDirection = function posteriorDirection() {
      return this._findMaxIndex(this._directions, 1);
    };

    _class.prototype.superiorDirection = function superiorDirection() {
      return this._findMaxIndex(this._directions, 2);
    };

    /**
     * Invert rows in the current slice.
     * Inverting rows in 2 steps:
     *   * Flip the "up" vector
     *   * Look at the slice from the other side
     */


    _class.prototype.invertRows = function invertRows() {
      // flip "up" vector
      // we flip up first because invertColumns update projectio matrices
      this.up.multiplyScalar(-1);
      this.invertColumns();

      this._updateDirections();
    };

    /**
     * Invert rows in the current slice.
     * Inverting rows in 1 step:
     *   * Look at the slice from the other side
     */


    _class.prototype.invertColumns = function invertColumns() {
      this.center();
      // rotate 180 degrees around the up vector...
      var oppositePosition = this._oppositePosition(this.position);

      // update posistion and target
      // clone is needed because this.position is overwritten in method
      this._updatePositionAndTarget(oppositePosition, this.position.clone());
      this._updateMatrices();
      this._fromFront = !this._fromFront;

      this._angle %= 360;
      this._angle = 360 - this._angle;

      this._updateDirections();
    };

    /**
     * Center slice in the camera FOV.
     * It also updates the controllers properly.
     * We can center a camera from the front or from the back.
     */


    _class.prototype.center = function center() {
      if (this._fromFront) {
        this._updatePositionAndTarget(this._front, this._back);
      } else {
        this._updatePositionAndTarget(this._back, this._front);
      }

      this._updateMatrices();
      this._updateDirections();
    };

    /**
     * Pi/2 rotation around the zCosine axis.
     * Clock-wise rotation from the user point of view.
     */


    _class.prototype.rotate = function rotate() {
      var angle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      this.center();

      var rotationToApply = 90;
      if (angle === null) {
        rotationToApply *= -1;
        this._angle += 90;
      } else {
        rotationToApply = 360 - (angle - this._angle);
        this._angle = angle;
      }

      this._angle %= 360;

      // Rotate the up vector around the "zCosine"
      var rotation = new three.Matrix4().makeRotationAxis(this._direction, rotationToApply * Math.PI / 180);
      this.up.applyMatrix4(rotation);

      this._updateMatrices();
      this._updateDirections();
    };

    // dimensions[0] // width
    // dimensions[1] // height
    // direction= 0 width, 1 height, 2 best
    // factor


    _class.prototype.fitBox = function fitBox() {
      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var factor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.5;

      //
      // if (!(dimensions && dimensions.length >= 2)) {
      //   window.console.log('Invalid dimensions container.');
      //   window.console.log(dimensions);

      //   return false;
      // }

      //
      var zoom = 1;

      // update zoom
      switch (direction) {
        case 0:
          zoom = factor * this._computeZoom(this._canvas.width, this._right);
          break;
        case 1:
          zoom = factor * this._computeZoom(this._canvas.height, this._up);
          break;
        case 2:
          zoom = factor * Math.min(this._computeZoom(this._canvas.width, this._right), this._computeZoom(this._canvas.height, this._up));
          break;
        default:
          break;
      }

      if (!zoom) {
        return false;
      }

      this.zoom = zoom;

      this.center();
    };

    _class.prototype._adjustTopDirection = function _adjustTopDirection(horizontalDirection, verticalDirection) {
      var vMaxIndex = this._getMaxIndex(verticalDirection);

      // should handle vMax index === 0
      if (vMaxIndex === 2 && verticalDirection.getComponent(vMaxIndex) < 0 || vMaxIndex === 1 && verticalDirection.getComponent(vMaxIndex) > 0 || vMaxIndex === 0 && verticalDirection.getComponent(vMaxIndex) > 0) {
        verticalDirection.negate();
      }

      return verticalDirection;
    };

    _class.prototype._getMaxIndex = function _getMaxIndex(vector) {
      // init with X value
      var maxValue = Math.abs(vector.x);
      var index = 0;

      if (Math.abs(vector.y) > maxValue) {
        maxValue = Math.abs(vector.y);
        index = 1;
      }

      if (Math.abs(vector.z) > maxValue) {
        index = 2;
      }

      return index;
    };

    _class.prototype._findMaxIndex = function _findMaxIndex(directions, target) {
      // get index of the most superior direction
      var maxIndices = this._getMaxIndices(directions);

      for (var i = 0; i < maxIndices.length; i++) {
        if (maxIndices[i] === target) {
          return i;
        }
      }
    };

    _class.prototype._getMaxIndices = function _getMaxIndices(directions) {
      var indices = [];
      indices.push(this._getMaxIndex(directions[0]));
      indices.push(this._getMaxIndex(directions[1]));
      indices.push(this._getMaxIndex(directions[2]));

      return indices;
    };

    _class.prototype._orderIntersections = function _orderIntersections(intersections, direction) {
      var ordered = intersections[0].dot(direction) < intersections[1].dot(direction);

      if (!ordered) {
        return [intersections[1], intersections[0]];
      }

      return intersections;
    };

    _class.prototype._updateCanvas = function _updateCanvas() {
      var camFactor = 2;
      this.left = -this._canvas.width / camFactor;
      this.right = this._canvas.width / camFactor;
      this.top = this._canvas.height / camFactor;
      this.bottom = -this._canvas.height / camFactor;

      this._updateMatrices();
      this.controls.handleResize();
    };

    _class.prototype._oppositePosition = function _oppositePosition(position) {
      var oppositePosition = position.clone();
      // center world postion around box center
      oppositePosition.sub(this._box.center);
      // rotate
      var rotation = new three.Matrix4().makeRotationAxis(this.up, Math.PI);

      oppositePosition.applyMatrix4(rotation);
      // translate back to world position
      oppositePosition.add(this._box.center);
      return oppositePosition;
    };

    _class.prototype._computeZoom = function _computeZoom(dimension, direction) {
      if (!(dimension && dimension > 0)) {
        window.console.log('Invalid dimension provided.');
        window.console.log(dimension);
        return false;
      }

      // ray
      var ray = {
        position: this._box.center.clone(),
        direction: direction
      };

      var intersections = _core_core_intersections__WEBPACK_IMPORTED_MODULE_0__["default"].rayBox(ray, this._box);
      if (intersections.length < 2) {
        window.console.log('Can not adjust the camera ( < 2 intersections).');
        window.console.log(ray);
        window.console.log(this._box);
        return false;
      }

      return dimension / intersections[0].distanceTo(intersections[1]);
    };

    _class.prototype._updatePositionAndTarget = function _updatePositionAndTarget(position, target) {
      // position
      this.position.set(position.x, position.y, position.z);

      // targets
      this.lookAt(target.x, target.y, target.z);
      this._controls.target.set(target.x, target.y, target.z);
    };

    _class.prototype._updateMatrices = function _updateMatrices() {
      this._controls.update();
      // THEN camera
      this.updateProjectionMatrix();
      this.updateMatrixWorld();
    };

    _class.prototype._updateLabels = function _updateLabels() {
      this._directionsLabel = [this._vector2Label(this._up), this._vector2Label(this._up.clone().negate()), this._vector2Label(this._right), this._vector2Label(this._right.clone().negate()), this._vector2Label(this._direction), this._vector2Label(this._direction.clone().negate())];
    };

    _class.prototype._vector2Label = function _vector2Label(direction) {
      var index = this._getMaxIndex(direction);
      // set vector max value to 1
      var scaledDirection = direction.clone().divideScalar(Math.abs(direction.getComponent(index)));
      var delta = 0.2;
      var label = '';

      // loop through components of the vector
      for (var i = 0; i < 3; i++) {
        if (i === 0) {
          if (scaledDirection.getComponent(i) + delta >= 1) {
            label += 'L';
          } else if (scaledDirection.getComponent(i) - delta <= -1) {
            label += 'R';
          }
        }

        if (i === 1) {
          if (scaledDirection.getComponent(i) + delta >= 1) {
            label += 'P';
          } else if (scaledDirection.getComponent(i) - delta <= -1) {
            label += 'A';
          }
        }

        if (i === 2) {
          if (scaledDirection.getComponent(i) + delta >= 1) {
            label += 'S';
          } else if (scaledDirection.getComponent(i) - delta <= -1) {
            label += 'I';
          }
        }
      }

      return label;
    };

    _class.prototype._updateDirections = function _updateDirections() {
      // up is correct
      this._up = this.up.clone();

      // direction
      var pLocal = new three.Vector3(0, 0, -1);
      var pWorld = pLocal.applyMatrix4(this.matrixWorld);
      this._direction = pWorld.sub(this.position).normalize();

      // right
      this._right = new three.Vector3().crossVectors(this._direction, this.up);

      // update labels accordingly
      this._updateLabels();
    };

    _createClass(_class, [{
      key: 'controls',
      set: function set(controls) {
        this._controls = controls;
      },
      get: function get() {
        return this._controls;
      }
    }, {
      key: 'box',
      set: function set(box) {
        this._box = box;
      },
      get: function get() {
        return this._box;
      }
    }, {
      key: 'canvas',
      set: function set(canvas) {
        this._canvas = canvas;
        this._updateCanvas();
      },
      get: function get() {
        return this._canvas;
      }
    }, {
      key: 'angle',
      set: function set(angle) {
        this.rotate(angle);
      },
      get: function get() {
        return this._angle;
      }
    }, {
      key: 'directions',
      set: function set(directions) {
        this._directions = directions;
      },
      get: function get() {
        return this._directions;
      }
    }, {
      key: 'convention',
      set: function set(convention) {
        this._convention = convention;
      },
      get: function get() {
        return this._convention;
      }
    }, {
      key: 'orientation',
      set: function set(orientation) {
        this._orientation = orientation;
      },
      get: function get() {
        return this._orientation;
      }
    }, {
      key: 'directionsLabel',
      set: function set(directionsLabel) {
        this._directionsLabel = directionsLabel;
      },
      get: function get() {
        return this._directionsLabel;
      }
    }, {
      key: 'stackOrientation',
      set: function set(stackOrientation) {
        this._stackOrientation = stackOrientation;

        if (this._stackOrientation === 0) {
          this._orientation = 'default';
        } else {
          var maxIndex = this._getMaxIndex(this._directions[(this._stackOrientation + 2) % 3]);

          if (maxIndex === 0) {
            this._orientation = 'sagittal';
          } else if (maxIndex === 1) {
            this._orientation = 'coronal';
          } else if (maxIndex === 2) {
            this._orientation = 'axial';
          }
        }
      },
      get: function get() {
        //
        if (this._orientation === 'default') {
          this._stackOrientation = 0;
        } else {
          var maxIndex = this._getMaxIndex(this._direction);

          if (maxIndex === this._getMaxIndex(this._directions[2])) {
            this._stackOrientation = 0;
          } else if (maxIndex === this._getMaxIndex(this._directions[0])) {
            this._stackOrientation = 1;
          } else if (maxIndex === this._getMaxIndex(this._directions[1])) {
            this._stackOrientation = 2;
          }
        }

        return this._stackOrientation;
      }
    }]);

    return _class;
  }(Constructor);
};

// export factory

// default export to
/* harmony default export */ __webpack_exports__["default"] = (camerasOrthographic());

/***/ }),

/***/ "./src/controls/controls.js":
/*!**********************************!*\
  !*** ./src/controls/controls.js ***!
  \**********************************/
/*! exports provided: TrackballControl, trackballControlFactory, TrackballOrthoControl, trackballOrthoControlFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _controls_trackball__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controls.trackball */ "./src/controls/controls.trackball.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TrackballControl", function() { return _controls_trackball__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trackballControlFactory", function() { return _controls_trackball__WEBPACK_IMPORTED_MODULE_0__["trackball"]; });

/* harmony import */ var _controls_trackballortho__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controls.trackballortho */ "./src/controls/controls.trackballortho.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TrackballOrthoControl", function() { return _controls_trackballortho__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trackballOrthoControlFactory", function() { return _controls_trackballortho__WEBPACK_IMPORTED_MODULE_1__["trackballOrtho"]; });






/***/ }),

/***/ "./src/controls/controls.trackball.js":
/*!********************************************!*\
  !*** ./src/controls/controls.trackball.js ***!
  \********************************************/
/*! exports provided: trackball, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trackball", function() { return trackball; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Original authors from THREEJS repo
 * @author Eberhard Graether / http://egraether.com/
 * @author Mark Lundin  / http://mark-lundin.com
 * @author Simone Manini / http://daron1337.github.io
 * @author Luca Antiga  / http://lantiga.github.io
 */

var trackball = function trackball() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.EventDispatcher === undefined) {
    return null;
  }

  var Constructor = three.EventDispatcher;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(object, domElement) {
      _classCallCheck(this, _class);

      var _this2 = _possibleConstructorReturn(this, _Constructor.call(this));

      var _this = _this2;
      var STATE = {
        NONE: -1,
        ROTATE: 0,
        ZOOM: 1,
        PAN: 2,
        TOUCH_ROTATE: 3,
        TOUCH_ZOOM: 4,
        TOUCH_PAN: 5,
        CUSTOM: 99
      };

      _this2.object = object;
      _this2.domElement = domElement !== undefined ? domElement : document;

      // API

      _this2.enabled = true;

      _this2.screen = { left: 0, top: 0, width: 0, height: 0 };

      _this2.rotateSpeed = 1.0;
      _this2.zoomSpeed = 1.2;
      _this2.panSpeed = 0.3;

      _this2.noRotate = false;
      _this2.noZoom = false;
      _this2.noPan = false;
      _this2.noCustom = false;

      _this2.forceState = -1;

      _this2.staticMoving = false;
      _this2.dynamicDampingFactor = 0.2;

      _this2.minDistance = 0;
      _this2.maxDistance = Infinity;

      _this2.keys = [65 /* A*/, 83 /* S*/, 68];

      // internals

      _this2.target = new three.Vector3();

      var EPS = 0.000001;

      var lastPosition = new three.Vector3();

      var _state = STATE.NONE,
          _prevState = STATE.NONE,
          _eye = new three.Vector3(),
          _movePrev = new three.Vector2(),
          _moveCurr = new three.Vector2(),
          _lastAxis = new three.Vector3(),
          _lastAngle = 0,
          _zoomStart = new three.Vector2(),
          _zoomEnd = new three.Vector2(),
          _touchZoomDistanceStart = 0,
          _touchZoomDistanceEnd = 0,
          _panStart = new three.Vector2(),
          _panEnd = new three.Vector2(),
          _customStart = new three.Vector2(),
          _customEnd = new three.Vector2();

      // for reset

      _this2.target0 = _this2.target.clone();
      _this2.position0 = _this2.object.position.clone();
      _this2.up0 = _this2.object.up.clone();

      // events

      var changeEvent = { type: 'change' };
      var startEvent = { type: 'start' };
      var endEvent = { type: 'end' };

      // methods

      _this2.handleResize = function () {
        if (this.domElement === document) {
          this.screen.left = 0;
          this.screen.top = 0;
          this.screen.width = window.innerWidth;
          this.screen.height = window.innerHeight;
        } else {
          var box = this.domElement.getBoundingClientRect();
          // adjustments come from similar code in the jquery offset() function
          var d = this.domElement.ownerDocument.documentElement;
          this.screen.left = box.left + window.pageXOffset - d.clientLeft;
          this.screen.top = box.top + window.pageYOffset - d.clientTop;
          this.screen.width = box.width;
          this.screen.height = box.height;
        }
      };

      _this2.handleEvent = function (event) {
        if (typeof this[event.type] == 'function') {
          this[event.type](event);
        }
      };

      var getMouseOnScreen = function () {
        var vector = new three.Vector2();

        return function (pageX, pageY) {
          vector.set((pageX - _this.screen.left) / _this.screen.width, (pageY - _this.screen.top) / _this.screen.height);

          return vector;
        };
      }();

      var getMouseOnCircle = function () {
        var vector = new three.Vector2();

        return function (pageX, pageY) {
          vector.set((pageX - _this.screen.width * 0.5 - _this.screen.left) / (_this.screen.width * 0.5), (_this.screen.height + 2 * (_this.screen.top - pageY)) / _this.screen.width // screen.width intentional
          );

          return vector;
        };
      }();

      _this2.rotateCamera = function () {
        var axis = new three.Vector3(),
            quaternion = new three.Quaternion(),
            eyeDirection = new three.Vector3(),
            objectUpDirection = new three.Vector3(),
            objectSidewaysDirection = new three.Vector3(),
            moveDirection = new three.Vector3(),
            angle = void 0;

        return function () {
          moveDirection.set(_moveCurr.x - _movePrev.x, _moveCurr.y - _movePrev.y, 0);
          angle = moveDirection.length();

          if (angle) {
            _eye.copy(_this.object.position).sub(_this.target);

            eyeDirection.copy(_eye).normalize();
            objectUpDirection.copy(_this.object.up).normalize();
            objectSidewaysDirection.crossVectors(objectUpDirection, eyeDirection).normalize();

            objectUpDirection.setLength(_moveCurr.y - _movePrev.y);
            objectSidewaysDirection.setLength(_moveCurr.x - _movePrev.x);

            moveDirection.copy(objectUpDirection.add(objectSidewaysDirection));

            axis.crossVectors(moveDirection, _eye).normalize();

            angle *= _this.rotateSpeed;
            quaternion.setFromAxisAngle(axis, angle);

            _eye.applyQuaternion(quaternion);
            _this.object.up.applyQuaternion(quaternion);

            _lastAxis.copy(axis);
            _lastAngle = angle;
          } else if (!_this.staticMoving && _lastAngle) {
            _lastAngle *= Math.sqrt(1.0 - _this.dynamicDampingFactor);
            _eye.copy(_this.object.position).sub(_this.target);
            quaternion.setFromAxisAngle(_lastAxis, _lastAngle);
            _eye.applyQuaternion(quaternion);
            _this.object.up.applyQuaternion(quaternion);
          }

          _movePrev.copy(_moveCurr);
        };
      }();

      _this2.zoomCamera = function () {
        var factor = void 0;

        if (_state === STATE.TOUCH_ZOOM) {
          factor = _touchZoomDistanceStart / _touchZoomDistanceEnd;
          _touchZoomDistanceStart = _touchZoomDistanceEnd;
          _eye.multiplyScalar(factor);
        } else {
          factor = 1.0 + (_zoomEnd.y - _zoomStart.y) * _this.zoomSpeed;

          if (factor !== 1.0 && factor > 0.0) {
            _eye.multiplyScalar(factor);

            if (_this.staticMoving) {
              _zoomStart.copy(_zoomEnd);
            } else {
              _zoomStart.y += (_zoomEnd.y - _zoomStart.y) * this.dynamicDampingFactor;
            }
          }
        }
      };

      _this2.panCamera = function () {
        var mouseChange = new three.Vector2(),
            objectUp = new three.Vector3(),
            pan = new three.Vector3();

        return function () {
          mouseChange.copy(_panEnd).sub(_panStart);

          if (mouseChange.lengthSq()) {
            mouseChange.multiplyScalar(_eye.length() * _this.panSpeed);

            pan.copy(_eye).cross(_this.object.up).setLength(mouseChange.x);
            pan.add(objectUp.copy(_this.object.up).setLength(mouseChange.y));

            _this.object.position.add(pan);
            _this.target.add(pan);

            if (_this.staticMoving) {
              _panStart.copy(_panEnd);
            } else {
              _panStart.add(mouseChange.subVectors(_panEnd, _panStart).multiplyScalar(_this.dynamicDampingFactor));
            }
          }
        };
      }();

      _this2.checkDistances = function () {
        if (!_this.noZoom || !_this.noPan) {
          if (_eye.lengthSq() > _this.maxDistance * _this.maxDistance) {
            _this.object.position.addVectors(_this.target, _eye.setLength(_this.maxDistance));
          }

          if (_eye.lengthSq() < _this.minDistance * _this.minDistance) {
            _this.object.position.addVectors(_this.target, _eye.setLength(_this.minDistance));
          }
        }
      };

      _this2.update = function () {
        _eye.subVectors(_this.object.position, _this.target);

        if (!_this.noRotate) {
          _this.rotateCamera();
        }

        if (!_this.noZoom) {
          _this.zoomCamera();
        }

        if (!_this.noPan) {
          _this.panCamera();
        }

        if (!_this.noCustom) {
          _this.custom(_customStart, _customEnd);
        }

        _this.object.position.addVectors(_this.target, _eye);

        _this.checkDistances();

        _this.object.lookAt(_this.target);

        if (lastPosition.distanceToSquared(_this.object.position) > EPS) {
          _this.dispatchEvent(changeEvent);

          lastPosition.copy(_this.object.position);
        }
      };

      _this2.reset = function () {
        _state = STATE.NONE;
        _prevState = STATE.NONE;

        _this.target.copy(_this.target0);
        _this.object.position.copy(_this.position0);
        _this.object.up.copy(_this.up0);

        _eye.subVectors(_this.object.position, _this.target);

        _this.object.lookAt(_this.target);

        _this.dispatchEvent(changeEvent);

        lastPosition.copy(_this.object.position);
      };

      _this2.setState = function (targetState) {
        _this.forceState = targetState;
        _prevState = targetState;
        _state = targetState;
      };

      _this2.custom = function (customStart, customEnd) {};

      // listeners

      function keydown(event) {
        if (_this.enabled === false) return;

        window.removeEventListener('keydown', keydown);

        _prevState = _state;

        if (_state !== STATE.NONE) {
          return;
        } else if (event.keyCode === _this.keys[STATE.ROTATE] && !_this.noRotate) {
          _state = STATE.ROTATE;
        } else if (event.keyCode === _this.keys[STATE.ZOOM] && !_this.noZoom) {
          _state = STATE.ZOOM;
        } else if (event.keyCode === _this.keys[STATE.PAN] && !_this.noPan) {
          _state = STATE.PAN;
        }
      }

      function keyup(event) {
        if (_this.enabled === false) return;

        _state = _prevState;

        window.addEventListener('keydown', keydown, false);
      }

      function mousedown(event) {
        if (_this.enabled === false) return;

        event.preventDefault();
        event.stopPropagation();

        if (_state === STATE.NONE) {
          _state = event.button;
        }

        if (_state === STATE.ROTATE && !_this.noRotate) {
          _moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));
          _movePrev.copy(_moveCurr);
        } else if (_state === STATE.ZOOM && !_this.noZoom) {
          _zoomStart.copy(getMouseOnScreen(event.pageX, event.pageY));
          _zoomEnd.copy(_zoomStart);
        } else if (_state === STATE.PAN && !_this.noPan) {
          _panStart.copy(getMouseOnScreen(event.pageX, event.pageY));
          _panEnd.copy(_panStart);
        } else if (_state === STATE.CUSTOM && !_this.noCustom) {
          _customStart.copy(getMouseOnScreen(event.pageX, event.pageY));
          _customEnd.copy(_panStart);
        }

        document.addEventListener('mousemove', mousemove, false);
        document.addEventListener('mouseup', mouseup, false);

        _this.dispatchEvent(startEvent);
      }

      function mousemove(event) {
        if (_this.enabled === false) return;

        event.preventDefault();
        event.stopPropagation();

        if (_state === STATE.ROTATE && !_this.noRotate) {
          _movePrev.copy(_moveCurr);
          _moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));
        } else if (_state === STATE.ZOOM && !_this.noZoom) {
          _zoomEnd.copy(getMouseOnScreen(event.pageX, event.pageY));
        } else if (_state === STATE.PAN && !_this.noPan) {
          _panEnd.copy(getMouseOnScreen(event.pageX, event.pageY));
        } else if (_state === STATE.CUSTOM && !_this.noCustom) {
          _customEnd.copy(getMouseOnScreen(event.pageX, event.pageY));
        }
      }

      function mouseup(event) {
        if (_this.enabled === false) return;

        event.preventDefault();
        event.stopPropagation();

        if (_this.forceState === -1) {
          _state = STATE.NONE;
        }

        document.removeEventListener('mousemove', mousemove);
        document.removeEventListener('mouseup', mouseup);
        _this.dispatchEvent(endEvent);
      }

      function mousewheel(event) {
        if (_this.enabled === false) return;

        if (_this.noZoom === true) return;

        event.preventDefault();
        event.stopPropagation();

        switch (event.deltaMode) {
          case 2:
            // Zoom in pages
            _zoomStart.y -= event.deltaY * 0.025;
            break;

          case 1:
            // Zoom in lines
            _zoomStart.y -= event.deltaY * 0.01;
            break;

          default:
            // undefined, 0, assume pixels
            _zoomStart.y -= event.deltaY * 0.00025;
            break;
        }

        // _zoomStart.y += delta * 0.01;
        _this.dispatchEvent(startEvent);
        _this.dispatchEvent(endEvent);
      }

      function touchstart(event) {
        if (_this.enabled === false) return;

        if (_this.forceState === -1) {
          switch (event.touches.length) {
            case 1:
              _state = STATE.TOUCH_ROTATE;
              _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));
              _movePrev.copy(_moveCurr);
              break;

            case 2:
              _state = STATE.TOUCH_ZOOM;
              var dx = event.touches[0].pageX - event.touches[1].pageX;
              var dy = event.touches[0].pageY - event.touches[1].pageY;
              _touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);

              var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
              var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
              _panStart.copy(getMouseOnScreen(x, y));
              _panEnd.copy(_panStart);
              break;

            default:
              _state = STATE.NONE;
          }
        } else {
          // { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4, CUSTOM: 99 };
          switch (_state) {
            case 0:
              // 1 or 2 fingers, smae behavior
              _state = STATE.TOUCH_ROTATE;
              _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));
              _movePrev.copy(_moveCurr);
              break;

            case 1:
            case 4:
              if (event.touches.length >= 2) {
                _state = STATE.TOUCH_ZOOM;
                var dx = event.touches[0].pageX - event.touches[1].pageX;
                var dy = event.touches[0].pageY - event.touches[1].pageY;
                _touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);
              } else {
                _state = STATE.ZOOM;
                _zoomStart.copy(getMouseOnScreen(event.touches[0].pageX, event.touches[0].pageY));
                _zoomEnd.copy(_zoomStart);
              }
              break;

            case 2:
            case 5:
              if (event.touches.length >= 2) {
                _state = STATE.TOUCH_PAN;
                var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
                var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
                _panStart.copy(getMouseOnScreen(x, y));
                _panEnd.copy(_panStart);
              } else {
                _state = STATE.PAN;
                _panStart.copy(getMouseOnScreen(event.touches[0].pageX, event.touches[0].pageY));
                _panEnd.copy(_panStart);
              }
              break;

            case 99:
              _state = STATE.CUSTOM;
              var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
              var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
              _customStart.copy(getMouseOnScreen(x, y));
              _customEnd.copy(_customStart);
              break;

            default:
              _state = STATE.NONE;
          }
        }

        _this.dispatchEvent(startEvent);
      }

      function touchmove(event) {
        if (_this.enabled === false) return;

        event.preventDefault();
        event.stopPropagation();

        if (_this.forceState === -1) {
          switch (event.touches.length) {
            case 1:
              _movePrev.copy(_moveCurr);
              _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));
              break;

            case 2:
              var dx = event.touches[0].pageX - event.touches[1].pageX;
              var dy = event.touches[0].pageY - event.touches[1].pageY;
              _touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);

              var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
              var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
              _panEnd.copy(getMouseOnScreen(x, y));
              break;

            default:
              _state = STATE.NONE;
          }
        } else {
          // { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4, CUSTOM: 99 };
          switch (_state) {
            case 0:
              _movePrev.copy(_moveCurr);
              _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));
              break;

            case 1:
              _zoomEnd.copy(getMouseOnScreen(event.touches[0].pageX, event.touches[0].pageY));
              break;

            case 2:
              _panEnd.copy(getMouseOnScreen(event.touches[0].pageX, event.touches[0].pageY));
              break;

            case 4:
              // 2 fingers!
              // TOUCH ZOOM
              var dx = event.touches[0].pageX - event.touches[1].pageX;
              var dy = event.touches[0].pageY - event.touches[1].pageY;
              _touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);
              break;

            case 5:
              // 2 fingers
              // TOUCH_PAN
              var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
              var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
              _panEnd.copy(getMouseOnScreen(x, y));
              break;

            case 99:
              var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
              var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
              _customEnd.copy(getMouseOnScreen(x, y));
              break;

            default:
              _state = STATE.NONE;
          }
        }
      }

      function touchend(event) {
        if (_this.enabled === false) return;

        if (_this.forceState === -1) {
          switch (event.touches.length) {
            case 1:
              _movePrev.copy(_moveCurr);
              _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));
              break;

            case 2:
              _touchZoomDistanceStart = _touchZoomDistanceEnd = 0;

              var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
              var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
              _panEnd.copy(getMouseOnScreen(x, y));
              _panStart.copy(_panEnd);
              break;
          }

          _state = STATE.NONE;
        } else {
          switch (_state) {
            case 0:
              _movePrev.copy(_moveCurr);
              _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));
              break;

            case 1:
            case 2:
              break;

            case 4:
              // TOUCH ZOOM
              _touchZoomDistanceStart = _touchZoomDistanceEnd = 0;
              _state = STATE.ZOOM;
              break;

            case 5:
              // TOUCH ZOOM
              if (event.touches.length >= 2) {
                var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
                var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
                _panEnd.copy(getMouseOnScreen(x, y));
                _panStart.copy(_panEnd);
              }
              _state = STATE.PAN;
              break;

            case 99:
              var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
              var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
              _customEnd.copy(getMouseOnScreen(x, y));
              _customStart.copy(_customEnd);
              break;

            default:
              _state = STATE.NONE;
          }
        }

        _this.dispatchEvent(endEvent);
      }

      function contextmenu(event) {
        event.preventDefault();
      }

      _this2.dispose = function () {
        this.domElement.removeEventListener('contextmenu', contextmenu, false);
        this.domElement.removeEventListener('mousedown', mousedown, false);
        this.domElement.removeEventListener('wheel', mousewheel, false);

        this.domElement.removeEventListener('touchstart', touchstart, false);
        this.domElement.removeEventListener('touchend', touchend, false);
        this.domElement.removeEventListener('touchmove', touchmove, false);

        window.removeEventListener('keydown', keydown, false);
        window.removeEventListener('keyup', keyup, false);
      };

      _this2.domElement.addEventListener('contextmenu', contextmenu, false);
      _this2.domElement.addEventListener('mousedown', mousedown, false);
      _this2.domElement.addEventListener('wheel', mousewheel, false);

      _this2.domElement.addEventListener('touchstart', touchstart, false);
      _this2.domElement.addEventListener('touchend', touchend, false);
      _this2.domElement.addEventListener('touchmove', touchmove, false);

      window.addEventListener('keydown', keydown, false);
      window.addEventListener('keyup', keyup, false);

      _this2.handleResize();

      // force an update at start
      _this2.update();
      return _this2;
    }

    return _class;
  }(Constructor);
};

// export factory

// default export to
/* harmony default export */ __webpack_exports__["default"] = (trackball());

/***/ }),

/***/ "./src/controls/controls.trackballortho.js":
/*!*************************************************!*\
  !*** ./src/controls/controls.trackballortho.js ***!
  \*************************************************/
/*! exports provided: trackballOrtho, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trackballOrtho", function() { return trackballOrtho; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @author Eberhard Graether / http://egraether.com/
 * @author Mark Lundin  / http://mark-lundin.com
 * @author Patrick Fuller / http://patrick-fuller.com
 * @author Max Smolens / https://github.com/msmolens
 */

var trackballOrtho = function trackballOrtho() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.EventDispatcher === undefined) {
    return null;
  }

  var Constructor = three.EventDispatcher;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(object, domElement) {
      var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        NONE: -1,
        ROTATE: 1,
        ZOOM: 2,
        PAN: 0,
        SCROLL: 4,
        TOUCH_ROTATE: 4,
        TOUCH_ZOOM_PAN: 5
      };

      _classCallCheck(this, _class);

      var _this2 = _possibleConstructorReturn(this, _Constructor.call(this));

      var _this = _this2;
      var STATE = state;

      _this2.object = object;
      _this2.domElement = domElement !== undefined ? domElement : document;

      // API

      _this2.enabled = true;

      _this2.screen = { left: 0, top: 0, width: 0, height: 0 };

      _this2.radius = 0;

      _this2.zoomSpeed = 1.2;

      _this2.noZoom = false;
      _this2.noPan = false;

      _this2.staticMoving = false;
      _this2.dynamicDampingFactor = 0.2;

      _this2.keys = [65 /* A*/, 83 /* S*/, 68];

      // internals

      _this2.target = new three.Vector3();

      var EPS = 0.000001;

      var _changed = true;

      var _state = STATE.NONE,
          _prevState = STATE.NONE,
          _eye = new three.Vector3(),
          _zoomStart = new three.Vector2(),
          _zoomEnd = new three.Vector2(),
          _touchZoomDistanceStart = 0,
          _touchZoomDistanceEnd = 0,
          _panStart = new three.Vector2(),
          _panEnd = new three.Vector2();

      // window level fire after...

      // for reset

      _this2.target0 = _this2.target.clone();
      _this2.position0 = _this2.object.position.clone();
      _this2.up0 = _this2.object.up.clone();

      _this2.left0 = _this2.object.left;
      _this2.right0 = _this2.object.right;
      _this2.top0 = _this2.object.top;
      _this2.bottom0 = _this2.object.bottom;

      // events

      var changeEvent = { type: 'change' };
      var startEvent = { type: 'start' };
      var endEvent = { type: 'end' };

      // methods

      _this2.handleResize = function () {
        if (this.domElement === document) {
          this.screen.left = 0;
          this.screen.top = 0;
          this.screen.width = window.innerWidth;
          this.screen.height = window.innerHeight;
        } else {
          var box = this.domElement.getBoundingClientRect();
          // adjustments come from similar code in the jquery offset() function
          var d = this.domElement.ownerDocument.documentElement;
          this.screen.left = box.left + window.pageXOffset - d.clientLeft;
          this.screen.top = box.top + window.pageYOffset - d.clientTop;
          this.screen.width = box.width;
          this.screen.height = box.height;
        }

        this.radius = 0.5 * Math.min(this.screen.width, this.screen.height);

        this.left0 = this.object.left;
        this.right0 = this.object.right;
        this.top0 = this.object.top;
        this.bottom0 = this.object.bottom;
      };

      _this2.handleEvent = function (event) {
        if (typeof this[event.type] == 'function') {
          this[event.type](event);
        }
      };

      var getMouseOnScreen = function () {
        var vector = new three.Vector2();

        return function getMouseOnScreen(pageX, pageY) {
          vector.set((pageX - _this.screen.left) / _this.screen.width, (pageY - _this.screen.top) / _this.screen.height);

          return vector;
        };
      }();

      _this2.zoomCamera = function () {
        if (_state === STATE.TOUCH_ZOOM_PAN) {
          var factor = _touchZoomDistanceEnd / _touchZoomDistanceStart;
          _touchZoomDistanceStart = _touchZoomDistanceEnd;

          _this.object.zoom *= factor;

          _changed = true;
        } else {
          var factor = 1.0 + (_zoomEnd.y - _zoomStart.y) * _this.zoomSpeed;

          if (Math.abs(factor - 1.0) > EPS && factor > 0.0) {
            _this.object.zoom /= factor;

            if (_this.staticMoving) {
              _zoomStart.copy(_zoomEnd);
            } else {
              _zoomStart.y += (_zoomEnd.y - _zoomStart.y) * this.dynamicDampingFactor;
            }

            _changed = true;
          }
        }
      };

      _this2.panCamera = function () {
        var mouseChange = new three.Vector2(),
            objectUp = new three.Vector3(),
            pan = new three.Vector3();

        return function panCamera() {
          mouseChange.copy(_panEnd).sub(_panStart);

          if (mouseChange.lengthSq()) {
            // Scale movement to keep clicked/dragged position under cursor
            var scale_x = (_this.object.right - _this.object.left) / _this.object.zoom;
            var scale_y = (_this.object.top - _this.object.bottom) / _this.object.zoom;
            mouseChange.x *= scale_x;
            mouseChange.y *= scale_y;

            pan.copy(_eye).cross(_this.object.up).setLength(mouseChange.x);
            pan.add(objectUp.copy(_this.object.up).setLength(mouseChange.y));

            _this.object.position.add(pan);
            _this.target.add(pan);

            if (_this.staticMoving) {
              _panStart.copy(_panEnd);
            } else {
              _panStart.add(mouseChange.subVectors(_panEnd, _panStart).multiplyScalar(_this.dynamicDampingFactor));
            }

            _changed = true;
          }
        };
      }();

      _this2.update = function () {
        _eye.subVectors(_this.object.position, _this.target);

        if (!_this.noZoom) {
          _this.zoomCamera();

          if (_changed) {
            _this.object.updateProjectionMatrix();
          }
        }

        if (!_this.noPan) {
          _this.panCamera();
        }

        _this.object.position.addVectors(_this.target, _eye);

        _this.object.lookAt(_this.target);

        if (_changed) {
          _this.dispatchEvent(changeEvent);

          _changed = false;
        }
      };

      _this2.reset = function () {
        _state = STATE.NONE;
        _prevState = STATE.NONE;

        _this.target.copy(_this.target0);
        _this.object.position.copy(_this.position0);
        _this.object.up.copy(_this.up0);

        _eye.subVectors(_this.object.position, _this.target);

        _this.object.left = _this.left0;
        _this.object.right = _this.right0;
        _this.object.top = _this.top0;
        _this.object.bottom = _this.bottom0;

        _this.object.lookAt(_this.target);

        _this.dispatchEvent(changeEvent);

        _changed = false;
      };

      // listeners

      function keydown(event) {
        if (_this.enabled === false) return;

        window.removeEventListener('keydown', keydown);

        _prevState = _state;

        if (_state !== STATE.NONE) {
          return;
        } else if (event.keyCode === _this.keys[STATE.ROTATE] && !_this.noRotate) {
          _state = STATE.ROTATE;
        } else if (event.keyCode === _this.keys[STATE.ZOOM] && !_this.noZoom) {
          _state = STATE.ZOOM;
        } else if (event.keyCode === _this.keys[STATE.PAN] && !_this.noPan) {
          _state = STATE.PAN;
        }
      }

      function keyup(event) {
        if (_this.enabled === false) return;

        _state = _prevState;

        window.addEventListener('keydown', keydown, false);
      }

      function mousedown(event) {
        if (_this.enabled === false) return;

        event.preventDefault();
        event.stopPropagation();

        if (_state === STATE.NONE) {
          _state = event.button;
        }

        if (_state === STATE.ROTATE && !_this.noRotate) {} else if (_state === STATE.ZOOM && !_this.noZoom) {
          _zoomStart.copy(getMouseOnScreen(event.pageX, event.pageY));
          _zoomEnd.copy(_zoomStart);
        } else if (_state === STATE.PAN && !_this.noPan) {
          _panStart.copy(getMouseOnScreen(event.pageX, event.pageY));
          _panEnd.copy(_panStart);
        }

        document.addEventListener('mousemove', mousemove, false);
        document.addEventListener('mouseup', mouseup, false);

        _this.dispatchEvent(startEvent);
      }

      function mousemove(event) {
        if (_this.enabled === false) return;

        event.preventDefault();
        event.stopPropagation();

        if (_state === STATE.ROTATE && !_this.noRotate) {} else if (_state === STATE.ZOOM && !_this.noZoom) {
          _zoomEnd.copy(getMouseOnScreen(event.pageX, event.pageY));
        } else if (_state === STATE.PAN && !_this.noPan) {
          _panEnd.copy(getMouseOnScreen(event.pageX, event.pageY));
        }
      }

      function mouseup(event) {
        if (_this.enabled === false) return;

        event.preventDefault();
        event.stopPropagation();

        _state = STATE.NONE;

        document.removeEventListener('mousemove', mousemove);
        document.removeEventListener('mouseup', mouseup);
        _this.dispatchEvent(endEvent);
      }

      function mousewheel(event) {
        if (_this.enabled === false) return;

        event.preventDefault();
        event.stopPropagation();

        //_zoomStart.y += event.deltaY * 0.01;
        /**
         * Watch deltaX and deltaY because in some cases, (i.e. Shift or Alt key pressed)
         * deltaX and deltaY are inverted.
         *
         * It is known behaviors/shortcuts to scroll through a page horizontally.
         */
        _this.dispatchEvent({
          type: 'OnScroll',
          delta: event.deltaX * 0.01 + event.deltaY * 0.01
        });

        _this.dispatchEvent(startEvent);
        _this.dispatchEvent(endEvent);
      }

      function touchstart(event) {
        if (_this.enabled === false) return;

        switch (event.touches.length) {
          case 1:
            _state = STATE.TOUCH_ROTATE;

            break;

          case 2:
            _state = STATE.TOUCH_ZOOM_PAN;
            var dx = event.touches[0].pageX - event.touches[1].pageX;
            var dy = event.touches[0].pageY - event.touches[1].pageY;
            _touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);

            var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
            var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
            _panStart.copy(getMouseOnScreen(x, y));
            _panEnd.copy(_panStart);
            break;

          default:
            _state = STATE.NONE;
        }
        _this.dispatchEvent(startEvent);
      }

      function touchmove(event) {
        if (_this.enabled === false) return;

        event.preventDefault();
        event.stopPropagation();

        switch (event.touches.length) {
          case 1:
            break;

          case 2:
            var dx = event.touches[0].pageX - event.touches[1].pageX;
            var dy = event.touches[0].pageY - event.touches[1].pageY;
            _touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);

            var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
            var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
            _panEnd.copy(getMouseOnScreen(x, y));
            break;

          default:
            _state = STATE.NONE;
        }
      }

      function touchend(event) {
        if (_this.enabled === false) return;

        switch (event.touches.length) {
          case 1:
            break;

          case 2:
            _touchZoomDistanceStart = _touchZoomDistanceEnd = 0;

            var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;
            var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;
            _panEnd.copy(getMouseOnScreen(x, y));
            _panStart.copy(_panEnd);
            break;
        }

        _state = STATE.NONE;
        _this.dispatchEvent(endEvent);
      }

      function contextmenu(event) {
        event.preventDefault();
      }

      _this2.dispose = function () {
        this.domElement.removeEventListener('contextmenu', contextmenu, false);
        this.domElement.removeEventListener('mousedown', mousedown, false);
        this.domElement.removeEventListener('wheel', mousewheel, false);

        this.domElement.removeEventListener('touchstart', touchstart, false);
        this.domElement.removeEventListener('touchend', touchend, false);
        this.domElement.removeEventListener('touchmove', touchmove, false);

        window.removeEventListener('keydown', keydown, false);
        window.removeEventListener('keyup', keyup, false);
      };

      _this2.domElement.addEventListener('contextmenu', contextmenu, false);
      _this2.domElement.addEventListener('mousedown', mousedown, false);
      _this2.domElement.addEventListener('wheel', mousewheel, false);

      _this2.domElement.addEventListener('touchstart', touchstart, false);
      _this2.domElement.addEventListener('touchend', touchend, false);
      _this2.domElement.addEventListener('touchmove', touchmove, false);

      window.addEventListener('keydown', keydown, false);
      window.addEventListener('keyup', keyup, false);

      _this2.handleResize();

      // force an update at start
      _this2.update();
      return _this2;
    }

    return _class;
  }(Constructor);
};

// export factory

// default export to
/* harmony default export */ __webpack_exports__["default"] = (trackballOrtho());

/***/ }),

/***/ "./src/core/core.colors.ts":
/*!*********************************!*\
  !*** ./src/core/core.colors.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var COLORS;
(function (COLORS) {
    COLORS["blue"] = "#00B0FF";
    COLORS["yellow"] = "#FFEB3B";
    COLORS["red"] = "#F50057";
    COLORS["green"] = "#76FF03";
    COLORS["white"] = "#FFF";
    COLORS["lightRed"] = "#F77";
})(COLORS = exports.COLORS || (exports.COLORS = {}));
/**
 * Colors utility functions
 */
var Colors = /** @class */ (function () {
    function Colors() {
    }
    /**
     * Convert LAB to XYZ
     * http://www.easyrgb.com/index.php?X=MATH&H=08#text8
     *
     * @param {*} l
     * @param {*} a
     * @param {*} b
     *
     * @return {*}
     */
    Colors.cielab2XYZ = function (l, a, b) {
        // https://www.mathworks.com/help/images/ref/whitepoint.html
        // d65: 0.9504, 1, 1.0888
        var refX = 95.047;
        var refY = 100.0;
        var refZ = 108.883;
        var y = (l + 16) / 116;
        var x = a / 500 + y;
        var z = y - b / 200;
        if (Math.pow(y, 3) > 0.008856) {
            y = Math.pow(y, 3);
        }
        else {
            y = (y - 16 / 116) / 7.787;
        }
        if (Math.pow(x, 3) > 0.008856) {
            x = Math.pow(x, 3);
        }
        else {
            x = (x - 16 / 116) / 7.787;
        }
        if (Math.pow(z, 3) > 0.008856) {
            z = Math.pow(z, 3);
        }
        else {
            z = (z - 16 / 116) / 7.787;
        }
        return [refX * x, refY * y, refZ * z];
    };
    /**
     * Convert XYZ to RGB space
     *
     * @param {*} x
     * @param {*} y
     * @param {*} z
     *
     * @return {*}
     */
    Colors.xyz2RGB = function (x, y, z) {
        x /= 100;
        y /= 100;
        z /= 100;
        var r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        var g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        var b = x * 0.0557 + y * -0.204 + z * 1.057;
        if (r > 0.0031308) {
            r = 1.055 * Math.pow(r, 1 / 2.4) - 0.055;
        }
        else {
            r = 12.92 * r;
        }
        if (g > 0.0031308) {
            g = 1.055 * Math.pow(g, 1 / 2.4) - 0.055;
        }
        else {
            g = 12.92 * g;
        }
        if (b > 0.0031308) {
            b = 1.055 * Math.pow(b, 1 / 2.4) - 0.055;
        }
        else {
            b = 12.92 * b;
        }
        r = r * 255;
        g = g * 255;
        b = b * 255;
        return [r, g, b];
    };
    /**
     * Convert LAB to RGB
     *
     * @param {*} l
     * @param {*} a
     * @param {*} b
     *
     * @return {*}
     */
    Colors.cielab2RGB = function (l, a, b) {
        if (l === void 0) { l = 50; }
        if (a === void 0) { a = 0; }
        if (b === void 0) { b = 0; }
        if (!(l >= 0 && l <= 100)) {
            return null;
        }
        var _a = this.cielab2XYZ(l, a, b), x = _a[0], y = _a[1], z = _a[2];
        return this.xyz2RGB(x, y, z);
    };
    return Colors;
}());
exports.default = Colors;


/***/ }),

/***/ "./src/core/core.intersections.js":
/*!****************************************!*\
  !*** ./src/core/core.intersections.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.utils */ "./src/core/core.utils.js");
/* harmony import */ var _core_validators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.validators */ "./src/core/core.validators.js");
/* harmony import */ var three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/src/math/Matrix4 */ "./node_modules/three/src/math/Matrix4.js");
/* harmony import */ var three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/src/math/Vector3 */ "./node_modules/three/src/math/Vector3.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }







/**
 * Compute/test intersection between different objects.
 *
 * @module core/intersections
 */

var Intersections = function () {
  function Intersections() {
    _classCallCheck(this, Intersections);
  }

  /**
   * Compute intersection between oriented bounding box and a plane.
   *
   * Returns intersection in plane's space.
   *
   * Should return at least 3 intersections. If not, the plane and the box do not
   * intersect.
   *
   * @param {Object} aabb - Axe Aligned Bounding Box representation.
   * @param {Vector3} aabb.halfDimensions - Half dimensions of the box.
   * @param {Vector3} aabb.center - Center of the box.
   * @param {Matrix4} aabb.toAABB - Transform to go from plane space to box space.
   * @param {Object} plane - Plane representation
   * @param {Vector3} plane.position - position of normal which describes the plane.
   * @param {Vector3} plane.direction - Direction of normal which describes the plane.
   *
   * @returns {Array<Vector3>} List of all intersections in plane's space.
   * @returns {boolean} false is invalid input provided.
   *
   * @example
   * //Returns array with intersection N intersections
   * let aabb = {
   *   center: new Vector3(150, 150, 150),
   *   halfDimensions: new Vector3(50, 60, 70),
   *   toAABB: new Matrix4()
   * }
   * let plane = {
   *   position: new Vector3(110, 120, 130),
   *   direction: new Vector3(1, 0, 0)
   * }
   *
   * let intersections = CoreIntersections.aabbPlane(aabb, plane);
   * // intersections ==
   * //[ { x : 110, y : 90,  z : 80 },
   * //  { x : 110, y : 210, z : 220 },
   * //  { x : 110, y : 210, z : 80 },
   * //  { x : 110, y : 90,  z : 220 } ]
   *
   * //Returns empty array with 0 intersections
   * let aabb = {
   *
   * }
   * let plane = {
   *
   * }
   *
   * let intersections = VJS.Core.Validators.matrix4(new Vector3());
   *
   * //Returns false if invalid input?
   *
   */
  Intersections.aabbPlane = function aabbPlane(aabb, plane) {
    //
    // obb = { halfDimensions, orientation, center, toAABB }
    // plane = { position, direction }
    //
    //
    // LOGIC:
    //
    // Test intersection of each edge of the Oriented Bounding Box with the Plane
    //
    // ALL EDGES
    //
    //      .+-------+
    //    .' |     .'|
    //   +---+---+'  |
    //   |   |   |   |
    //   |  ,+---+---+
    //   |.'     | .'
    //   +-------+'
    //
    // SPACE ORIENTATION
    //
    //       +
    //     j |
    //       |
    //       |   i
    //   k  ,+-------+
    //    .'
    //   +
    //
    //
    // 1- Move Plane position and orientation in IJK space
    // 2- Test Edges/ IJK Plane intersections
    // 3- Return intersection Edge/ IJK Plane if it touches the Oriented BBox

    var intersections = [];

    if (!(this.validateAabb(aabb) && this.validatePlane(plane))) {
      window.console.log('Invalid aabb or plane provided.');
      return false;
    }

    // invert space matrix
    var fromAABB = new three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_2__["Matrix4"]();
    fromAABB.getInverse(aabb.toAABB);

    var t1 = plane.direction.clone().applyMatrix4(aabb.toAABB);
    var t0 = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](0, 0, 0).applyMatrix4(aabb.toAABB);

    var planeAABB = this.posdir(plane.position.clone().applyMatrix4(aabb.toAABB), new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](t1.x - t0.x, t1.y - t0.y, t1.z - t0.z).normalize());

    var bbox = _core_utils__WEBPACK_IMPORTED_MODULE_0__["default"].bbox(aabb.center, aabb.halfDimensions);

    var orientation = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](1, 0, 0), new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](0, 1, 0), new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](0, 0, 1));

    // 12 edges (i.e. ray)/plane intersection tests
    // RAYS STARTING FROM THE FIRST CORNER (0, 0, 0)
    //
    //       +
    //       |
    //       |
    //       |
    //      ,+---+---+
    //    .'
    //   +

    var ray = this.posdir(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](aabb.center.x - aabb.halfDimensions.x, aabb.center.y - aabb.halfDimensions.y, aabb.center.z - aabb.halfDimensions.z), orientation.x);
    this.rayPlaneInBBox(ray, planeAABB, bbox, intersections);

    ray.direction = orientation.y;
    this.rayPlaneInBBox(ray, planeAABB, bbox, intersections);

    ray.direction = orientation.z;
    this.rayPlaneInBBox(ray, planeAABB, bbox, intersections);

    // RAYS STARTING FROM THE LAST CORNER
    //
    //               +
    //             .'
    //   +-------+'
    //           |
    //           |
    //           |
    //           +
    //

    var ray2 = this.posdir(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](aabb.center.x + aabb.halfDimensions.x, aabb.center.y + aabb.halfDimensions.y, aabb.center.z + aabb.halfDimensions.z), orientation.x);
    this.rayPlaneInBBox(ray2, planeAABB, bbox, intersections);

    ray2.direction = orientation.y;
    this.rayPlaneInBBox(ray2, planeAABB, bbox, intersections);

    ray2.direction = orientation.z;
    this.rayPlaneInBBox(ray2, planeAABB, bbox, intersections);

    // RAYS STARTING FROM THE SECOND CORNER
    //
    //               +
    //               |
    //               |
    //               |
    //               +
    //             .'
    //           +'

    var ray3 = this.posdir(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](aabb.center.x + aabb.halfDimensions.x, aabb.center.y - aabb.halfDimensions.y, aabb.center.z - aabb.halfDimensions.z), orientation.y);
    this.rayPlaneInBBox(ray3, planeAABB, bbox, intersections);

    ray3.direction = orientation.z;
    this.rayPlaneInBBox(ray3, planeAABB, bbox, intersections);

    // RAYS STARTING FROM THE THIRD CORNER
    //
    //      .+-------+
    //    .'
    //   +
    //
    //
    //
    //

    var ray4 = this.posdir(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](aabb.center.x - aabb.halfDimensions.x, aabb.center.y + aabb.halfDimensions.y, aabb.center.z - aabb.halfDimensions.z), orientation.x);
    this.rayPlaneInBBox(ray4, planeAABB, bbox, intersections);

    ray4.direction = orientation.z;
    this.rayPlaneInBBox(ray4, planeAABB, bbox, intersections);

    // RAYS STARTING FROM THE FOURTH CORNER
    //
    //
    //
    //   +
    //   |
    //   |
    //   |
    //   +-------+

    var ray5 = this.posdir(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](aabb.center.x - aabb.halfDimensions.x, aabb.center.y - aabb.halfDimensions.y, aabb.center.z + aabb.halfDimensions.z), orientation.x);
    this.rayPlaneInBBox(ray5, planeAABB, bbox, intersections);

    ray5.direction = orientation.y;
    this.rayPlaneInBBox(ray5, planeAABB, bbox, intersections);

    // @todo make sure objects are unique...

    // back to original space
    intersections.map(function (element) {
      return element.applyMatrix4(fromAABB);
    });

    return intersections;
  };

  /**
   * Compute intersection between a ray and a plane.
   *
   * @memberOf this
   * @public
   *
   * @param {Object} ray - Ray representation.
   * @param {Vector3} ray.position - position of normal which describes the ray.
   * @param {Vector3} ray.direction - Direction of normal which describes the ray.
   * @param {Object} plane - Plane representation
   * @param {Vector3} plane.position - position of normal which describes the plane.
   * @param {Vector3} plane.direction - Direction of normal which describes the plane.
   *
   * @returns {Vector3|null} Intersection between ray and plane or null.
   */


  Intersections.rayPlane = function rayPlane(ray, plane) {
    // ray: {position, direction}
    // plane: {position, direction}

    if (ray.direction.dot(plane.direction) !== 0) {
      //
      // not parallel, move forward
      //
      // LOGIC:
      //
      // Ray equation: P = P0 + tV
      // P = <Px, Py, Pz>
      // P0 = <ray.position.x, ray.position.y, ray.position.z>
      // V = <ray.direction.x, ray.direction.y, ray.direction.z>
      //
      // Therefore:
      // Px = ray.position.x + t*ray.direction.x
      // Py = ray.position.y + t*ray.direction.y
      // Pz = ray.position.z + t*ray.direction.z
      //
      //
      //
      // Plane equation: ax + by + cz + d = 0
      // a = plane.direction.x
      // b = plane.direction.y
      // c = plane.direction.z
      // d = -( plane.direction.x*plane.position.x +
      //        plane.direction.y*plane.position.y +
      //        plane.direction.z*plane.position.z )
      //
      //
      // 1- in the plane equation, we replace x, y and z by Px, Py and Pz
      // 2- find t
      // 3- replace t in Px, Py and Pz to get the coordinate of the intersection
      //
      var t = (plane.direction.x * (plane.position.x - ray.position.x) + plane.direction.y * (plane.position.y - ray.position.y) + plane.direction.z * (plane.position.z - ray.position.z)) / (plane.direction.x * ray.direction.x + plane.direction.y * ray.direction.y + plane.direction.z * ray.direction.z);

      var intersection = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](ray.position.x + t * ray.direction.x, ray.position.y + t * ray.direction.y, ray.position.z + t * ray.direction.z);

      return intersection;
    }

    return null;
  };

  /**
   * Compute intersection between a ray and a box
   * @param {Object} ray
   * @param {Object} box
   * @return {Array}
   */


  Intersections.rayBox = function rayBox(ray, box) {
    // should also do the space transforms here
    // ray: {position, direction}
    // box: {halfDimensions, center}

    var intersections = [];

    var bbox = _core_utils__WEBPACK_IMPORTED_MODULE_0__["default"].bbox(box.center, box.halfDimensions);

    // window.console.log(bbox);

    // X min
    var plane = this.posdir(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](bbox.min.x, box.center.y, box.center.z), new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](-1, 0, 0));
    this.rayPlaneInBBox(ray, plane, bbox, intersections);

    // X max
    plane = this.posdir(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](bbox.max.x, box.center.y, box.center.z), new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](1, 0, 0));
    this.rayPlaneInBBox(ray, plane, bbox, intersections);

    // Y min
    plane = this.posdir(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](box.center.x, bbox.min.y, box.center.z), new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](0, -1, 0));
    this.rayPlaneInBBox(ray, plane, bbox, intersections);

    // Y max
    plane = this.posdir(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](box.center.x, bbox.max.y, box.center.z), new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](0, 1, 0));
    this.rayPlaneInBBox(ray, plane, bbox, intersections);

    // Z min
    plane = this.posdir(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](box.center.x, box.center.y, bbox.min.z), new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](0, 0, -1));
    this.rayPlaneInBBox(ray, plane, bbox, intersections);

    // Z max
    plane = this.posdir(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](box.center.x, box.center.y, bbox.max.z), new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_3__["Vector3"](0, 0, 1));
    this.rayPlaneInBBox(ray, plane, bbox, intersections);

    return intersections;
  };

  /**
   * Intersection between ray and a plane that are in a box.
   * @param {*} ray
   * @param {*} planeAABB
   * @param {*} bbox
   * @param {*} intersections
   */


  Intersections.rayPlaneInBBox = function rayPlaneInBBox(ray, planeAABB, bbox, intersections) {
    var intersection = this.rayPlane(ray, planeAABB);
    // window.console.log(intersection);
    if (intersection && this.inBBox(intersection, bbox)) {
      if (!intersections.find(this.findIntersection(intersection))) {
        intersections.push(intersection);
      }
    }
  };

  /**
   * Find intersection in array
   * @param {*} myintersection
   */


  Intersections.findIntersection = function findIntersection(myintersection) {
    return function found(element, index, array) {
      if (myintersection.x === element.x && myintersection.y === element.y && myintersection.z === element.z) {
        return true;
      }

      return false;
    };
  };

  /**
   * Is point in box.
   * @param {Object} point
   * @param {Object} bbox
   * @return {Boolean}
   */


  Intersections.inBBox = function inBBox(point, bbox) {
    //
    var epsilon = 0.0001;
    if (point && point.x >= bbox.min.x - epsilon && point.y >= bbox.min.y - epsilon && point.z >= bbox.min.z - epsilon && point.x <= bbox.max.x + epsilon && point.y <= bbox.max.y + epsilon && point.z <= bbox.max.z + epsilon) {
      return true;
    }
    return false;
  };

  Intersections.posdir = function posdir(position, direction) {
    return { position: position, direction: direction };
  };

  Intersections.validatePlane = function validatePlane(plane) {
    //
    if (plane === null) {
      window.console.log('Invalid plane.');
      window.console.log(plane);

      return false;
    }

    if (!_core_validators__WEBPACK_IMPORTED_MODULE_1__["default"].vector3(plane.position)) {
      window.console.log('Invalid plane.position.');
      window.console.log(plane.position);

      return false;
    }

    if (!_core_validators__WEBPACK_IMPORTED_MODULE_1__["default"].vector3(plane.direction)) {
      window.console.log('Invalid plane.direction.');
      window.console.log(plane.direction);

      return false;
    }

    return true;
  };

  Intersections.validateAabb = function validateAabb(aabb) {
    //
    if (aabb === null) {
      window.console.log('Invalid aabb.');
      window.console.log(aabb);
      return false;
    }

    if (!_core_validators__WEBPACK_IMPORTED_MODULE_1__["default"].matrix4(aabb.toAABB)) {
      window.console.log('Invalid aabb.toAABB: ');
      window.console.log(aabb.toAABB);

      return false;
    }

    if (!_core_validators__WEBPACK_IMPORTED_MODULE_1__["default"].vector3(aabb.center)) {
      window.console.log('Invalid aabb.center.');
      window.console.log(aabb.center);

      return false;
    }

    if (!(_core_validators__WEBPACK_IMPORTED_MODULE_1__["default"].vector3(aabb.halfDimensions) && aabb.halfDimensions.x >= 0 && aabb.halfDimensions.y >= 0 && aabb.halfDimensions.z >= 0)) {
      window.console.log('Invalid aabb.halfDimensions.');
      window.console.log(aabb.halfDimensions);

      return false;
    }

    return true;
  };

  return Intersections;
}();

/* harmony default export */ __webpack_exports__["default"] = (Intersections);

/***/ }),

/***/ "./src/core/core.js":
/*!**************************!*\
  !*** ./src/core/core.js ***!
  \**************************/
/*! exports provided: ColorsCore, IntersectionsCore, UtilsCore, ValidatorsCore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_colors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.colors */ "./src/core/core.colors.ts");
/* harmony import */ var _core_colors__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_core_colors__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "ColorsCore", function() { return _core_colors__WEBPACK_IMPORTED_MODULE_0___default.a; });
/* harmony import */ var _core_intersections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.intersections */ "./src/core/core.intersections.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntersectionsCore", function() { return _core_intersections__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _core_validators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core.validators */ "./src/core/core.validators.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ValidatorsCore", function() { return _core_validators__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _core_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core.utils */ "./src/core/core.utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UtilsCore", function() { return _core_utils__WEBPACK_IMPORTED_MODULE_3__["default"]; });








/***/ }),

/***/ "./src/core/core.utils.js":
/*!********************************!*\
  !*** ./src/core/core.utils.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.validators */ "./src/core/core.validators.js");
/* harmony import */ var three_src_math_Box3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/src/math/Box3 */ "./node_modules/three/src/math/Box3.js");
/* harmony import */ var three_src_core_Raycaster__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/src/core/Raycaster */ "./node_modules/three/src/core/Raycaster.js");
/* harmony import */ var three_src_math_Triangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/src/math/Triangle */ "./node_modules/three/src/math/Triangle.js");
/* harmony import */ var three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/src/math/Matrix4 */ "./node_modules/three/src/math/Matrix4.js");
/* harmony import */ var three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/src/math/Vector3 */ "./node_modules/three/src/math/Vector3.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }









/**
 * General purpose functions.
 *
 * @module core/utils
 */

var CoreUtils = function () {
  function CoreUtils() {
    _classCallCheck(this, CoreUtils);
  }

  /**
   * Generate a bouding box object.
   * @param {Vector3} center - Center of the box.
   * @param {Vector3} halfDimensions - Half Dimensions of the box.
   * @return {Object} The bounding box object. {Object.min} is a {Vector3}
   * containing the min bounds. {Object.max} is a {Vector3} containing the
   * max bounds.
   * @return {boolean} False input NOT valid.
   * @example
   * // Returns
   * //{ min: { x : 0, y : 0,  z : 0 },
   * //  max: { x : 2, y : 4,  z : 6 }
   * //}
   * VJS.Core.Utils.bbox(
   *   new Vector3(1, 2, 3), new Vector3(1, 2, 3));
   *
   * //Returns false
   * VJS.Core.Utils.bbox(new Vector3(), new Matrix4());
   *
   */
  CoreUtils.bbox = function bbox(center, halfDimensions) {
    // make sure we have valid inputs
    if (!(_core_validators__WEBPACK_IMPORTED_MODULE_0__["default"].vector3(center) && _core_validators__WEBPACK_IMPORTED_MODULE_0__["default"].vector3(halfDimensions))) {
      window.console.log('Invalid center or plane halfDimensions.');
      return false;
    }

    // make sure half dimensions are >= 0
    if (!(halfDimensions.x >= 0 && halfDimensions.y >= 0 && halfDimensions.z >= 0)) {
      window.console.log('halfDimensions must be >= 0.');
      window.console.log(halfDimensions);
      return false;
    }

    // min/max bound
    var min = center.clone().sub(halfDimensions);
    var max = center.clone().add(halfDimensions);

    return {
      min: min,
      max: max
    };
  };

  /**
   * Find min/max values in an array
   * @param {Array} data
   * @return {Array}
   */


  CoreUtils.minMax = function minMax() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var minMax = [65535, -32768];
    var numPixels = data.length;

    for (var index = 0; index < numPixels; index++) {
      var spv = data[index];
      minMax[0] = Math.min(minMax[0], spv);
      minMax[1] = Math.max(minMax[1], spv);
    }

    return minMax;
  };

  /**
   * Check HTMLElement
   * @param {HTMLElement} obj
   * @return {boolean}
   */


  CoreUtils.isElement = function isElement(obj) {
    try {
      // Using W3 DOM2 (works for FF, Opera and Chrom)
      return obj instanceof HTMLElement;
    } catch (e) {
      // Browsers not supporting W3 DOM2 don't have HTMLElement and
      // an exception is thrown and we end up here. Testing some
      // properties that all elements have. (works on IE7)
      return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj.nodeType === 1 && _typeof(obj.style) === 'object' && _typeof(obj.ownerDocument) === 'object';
    }
  };

  /**
   * Check string
   * @param {String} str
   * @return {Boolean}
   */


  CoreUtils.isString = function isString(str) {
    return typeof str === 'string' || str instanceof String;
  };

  /**
   * Parse url and find out the extension of the exam file.
   *
   * @param {*} url - The url to be parsed.
   * The query string can contain some "special" parameters that can be used to ease the parsing process
   * when the url doesn't match the exam file name on the filesystem:
   * - filename: the name of the exam file
   * - contentType: the mime type of the exam file. Currently only "application/dicom" is recognized, nifti files don't have a standard mime type.
   * For  example:
   * http://<hostname>/getExam?id=100&filename=myexam%2Enii%2Egz
   * http://<hostname>/getExam?id=100&contentType=application%2Fdicom
   *
   * @return {Object}
   */


  CoreUtils.parseUrl = function parseUrl(url) {
    var parsedUrl = this.customUrlParser(url);
    var data = {
      filename: parsedUrl.searchParams.filename,
      extension: '',
      pathname: parsedUrl.pathname,
      query: parsedUrl.search
    };

    // get file name
    if (!data.filename) {
      data.filename = data.pathname.split('/').pop();
    }

    // find extension
    var splittedName = data.filename.split('.');

    data.extension = splittedName.length > 1 ? splittedName.pop() : 'dicom';

    var skipExt = ['asp', 'aspx', 'go', 'gs', 'hs', 'jsp', 'js', 'php', 'pl', 'py', 'rb', 'htm', 'html'];

    if (!isNaN(data.extension) || skipExt.indexOf(data.extension) !== -1 || data.query && data.query.includes('contentType=application%2Fdicom')) {
      data.extension = 'dicom';
    }

    return data;
  };

  CoreUtils.customUrlParser = function customUrlParser(url) {
    var parser = document.createElement('a'),
        searchParams = {},
        queries,
        split,
        i;
    // Let the browser do the work
    parser.href = url;
    // Convert query string to object
    queries = parser.search.replace(/^\?/, '').split('&');
    for (i = 0; i < queries.length; i++) {
      split = queries[i].split('=');
      searchParams[split[0]] = split[1];
    }
    return {
      protocol: parser.protocol,
      host: parser.host,
      hostname: parser.hostname,
      port: parser.port,
      pathname: parser.pathname,
      search: parser.search,
      searchParams: searchParams,
      hash: parser.hash
    };
  };

  /**
   * Compute IJK to LPS tranform.
   *  http://nipy.org/nibabel/dicom/dicom_orientation.html
   *
   * @param {*} xCos
   * @param {*} yCos
   * @param {*} zCos
   * @param {*} spacing
   * @param {*} origin
   * @param {*} registrationMatrix
   *
   * @return {*}
   */


  CoreUtils.ijk2LPS = function ijk2LPS(xCos, yCos, zCos, spacing, origin) {
    var registrationMatrix = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_4__["Matrix4"]();

    var ijk2LPS = new three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_4__["Matrix4"]();
    ijk2LPS.set(xCos.x * spacing.y, yCos.x * spacing.x, zCos.x * spacing.z, origin.x, xCos.y * spacing.y, yCos.y * spacing.x, zCos.y * spacing.z, origin.y, xCos.z * spacing.y, yCos.z * spacing.x, zCos.z * spacing.z, origin.z, 0, 0, 0, 1);
    ijk2LPS.premultiply(registrationMatrix);

    return ijk2LPS;
  };

  /**
   * Compute AABB to LPS transform.
   * AABB: Axe Aligned Bounding Box.
   *
   * @param {*} xCos
   * @param {*} yCos
   * @param {*} zCos
   * @param {*} origin
   *
   * @return {*}
   */


  CoreUtils.aabb2LPS = function aabb2LPS(xCos, yCos, zCos, origin) {
    var aabb2LPS = new three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_4__["Matrix4"]();
    aabb2LPS.set(xCos.x, yCos.x, zCos.x, origin.x, xCos.y, yCos.y, zCos.y, origin.y, xCos.z, yCos.z, zCos.z, origin.z, 0, 0, 0, 1);

    return aabb2LPS;
  };

  /**
   * Transform coordinates from world coordinate to data
   *
   * @param {*} lps2IJK
   * @param {*} worldCoordinates
   *
   * @return {*}
   */


  CoreUtils.worldToData = function worldToData(lps2IJK, worldCoordinates) {
    var dataCoordinate = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_5__["Vector3"]().copy(worldCoordinates).applyMatrix4(lps2IJK);

    // same rounding in the shaders
    dataCoordinate.addScalar(0.5).floor();

    return dataCoordinate;
  };

  CoreUtils.value = function value(stack, coordinate) {
    window.console.warn('value is deprecated, please use getPixelData instead');
    this.getPixelData(stack, coordinate);
  };

  /**
   * Get voxel value
   *
   * @param {ModelsStack} stack
   * @param {Vector3} coordinate
   * @return {*}
   */


  CoreUtils.getPixelData = function getPixelData(stack, coordinate) {
    if (coordinate.z >= 0 && coordinate.z < stack._frame.length) {
      return stack._frame[coordinate.z].getPixelData(coordinate.x, coordinate.y);
    } else {
      return null;
    }
  };

  /**
   * Set voxel value
   *
   * @param {ModelsStack} stack
   * @param {Vector3} coordinate
   * @param {Number} value
   * @return {*}
   */


  CoreUtils.setPixelData = function setPixelData(stack, coordinate, value) {
    if (coordinate.z >= 0 && coordinate.z < stack._frame.length) {
      stack._frame[coordinate.z].setPixelData(coordinate.x, coordinate.y, value);
    } else {
      return null;
    }
  };

  /**
   * Apply slope/intercept to a value
   *
   * @param {*} value
   * @param {*} slope
   * @param {*} intercept
   *
   * @return {*}
   */


  CoreUtils.rescaleSlopeIntercept = function rescaleSlopeIntercept(value, slope, intercept) {
    return value * slope + intercept;
  };

  /**
   *
   * Convenience function to extract center of mass from list of points.
   *
   * @param {Array<Vector3>} points - Set of points from which we want to extract the center of mass.
   *
   * @returns {Vector3} Center of mass from given points.
   */


  CoreUtils.centerOfMass = function centerOfMass(points) {
    var centerOfMass = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_5__["Vector3"](0, 0, 0);
    for (var i = 0; i < points.length; i++) {
      centerOfMass.x += points[i].x;
      centerOfMass.y += points[i].y;
      centerOfMass.z += points[i].z;
    }
    centerOfMass.divideScalar(points.length);

    return centerOfMass;
  };

  /**
   *
   * Order 3D planar points around a refence point.
   *
   * @private
   *
   * @param {Array<Vector3>} points - Set of planar 3D points to be ordered.
   * @param {Vector3} direction - Direction of the plane in which points and reference are sitting.
   *
   * @returns {Array<Object>} Set of object representing the ordered points.
   */


  CoreUtils.orderIntersections = function orderIntersections(points, direction) {
    var reference = this.centerOfMass(points);
    // direction from first point to reference
    var referenceDirection = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_5__["Vector3"](points[0].x - reference.x, points[0].y - reference.y, points[0].z - reference.z).normalize();

    var base = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_5__["Vector3"](0, 0, 0).crossVectors(referenceDirection, direction).normalize();

    var orderedpoints = [];

    // other lines // if inter, return location + angle
    for (var j = 0; j < points.length; j++) {
      var point = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_5__["Vector3"](points[j].x, points[j].y, points[j].z);
      point.direction = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_5__["Vector3"](points[j].x - reference.x, points[j].y - reference.y, points[j].z - reference.z).normalize();

      var x = referenceDirection.dot(point.direction);
      var y = base.dot(point.direction);
      point.xy = { x: x, y: y };

      var theta = Math.atan2(y, x) * (180 / Math.PI);
      point.angle = theta;

      orderedpoints.push(point);
    }

    orderedpoints.sort(function (a, b) {
      return a.angle - b.angle;
    });

    var noDups = [orderedpoints[0]];
    var epsilon = 0.0001;
    for (var i = 1; i < orderedpoints.length; i++) {
      if (Math.abs(orderedpoints[i - 1].angle - orderedpoints[i].angle) > epsilon) {
        noDups.push(orderedpoints[i]);
      }
    }

    return noDups;
  };

  /**
   * Get min, max, mean and sd of voxel values behind the mesh
   *
   * @param {THREE.Mesh}  mesh    Region of Interest
   * @param {*}           camera  Tested on CamerasOrthographic
   * @param {ModelsStack} stack
   *
   * @return {Object|null}
   */


  CoreUtils.getRoI = function getRoI(mesh, camera, stack) {
    mesh.geometry.computeBoundingBox();

    var bbox = new three_src_math_Box3__WEBPACK_IMPORTED_MODULE_1__["Box3"]().setFromObject(mesh);
    var min = bbox.min.clone().project(camera);
    var max = bbox.max.clone().project(camera);
    var offsetWidth = camera.controls.domElement.offsetWidth;
    var offsetHeight = camera.controls.domElement.offsetHeight;
    var rayCaster = new three_src_core_Raycaster__WEBPACK_IMPORTED_MODULE_2__["Raycaster"]();
    var values = [];

    min.x = Math.round((min.x + 1) * offsetWidth / 2);
    min.y = Math.round((-min.y + 1) * offsetHeight / 2);
    max.x = Math.round((max.x + 1) * offsetWidth / 2);
    max.y = Math.round((-max.y + 1) * offsetHeight / 2);
    var _ref = [Math.min(min.x, max.x), Math.max(min.x, max.x)];
    min.x = _ref[0];
    max.x = _ref[1];
    var _ref2 = [Math.min(min.y, max.y), Math.max(min.y, max.y)];
    min.y = _ref2[0];
    max.y = _ref2[1];


    var intersect = [];
    var value = null;

    for (var x = min.x; x <= max.x; x++) {
      for (var y = min.y; y <= max.y; y++) {
        rayCaster.setFromCamera({
          x: x / offsetWidth * 2 - 1,
          y: -(y / offsetHeight) * 2 + 1
        }, camera);
        intersect = rayCaster.intersectObject(mesh);

        if (intersect.length === 0) {
          continue;
        }

        value = CoreUtils.getPixelData(stack, CoreUtils.worldToData(stack.lps2IJK, intersect[0].point));

        // the image isn't RGB and coordinates are inside it
        if (value !== null && stack.numberOfChannels === 1) {
          values.push(CoreUtils.rescaleSlopeIntercept(value, stack.rescaleSlope, stack.rescaleIntercept));
        }
      }
    }

    if (values.length === 0) {
      return null;
    }

    var avg = values.reduce(function (sum, val) {
      return sum + val;
    }) / values.length;

    return {
      min: values.reduce(function (prev, val) {
        return prev < val ? prev : val;
      }),
      max: values.reduce(function (prev, val) {
        return prev > val ? prev : val;
      }),
      mean: avg,
      sd: Math.sqrt(values.reduce(function (sum, val) {
        return sum + Math.pow(val - avg, 2);
      }, 0) / values.length)
    };
  };

  /**
   * Calculate shape area (sum of triangle polygons area).
   * May be inaccurate or completely wrong for some shapes.
   *
   * @param {THREE.Geometry} geometry
   *
   * @returns {Number}
   */


  CoreUtils.getGeometryArea = function getGeometryArea(geometry) {
    if (geometry.faces.length < 1) {
      return 0.0;
    }

    var area = 0.0;
    var vertices = geometry.vertices;

    geometry.faces.forEach(function (elem) {
      area += new three_src_math_Triangle__WEBPACK_IMPORTED_MODULE_3__["Triangle"](vertices[elem.a], vertices[elem.b], vertices[elem.c]).getArea();
    });

    return area;
  };

  return CoreUtils;
}();

/* harmony default export */ __webpack_exports__["default"] = (CoreUtils);

/***/ }),

/***/ "./src/core/core.validators.js":
/*!*************************************!*\
  !*** ./src/core/core.validators.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Validate basic structures.
 *
 * @example
 * //Returns true
 * VJS.Core.Validators.matrix4(new THREE.Matrix4());
 *
 * //Returns false
 * VJS.Core.Validators.matrix4(new THREE.Vector3());
 *
 * @module core/validators
 */

var Validators = function () {
  function Validators() {
    _classCallCheck(this, Validators);
  }

  /**
   * Validates a matrix as a THREEJS.Matrix4
   * link
   * @param {Object} objectToTest - The object to be tested.
   * @return {boolean} True if valid Matrix4, false if NOT.
   */
  Validators.matrix4 = function matrix4(objectToTest) {
    if (!(objectToTest !== null && typeof objectToTest !== 'undefined' && objectToTest.hasOwnProperty('elements') && objectToTest.elements.length === 16 && typeof objectToTest.identity === 'function' && typeof objectToTest.copy === 'function' && typeof objectToTest.determinant === 'function')) {
      return false;
    }

    return true;
  };

  /**
   * Validates a vector as a THREEJS.Vector3
   * @param {Object} objectToTest - The object to be tested.
   * @return {boolean} True if valid Vector3, false if NOT.
   */


  Validators.vector3 = function vector3(objectToTest) {
    if (!(objectToTest !== null && typeof objectToTest !== 'undefined' && objectToTest.hasOwnProperty('x') && objectToTest.hasOwnProperty('y') && objectToTest.hasOwnProperty('z') && !objectToTest.hasOwnProperty('w'))) {
      return false;
    }

    return true;
  };

  /**
   * Validates a box.
   *
   * @example
   * // a box is defined as
   * let box = {
   *   center: THREE.Vector3,
   *   halfDimensions: THREE.Vector3
   * }
   *
   * @param {Object} objectToTest - The object to be tested.
   * @return {boolean} True if valid box, false if NOT.
   */


  Validators.box = function box(objectToTest) {
    if (!(objectToTest !== null && typeof objectToTest !== 'undefined' && objectToTest.hasOwnProperty('center') && this.vector3(objectToTest.center) && objectToTest.hasOwnProperty('halfDimensions') && this.vector3(objectToTest.halfDimensions) && objectToTest.halfDimensions.x >= 0 && objectToTest.halfDimensions.y >= 0 && objectToTest.halfDimensions.z >= 0)) {
      return false;
    }

    return true;
  };

  /**
   * Validates a ray.
   *
   * @example
   * // a ray is defined as
   * let ray = {
   *   postion: THREE.Vector3,
   *   direction: THREE.Vector3
   * }
   *
   * @param {Object} objectToTest - The object to be tested.
   * @return {boolean} True if valid ray, false if NOT.
   */


  Validators.ray = function ray(objectToTest) {
    if (!(objectToTest !== null && typeof objectToTest !== 'undefined' && objectToTest.hasOwnProperty('position') && this.vector3(objectToTest.position) && objectToTest.hasOwnProperty('direction') && this.vector3(objectToTest.direction))) {
      return false;
    }

    return true;
  };

  return Validators;
}();

/* harmony default export */ __webpack_exports__["default"] = (Validators);

/***/ }),

/***/ "./src/decoders/decoders.rle.js":
/*!**************************************!*\
  !*** ./src/decoders/decoders.rle.js ***!
  \**************************************/
/*! exports provided: RLEDecoder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RLEDecoder", function() { return RLEDecoder; });
// from dicom wadoo loader
// https://github.com/cornerstonejs/cornerstoneWADOImageLoader/blob/master/src/shared/decoders/decodeRLE.js
function decodeRLE(imageFrame, pixelData) {
  if (imageFrame.bitsAllocated === 8) {
    if (imageFrame.planarConfiguration) {
      return decode8Planar(imageFrame, pixelData);
    }

    return decode8(imageFrame, pixelData);
  } else if (imageFrame.bitsAllocated === 16) {
    return decode16(imageFrame, pixelData);
  }

  throw new Error('unsupported pixel format for RLE');
}

function decode8(imageFrame, pixelData) {
  var frameData = pixelData;
  var frameSize = imageFrame.rows * imageFrame.columns;
  var outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel);
  var header = new DataView(frameData.buffer, frameData.byteOffset);
  var data = new Int8Array(frameData.buffer, frameData.byteOffset);
  var out = new Int8Array(outFrame);

  var outIndex = 0;
  var numSegments = header.getInt32(0, true);

  for (var s = 0; s < numSegments; ++s) {
    outIndex = s;

    var inIndex = header.getInt32((s + 1) * 4, true);
    var maxIndex = header.getInt32((s + 2) * 4, true);

    if (maxIndex === 0) {
      maxIndex = frameData.length;
    }

    var endOfSegment = frameSize * numSegments;

    while (inIndex < maxIndex) {
      var n = data[inIndex++];

      if (n >= 0 && n <= 127) {
        // copy n bytes
        for (var i = 0; i < n + 1 && outIndex < endOfSegment; ++i) {
          out[outIndex] = data[inIndex++];
          outIndex += imageFrame.samplesPerPixel;
        }
      } else if (n <= -1 && n >= -127) {
        var value = data[inIndex++];
        // run of n bytes

        for (var j = 0; j < -n + 1 && outIndex < endOfSegment; ++j) {
          out[outIndex] = value;
          outIndex += imageFrame.samplesPerPixel;
        }
      } /* else if (n === -128) {
        } // do nothing */
    }
  }
  imageFrame.pixelData = new Uint8Array(outFrame);

  return imageFrame;
}

function decode8Planar(imageFrame, pixelData) {
  var frameData = pixelData;
  var frameSize = imageFrame.rows * imageFrame.columns;
  var outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel);
  var header = new DataView(frameData.buffer, frameData.byteOffset);
  var data = new Int8Array(frameData.buffer, frameData.byteOffset);
  var out = new Int8Array(outFrame);

  var outIndex = 0;
  var numSegments = header.getInt32(0, true);

  for (var s = 0; s < numSegments; ++s) {
    outIndex = s * frameSize;

    var inIndex = header.getInt32((s + 1) * 4, true);
    var maxIndex = header.getInt32((s + 2) * 4, true);

    if (maxIndex === 0) {
      maxIndex = frameData.length;
    }

    var endOfSegment = frameSize * numSegments;

    while (inIndex < maxIndex) {
      var n = data[inIndex++];

      if (n >= 0 && n <= 127) {
        // copy n bytes
        for (var i = 0; i < n + 1 && outIndex < endOfSegment; ++i) {
          out[outIndex] = data[inIndex++];
          outIndex++;
        }
      } else if (n <= -1 && n >= -127) {
        var value = data[inIndex++];
        // run of n bytes

        for (var j = 0; j < -n + 1 && outIndex < endOfSegment; ++j) {
          out[outIndex] = value;
          outIndex++;
        }
      } /* else if (n === -128) {
        } // do nothing */
    }
  }
  imageFrame.pixelData = new Uint8Array(outFrame);

  return imageFrame;
}

function decode16(imageFrame, pixelData) {
  var frameData = pixelData;
  var frameSize = imageFrame.rows * imageFrame.columns;

  var outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel * 2);

  var header = new DataView(frameData.buffer, frameData.byteOffset);
  var data = new Int8Array(frameData.buffer, frameData.byteOffset);

  var out = new Int8Array(outFrame);

  var numSegments = header.getInt32(0, true);

  for (var s = 0; s < numSegments; ++s) {
    var outIndex = 0;
    var highByte = s === 0 ? 1 : 0;

    var inIndex = header.getInt32((s + 1) * 4, true);
    var maxIndex = header.getInt32((s + 2) * 4, true);

    if (maxIndex === 0) {
      maxIndex = frameData.length;
    }

    while (inIndex < maxIndex) {
      var n = data[inIndex++];

      if (n >= 0 && n <= 127) {
        for (var i = 0; i < n + 1 && outIndex < frameSize; ++i) {
          out[outIndex * 2 + highByte] = data[inIndex++];
          outIndex++;
        }
      } else if (n <= -1 && n >= -127) {
        var value = data[inIndex++];

        for (var j = 0; j < -n + 1 && outIndex < frameSize; ++j) {
          out[outIndex * 2 + highByte] = value;
          outIndex++;
        }
      } /* else if (n === -128) {
        } // do nothing */
    }
  }
  if (imageFrame.pixelRepresentation === 0) {
    imageFrame.pixelData = new Uint16Array(outFrame);
  } else {
    imageFrame.pixelData = new Int16Array(outFrame);
  }

  return imageFrame;
}

var RLEDecoder = decodeRLE;

/***/ }),

/***/ "./src/geometries/geometries.js":
/*!**************************************!*\
  !*** ./src/geometries/geometries.js ***!
  \**************************************/
/*! exports provided: SliceGeometry, sliceGeometryFactory, VoxelGeometry, voxelGeometryFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _geometries_slice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geometries.slice */ "./src/geometries/geometries.slice.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SliceGeometry", function() { return _geometries_slice__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sliceGeometryFactory", function() { return _geometries_slice__WEBPACK_IMPORTED_MODULE_0__["geometriesSlice"]; });

/* harmony import */ var _geometries_voxel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./geometries.voxel */ "./src/geometries/geometries.voxel.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VoxelGeometry", function() { return _geometries_voxel__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "voxelGeometryFactory", function() { return _geometries_voxel__WEBPACK_IMPORTED_MODULE_1__["geometriesVoxel"]; });






/***/ }),

/***/ "./src/geometries/geometries.slice.js":
/*!********************************************!*\
  !*** ./src/geometries/geometries.slice.js ***!
  \********************************************/
/*! exports provided: geometriesSlice, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "geometriesSlice", function() { return geometriesSlice; });
/* harmony import */ var _core_core_intersections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core.intersections */ "./src/core/core.intersections.js");
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/



/**
 *
 * It is typically used for creating an irregular 3D planar shape given a box and the cut-plane.
 *
 * Demo: {@link https://fnndsc.github.io/vjs#geometry_slice}
 *
 * @module geometries/slice
 *
 * @param {Vector3} halfDimensions - Half-dimensions of the box to be sliced.
 * @param {Vector3} center - Center of the box to be sliced.
 * @param {Vector3<Vector3>} orientation - Orientation of the box to be sliced. (might not be necessary..?)
 * @param {Vector3} position - Position of the cutting plane.
 * @param {Vector3} direction - Cross direction of the cutting plane.
 *
 * @example
 * // Define box to be sliced
 * let halfDimensions = new THREE.Vector(123, 45, 67);
 * let center = new Vector3(0, 0, 0);
 * let orientation = new Vector3(
 *   new Vector3(1, 0, 0),
 *   new Vector3(0, 1, 0),
 *   new Vector3(0, 0, 1)
 * );
 *
 * // Define slice plane
 * let position = center.clone();
 * let direction = new Vector3(-0.2, 0.5, 0.3);
 *
 * // Create the slice geometry & materials
 * let sliceGeometry = new VJS.geometries.slice(halfDimensions, center, orientation, position, direction);
 * let sliceMaterial = new THREE.MeshBasicMaterial({
 *   'side': THREE.DoubleSide,
 *   'color': 0xFF5722
 * });
 *
 *  // Create mesh and add it to the scene
 *  let slice = new THREE.Mesh(sliceGeometry, sliceMaterial);
 *  scene.add(slice);
 */

var geometriesSlice = function geometriesSlice() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.ShapeBufferGeometry === undefined) {
    return null;
  }

  var Constructor = three.ShapeBufferGeometry;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(halfDimensions, center, position, direction) {
      var toAABB = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new three.Matrix4();

      _classCallCheck(this, _class);

      //
      // prepare data for the shape!
      //
      var aabb = {
        halfDimensions: halfDimensions,
        center: center,
        toAABB: toAABB
      };

      var plane = {
        position: position,
        direction: direction
      };

      // BOOM!
      var intersections = _core_core_intersections__WEBPACK_IMPORTED_MODULE_0__["default"].aabbPlane(aabb, plane);

      // can not exist before calling the constructor
      if (intersections.length < 3) {
        window.console.log('WARNING: Less than 3 intersections between AABB and Plane.');
        window.console.log('AABB');
        window.console.log(aabb);
        window.console.log('Plane');
        window.console.log(plane);
        window.console.log('exiting...');
        var err = new Error('geometries.slice has less than 3 intersections, can not create a valid geometry.');
        throw err;
      }

      var points = _core_core_utils__WEBPACK_IMPORTED_MODULE_1__["default"].orderIntersections(intersections, direction);

      // create the shape
      var shape = new three.Shape();
      // move to first point!
      shape.moveTo(points[0].xy.x, points[0].xy.y);

      // loop through all points!
      var positions = new Float32Array(points.length * 3);
      positions.set(points[0].toArray(), 0);

      for (var i = 1; i < points.length; i++) {
        // project each on plane!
        positions.set(points[i].toArray(), i * 3);

        shape.lineTo(points[i].xy.x, points[i].xy.y);
      }

      // close the shape!
      shape.lineTo(points[0].xy.x, points[0].xy.y);

      //
      // Generate Slice Buffer Geometry from Shape Buffer Geomtry
      // bewcause it does triangulation for us!

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, shape));

      _this.type = 'SliceBufferGeometry';

      // update real position of each vertex! (not in 2d)
      _this.addAttribute('position', new three.BufferAttribute(positions, 3).setDynamic(true));
      _this.vertices = points; // legacy code to compute normals int he SliceHelper
      return _this;
    }

    return _class;
  }(Constructor);
};

// export factory

// default export to
/* harmony default export */ __webpack_exports__["default"] = (geometriesSlice());

/***/ }),

/***/ "./src/geometries/geometries.voxel.js":
/*!********************************************!*\
  !*** ./src/geometries/geometries.voxel.js ***!
  \********************************************/
/*! exports provided: geometriesVoxel, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "geometriesVoxel", function() { return geometriesVoxel; });
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 *
 * @module geometries/voxel
 */

var geometriesVoxel = function geometriesVoxel() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.BoxGeometry === undefined) {
    return null;
  }

  var Constructor = three.BoxGeometry;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(dataPosition) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, 1, 1, 1));

      _this._location = dataPosition;

      _this.applyMatrix(new three.Matrix4().makeTranslation(_this._location.x, _this._location.y, _this._location.z));

      _this.verticesNeedUpdate = true;
      return _this;
    }

    _class.prototype.resetVertices = function resetVertices() {
      this.vertices[0].set(0.5, 0.5, 0.5);
      this.vertices[1].set(0.5, 0.5, -0.5);
      this.vertices[2].set(0.5, -0.5, 0.5);
      this.vertices[3].set(0.5, -0.5, -0.5);
      this.vertices[4].set(-0.5, 0.5, -0.5);
      this.vertices[5].set(-0.5, 0.5, 0.5);
      this.vertices[6].set(-0.5, -0.5, -0.5);
      this.vertices[7].set(-0.5, -0.5, 0.5);
    };

    _createClass(_class, [{
      key: "location",
      set: function set(location) {
        this._location = location;

        // update vertices from location
        this.vertices[0].set(+0.5, +0.5, +0.5);
        this.vertices[1].set(+0.5, +0.5, -0.5);
        this.vertices[2].set(+0.5, -0.5, +0.5);
        this.vertices[3].set(+0.5, -0.5, -0.5);
        this.vertices[4].set(-0.5, +0.5, -0.5);
        this.vertices[5].set(-0.5, +0.5, +0.5);
        this.vertices[6].set(-0.5, -0.5, -0.5);
        this.vertices[7].set(-0.5, -0.5, +0.5);

        this.applyMatrix(new three.Matrix4().makeTranslation(this._location.x, this._location.y, this._location.z));

        this.verticesNeedUpdate = true;
      },
      get: function get() {
        return this._location;
      }
    }]);

    return _class;
  }(Constructor);
};

// export factory

// default export to
/* harmony default export */ __webpack_exports__["default"] = (geometriesVoxel());

/***/ }),

/***/ "./src/helpers/helpers.border.js":
/*!***************************************!*\
  !*** ./src/helpers/helpers.border.js ***!
  \***************************************/
/*! exports provided: helpersBorder, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "helpersBorder", function() { return helpersBorder; });
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @module helpers/border
 */

var helpersBorder = function helpersBorder() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = three.Object3D;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(helpersSlice) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this));
      //


      _this._helpersSlice = helpersSlice;

      _this._visible = true;
      _this._color = 0xff0000;
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      _this._create();
      return _this;
    }

    _class.prototype._create = function _create() {
      if (!this._material) {
        this._material = new three.LineBasicMaterial({
          color: this._color,
          linewidth: 1
        });
      }

      if (!this._helpersSlice.geometry.vertices) {
        return;
      }

      this._geometry = new three.BufferGeometry();

      // set vertices positions
      var nbOfVertices = this._helpersSlice.geometry.vertices.length;
      var positions = new Float32Array((nbOfVertices + 1) * 3);
      positions.set(this._helpersSlice.geometry.attributes.position.array, 0);
      positions.set(this._helpersSlice.geometry.vertices[0].toArray(), nbOfVertices * 3);
      this._geometry.addAttribute('position', new three.BufferAttribute(positions, 3).setDynamic(true));

      this._mesh = new three.Line(this._geometry, this._material);
      if (this._helpersSlice.aabbSpace === 'IJK') {
        this._mesh.applyMatrix(this._helpersSlice.stack.ijk2LPS);
      }
      this._mesh.visible = this._visible;

      // and add it!
      this.add(this._mesh);
    };

    _class.prototype._update = function _update() {
      // update slice
      if (this._mesh) {
        this.remove(this._mesh);
        this._mesh.geometry.dispose();
        this._mesh = null;
      }

      this._create();
    };

    _class.prototype.dispose = function dispose() {
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._geometry.dispose();
      this._geometry = null;
      this._material.dispose();
      this._material = null;
    };

    _createClass(_class, [{
      key: 'helpersSlice',
      set: function set(helpersSlice) {
        this._helpersSlice = helpersSlice;
        this._update();
      },
      get: function get() {
        return this._helpersSlice;
      }
    }, {
      key: 'visible',
      set: function set(visible) {
        this._visible = visible;
        if (this._mesh) {
          this._mesh.visible = this._visible;
        }
      },
      get: function get() {
        return this._visible;
      }
    }, {
      key: 'color',
      set: function set(color) {
        this._color = color;
        if (this._material) {
          this._material.color.set(this._color);
        }
      },
      get: function get() {
        return this._color;
      }
    }]);

    return _class;
  }(Constructor);
};

// export factory

// default export to
/* harmony default export */ __webpack_exports__["default"] = (helpersBorder());

/***/ }),

/***/ "./src/helpers/helpers.boundingbox.js":
/*!********************************************!*\
  !*** ./src/helpers/helpers.boundingbox.js ***!
  \********************************************/
/*! exports provided: helpersBoundingBox, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "helpersBoundingBox", function() { return helpersBoundingBox; });
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @module helpers/boundingbox
 */

var helpersBoundingBox = function helpersBoundingBox() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = three.Object3D;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(stack) {
      _classCallCheck(this, _class);

      // private vars
      var _this = _possibleConstructorReturn(this, _Constructor.call(this));
      //


      _this._stack = stack;
      _this._visible = true;
      _this._color = 0xffffff;
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;
      _this._meshStack = null;

      // create object
      _this._create();
      return _this;
    }

    // getters/setters


    // private methods
    _class.prototype._create = function _create() {
      // Convenience vars
      var dimensions = this._stack.dimensionsIJK;
      var halfDimensions = this._stack.halfDimensionsIJK;
      var offset = new three.Vector3(-0.5, -0.5, -0.5);

      // Geometry
      var geometry = new three.BoxGeometry(dimensions.x, dimensions.y, dimensions.z);
      geometry.applyMatrix(new three.Matrix4().makeTranslation(halfDimensions.x + offset.x, halfDimensions.y + offset.y, halfDimensions.z + offset.z));
      this._geometry = geometry;

      // Material
      this._material = new three.MeshBasicMaterial({
        wireframe: true
      });

      var mesh = new three.Mesh(this._geometry, null);
      mesh.applyMatrix(this._stack.ijk2LPS);
      mesh.visible = this._visible;
      this._meshStack = mesh;

      this._mesh = new three.BoxHelper(this._meshStack, this._color);
      this._material = this._mesh.material;

      this.add(this._mesh);
    };

    _class.prototype._update = function _update() {
      if (this._mesh) {
        this.remove(this._mesh);
        this._mesh.geometry.dispose();
        this._mesh.geometry = null;
        this._mesh.material.dispose();
        this._mesh.material = null;
        this._mesh = null;
      }

      this._create();
    };

    _class.prototype.dispose = function dispose() {
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._geometry.dispose();
      this._geometry = null;
      this._material.dispose();
      this._material = null;
    };

    _createClass(_class, [{
      key: "visible",
      set: function set(visible) {
        this._visible = visible;
        if (this._mesh) {
          this._mesh.visible = this._visible;
        }
      },
      get: function get() {
        return this._visible;
      }
    }, {
      key: "color",
      set: function set(color) {
        this._color = color;
        if (this._material) {
          this._material.color.set(this._color);
        }
      },
      get: function get() {
        return this._color;
      }
    }]);

    return _class;
  }(Constructor);
};

// export factory

// default export too
/* harmony default export */ __webpack_exports__["default"] = (helpersBoundingBox());

/***/ }),

/***/ "./src/helpers/helpers.contour.js":
/*!****************************************!*\
  !*** ./src/helpers/helpers.contour.js ***!
  \****************************************/
/*! exports provided: helpersContour, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "helpersContour", function() { return helpersContour; });
/* harmony import */ var _shaders_shaders_contour_uniform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shaders/shaders.contour.uniform */ "./src/shaders/shaders.contour.uniform.js");
/* harmony import */ var _shaders_shaders_contour_vertex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shaders/shaders.contour.vertex */ "./src/shaders/shaders.contour.vertex.js");
/* harmony import */ var _shaders_shaders_contour_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shaders/shaders.contour.fragment */ "./src/shaders/shaders.contour.fragment.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/




/**
 * @module helpers/contour
 */
var helpersContour = function helpersContour() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = three.Object3D;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(stack, geometry, texture) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this));
      //


      _this._stack = stack;
      _this._textureToFilter = texture;
      _this._contourWidth = 1;
      _this._contourOpacity = 1;
      _this._canvasWidth = 0;
      _this._canvasHeight = 0;
      _this._shadersFragment = _shaders_shaders_contour_fragment__WEBPACK_IMPORTED_MODULE_2__["default"];
      _this._shadersVertex = _shaders_shaders_contour_vertex__WEBPACK_IMPORTED_MODULE_1__["default"];
      _this._uniforms = _shaders_shaders_contour_uniform__WEBPACK_IMPORTED_MODULE_0__["default"].uniforms();
      _this._material = null;
      _this._geometry = geometry;

      _this._create();
      return _this;
    }

    _class.prototype._create = function _create() {
      this._prepareMaterial();
      this._mesh = new three.Mesh(this._geometry, this._material);
      this._mesh.applyMatrix(this._stack._ijk2LPS);
      this.add(this._mesh);
    };

    _class.prototype._prepareMaterial = function _prepareMaterial() {
      if (!this._material) {
        // contour default width
        this._uniforms.uWidth.value = this._contourWidth;
        this._uniforms.uOpacity.value = this._contourOpacity;

        //
        this._uniforms.uCanvasWidth.value = this._canvasWidth;
        this._uniforms.uCanvasHeight.value = this._canvasHeight;

        // generate material
        var fs = new _shaders_shaders_contour_fragment__WEBPACK_IMPORTED_MODULE_2__["default"](this._uniforms);
        var vs = new _shaders_shaders_contour_vertex__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this._material = new three.ShaderMaterial({
          side: three.DoubleSide,
          uniforms: this._uniforms,
          vertexShader: vs.compute(),
          fragmentShader: fs.compute(),
          transparent: true
        });
      }
    };

    _class.prototype.update = function update() {
      if (this._mesh) {
        this.remove(this._mesh);
        this._mesh.geometry.dispose();
        this._mesh.geometry = null;
        this._mesh = null;
      }

      this._create();
    };

    _class.prototype.dispose = function dispose() {
      //
      if (this._textureToFilter !== null) {
        this._textureToFilter.dispose();
        this._textureToFilter = null;
      }

      this._shadersFragment = null;
      this._shadersVertex = null;

      this._uniforms = null;

      // material, geometry and mesh
      this.remove(this._mesh);
      this._mesh.geometry.dispose();
      this._mesh.geometry = null;
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._mesh = null;

      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      this._stack = null;
    };

    _createClass(_class, [{
      key: 'geometry',
      get: function get() {
        return this._geometry;
      },
      set: function set(geometry) {
        if (this._mesh) {
          this.remove(this._mesh);
          this._mesh.geometry.dispose();
          this._mesh.geometry = null;
          this._mesh = null;

          this._geometry.dispose();
          this._geometry = null;
        }

        this._geometry = geometry;

        this._create();
      }
    }, {
      key: 'textureToFilter',
      get: function get() {
        return this._textureToFilter;
      },
      set: function set(texture) {
        this._textureToFilter = texture;
        this._uniforms.uTextureFilled.value = texture;
        this._material.needsUpdate = true;
      }
    }, {
      key: 'contourOpacity',
      get: function get() {
        return this._contourOpacity;
      },
      set: function set(contourOpacity) {
        this._contourOpacity = contourOpacity;
        this._uniforms.uOpacity.value = this._contourOpacity;
      }
    }, {
      key: 'contourWidth',
      get: function get() {
        return this._contourWidth;
      },
      set: function set(contourWidth) {
        this._contourWidth = contourWidth;
        this._uniforms.uWidth.value = this._contourWidth;
      }
    }, {
      key: 'canvasWidth',
      get: function get() {
        return this._canvasWidth;
      },
      set: function set(canvasWidth) {
        this._canvasWidth = canvasWidth;
        this._uniforms.uCanvasWidth.value = this._canvasWidth;
      }
    }, {
      key: 'canvasHeight',
      get: function get() {
        return this._canvasHeight;
      },
      set: function set(canvasHeight) {
        this._canvasHeight = canvasHeight;
        this._uniforms.uCanvasHeight.value = this._canvasHeight;
      }
    }]);

    return _class;
  }(Constructor);
};

// export factory

// default export to
/* harmony default export */ __webpack_exports__["default"] = (helpersContour());

/***/ }),

/***/ "./src/helpers/helpers.js":
/*!********************************!*\
  !*** ./src/helpers/helpers.js ***!
  \********************************/
/*! exports provided: BorderHelper, borderHelperFactory, BoundingBoxHelper, boundingBoxHelperFactory, ContourHelper, contourHelperFactory, LocalizerHelper, localizerHelperFactory, LutHelper, lutHelperFactory, SegmentationLutHelper, ProgressBarHelper, ProgressBarEventBasedHelper, SliceHelper, sliceHelperFactory, StackHelper, stackHelperFactory, VolumeRenderingHelper, VolumeRenderingHelperFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _helpers_border__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.border */ "./src/helpers/helpers.border.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BorderHelper", function() { return _helpers_border__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "borderHelperFactory", function() { return _helpers_border__WEBPACK_IMPORTED_MODULE_0__["helpersBorder"]; });

/* harmony import */ var _helpers_boundingbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.boundingbox */ "./src/helpers/helpers.boundingbox.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BoundingBoxHelper", function() { return _helpers_boundingbox__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "boundingBoxHelperFactory", function() { return _helpers_boundingbox__WEBPACK_IMPORTED_MODULE_1__["helpersBoundingBox"]; });

/* harmony import */ var _helpers_contour__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.contour */ "./src/helpers/helpers.contour.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContourHelper", function() { return _helpers_contour__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "contourHelperFactory", function() { return _helpers_contour__WEBPACK_IMPORTED_MODULE_2__["helpersContour"]; });

/* harmony import */ var _helpers_localizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.localizer */ "./src/helpers/helpers.localizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalizerHelper", function() { return _helpers_localizer__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "localizerHelperFactory", function() { return _helpers_localizer__WEBPACK_IMPORTED_MODULE_3__["helpersLocalizer"]; });

/* harmony import */ var _helpers_lut__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.lut */ "./src/helpers/helpers.lut.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LutHelper", function() { return _helpers_lut__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lutHelperFactory", function() { return _helpers_lut__WEBPACK_IMPORTED_MODULE_4__["helpersLut"]; });

/* harmony import */ var _helpers_segmentationlut__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.segmentationlut */ "./src/helpers/helpers.segmentationlut.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SegmentationLutHelper", function() { return _helpers_segmentationlut__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _helpers_progressbar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers.progressbar */ "./src/helpers/helpers.progressbar.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProgressBarHelper", function() { return _helpers_progressbar__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _helpers_progressbar_eventbased__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers.progressbar.eventbased */ "./src/helpers/helpers.progressbar.eventbased.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProgressBarEventBasedHelper", function() { return _helpers_progressbar_eventbased__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _helpers_slice__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers.slice */ "./src/helpers/helpers.slice.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SliceHelper", function() { return _helpers_slice__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sliceHelperFactory", function() { return _helpers_slice__WEBPACK_IMPORTED_MODULE_8__["helpersSlice"]; });

/* harmony import */ var _helpers_stack__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers.stack */ "./src/helpers/helpers.stack.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StackHelper", function() { return _helpers_stack__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stackHelperFactory", function() { return _helpers_stack__WEBPACK_IMPORTED_MODULE_9__["helpersStack"]; });

/* harmony import */ var _helpers_volumerendering__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./helpers.volumerendering */ "./src/helpers/helpers.volumerendering.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VolumeRenderingHelper", function() { return _helpers_volumerendering__WEBPACK_IMPORTED_MODULE_10__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VolumeRenderingHelperFactory", function() { return _helpers_volumerendering__WEBPACK_IMPORTED_MODULE_10__["helpersVolumeRendering"]; });















/***/ }),

/***/ "./src/helpers/helpers.localizer.js":
/*!******************************************!*\
  !*** ./src/helpers/helpers.localizer.js ***!
  \******************************************/
/*! exports provided: helpersLocalizer, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "helpersLocalizer", function() { return helpersLocalizer; });
/* harmony import */ var _shaders_shaders_localizer_uniform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shaders/shaders.localizer.uniform */ "./src/shaders/shaders.localizer.uniform.js");
/* harmony import */ var _shaders_shaders_localizer_vertex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shaders/shaders.localizer.vertex */ "./src/shaders/shaders.localizer.vertex.js");
/* harmony import */ var _shaders_shaders_localizer_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shaders/shaders.localizer.fragment */ "./src/shaders/shaders.localizer.fragment.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/




/**
 * @module helpers/localizer
 */
var helpersLocalizer = function helpersLocalizer() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = three.Object3D;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(stack, geometry, referencePlane) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this));
      //


      _this._stack = stack;
      _this._referencePlane = referencePlane;
      _this._plane1 = null;
      _this._color1 = null;
      _this._plane2 = null;
      _this._color2 = null;
      _this._plane3 = null;
      _this._color3 = null;
      _this._canvasWidth = 0;
      _this._canvasHeight = 0;
      _this._shadersFragment = _shaders_shaders_localizer_fragment__WEBPACK_IMPORTED_MODULE_2__["default"];
      _this._shadersVertex = _shaders_shaders_localizer_vertex__WEBPACK_IMPORTED_MODULE_1__["default"];
      _this._uniforms = _shaders_shaders_localizer_uniform__WEBPACK_IMPORTED_MODULE_0__["default"].uniforms();
      _this._material = null;
      _this._geometry = geometry;

      _this._create();
      return _this;
    }

    _class.prototype._create = function _create() {
      this._prepareMaterial();
      this._mesh = new three.Mesh(this._geometry, this._material);
      this._mesh.applyMatrix(this._stack._ijk2LPS);
      this.add(this._mesh);
    };

    _class.prototype._prepareMaterial = function _prepareMaterial() {
      if (!this._material) {
        // reference plane
        this._uniforms.uSlice.value = this._referencePlane;

        // localizer planes
        if (this._plane1) {
          this._uniforms.uPlane1.value = this._plane1;
          this._uniforms.uPlaneColor1.value = this._color1;
        }

        if (this._plane2) {
          this._uniforms.uPlane2.value = this._plane2;
          this._uniforms.uPlaneColor2.value = this._color2;
        }

        if (this._plane3) {
          this._uniforms.uPlane3.value = this._plane3;
          this._uniforms.uPlaneColor3.value = this._color3;
        }

        //
        this._uniforms.uCanvasWidth.value = this._canvasWidth;
        this._uniforms.uCanvasHeight.value = this._canvasHeight;

        // generate material
        var fs = new _shaders_shaders_localizer_fragment__WEBPACK_IMPORTED_MODULE_2__["default"](this._uniforms);
        var vs = new _shaders_shaders_localizer_vertex__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this._material = new three.ShaderMaterial({
          side: three.DoubleSide,
          uniforms: this._uniforms,
          vertexShader: vs.compute(),
          fragmentShader: fs.compute()
        });
        this._material.transparent = true;
      }
    };

    _class.prototype.update = function update() {
      if (this._mesh) {
        this.remove(this._mesh);
        this._mesh.geometry.dispose();
        this._mesh.geometry = null;
        this._mesh = null;
      }

      this._create();
    };

    _class.prototype.dispose = function dispose() {
      //
      this._referencePlane = null;
      this._plane1 = null;
      this._color1 = null;
      this._plane2 = null;
      this._color2 = null;
      this._plane3 = null;
      this._color3 = null;

      this._shadersFragment = null;
      this._shadersVertex = null;

      this._uniforms = null;

      // material, geometry and mesh
      this.remove(this._mesh);
      this._mesh.geometry.dispose();
      this._mesh.geometry = null;
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._mesh = null;

      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      this._stack = null;
    };

    _createClass(_class, [{
      key: 'geometry',
      get: function get() {
        return this._geometry;
      },
      set: function set(geometry) {
        if (this._mesh) {
          this.remove(this._mesh);
          this._mesh.geometry.dispose();
          this._mesh.geometry = null;
          this._mesh = null;

          this._geometry.dispose();
          this._geometry = null;
        }

        this._geometry = geometry;

        this._create();
      }
    }, {
      key: 'referencePlane',
      get: function get() {
        return this._referencePlane;
      },
      set: function set(referencePlane) {
        this._referencePlane = referencePlane;
        this._uniforms.uSlice.value = this._referencePlane;
      }
    }, {
      key: 'plane1',
      get: function get() {
        return this._plane1;
      },
      set: function set(plane1) {
        this._plane1 = plane1;
        this._uniforms.uPlane1.value = this._plane1;
      }
    }, {
      key: 'color1',
      get: function get() {
        return this._color1;
      },
      set: function set(color1) {
        this._color1 = color1;
        this._uniforms.uPlaneColor1.value = this._color1;
      }
    }, {
      key: 'plane2',
      get: function get() {
        return this._plane2;
      },
      set: function set(plane2) {
        this._plane2 = plane2;
        this._uniforms.uPlane2.value = this._plane2;
      }
    }, {
      key: 'color2',
      get: function get() {
        return this._color2;
      },
      set: function set(color2) {
        this._color2 = color2;
        this._uniforms.uPlaneColor2.value = this._color2;
      }
    }, {
      key: 'plane3',
      get: function get() {
        return this._plane3;
      },
      set: function set(plane3) {
        this._plane3 = plane3;
        this._uniforms.uPlane3.value = this._plane3;
      }
    }, {
      key: 'color3',
      get: function get() {
        return this._color3;
      },
      set: function set(color3) {
        this._color3 = color3;
        this._uniforms.uPlaneColor3.value = this._color3;
      }
    }, {
      key: 'canvasWidth',
      get: function get() {
        return this._canvasWidth;
      },
      set: function set(canvasWidth) {
        this._canvasWidth = canvasWidth;
        this._uniforms.uCanvasWidth.value = this._canvasWidth;
      }
    }, {
      key: 'canvasHeight',
      get: function get() {
        return this._canvasHeight;
      },
      set: function set(canvasHeight) {
        this._canvasHeight = canvasHeight;
        this._uniforms.uCanvasHeight.value = this._canvasHeight;
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (helpersLocalizer());

/***/ }),

/***/ "./src/helpers/helpers.lut.js":
/*!************************************!*\
  !*** ./src/helpers/helpers.lut.js ***!
  \************************************/
/*! exports provided: helpersLut, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "helpersLut", function() { return helpersLut; });
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



/**
 * @module helpers/lut
 */
var helpersLut = function helpersLut() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }
  var Constructor = three.Object3D;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(domTarget) {
      var lut = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
      var lutO = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'linear';
      var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [[0, 0, 0, 0], [1, 1, 1, 1]];

      var _this$_luts, _this$_lutsO;

      var opacity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [[0, 0], [1, 1]];
      var discrete = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this));
      // min/max (0-1 or real intensities)
      // show/hide
      // horizontal/vertical


      if (_core_core_utils__WEBPACK_IMPORTED_MODULE_0__["default"].isString(domTarget)) {
        _this._dom = document.getElementById(domTarget);
      } else {
        _this._dom = domTarget;
      }

      _this._discrete = discrete;
      _this._color = color;
      _this._lut = lut;
      _this._luts = (_this$_luts = {}, _this$_luts[lut] = color, _this$_luts);

      _this._opacity = opacity;
      _this._lutO = lutO;
      _this._lutsO = (_this$_lutsO = {}, _this$_lutsO[lutO] = opacity, _this$_lutsO);

      _this.initCanvas();
      _this.paintCanvas();
      return _this;
    }

    _class.prototype.initCanvas = function initCanvas() {
      // container
      this._canvasContainer = this.initCanvasContainer(this._dom);
      // background
      this._canvasBg = this.createCanvas();
      this._canvasContainer.appendChild(this._canvasBg);
      // foreground
      this._canvas = this.createCanvas();
      this._canvasContainer.appendChild(this._canvas);
    };

    _class.prototype.initCanvasContainer = function initCanvasContainer(dom) {
      var canvasContainer = dom;
      canvasContainer.style.border = '1px solid #F9F9F9';
      return canvasContainer;
    };

    _class.prototype.createCanvas = function createCanvas() {
      var canvas = document.createElement('canvas');
      canvas.height = 1;
      canvas.width = 256;
      canvas.style.width = '256px';
      canvas.style.height = '16px';
      return canvas;
    };

    _class.prototype.paintCanvas = function paintCanvas() {
      // setup context
      var ctx = this._canvas.getContext('2d');
      ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);
      ctx.globalCompositeOperation = 'source-over';

      // apply color
      if (!this._discrete) {
        var color = ctx.createLinearGradient(0, 0, this._canvas.width, 0);
        for (var i = 0; i < this._color.length; i++) {
          color.addColorStop(this._color[i][0], 'rgba( ' + Math.round(this._color[i][1] * 255) + ', ' + Math.round(this._color[i][2] * 255) + ', ' + Math.round(this._color[i][3] * 255) + ', 1)');
        }

        ctx.fillStyle = color;
        ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);

        // setup context
        ctx.globalCompositeOperation = 'destination-in';

        // apply opacity
        var opacity = ctx.createLinearGradient(0, 0, this._canvas.width, 0);
        for (var _i = 0; _i < this._opacity.length; _i++) {
          opacity.addColorStop(this._opacity[_i][0], 'rgba(255, 255, 255, ' + this._opacity[_i][1] + ')');
        }
        ctx.fillStyle = opacity;
        ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);
      } else {
        ctx.lineWidth = 2 * this._canvas.height;

        for (var _i2 = 0; _i2 < this._color.length; _i2++) {
          var currentPos = this._color[_i2][0];
          var nextPos = 1;
          if (_i2 < this._color.length - 1) {
            nextPos = this._color[_i2 + 1][0];
          }
          var previousPos = 0;
          if (_i2 > 0) {
            previousPos = this._color[_i2 - 1][0];
          }

          var from = previousPos + (currentPos - previousPos) / 2;
          var to = currentPos + (nextPos - currentPos) / 2;
          var _color = this._color[_i2];
          var _opacity = this._opacity[_i2] ? this._opacity[_i2][1] : 1;

          ctx.beginPath();
          ctx.strokeStyle = 'rgba( ' + Math.round(_color[1] * 255) + ', ' + Math.round(_color[2] * 255) + ', ' + Math.round(_color[3] * 255) + ', ' + _opacity + ')';
          ctx.moveTo(from * this._canvas.width, 0);
          ctx.lineTo(to * this._canvas.width, 0);
          ctx.stroke();
          ctx.closePath();
        }
      }
    };

    _class.prototype.lutsAvailable = function lutsAvailable() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'color';

      var available = [];
      var luts = this._luts;

      if (type !== 'color') {
        luts = this._lutsO;
      }

      for (var i in luts) {
        available.push(i);
      }

      return available;
    };

    // add luts to class' lut (so a user can add its own as well)


    _class.presetLuts = function presetLuts() {
      return {
        default: [[0, 0, 0, 0], [1, 1, 1, 1]],
        spectrum: [[0, 0, 0, 0], [0.1, 0, 0, 1], [0.33, 0, 1, 1], [0.5, 0, 1, 0], [0.66, 1, 1, 0], [0.9, 1, 0, 0], [1, 1, 1, 1]],
        hot_and_cold: [[0, 0, 0, 1], [0.15, 0, 1, 1], [0.3, 0, 1, 0], [0.45, 0, 0, 0], [0.5, 0, 0, 0], [0.55, 0, 0, 0], [0.7, 1, 1, 0], [0.85, 1, 0, 0], [1, 1, 1, 1]],
        gold: [[0, 0, 0, 0], [0.13, 0.19, 0.03, 0], [0.25, 0.39, 0.12, 0], [0.38, 0.59, 0.26, 0], [0.5, 0.8, 0.46, 0.08], [0.63, 0.99, 0.71, 0.21], [0.75, 0.99, 0.88, 0.34], [0.88, 0.99, 0.99, 0.48], [1, 0.9, 0.95, 0.61]],
        red: [[0, 0.75, 0, 0], [0.5, 1, 0.5, 0], [0.95, 1, 1, 0], [1, 1, 1, 1]],
        green: [[0, 0, 0.75, 0], [0.5, 0.5, 1, 0], [0.95, 1, 1, 0], [1, 1, 1, 1]],
        blue: [[0, 0, 0, 1], [0.5, 0, 0.5, 1], [0.95, 0, 1, 1], [1, 1, 1, 1]],
        walking_dead: [[0, 0.1, 1, 1], [1, 1, 1, 1]],
        random: [[0, 0, 0, 0], [0.27, 0.18, 0.18, 0.18], [0.41, 1, 1, 1], [0.7, 1, 0, 0], [1, 1, 1, 1]],
        muscle_bone: [[0, 0, 0, 0], [0.00392156862745098, 0.00784313725490196, 0, 0], [0.00784313725490196, 0.0196078431372549, 0, 0], [0.011764705882352941, 0.03137254901960784, 0, 0], [0.01568627450980392, 0.0392156862745098, 0, 0.00392156862745098], [0.0196078431372549, 0.050980392156862744, 0.00392156862745098, 0.00392156862745098], [0.023529411764705882, 0.06274509803921569, 0.00392156862745098, 0.00392156862745098], [0.027450980392156862, 0.07058823529411765, 0.00392156862745098, 0.00784313725490196], [0.03137254901960784, 0.08235294117647059, 0.00392156862745098, 0.00784313725490196], [0.03529411764705882, 0.09411764705882353, 0.00784313725490196, 0.00784313725490196], [0.0392156862745098, 0.10196078431372549, 0.00784313725490196, 0.00784313725490196], [0.043137254901960784, 0.11372549019607843, 0.00784313725490196, 0.011764705882352941], [0.047058823529411764, 0.12549019607843137, 0.00784313725490196, 0.011764705882352941], [0.050980392156862744, 0.13333333333333333, 0.011764705882352941, 0.011764705882352941], [0.054901960784313725, 0.1450980392156863, 0.011764705882352941, 0.01568627450980392], [0.058823529411764705, 0.1568627450980392, 0.011764705882352941, 0.01568627450980392], [0.06274509803921569, 0.16470588235294117, 0.011764705882352941, 0.01568627450980392], [0.06666666666666667, 0.17647058823529413, 0.011764705882352941, 0.0196078431372549], [0.07058823529411765, 0.18823529411764706, 0.01568627450980392, 0.0196078431372549], [0.07450980392156863, 0.2, 0.01568627450980392, 0.0196078431372549], [0.0784313725490196, 0.20784313725490197, 0.01568627450980392, 0.0196078431372549], [0.08235294117647059, 0.2196078431372549, 0.01568627450980392, 0.023529411764705882], [0.08627450980392157, 0.23137254901960785, 0.0196078431372549, 0.023529411764705882], [0.09019607843137255, 0.23921568627450981, 0.0196078431372549, 0.023529411764705882], [0.09411764705882353, 0.25098039215686274, 0.0196078431372549, 0.027450980392156862], [0.09803921568627451, 0.2627450980392157, 0.0196078431372549, 0.027450980392156862], [0.10196078431372549, 0.27058823529411763, 0.023529411764705882, 0.027450980392156862], [0.10588235294117647, 0.2823529411764706, 0.023529411764705882, 0.027450980392156862], [0.10980392156862745, 0.29411764705882354, 0.023529411764705882, 0.03137254901960784], [0.11372549019607843, 0.30196078431372547, 0.023529411764705882, 0.03137254901960784], [0.11764705882352941, 0.3137254901960784, 0.023529411764705882, 0.03137254901960784], [0.12156862745098039, 0.3254901960784314, 0.027450980392156862, 0.03529411764705882], [0.12549019607843137, 0.3333333333333333, 0.027450980392156862, 0.03529411764705882], [0.12941176470588237, 0.34509803921568627, 0.027450980392156862, 0.03529411764705882], [0.13333333333333333, 0.3568627450980392, 0.027450980392156862, 0.0392156862745098], [0.13725490196078433, 0.36470588235294116, 0.03137254901960784, 0.0392156862745098], [0.1411764705882353, 0.3764705882352941, 0.03137254901960784, 0.0392156862745098], [0.1450980392156863, 0.38823529411764707, 0.03137254901960784, 0.0392156862745098], [0.14901960784313725, 0.4, 0.03137254901960784, 0.043137254901960784], [0.15294117647058825, 0.40784313725490196, 0.03529411764705882, 0.043137254901960784], [0.1568627450980392, 0.4196078431372549, 0.03529411764705882, 0.043137254901960784], [0.1607843137254902, 0.43137254901960786, 0.03529411764705882, 0.047058823529411764], [0.16470588235294117, 0.4392156862745098, 0.03529411764705882, 0.047058823529411764], [0.16862745098039217, 0.45098039215686275, 0.03529411764705882, 0.047058823529411764], [0.17254901960784313, 0.4627450980392157, 0.0392156862745098, 0.047058823529411764], [0.17647058823529413, 0.47058823529411764, 0.0392156862745098, 0.050980392156862744], [0.1803921568627451, 0.4823529411764706, 0.0392156862745098, 0.050980392156862744], [0.1843137254901961, 0.49411764705882355, 0.0392156862745098, 0.050980392156862744], [0.18823529411764706, 0.5019607843137255, 0.043137254901960784, 0.054901960784313725], [0.19215686274509805, 0.5137254901960784, 0.043137254901960784, 0.054901960784313725], [0.19607843137254902, 0.5254901960784314, 0.043137254901960784, 0.054901960784313725], [0.2, 0.5333333333333333, 0.043137254901960784, 0.058823529411764705], [0.20392156862745098, 0.5450980392156862, 0.047058823529411764, 0.058823529411764705], [0.20784313725490197, 0.5568627450980392, 0.047058823529411764, 0.058823529411764705], [0.21176470588235294, 0.5647058823529412, 0.047058823529411764, 0.058823529411764705], [0.21568627450980393, 0.5764705882352941, 0.047058823529411764, 0.06274509803921569], [0.2196078431372549, 0.5882352941176471, 0.047058823529411764, 0.06274509803921569], [0.2235294117647059, 0.6, 0.050980392156862744, 0.06274509803921569], [0.22745098039215686, 0.6078431372549019, 0.050980392156862744, 0.06666666666666667], [0.23137254901960785, 0.6196078431372549, 0.050980392156862744, 0.06666666666666667], [0.23529411764705882, 0.6313725490196078, 0.050980392156862744, 0.06666666666666667], [0.23921568627450981, 0.6392156862745098, 0.054901960784313725, 0.06666666666666667], [0.24313725490196078, 0.6509803921568628, 0.054901960784313725, 0.07058823529411765], [0.24705882352941178, 0.6627450980392157, 0.054901960784313725, 0.07058823529411765], [0.25098039215686274, 0.6705882352941176, 0.054901960784313725, 0.07058823529411765], [0.2549019607843137, 0.6823529411764706, 0.058823529411764705, 0.07450980392156863], [0.25882352941176473, 0.6941176470588235, 0.058823529411764705, 0.07450980392156863], [0.2627450980392157, 0.7019607843137254, 0.058823529411764705, 0.07450980392156863], [0.26666666666666666, 0.7137254901960784, 0.058823529411764705, 0.0784313725490196], [0.27058823529411763, 0.7254901960784313, 0.058823529411764705, 0.0784313725490196], [0.27450980392156865, 0.7333333333333333, 0.06274509803921569, 0.0784313725490196], [0.2784313725490196, 0.7450980392156863, 0.06274509803921569, 0.0784313725490196], [0.2823529411764706, 0.7568627450980392, 0.06274509803921569, 0.08235294117647059], [0.28627450980392155, 0.7647058823529411, 0.06274509803921569, 0.08235294117647059], [0.2901960784313726, 0.7764705882352941, 0.06666666666666667, 0.08235294117647059], [0.29411764705882354, 0.788235294117647, 0.06666666666666667, 0.08627450980392157], [0.2980392156862745, 0.8, 0.06666666666666667, 0.08627450980392157], [0.30196078431372547, 0.807843137254902, 0.06666666666666667, 0.08627450980392157], [0.3058823529411765, 0.8196078431372549, 0.07058823529411765, 0.08627450980392157], [0.30980392156862746, 0.8313725490196079, 0.07058823529411765, 0.09019607843137255], [0.3137254901960784, 0.8392156862745098, 0.07058823529411765, 0.09019607843137255], [0.3176470588235294, 0.8509803921568627, 0.07058823529411765, 0.09019607843137255], [0.3215686274509804, 0.8627450980392157, 0.07058823529411765, 0.09411764705882353], [0.3254901960784314, 0.8705882352941177, 0.07450980392156863, 0.09411764705882353], [0.32941176470588235, 0.8823529411764706, 0.07450980392156863, 0.09411764705882353], [0.3333333333333333, 0.8941176470588236, 0.07450980392156863, 0.09803921568627451], [0.33725490196078434, 0.9019607843137255, 0.07450980392156863, 0.09803921568627451], [0.3411764705882353, 0.9137254901960784, 0.0784313725490196, 0.09803921568627451], [0.34509803921568627, 0.9254901960784314, 0.0784313725490196, 0.09803921568627451], [0.34901960784313724, 0.9333333333333333, 0.0784313725490196, 0.10196078431372549], [0.35294117647058826, 0.9450980392156862, 0.0784313725490196, 0.10196078431372549], [0.3568627450980392, 0.9568627450980393, 0.08235294117647059, 0.10196078431372549], [0.3607843137254902, 0.9647058823529412, 0.08235294117647059, 0.10588235294117647], [0.36470588235294116, 0.9764705882352941, 0.08235294117647059, 0.10588235294117647], [0.3686274509803922, 0.9882352941176471, 0.08235294117647059, 0.10588235294117647], [0.37254901960784315, 1, 0.08235294117647059, 0.10588235294117647], [0.3764705882352941, 1, 0.09411764705882353, 0.10588235294117647], [0.3803921568627451, 1, 0.10588235294117647, 0.10588235294117647], [0.3843137254901961, 1, 0.11764705882352941, 0.10196078431372549], [0.38823529411764707, 1, 0.12941176470588237, 0.10196078431372549], [0.39215686274509803, 1, 0.1411764705882353, 0.10196078431372549], [0.396078431372549, 1, 0.15294117647058825, 0.09803921568627451], [0.4, 1, 0.16470588235294117, 0.09803921568627451], [0.403921568627451, 1, 0.17647058823529413, 0.09803921568627451], [0.40784313725490196, 1, 0.18823529411764706, 0.09411764705882353], [0.4117647058823529, 1, 0.2, 0.09411764705882353], [0.41568627450980394, 1, 0.21176470588235294, 0.09411764705882353], [0.4196078431372549, 1, 0.2235294117647059, 0.09019607843137255], [0.4235294117647059, 1, 0.23529411764705882, 0.09019607843137255], [0.42745098039215684, 1, 0.24705882352941178, 0.08627450980392157], [0.43137254901960786, 1, 0.25882352941176473, 0.08627450980392157], [0.43529411764705883, 1, 0.27058823529411763, 0.08627450980392157], [0.4392156862745098, 1, 0.2823529411764706, 0.08235294117647059], [0.44313725490196076, 1, 0.29411764705882354, 0.08235294117647059], [0.4470588235294118, 1, 0.3058823529411765, 0.08235294117647059], [0.45098039215686275, 1, 0.3176470588235294, 0.0784313725490196], [0.4549019607843137, 1, 0.32941176470588235, 0.0784313725490196], [0.4588235294117647, 1, 0.3411764705882353, 0.0784313725490196], [0.4627450980392157, 1, 0.35294117647058826, 0.07450980392156863], [0.4666666666666667, 1, 0.36470588235294116, 0.07450980392156863], [0.47058823529411764, 1, 0.3764705882352941, 0.07450980392156863], [0.4745098039215686, 1, 0.38823529411764707, 0.07058823529411765], [0.47843137254901963, 1, 0.4, 0.07058823529411765], [0.4823529411764706, 1, 0.4117647058823529, 0.07058823529411765], [0.48627450980392156, 1, 0.4235294117647059, 0.06666666666666667], [0.49019607843137253, 1, 0.43529411764705883, 0.06666666666666667], [0.49411764705882355, 1, 0.4470588235294118, 0.06274509803921569], [0.4980392156862745, 1, 0.4588235294117647, 0.06274509803921569], [0.5019607843137255, 1, 0.47058823529411764, 0.06274509803921569], [0.5058823529411764, 1, 0.4823529411764706, 0.058823529411764705], [0.5098039215686274, 1, 0.49411764705882355, 0.058823529411764705], [0.5137254901960784, 1, 0.5058823529411764, 0.058823529411764705], [0.5176470588235295, 1, 0.5137254901960784, 0.054901960784313725], [0.5215686274509804, 1, 0.5254901960784314, 0.054901960784313725], [0.5254901960784314, 1, 0.5372549019607843, 0.054901960784313725], [0.5294117647058824, 1, 0.5490196078431373, 0.050980392156862744], [0.5333333333333333, 1, 0.5607843137254902, 0.050980392156862744], [0.5372549019607843, 1, 0.5725490196078431, 0.050980392156862744], [0.5411764705882353, 1, 0.5843137254901961, 0.047058823529411764], [0.5450980392156862, 1, 0.596078431372549, 0.047058823529411764], [0.5490196078431373, 1, 0.6078431372549019, 0.043137254901960784], [0.5529411764705883, 1, 0.6196078431372549, 0.043137254901960784], [0.5568627450980392, 1, 0.6313725490196078, 0.043137254901960784], [0.5607843137254902, 1, 0.6431372549019608, 0.0392156862745098], [0.5647058823529412, 1, 0.6549019607843137, 0.0392156862745098], [0.5686274509803921, 1, 0.6666666666666666, 0.0392156862745098], [0.5725490196078431, 1, 0.6784313725490196, 0.03529411764705882], [0.5764705882352941, 1, 0.6901960784313725, 0.03529411764705882], [0.5803921568627451, 1, 0.6941176470588235, 0.0392156862745098], [0.5843137254901961, 1, 0.7019607843137254, 0.0392156862745098], [0.5882352941176471, 1, 0.7058823529411765, 0.043137254901960784], [0.592156862745098, 1, 0.7098039215686275, 0.043137254901960784], [0.596078431372549, 1, 0.7137254901960784, 0.047058823529411764], [0.6, 1, 0.7176470588235294, 0.047058823529411764], [0.6039215686274509, 1, 0.7254901960784313, 0.050980392156862744], [0.6078431372549019, 1, 0.7294117647058823, 0.050980392156862744], [0.611764705882353, 1, 0.7333333333333333, 0.054901960784313725], [0.615686274509804, 1, 0.7372549019607844, 0.058823529411764705], [0.6196078431372549, 1, 0.7411764705882353, 0.058823529411764705], [0.6235294117647059, 1, 0.7490196078431373, 0.06274509803921569], [0.6274509803921569, 1, 0.7529411764705882, 0.06274509803921569], [0.6313725490196078, 1, 0.7568627450980392, 0.06666666666666667], [0.6352941176470588, 1, 0.7607843137254902, 0.06666666666666667], [0.6392156862745098, 1, 0.7647058823529411, 0.07058823529411765], [0.6431372549019608, 1, 0.7725490196078432, 0.07058823529411765], [0.6470588235294118, 1, 0.7764705882352941, 0.07450980392156863], [0.6509803921568628, 1, 0.7803921568627451, 0.07450980392156863], [0.6549019607843137, 1, 0.7843137254901961, 0.0784313725490196], [0.6588235294117647, 1, 0.788235294117647, 0.08235294117647059], [0.6627450980392157, 1, 0.796078431372549, 0.08235294117647059], [0.6666666666666666, 1, 0.8, 0.08627450980392157], [0.6705882352941176, 1, 0.803921568627451, 0.08627450980392157], [0.6745098039215687, 1, 0.807843137254902, 0.09019607843137255], [0.6784313725490196, 1, 0.8117647058823529, 0.09019607843137255], [0.6823529411764706, 1, 0.8196078431372549, 0.09411764705882353], [0.6862745098039216, 1, 0.8235294117647058, 0.09411764705882353], [0.6901960784313725, 1, 0.8274509803921568, 0.09803921568627451], [0.6941176470588235, 1, 0.8313725490196079, 0.10196078431372549], [0.6980392156862745, 1, 0.8352941176470589, 0.10196078431372549], [0.7019607843137254, 1, 0.8431372549019608, 0.10588235294117647], [0.7058823529411765, 1, 0.8470588235294118, 0.10588235294117647], [0.7098039215686275, 1, 0.8509803921568627, 0.10980392156862745], [0.7137254901960784, 1, 0.8549019607843137, 0.10980392156862745], [0.7176470588235294, 1, 0.8627450980392157, 0.11372549019607843], [0.7215686274509804, 1, 0.8666666666666667, 0.11372549019607843], [0.7254901960784313, 1, 0.8705882352941177, 0.11764705882352941], [0.7294117647058823, 1, 0.8745098039215686, 0.12156862745098039], [0.7333333333333333, 1, 0.8784313725490196, 0.12156862745098039], [0.7372549019607844, 1, 0.8862745098039215, 0.12549019607843137], [0.7411764705882353, 1, 0.8901960784313725, 0.12549019607843137], [0.7450980392156863, 1, 0.8941176470588236, 0.12941176470588237], [0.7490196078431373, 1, 0.8980392156862745, 0.12941176470588237], [0.7529411764705882, 1, 0.9019607843137255, 0.13333333333333333], [0.7568627450980392, 1, 0.9098039215686274, 0.13333333333333333], [0.7607843137254902, 1, 0.9137254901960784, 0.13725490196078433], [0.7647058823529411, 1, 0.9176470588235294, 0.1411764705882353], [0.7686274509803922, 1, 0.9215686274509803, 0.1411764705882353], [0.7725490196078432, 1, 0.9254901960784314, 0.1450980392156863], [0.7764705882352941, 1, 0.9333333333333333, 0.1450980392156863], [0.7803921568627451, 1, 0.9372549019607843, 0.14901960784313725], [0.7843137254901961, 1, 0.9411764705882353, 0.14901960784313725], [0.788235294117647, 1, 0.9450980392156862, 0.15294117647058825], [0.792156862745098, 1, 0.9450980392156862, 0.16862745098039217], [0.796078431372549, 1, 0.9490196078431372, 0.1843137254901961], [0.8, 1, 0.9490196078431372, 0.2], [0.803921568627451, 1, 0.9490196078431372, 0.21568627450980393], [0.807843137254902, 1, 0.9490196078431372, 0.22745098039215686], [0.8117647058823529, 1, 0.9529411764705882, 0.24313725490196078], [0.8156862745098039, 1, 0.9529411764705882, 0.25882352941176473], [0.8196078431372549, 1, 0.9529411764705882, 0.27450980392156865], [0.8235294117647058, 1, 0.9529411764705882, 0.2901960784313726], [0.8274509803921568, 1, 0.9568627450980393, 0.3058823529411765], [0.8313725490196079, 1, 0.9568627450980393, 0.3215686274509804], [0.8352941176470589, 1, 0.9568627450980393, 0.33725490196078434], [0.8392156862745098, 1, 0.9568627450980393, 0.35294117647058826], [0.8431372549019608, 1, 0.9607843137254902, 0.3686274509803922], [0.8470588235294118, 1, 0.9607843137254902, 0.3843137254901961], [0.8509803921568627, 1, 0.9607843137254902, 0.4], [0.8549019607843137, 1, 0.9607843137254902, 0.4117647058823529], [0.8588235294117647, 1, 0.9647058823529412, 0.42745098039215684], [0.8627450980392157, 1, 0.9647058823529412, 0.44313725490196076], [0.8666666666666667, 1, 0.9647058823529412, 0.4588235294117647], [0.8705882352941177, 1, 0.9647058823529412, 0.4745098039215686], [0.8745098039215686, 1, 0.9686274509803922, 0.49019607843137253], [0.8784313725490196, 1, 0.9686274509803922, 0.5058823529411764], [0.8823529411764706, 1, 0.9686274509803922, 0.5215686274509804], [0.8862745098039215, 1, 0.9686274509803922, 0.5372549019607843], [0.8901960784313725, 1, 0.9725490196078431, 0.5529411764705883], [0.8941176470588236, 1, 0.9725490196078431, 0.5686274509803921], [0.8980392156862745, 1, 0.9725490196078431, 0.5843137254901961], [0.9019607843137255, 1, 0.9725490196078431, 0.6], [0.9058823529411765, 1, 0.9725490196078431, 0.611764705882353], [0.9098039215686274, 1, 0.9764705882352941, 0.6274509803921569], [0.9137254901960784, 1, 0.9764705882352941, 0.6431372549019608], [0.9176470588235294, 1, 0.9764705882352941, 0.6588235294117647], [0.9215686274509803, 1, 0.9764705882352941, 0.6745098039215687], [0.9254901960784314, 1, 0.9803921568627451, 0.6901960784313725], [0.9294117647058824, 1, 0.9803921568627451, 0.7058823529411765], [0.9333333333333333, 1, 0.9803921568627451, 0.7215686274509804], [0.9372549019607843, 1, 0.9803921568627451, 0.7372549019607844], [0.9411764705882353, 1, 0.984313725490196, 0.7529411764705882], [0.9450980392156862, 1, 0.984313725490196, 0.7686274509803922], [0.9490196078431372, 1, 0.984313725490196, 0.7843137254901961], [0.9529411764705882, 1, 0.984313725490196, 0.8], [0.9568627450980393, 1, 0.9882352941176471, 0.8117647058823529], [0.9607843137254902, 1, 0.9882352941176471, 0.8274509803921568], [0.9647058823529412, 1, 0.9882352941176471, 0.8431372549019608], [0.9686274509803922, 1, 0.9882352941176471, 0.8588235294117647], [0.9725490196078431, 1, 0.9921568627450981, 0.8745098039215686], [0.9764705882352941, 1, 0.9921568627450981, 0.8901960784313725], [0.9803921568627451, 1, 0.9921568627450981, 0.9058823529411765], [0.984313725490196, 1, 0.9921568627450981, 0.9215686274509803], [0.9882352941176471, 1, 0.996078431372549, 0.9372549019607843], [0.9921568627450981, 1, 0.996078431372549, 0.9529411764705882], [0.996078431372549, 1, 0.996078431372549, 0.9686274509803922], [1, 1, 0.996078431372549, 0.984313725490196]]
      };
    };

    _class.presetLutsO = function presetLutsO() {
      return {
        linear: [[0, 0], [1, 1]],
        lowpass: [[0, 0.8], [0.2, 0.6], [0.3, 0.1], [1, 0]],
        bandpass: [[0, 0], [0.4, 0.8], [0.6, 0.8], [1, 0]],
        highpass: [[0, 0], [0.7, 0.1], [0.8, 0.6], [1, 0.8]],
        flat: [[0, 0.7], [1, 1]],
        random: [[0, 0], [0.38, 0], [0.55, 1], [0.72, 1], [1, 0.05]],
        linear_full: [[0, 0], [0.00392156862745098, 0.00392156862745098], [0.00784313725490196, 0.00784313725490196], [0.011764705882352941, 0.011764705882352941], [0.01568627450980392, 0.01568627450980392], [0.0196078431372549, 0.0196078431372549], [0.023529411764705882, 0.023529411764705882], [0.027450980392156862, 0.027450980392156862], [0.03137254901960784, 0.03137254901960784], [0.03529411764705882, 0.03529411764705882], [0.0392156862745098, 0.0392156862745098], [0.043137254901960784, 0.043137254901960784], [0.047058823529411764, 0.047058823529411764], [0.050980392156862744, 0.050980392156862744], [0.054901960784313725, 0.054901960784313725], [0.058823529411764705, 0.058823529411764705], [0.06274509803921569, 0.06274509803921569], [0.06666666666666667, 0.06666666666666667], [0.07058823529411765, 0.07058823529411765], [0.07450980392156863, 0.07450980392156863], [0.0784313725490196, 0.0784313725490196], [0.08235294117647059, 0.08235294117647059], [0.08627450980392157, 0.08627450980392157], [0.09019607843137255, 0.09019607843137255], [0.09411764705882353, 0.09411764705882353], [0.09803921568627451, 0.09803921568627451], [0.10196078431372549, 0.10196078431372549], [0.10588235294117647, 0.10588235294117647], [0.10980392156862745, 0.10980392156862745], [0.11372549019607843, 0.11372549019607843], [0.11764705882352941, 0.11764705882352941], [0.12156862745098039, 0.12156862745098039], [0.12549019607843137, 0.12549019607843137], [0.12941176470588237, 0.12941176470588237], [0.13333333333333333, 0.13333333333333333], [0.13725490196078433, 0.13725490196078433], [0.1411764705882353, 0.1411764705882353], [0.1450980392156863, 0.1450980392156863], [0.14901960784313725, 0.14901960784313725], [0.15294117647058825, 0.15294117647058825], [0.1568627450980392, 0.1568627450980392], [0.1607843137254902, 0.1607843137254902], [0.16470588235294117, 0.16470588235294117], [0.16862745098039217, 0.16862745098039217], [0.17254901960784313, 0.17254901960784313], [0.17647058823529413, 0.17647058823529413], [0.1803921568627451, 0.1803921568627451], [0.1843137254901961, 0.1843137254901961], [0.18823529411764706, 0.18823529411764706], [0.19215686274509805, 0.19215686274509805], [0.19607843137254902, 0.19607843137254902], [0.2, 0.2], [0.20392156862745098, 0.20392156862745098], [0.20784313725490197, 0.20784313725490197], [0.21176470588235294, 0.21176470588235294], [0.21568627450980393, 0.21568627450980393], [0.2196078431372549, 0.2196078431372549], [0.2235294117647059, 0.2235294117647059], [0.22745098039215686, 0.22745098039215686], [0.23137254901960785, 0.23137254901960785], [0.23529411764705882, 0.23529411764705882], [0.23921568627450981, 0.23921568627450981], [0.24313725490196078, 0.24313725490196078], [0.24705882352941178, 0.24705882352941178], [0.25098039215686274, 0.25098039215686274], [0.2549019607843137, 0.2549019607843137], [0.25882352941176473, 0.25882352941176473], [0.2627450980392157, 0.2627450980392157], [0.26666666666666666, 0.26666666666666666], [0.27058823529411763, 0.27058823529411763], [0.27450980392156865, 0.27450980392156865], [0.2784313725490196, 0.2784313725490196], [0.2823529411764706, 0.2823529411764706], [0.28627450980392155, 0.28627450980392155], [0.2901960784313726, 0.2901960784313726], [0.29411764705882354, 0.29411764705882354], [0.2980392156862745, 0.2980392156862745], [0.30196078431372547, 0.30196078431372547], [0.3058823529411765, 0.3058823529411765], [0.30980392156862746, 0.30980392156862746], [0.3137254901960784, 0.3137254901960784], [0.3176470588235294, 0.3176470588235294], [0.3215686274509804, 0.3215686274509804], [0.3254901960784314, 0.3254901960784314], [0.32941176470588235, 0.32941176470588235], [0.3333333333333333, 0.3333333333333333], [0.33725490196078434, 0.33725490196078434], [0.3411764705882353, 0.3411764705882353], [0.34509803921568627, 0.34509803921568627], [0.34901960784313724, 0.34901960784313724], [0.35294117647058826, 0.35294117647058826], [0.3568627450980392, 0.3568627450980392], [0.3607843137254902, 0.3607843137254902], [0.36470588235294116, 0.36470588235294116], [0.3686274509803922, 0.3686274509803922], [0.37254901960784315, 0.37254901960784315], [0.3764705882352941, 0.3764705882352941], [0.3803921568627451, 0.3803921568627451], [0.3843137254901961, 0.3843137254901961], [0.38823529411764707, 0.38823529411764707], [0.39215686274509803, 0.39215686274509803], [0.396078431372549, 0.396078431372549], [0.4, 0.4], [0.403921568627451, 0.403921568627451], [0.40784313725490196, 0.40784313725490196], [0.4117647058823529, 0.4117647058823529], [0.41568627450980394, 0.41568627450980394], [0.4196078431372549, 0.4196078431372549], [0.4235294117647059, 0.4235294117647059], [0.42745098039215684, 0.42745098039215684], [0.43137254901960786, 0.43137254901960786], [0.43529411764705883, 0.43529411764705883], [0.4392156862745098, 0.4392156862745098], [0.44313725490196076, 0.44313725490196076], [0.4470588235294118, 0.4470588235294118], [0.45098039215686275, 0.45098039215686275], [0.4549019607843137, 0.4549019607843137], [0.4588235294117647, 0.4588235294117647], [0.4627450980392157, 0.4627450980392157], [0.4666666666666667, 0.4666666666666667], [0.47058823529411764, 0.47058823529411764], [0.4745098039215686, 0.4745098039215686], [0.47843137254901963, 0.47843137254901963], [0.4823529411764706, 0.4823529411764706], [0.48627450980392156, 0.48627450980392156], [0.49019607843137253, 0.49019607843137253], [0.49411764705882355, 0.49411764705882355], [0.4980392156862745, 0.4980392156862745], [0.5019607843137255, 0.5019607843137255], [0.5058823529411764, 0.5058823529411764], [0.5098039215686274, 0.5098039215686274], [0.5137254901960784, 0.5137254901960784], [0.5176470588235295, 0.5176470588235295], [0.5215686274509804, 0.5215686274509804], [0.5254901960784314, 0.5254901960784314], [0.5294117647058824, 0.5294117647058824], [0.5333333333333333, 0.5333333333333333], [0.5372549019607843, 0.5372549019607843], [0.5411764705882353, 0.5411764705882353], [0.5450980392156862, 0.5450980392156862], [0.5490196078431373, 0.5490196078431373], [0.5529411764705883, 0.5529411764705883], [0.5568627450980392, 0.5568627450980392], [0.5607843137254902, 0.5607843137254902], [0.5647058823529412, 0.5647058823529412], [0.5686274509803921, 0.5686274509803921], [0.5725490196078431, 0.5725490196078431], [0.5764705882352941, 0.5764705882352941], [0.5803921568627451, 0.5803921568627451], [0.5843137254901961, 0.5843137254901961], [0.5882352941176471, 0.5882352941176471], [0.592156862745098, 0.592156862745098], [0.596078431372549, 0.596078431372549], [0.6, 0.6], [0.6039215686274509, 0.6039215686274509], [0.6078431372549019, 0.6078431372549019], [0.611764705882353, 0.611764705882353], [0.615686274509804, 0.615686274509804], [0.6196078431372549, 0.6196078431372549], [0.6235294117647059, 0.6235294117647059], [0.6274509803921569, 0.6274509803921569], [0.6313725490196078, 0.6313725490196078], [0.6352941176470588, 0.6352941176470588], [0.6392156862745098, 0.6392156862745098], [0.6431372549019608, 0.6431372549019608], [0.6470588235294118, 0.6470588235294118], [0.6509803921568628, 0.6509803921568628], [0.6549019607843137, 0.6549019607843137], [0.6588235294117647, 0.6588235294117647], [0.6627450980392157, 0.6627450980392157], [0.6666666666666666, 0.6666666666666666], [0.6705882352941176, 0.6705882352941176], [0.6745098039215687, 0.6745098039215687], [0.6784313725490196, 0.6784313725490196], [0.6823529411764706, 0.6823529411764706], [0.6862745098039216, 0.6862745098039216], [0.6901960784313725, 0.6901960784313725], [0.6941176470588235, 0.6941176470588235], [0.6980392156862745, 0.6980392156862745], [0.7019607843137254, 0.7019607843137254], [0.7058823529411765, 0.7058823529411765], [0.7098039215686275, 0.7098039215686275], [0.7137254901960784, 0.7137254901960784], [0.7176470588235294, 0.7176470588235294], [0.7215686274509804, 0.7215686274509804], [0.7254901960784313, 0.7254901960784313], [0.7294117647058823, 0.7294117647058823], [0.7333333333333333, 0.7333333333333333], [0.7372549019607844, 0.7372549019607844], [0.7411764705882353, 0.7411764705882353], [0.7450980392156863, 0.7450980392156863], [0.7490196078431373, 0.7490196078431373], [0.7529411764705882, 0.7529411764705882], [0.7568627450980392, 0.7568627450980392], [0.7607843137254902, 0.7607843137254902], [0.7647058823529411, 0.7647058823529411], [0.7686274509803922, 0.7686274509803922], [0.7725490196078432, 0.7725490196078432], [0.7764705882352941, 0.7764705882352941], [0.7803921568627451, 0.7803921568627451], [0.7843137254901961, 0.7843137254901961], [0.788235294117647, 0.788235294117647], [0.792156862745098, 0.792156862745098], [0.796078431372549, 0.796078431372549], [0.8, 0.8], [0.803921568627451, 0.803921568627451], [0.807843137254902, 0.807843137254902], [0.8117647058823529, 0.8117647058823529], [0.8156862745098039, 0.8156862745098039], [0.8196078431372549, 0.8196078431372549], [0.8235294117647058, 0.8235294117647058], [0.8274509803921568, 0.8274509803921568], [0.8313725490196079, 0.8313725490196079], [0.8352941176470589, 0.8352941176470589], [0.8392156862745098, 0.8392156862745098], [0.8431372549019608, 0.8431372549019608], [0.8470588235294118, 0.8470588235294118], [0.8509803921568627, 0.8509803921568627], [0.8549019607843137, 0.8549019607843137], [0.8588235294117647, 0.8588235294117647], [0.8627450980392157, 0.8627450980392157], [0.8666666666666667, 0.8666666666666667], [0.8705882352941177, 0.8705882352941177], [0.8745098039215686, 0.8745098039215686], [0.8784313725490196, 0.8784313725490196], [0.8823529411764706, 0.8823529411764706], [0.8862745098039215, 0.8862745098039215], [0.8901960784313725, 0.8901960784313725], [0.8941176470588236, 0.8941176470588236], [0.8980392156862745, 0.8980392156862745], [0.9019607843137255, 0.9019607843137255], [0.9058823529411765, 0.9058823529411765], [0.9098039215686274, 0.9098039215686274], [0.9137254901960784, 0.9137254901960784], [0.9176470588235294, 0.9176470588235294], [0.9215686274509803, 0.9215686274509803], [0.9254901960784314, 0.9254901960784314], [0.9294117647058824, 0.9294117647058824], [0.9333333333333333, 0.9333333333333333], [0.9372549019607843, 0.9372549019607843], [0.9411764705882353, 0.9411764705882353], [0.9450980392156862, 0.9450980392156862], [0.9490196078431372, 0.9490196078431372], [0.9529411764705882, 0.9529411764705882], [0.9568627450980393, 0.9568627450980393], [0.9607843137254902, 0.9607843137254902], [0.9647058823529412, 0.9647058823529412], [0.9686274509803922, 0.9686274509803922], [0.9725490196078431, 0.9725490196078431], [0.9764705882352941, 0.9764705882352941], [0.9803921568627451, 0.9803921568627451], [0.984313725490196, 0.984313725490196], [0.9882352941176471, 0.9882352941176471], [0.9921568627450981, 0.9921568627450981], [0.996078431372549, 0.996078431372549], [1, 1]]
      };
    };

    _createClass(_class, [{
      key: 'texture',
      get: function get() {
        var texture = new three.Texture(this._canvas);
        texture.mapping = three.UVMapping;
        texture.wrapS = texture.wrapT = three.ClampToEdgeWrapping;
        texture.magFilter = texture.minFilter = three.NearestFilter;
        texture.premultiplyAlpha = true;
        texture.needsUpdate = true;
        return texture;
      }
    }, {
      key: 'lut',
      set: function set(targetLUT) {
        this._color = this._luts[targetLUT];
        this._lut = targetLUT;

        this.paintCanvas();
      },
      get: function get() {
        return this._lut;
      }
    }, {
      key: 'luts',
      set: function set(newLuts) {
        this._luts = newLuts;
      },
      get: function get() {
        return this._luts;
      }
    }, {
      key: 'lutO',
      set: function set(targetLUTO) {
        this._opacity = this._lutsO[targetLUTO];
        this._lutO = targetLUTO;

        this.paintCanvas();
      },
      get: function get() {
        return this._lutO;
      }
    }, {
      key: 'lutsO',
      set: function set(newLutsO) {
        this._lutsO = newLutsO;
      },
      get: function get() {
        return this._lutsO;
      }
    }, {
      key: 'discrete',
      set: function set(discrete) {
        this._discrete = discrete;

        this.paintCanvas();
      },
      get: function get() {
        return this._discrete;
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (helpersLut());

/***/ }),

/***/ "./src/helpers/helpers.material.mixin.js":
/*!***********************************************!*\
  !*** ./src/helpers/helpers.material.mixin.js ***!
  \***********************************************/
/*! exports provided: helpersMaterialMixin, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "helpersMaterialMixin", function() { return helpersMaterialMixin; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Helpers material mixin.
 *
 * @module helpers/material/mixin
 */

var helpersMaterialMixin = function helpersMaterialMixin() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = three.Object3D;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, _Constructor.apply(this, arguments));
    }

    _class.prototype._createMaterial = function _createMaterial(extraOptions) {
      // generate shaders on-demand!
      var fs = new this._shadersFragment(this._uniforms);
      var vs = new this._shadersVertex();

      // material
      var globalOptions = {
        uniforms: this._uniforms,
        vertexShader: vs.compute(),
        fragmentShader: fs.compute()
      };

      var options = Object.assign(extraOptions, globalOptions);
      this._material = new three.ShaderMaterial(options);
      this._material.needsUpdate = true;
    };

    _class.prototype._updateMaterial = function _updateMaterial() {
      // generate shaders on-demand!
      var fs = new this._shadersFragment(this._uniforms);
      var vs = new this._shadersVertex();

      this._material.vertexShader = vs.compute();
      this._material.fragmentShader = fs.compute();

      this._material.needsUpdate = true;
    };

    _class.prototype._prepareTexture = function _prepareTexture() {
      this._textures = [];
      for (var m = 0; m < this._stack._rawData.length; m++) {
        var tex = new three.DataTexture(this._stack.rawData[m], this._stack.textureSize, this._stack.textureSize, this._stack.textureType, three.UnsignedByteType, three.UVMapping, three.ClampToEdgeWrapping, three.ClampToEdgeWrapping, three.NearestFilter, three.NearestFilter);
        tex.needsUpdate = true;
        tex.flipY = true;
        this._textures.push(tex);
      }
    };

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (helpersMaterialMixin());

/***/ }),

/***/ "./src/helpers/helpers.progressbar.eventbased.js":
/*!*******************************************************!*\
  !*** ./src/helpers/helpers.progressbar.eventbased.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * Event Based progressbar
 * @module helpers/progressBar
 *
 * @example
 *
 * let loader = new LoadersVolume();
 * const domContainer = document.getElementById('progressbar');
 * const pb = new HelpersProgressBarEventBased(loader, domContainer);
 */

var HelpersProgressBarEventBased = function () {
  function HelpersProgressBarEventBased(emitter, domTarget) {
    _classCallCheck(this, HelpersProgressBarEventBased);

    if (!emitter || !this._isFunction(emitter.emit)) {
      window.console.error('please give the this._emitter instance');
      return;
    }

    if (_core_core_utils__WEBPACK_IMPORTED_MODULE_0__["default"].isString(domTarget)) {
      this._dom = document.getElementById(domTarget);
    } else {
      this._dom = domTarget;
    }

    if (!_core_core_utils__WEBPACK_IMPORTED_MODULE_0__["default"].isElement(this._dom)) {
      window.console.error('please give the id of container dom or directly a dom instance');
      return;
    }
    this._emitter = emitter;
    this.initContainerDom();
    this.initEventListenner();
    this.loaded = 0;
    this.totalFile = 0;
  }

  HelpersProgressBarEventBased.prototype._isFunction = function _isFunction(fn) {
    return Object.prototype.toString.call(fn) === '[object Function]';
  };

  HelpersProgressBarEventBased.prototype.initEventListenner = function initEventListenner() {
    var self = this;

    this._emitter.on('load-start', function (event) {
      var totalFiles = event.files.length;
      self.totalFile = totalFiles;
      self._domTotalFile.innerHTML = totalFiles;
    });

    this._emitter.on('fetch-start', function (event) {
      var fetchLi = document.createElement('li');

      var fileTag = document.createElement('div');
      fileTag.innerHTML = 'file: ' + event.file;
      fileTag.style.color = '#ffffff';
      fetchLi.append(fileTag);

      fetchLi.className = 'fetch-file';
      fetchLi.id = 'file-' + event.file;
      fetchLi.style.marginBottom = '7px';
      fetchLi.style.border = '1px solid #ffffff;';
      fetchLi.style.width = '60%';
      var fetchprogress = document.createElement('div');
      fetchprogress.id = 'file-fetch-' + event.file;
      fetchprogress.style.width = '0%';
      fetchLi.append(fetchprogress);
      self._domProcessList.append(fetchLi);
    });

    this._emitter.on('fetch-progress', function (event) {
      var id = 'file-fetch-' + event.file;
      var fileFetchDom = document.getElementById(id);
      fileFetchDom.style.width = event.loaded / event.total * 100 + '%';
      fileFetchDom.style.border = '1px solid red';
    });

    this._emitter.on('fetch-success', function (event) {
      // show result
      var liParent = document.getElementById('file-' + event.file);
      var result = document.createElement('div');
      result.id = 'file-result-' + event.file;
      result.innerHTML = 'fetch-success';
      result.style.color = '#ffffff';
      liParent.append(result);
    });

    this._emitter.on('fetch-error', function (event) {
      // console.log(event);
    });

    this._emitter.on('fetch-abort', function (event) {
      // console.log(event);
    });

    this._emitter.on('fetch-end', function (event) {
      // console.log(event);
    });

    this._emitter.on('fetch-timeout', function (event) {
      // console.log(event);
    });

    this._emitter.on('parse-start', function (event) {
      var liParent = document.getElementById('file-' + event.file);
      var parseprogress = document.createElement('div');
      parseprogress.id = 'file-parse-' + event.file;
      parseprogress.style.width = '0%';
      liParent.append(parseprogress);
    });

    this._emitter.on('parsing', function (event) {
      var id = 'file-parse-' + event.file;
      var fileParseDom = document.getElementById(id);
      fileParseDom.style.width = event.parsed / event.total * 100 + '%';
      fileParseDom.style.border = '1px solid yellow';
    });

    this._emitter.on('parse-success', function (event) {
      self.loaded += 1;
      self._domCurrentFile.innerHTML = self.loaded;
      self._domCurrentProgress.style.width = self.loaded / self.totalFile * 100 + '%';
      // show result
      var liParent = document.getElementById('file-' + event.file);
      var result = document.createElement('div');
      result.id = 'file-result-' + event.file;
      result.innerHTML = 'parse-success';
      result.style.color = '#ffffff';
      liParent.append(result);
    });
  };

  HelpersProgressBarEventBased.prototype.initContainerDom = function initContainerDom() {
    var containerDom = '\n      <div id="ami-progress-bar-container" style="background-color: rgb(33, 33, 33); color: #ffffff;">\n      <div>\n      <label for="progress-bar" id="progress-label" style="width: 60%; border: 1px solid #ffffff; text-align: center;">\n      <span id="current-file-index">0</span>\n      <span id="total-file">0</span>\n      </label>\n      <div id="progress-bar" style="width: 60%; border: 1px solid #ffffff; text-align: center;">\n      <div id="current-progress" style="border: 1px solid red; width: 0%;"></div>\n      </div>\n      </div>\n      <ul id="process-list" style="list-style-type: none; padding: 0; overflow-y: auto;">\n      </ul>\n      </div>';
    var wrap = document.createElement('div');
    wrap.innerHTML = containerDom;
    this._dom.append(wrap);
    // dom interface
    this._domCurrentFile = document.getElementById('current-file-index');
    this._domTotalFile = document.getElementById('total-file');
    this._domProcessList = document.getElementById('process-list');
    this._domCurrentProgress = document.getElementById('current-progress');
  };

  return HelpersProgressBarEventBased;
}();

/* harmony default export */ __webpack_exports__["default"] = (HelpersProgressBarEventBased);

/***/ }),

/***/ "./src/helpers/helpers.progressbar.js":
/*!********************************************!*\
  !*** ./src/helpers/helpers.progressbar.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @module helpers/progressBar
 */

var HelpersProgressBar = function () {
  function HelpersProgressBar(container) {
    _classCallCheck(this, HelpersProgressBar);

    this._container = container;
    this._modes = {
      load: {
        name: 'load',
        color: '#FFF56F'
      },
      parse: {
        name: 'parse',
        color: '#2196F3'
      }
    };

    this.requestAnimationFrameID = null;

    this._mode = null;
    this._value = null;
    this._total = null;
    this._totalFiles = null;

    this.init();
  }

  HelpersProgressBar.prototype.free = function free() {
    var progressContainers = this._container.getElementsByClassName('progress container');
    if (progressContainers.length > 0) {
      progressContainers[0].parentNode.removeChild(progressContainers[0]);
    }
    progressContainers = null;
    // stop rendering loop
    window.cancelAnimationFrame(this.requestAnimationFrameID);
  };

  HelpersProgressBar.prototype.init = function init() {
    var progressContainer = this._domContainer();

    for (var mode in this._modes) {
      if (this._modes.hasOwnProperty(mode)) {
        var bar = this._domBar(this._modes[mode]);
        progressContainer.appendChild(bar);
        bar = null;
      }
    }

    this._container.appendChild(progressContainer);
    progressContainer = null;

    // start rendering loop
    this.updateUI();
  };

  // url can be used in child class to show overall progress bar


  HelpersProgressBar.prototype.update = function update(value, total, mode) {
    var url = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

    this._mode = mode;
    this._value = value;
    // depending on CDN, total return to XHTTPRequest can be 0.
    // In this case, we generate a random number to animate the progressbar
    if (total === 0) {
      this._total = value;
      this._value = Math.random() * value;
    } else {
      this._total = total;
    }
  };

  HelpersProgressBar.prototype.updateUI = function updateUI() {
    var _this = this;

    this.requestAnimationFrameID = requestAnimationFrame(function () {
      _this.updateUI();
    });

    if (!(this._modes.hasOwnProperty(this._mode) && this._modes[this._mode].hasOwnProperty('name') && this._modes[this._mode].hasOwnProperty('color'))) {
      return false;
    }

    var progress = Math.round(this._value / this._total * 100);
    var color = this._modes[this._mode].color;

    var progressBar = this._container.getElementsByClassName('progress ' + this._modes[this._mode].name);
    if (progressBar.length > 0) {
      progressBar[0].style.borderColor = color;
      progressBar[0].style.width = progress + '%';
    }
    progressBar = null;
  };

  HelpersProgressBar.prototype._domContainer = function _domContainer() {
    var container = document.createElement('div');

    // class it
    container.classList.add('progress');
    container.classList.add('container');

    // style it
    container.style.width = '100%';
    container.style.height = '8px';
    container.style.position = 'absolute';
    container.style.backgroundColor = 'rgba(158, 158, 158, 0.5)';
    container.style.top = '0';
    container.style.zIndex = '1';

    return container;
  };

  HelpersProgressBar.prototype._domBar = function _domBar(mode) {
    if (!(mode.hasOwnProperty('name') && mode.hasOwnProperty('color'))) {
      window.console.log('Invalid mode provided.');
      window.console.log(mode);

      return false;
    }

    var bar = document.createElement('div');

    // class it
    bar.classList.add(mode.name);
    bar.classList.add('progress');

    // style it
    bar.style.border = '2px solid ' + mode.color;
    bar.style.width = '0%';

    return bar;
  };

  _createClass(HelpersProgressBar, [{
    key: 'totalFiles',
    set: function set(totalFiles) {
      this._totalFiles = totalFiles;
    },
    get: function get() {
      return this._totalFiles;
    }
  }]);

  return HelpersProgressBar;
}();

/* harmony default export */ __webpack_exports__["default"] = (HelpersProgressBar);

/***/ }),

/***/ "./src/helpers/helpers.segmentationlut.js":
/*!************************************************!*\
  !*** ./src/helpers/helpers.segmentationlut.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var defaultSegmentation = {
  0: { color: [0, 0, 0], opacity: 0, label: 'background' },
  1: { color: [255, 0, 0], opacity: 1, label: 'white matter' }
};

var HelpersSegmentationLut = function () {
  function HelpersSegmentationLut(domTarget) {
    var segmentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSegmentation;

    _classCallCheck(this, HelpersSegmentationLut);

    if (_core_core_utils__WEBPACK_IMPORTED_MODULE_0__["default"].isString(domTarget)) {
      this._dom = document.getElementById(domTarget);
    } else {
      this._dom = domTarget;
    }

    this._segmentation = segmentation;

    /* The segmentation object contains the color, opacity, label and structures associated:
      e.g
      const freesurferSegmentation = {
      0: {color: [0, 0, 0],opacity: 0,label: 'background'},
      1: {color: [255, 0, 0],opacity: 1,label: 'white matter'},
      }
    */
    this.initCanvas();
    this.paintCanvas();
  }

  HelpersSegmentationLut.prototype.initCanvas = function initCanvas() {
    // container
    this._canvasContainer = this.initCanvasContainer(this._dom);
    // background
    this._canvasBg = this.createCanvas();
    this._canvasContainer.appendChild(this._canvasBg);
    // foreground
    this._canvas = this.createCanvas();
    this._canvasContainer.appendChild(this._canvas);
  };

  HelpersSegmentationLut.prototype.initCanvasContainer = function initCanvasContainer(dom) {
    var canvasContainer = dom;
    canvasContainer.style.width = '256 px';
    canvasContainer.style.height = '128 px';
    canvasContainer.style.border = '1px solid #F9F9F9';
    return canvasContainer;
  };

  HelpersSegmentationLut.prototype.createCanvas = function createCanvas() {
    var canvas = document.createElement('canvas');
    canvas.height = 128;
    canvas.width = 256;
    return canvas;
  };

  HelpersSegmentationLut.prototype.paintCanvas = function paintCanvas() {
    // setup context
    var ctx = this._canvas.getContext('2d');
    ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);
    ctx.globalCompositeOperation = 'source-over';
    ctx.lineWidth = 1;

    for (var i in this._segmentation) {
      // i is the label number and specifies the coordinates inside the canvas
      var xCoord = i % this._canvas.width;
      var yCoord = Math.floor(i / this._canvas.width);
      var opacity = typeof this._segmentation[i]['opacity'] != 'undefined' ? this._segmentation[i]['opacity'] : 1;
      var color = this._segmentation[i]['color'];

      ctx.fillStyle = 'rgba( ' + Math.round(color[0]) + ', ' + Math.round(color[1]) + ', ' + Math.round(color[2]) + ', ' + opacity + ')';
      ctx.fillRect(xCoord, yCoord, 1, 1);
    }
  };

  _createClass(HelpersSegmentationLut, [{
    key: 'texture',
    get: function get() {
      var texture = new THREE.Texture(this._canvas);
      texture.mapping = THREE.UVMapping;
      texture.wrapS = texture.wrapT = THREE.ClampToEdgeWrapping;
      texture.magFilter = texture.minFilter = THREE.NearestFilter;
      texture.premultiplyAlpha = true;
      texture.needsUpdate = true;

      return texture;
    }

    /**
     * Set and get the segmentation object
     * (you can create it or get it from the presets file)
     *
     * @param {*} segmentation
     */

  }, {
    key: 'segmentation',
    set: function set(segmentation) {
      this._segmentation = segmentation;
      this.paintCanvas();
    },
    get: function get() {
      return this._segmentation;
    }
  }]);

  return HelpersSegmentationLut;
}();

/* harmony default export */ __webpack_exports__["default"] = (HelpersSegmentationLut);

/***/ }),

/***/ "./src/helpers/helpers.slice.js":
/*!**************************************!*\
  !*** ./src/helpers/helpers.slice.js ***!
  \**************************************/
/*! exports provided: helpersSlice, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "helpersSlice", function() { return helpersSlice; });
/* harmony import */ var _geometries_geometries_slice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geometries/geometries.slice */ "./src/geometries/geometries.slice.js");
/* harmony import */ var _shaders_shaders_data_uniform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shaders/shaders.data.uniform */ "./src/shaders/shaders.data.uniform.js");
/* harmony import */ var _shaders_shaders_data_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shaders/shaders.data.vertex */ "./src/shaders/shaders.data.vertex.js");
/* harmony import */ var _shaders_shaders_data_fragment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shaders/shaders.data.fragment */ "./src/shaders/shaders.data.fragment.js");
/* harmony import */ var _helpers_helpers_material_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/helpers.material.mixin */ "./src/helpers/helpers.material.mixin.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/







/**
 * @module helpers/slice
 */

var helpersSlice = function helpersSlice() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_helpers_helpers_material_mixin__WEBPACK_IMPORTED_MODULE_4__["helpersMaterialMixin"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(stack) {
      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new three.Vector3(0, 0, 0);
      var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new three.Vector3(0, 0, 1);
      var aabbSpace = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'IJK';

      _classCallCheck(this, _class);

      // private vars
      var _this = _possibleConstructorReturn(this, _Constructor.call(this));
      //


      _this._stack = stack;

      // image settings
      // index only used to grab window/level and intercept/slope
      _this._invert = _this._stack.invert;

      _this._lut = 'none';
      _this._lutTexture = null;
      // if auto === true, get from index
      // else from stack which holds the default values
      _this._intensityAuto = true;
      _this._interpolation = 1; // default to trilinear interpolation
      // starts at 0
      _this._index = index;
      _this._windowWidth = null;
      _this._windowCenter = null;
      _this._opacity = 1;
      _this._rescaleSlope = null;
      _this._rescaleIntercept = null;
      _this._spacing = 1;
      _this._thickness = 0;
      _this._thicknessMethod = 0; // default to MIP (Maximum Intensity Projection); 1 - Mean; 2 - MinIP

      // threshold
      _this._lowerThreshold = null;
      _this._upperThreshold = null;

      _this._canvasWidth = 0;
      _this._canvasHeight = 0;
      _this._borderColor = null;

      // Object3D settings
      // shape
      _this._planePosition = position;
      _this._planeDirection = direction;
      // change aaBBSpace changes the box dimensions
      // also changes the transform
      // there is also a switch to move back mesh to LPS space automatically
      _this._aaBBspace = aabbSpace; // or LPS -> different transforms, esp for the geometry/mesh
      _this._material = null;
      _this._textures = [];
      _this._shadersFragment = _shaders_shaders_data_fragment__WEBPACK_IMPORTED_MODULE_3__["default"];
      _this._shadersVertex = _shaders_shaders_data_vertex__WEBPACK_IMPORTED_MODULE_2__["default"];
      _this._uniforms = _shaders_shaders_data_uniform__WEBPACK_IMPORTED_MODULE_1__["default"].uniforms();
      _this._geometry = null;
      _this._mesh = null;
      _this._visible = true;

      // update dimensions, center, etc.
      // depending on aaBBSpace
      _this._init();

      // update object
      _this._create();
      return _this;
    }

    // getters/setters

    _class.prototype._init = function _init() {
      if (!this._stack || !this._stack._prepared || !this._stack._packed) {
        return;
      }

      if (this._aaBBspace === 'IJK') {
        this._halfDimensions = this._stack.halfDimensionsIJK;
        this._center = new three.Vector3(this._stack.halfDimensionsIJK.x - 0.5, this._stack.halfDimensionsIJK.y - 0.5, this._stack.halfDimensionsIJK.z - 0.5);
        this._toAABB = new three.Matrix4();
      } else {
        // LPS
        var aaBBox = this._stack.AABBox();
        this._halfDimensions = aaBBox.clone().multiplyScalar(0.5);
        this._center = this._stack.centerAABBox();
        this._toAABB = this._stack.lps2AABB;
      }
    };

    // private methods


    _class.prototype._create = function _create() {
      if (!this._stack || !this._stack.prepared || !this._stack.packed) {
        return;
      }

      // Convenience vars
      try {
        var SliceGeometryContructor = Object(_geometries_geometries_slice__WEBPACK_IMPORTED_MODULE_0__["geometriesSlice"])(three);
        this._geometry = new SliceGeometryContructor(this._halfDimensions, this._center, this._planePosition, this._planeDirection, this._toAABB);
      } catch (e) {
        window.console.log(e);
        window.console.log('invalid slice geometry - exiting...');
        return;
      }

      if (!this._geometry.vertices) {
        return;
      }

      if (!this._material) {
        //
        this._uniforms.uTextureSize.value = this._stack.textureSize;
        this._uniforms.uDataDimensions.value = [this._stack.dimensionsIJK.x, this._stack.dimensionsIJK.y, this._stack.dimensionsIJK.z];
        this._uniforms.uWorldToData.value = this._stack.lps2IJK;
        this._uniforms.uNumberOfChannels.value = this._stack.numberOfChannels;
        this._uniforms.uPixelType.value = this._stack.pixelType;
        this._uniforms.uBitsAllocated.value = this._stack.bitsAllocated;
        this._uniforms.uPackedPerPixel.value = this._stack.packedPerPixel;
        this._uniforms.uSpacing.value = this._spacing;
        this._uniforms.uThickness.value = this._thickness;
        this._uniforms.uThicknessMethod.value = this._thicknessMethod;
        // compute texture if material exist
        this._prepareTexture();
        this._uniforms.uTextureContainer.value = this._textures;
        if (this._stack.textureUnits > 8) {
          this._uniforms.uTextureContainer.length = 14;
        }

        this._createMaterial({
          side: three.DoubleSide
        });
      }

      // update intensity related stuff
      this.updateIntensitySettings();
      this.updateIntensitySettingsUniforms();

      // create the mesh!
      this._mesh = new three.Mesh(this._geometry, this._material);
      if (this._aaBBspace === 'IJK') {
        this._mesh.applyMatrix(this._stack.ijk2LPS);
      }

      this._mesh.visible = this._visible;

      // and add it!
      this.add(this._mesh);
    };

    _class.prototype.updateIntensitySettings = function updateIntensitySettings() {
      // if auto, get from frame index
      if (this._intensityAuto) {
        this.updateIntensitySetting('windowCenter');
        this.updateIntensitySetting('windowWidth');
        this.updateIntensitySetting('rescaleSlope');
        this.updateIntensitySetting('rescaleIntercept');
      } else {
        if (this._windowCenter === null) {
          this._windowCenter = this._stack.windowCenter;
        }

        if (this._windowWidth === null) {
          this._windowWidth = this._stack.windowWidth;
        }

        if (this._rescaleSlope === null) {
          this._rescaleSlope = this._stack.rescaleSlope;
        }

        if (this._rescaleIntercept === null) {
          this._rescaleIntercept = this._stack.rescaleIntercept;
        }
      }

      // adding thresholding
      if (this._upperThreshold === null) {
        this._upperThreshold = this._stack._minMax[1];
      }

      if (this._lowerThreshold === null) {
        this._lowerThreshold = this._stack._minMax[0];
      }
    };

    _class.prototype.updateIntensitySettingsUniforms = function updateIntensitySettingsUniforms() {
      // compensate for the offset to only pass > 0 values to shaders
      // models > models.stack.js : _packTo8Bits
      var offset = 0;
      if (this._stack._minMax[0] < 0) {
        offset -= this._stack._minMax[0];
      }

      // set slice window center and width
      this._uniforms.uRescaleSlopeIntercept.value = [this._rescaleSlope, this._rescaleIntercept];
      this._uniforms.uWindowCenterWidth.value = [offset + this._windowCenter, this._windowWidth];

      // set slice opacity
      this._uniforms.uOpacity.value = this._opacity;

      // set slice upper/lower threshold
      this._uniforms.uLowerUpperThreshold.value = [offset + this._lowerThreshold, offset + this._upperThreshold];

      // invert
      this._uniforms.uInvert.value = this._invert === true ? 1 : 0;

      // interpolation
      this._uniforms.uInterpolation.value = this._interpolation;

      // lut
      if (this._lut === 'none') {
        this._uniforms.uLut.value = 0;
      } else {
        this._uniforms.uLut.value = 1;
        this._uniforms.uTextureLUT.value = this._lutTexture;
      }
    };

    _class.prototype.updateIntensitySetting = function updateIntensitySetting(setting) {
      if (this._stack.frame[this._index] && this._stack.frame[this._index][setting]) {
        this['_' + setting] = this._stack.frame[this._index][setting];
      } else {
        this['_' + setting] = this._stack[setting];
      }
    };

    _class.prototype._update = function _update() {
      // update slice
      if (this._mesh) {
        this.remove(this._mesh);
        this._mesh.geometry.dispose();
        this._mesh.geometry = null;
        // we do not want to dispose the texture!
        // this._mesh.material.dispose();
        // this._mesh.material = null;
        this._mesh = null;
      }

      this._create();
    };

    _class.prototype.dispose = function dispose() {
      // Release memory
      for (var j = 0; j < this._textures.length; j++) {
        this._textures[j].dispose();
        this._textures[j] = null;
      }
      this._textures = null;
      this._shadersFragment = null;
      this._shadersVertex = null;

      this._uniforms = null;

      // material, geometry and mesh
      this.remove(this._mesh);
      this._mesh.geometry.dispose();
      this._mesh.geometry = null;
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._mesh = null;

      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      this._stack = null;
    };

    _class.prototype.cartesianEquation = function cartesianEquation() {
      // Make sure we have a geometry
      if (!this._geometry || !this._geometry.vertices || this._geometry.vertices.length < 3) {
        return new three.Vector4();
      }

      var vertices = this._geometry.vertices;
      var dataToWorld = this._stack.ijk2LPS;
      var p1 = new three.Vector3(vertices[0].x, vertices[0].y, vertices[0].z).applyMatrix4(dataToWorld);
      var p2 = new three.Vector3(vertices[1].x, vertices[1].y, vertices[1].z).applyMatrix4(dataToWorld);
      var p3 = new three.Vector3(vertices[2].x, vertices[2].y, vertices[2].z).applyMatrix4(dataToWorld);
      var v1 = new three.Vector3();
      var v2 = new three.Vector3();
      var normal = v1.subVectors(p3, p2).cross(v2.subVectors(p1, p2)).normalize();

      return new three.Vector4(normal.x, normal.y, normal.z, -normal.dot(p1));
    };

    _createClass(_class, [{
      key: 'stack',
      get: function get() {
        return this._stack;
      },
      set: function set(stack) {
        this._stack = stack;
      }
    }, {
      key: 'spacing',
      get: function get() {
        return this._spacing;
      },
      set: function set(spacing) {
        this._spacing = spacing;
        this._uniforms.uSpacing.value = this._spacing;
      }
    }, {
      key: 'thickness',
      get: function get() {
        return this._thickness;
      },
      set: function set(thickness) {
        this._thickness = thickness;
        this._uniforms.uThickness.value = this._thickness;
      }
    }, {
      key: 'thicknessMethod',
      get: function get() {
        return this._thicknessMethod;
      },
      set: function set(thicknessMethod) {
        this._thicknessMethod = thicknessMethod;
        this._uniforms.uThicknessMethod.value = this._thicknessMethod;
      }
    }, {
      key: 'windowWidth',
      get: function get() {
        return this._windowWidth;
      },
      set: function set(windowWidth) {
        this._windowWidth = windowWidth;
        this.updateIntensitySettingsUniforms();
      }
    }, {
      key: 'windowCenter',
      get: function get() {
        return this._windowCenter;
      },
      set: function set(windowCenter) {
        this._windowCenter = windowCenter;
        this.updateIntensitySettingsUniforms();
      }
    }, {
      key: 'opacity',
      get: function get() {
        return this._opacity;
      },
      set: function set(opacity) {
        this._opacity = opacity;
        this.updateIntensitySettingsUniforms();
      }

      // adding thresholding method

    }, {
      key: 'upperThreshold',
      get: function get() {
        return this._upperThreshold;
      },
      set: function set(upperThreshold) {
        this._upperThreshold = upperThreshold;
        this.updateIntensitySettingsUniforms();
      }
    }, {
      key: 'lowerThreshold',
      get: function get() {
        return this._lowerThreshold;
      },
      set: function set(lowerThreshold) {
        this._lowerThreshold = lowerThreshold;
        this.updateIntensitySettingsUniforms();
      }
    }, {
      key: 'rescaleSlope',
      get: function get() {
        return this._rescaleSlope;
      },
      set: function set(rescaleSlope) {
        this._rescaleSlope = rescaleSlope;
        this.updateIntensitySettingsUniforms();
      }
    }, {
      key: 'rescaleIntercept',
      get: function get() {
        return this._rescaleIntercept;
      },
      set: function set(rescaleIntercept) {
        this._rescaleIntercept = rescaleIntercept;
        this.updateIntensitySettingsUniforms();
      }
    }, {
      key: 'invert',
      get: function get() {
        return this._invert;
      },
      set: function set(invert) {
        this._invert = invert;
        this.updateIntensitySettingsUniforms();
      }
    }, {
      key: 'lut',
      get: function get() {
        return this._lut;
      },
      set: function set(lut) {
        this._lut = lut;
      }
    }, {
      key: 'lutTexture',
      get: function get() {
        return this._lutTexture;
      },
      set: function set(lutTexture) {
        this._lutTexture = lutTexture;
        this.updateIntensitySettingsUniforms();
      }
    }, {
      key: 'intensityAuto',
      get: function get() {
        return this._intensityAuto;
      },
      set: function set(intensityAuto) {
        this._intensityAuto = intensityAuto;
        this.updateIntensitySettings();
        this.updateIntensitySettingsUniforms();
      }
    }, {
      key: 'interpolation',
      get: function get() {
        return this._interpolation;
      },
      set: function set(interpolation) {
        this._interpolation = interpolation;
        this.updateIntensitySettingsUniforms();
        this._updateMaterial();
      }
    }, {
      key: 'index',
      get: function get() {
        return this._index;
      },
      set: function set(index) {
        this._index = index;
        this._update();
      }
    }, {
      key: 'planePosition',
      set: function set(position) {
        this._planePosition = position;
        this._update();
      },
      get: function get() {
        return this._planePosition;
      }
    }, {
      key: 'planeDirection',
      set: function set(direction) {
        this._planeDirection = direction;
        this._update();
      },
      get: function get() {
        return this._planeDirection;
      }
    }, {
      key: 'halfDimensions',
      set: function set(halfDimensions) {
        this._halfDimensions = halfDimensions;
      },
      get: function get() {
        return this._halfDimensions;
      }
    }, {
      key: 'center',
      set: function set(center) {
        this._center = center;
      },
      get: function get() {
        return this._center;
      }
    }, {
      key: 'aabbSpace',
      set: function set(aabbSpace) {
        this._aaBBspace = aabbSpace;
        this._init();
      },
      get: function get() {
        return this._aaBBspace;
      }
    }, {
      key: 'mesh',
      set: function set(mesh) {
        this._mesh = mesh;
      },
      get: function get() {
        return this._mesh;
      }
    }, {
      key: 'geometry',
      set: function set(geometry) {
        this._geometry = geometry;
      },
      get: function get() {
        return this._geometry;
      }
    }, {
      key: 'canvasWidth',
      set: function set(canvasWidth) {
        this._canvasWidth = canvasWidth;
        this._uniforms.uCanvasWidth.value = this._canvasWidth;
      },
      get: function get() {
        return this._canvasWidth;
      }
    }, {
      key: 'canvasHeight',
      set: function set(canvasHeight) {
        this._canvasHeight = canvasHeight;
        this._uniforms.uCanvasHeight.value = this._canvasHeight;
      },
      get: function get() {
        return this._canvasHeight;
      }
    }, {
      key: 'borderColor',
      set: function set(borderColor) {
        this._borderColor = borderColor;
        this._uniforms.uBorderColor.value = new three.Color(borderColor);
      },
      get: function get() {
        return this._borderColor;
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (helpersSlice());

/***/ }),

/***/ "./src/helpers/helpers.stack.js":
/*!**************************************!*\
  !*** ./src/helpers/helpers.stack.js ***!
  \**************************************/
/*! exports provided: helpersStack, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "helpersStack", function() { return helpersStack; });
/* harmony import */ var _helpers_helpers_border__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/helpers.border */ "./src/helpers/helpers.border.js");
/* harmony import */ var _helpers_helpers_boundingbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/helpers.boundingbox */ "./src/helpers/helpers.boundingbox.js");
/* harmony import */ var _helpers_helpers_slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/helpers.slice */ "./src/helpers/helpers.slice.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/




/**
 * Helper to easily display and interact with a stack.<br>
 *<br>
 * Defaults:<br>
 *   - orientation: 0 (acquisition direction)<br>
 *   - index: middle slice in acquisition direction<br>
 *<br>
 * Features:<br>
 *   - slice from the stack (in any direction)<br>
 *   - slice border<br>
 *   - stack bounding box<br>
 *<br>
 * Live demo at: {@link http://jsfiddle.net/gh/get/library/pure/fnndsc/ami/tree/master/lessons/01#run|Lesson 01}
 *
 * @example
 * let stack = new VJS.Models.Stack();
 * ... // prepare the stack
 *
 * let helpersStack = new VJS.Helpers.Stack(stack);
 * stackHelper.bbox.color = 0xF9F9F9;
 * stackHelper.border.color = 0xF9F9F9;
 *
 * let scene = new THREE.Scene();
 * scene.add(stackHelper);
 *
 * @see module:helpers/border
 * @see module:helpers/boundingbox
 * @see module:helpers/slice
 *
 * @module helpers/stack
 */
var helpersStack = function helpersStack() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = three.Object3D;
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(stack) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this));
      //


      _this._stack = stack;
      _this._bBox = null;
      _this._slice = null;
      _this._border = null;
      _this._dummy = null;

      _this._orientation = 0;
      _this._index = 0;

      _this._uniforms = null;
      _this._autoWindowLevel = false;
      _this._outOfBounds = false;
      _this._orientationMaxIndex = 0;
      _this._orientationSpacing = 0;

      _this._canvasWidth = 0;
      _this._canvasHeight = 0;
      _this._borderColor = null;

      _this._create();
      return _this;
    }

    /**
     * Get stack.
     *
     * @type {ModelsStack}
     */


    //
    // PRIVATE METHODS
    //

    /**
     * Initial setup, including stack prepare, bbox prepare, slice prepare and
     * border prepare.
     *
     * @private
     */
    _class.prototype._create = function _create() {
      if (this._stack) {
        // prepare sthe stack internals
        this._prepareStack();

        // prepare visual objects
        this._prepareBBox();
        this._prepareSlice();
        this._prepareBorder();
        // todo: Arrow
      } else {
        window.console.log('no stack to be prepared...');
      }
    };

    _class.prototype._computeOrientationSpacing = function _computeOrientationSpacing() {
      var spacing = this._stack._spacing;
      switch (this._orientation) {
        case 0:
          this._orientationSpacing = spacing.z;
          break;
        case 1:
          this._orientationSpacing = spacing.x;
          break;
        case 2:
          this._orientationSpacing = spacing.y;
          break;
        default:
          this._orientationSpacing = 0;
          break;
      }
    };

    _class.prototype._computeOrientationMaxIndex = function _computeOrientationMaxIndex() {
      var dimensionsIJK = this._stack.dimensionsIJK;
      this._orientationMaxIndex = 0;
      switch (this._orientation) {
        case 0:
          this._orientationMaxIndex = dimensionsIJK.z - 1;
          break;
        case 1:
          this._orientationMaxIndex = dimensionsIJK.x - 1;
          break;
        case 2:
          this._orientationMaxIndex = dimensionsIJK.y - 1;
          break;
        default:
          // do nothing!
          break;
      }
    };

    /**
     * Given orientation, check if index is in/out of bounds.
     *
     * @private
     */


    _class.prototype._isIndexOutOfBounds = function _isIndexOutOfBounds() {
      this._computeOrientationMaxIndex();
      if (this._index >= this._orientationMaxIndex || this._index < 0) {
        this._outOfBounds = true;
      } else {
        this._outOfBounds = false;
      }
    };

    /**
     * Prepare a stack for visualization. (image to world transform, frames order,
     * pack data into 8 bits textures, etc.)
     *
     * @private
     */


    _class.prototype._prepareStack = function _prepareStack() {
      // make sure there is something, if not throw an error
      // compute image to workd transform, order frames, etc.
      if (!this._stack.prepared) {
        this._stack.prepare();
      }
      // pack data into 8 bits rgba texture for the shader
      // this one can be slow...
      if (!this._stack.packed) {
        this._stack.pack();
      }
    };

    /**
     * Setup bounding box helper given prepared stack and add bounding box helper
     * to stack helper.
     *
     * @private
     */


    _class.prototype._prepareBBox = function _prepareBBox() {
      var HelpersBoundingBoxConstructor = Object(_helpers_helpers_boundingbox__WEBPACK_IMPORTED_MODULE_1__["helpersBoundingBox"])(three);
      this._bBox = new HelpersBoundingBoxConstructor(this._stack);
      this.add(this._bBox);
    };

    /**
     * Setup border helper given slice helper and add border helper
     * to stack helper.
     *
     * @private
     */


    _class.prototype._prepareBorder = function _prepareBorder() {
      var HelpersBorderContructor = Object(_helpers_helpers_border__WEBPACK_IMPORTED_MODULE_0__["helpersBorder"])(three);
      this._border = new HelpersBorderContructor(this._slice);
      this.add(this._border);
    };

    /**
     * Setup slice helper given prepared stack helper and add slice helper
     * to stack helper.
     *
     * @private
     */


    _class.prototype._prepareSlice = function _prepareSlice() {
      var halfDimensionsIJK = this._stack.halfDimensionsIJK;
      // compute initial index given orientation
      this._index = this._prepareSliceIndex(halfDimensionsIJK);
      // compute initial position given orientation and index
      var position = this._prepareSlicePosition(halfDimensionsIJK, this._index);
      // compute initial direction orientation
      var direction = this._prepareDirection(this._orientation);

      var SliceHelperConstructor = Object(_helpers_helpers_slice__WEBPACK_IMPORTED_MODULE_2__["helpersSlice"])(three);
      this._slice = new SliceHelperConstructor(this._stack, this._index, position, direction);
      this.add(this._slice);
    };

    /**
     * Compute slice index depending on orientation.
     *
     * @param {Vector3} indices - Indices in each direction.
     *
     * @returns {number} Slice index according to current orientation.
     *
     * @private
     */


    _class.prototype._prepareSliceIndex = function _prepareSliceIndex(indices) {
      var index = 0;
      switch (this._orientation) {
        case 0:
          index = Math.floor(indices.z);
          break;
        case 1:
          index = Math.floor(indices.x);
          break;
        case 2:
          index = Math.floor(indices.y);
          break;
        default:
          // do nothing!
          break;
      }
      return index;
    };

    /**
     * Compute slice position depending on orientation.
     * Sets index in proper location of reference position.
     *
     * @param {Vector3} rPosition - Reference position.
     * @param {number} index - Current index.
     *
     * @returns {number} Slice index according to current orientation.
     *
     * @private
     */


    _class.prototype._prepareSlicePosition = function _prepareSlicePosition(rPosition, index) {
      var position = new three.Vector3(0, 0, 0);
      switch (this._orientation) {
        case 0:
          position = new three.Vector3(Math.floor(rPosition.x), Math.floor(rPosition.y), index);
          break;
        case 1:
          position = new three.Vector3(index, Math.floor(rPosition.y), Math.floor(rPosition.z));
          break;
        case 2:
          position = new three.Vector3(Math.floor(rPosition.x), index, Math.floor(rPosition.z));
          break;
        default:
          // do nothing!
          break;
      }
      return position;
    };

    /**
     * Compute slice direction depending on orientation.
     *
     * @param {number} orientation - Slice orientation.
     *
     * @returns {Vector3} Slice direction
     *
     * @private
     */


    _class.prototype._prepareDirection = function _prepareDirection(orientation) {
      var direction = new three.Vector3(0, 0, 1);
      switch (orientation) {
        case 0:
          direction = new three.Vector3(0, 0, 1);
          break;
        case 1:
          direction = new three.Vector3(1, 0, 0);
          break;
        case 2:
          direction = new three.Vector3(0, 1, 0);
          break;
        default:
          // do nothing!
          break;
      }

      return direction;
    };

    /**
     * Release the stack helper memory including the slice memory.
     *
     * @public
     */


    _class.prototype.dispose = function dispose() {
      this.remove(this._slice);
      this._slice.dispose();
      this._slice = null;
      this._bBox.dispose();
      this._bBox = null;
      this._border.dispose();
      this._border = null;
    };

    _createClass(_class, [{
      key: 'stack',
      get: function get() {
        return this._stack;
      }

      /**
       * Set stack.
       *
       * @type {ModelsStack}
       */
      ,
      set: function set(stack) {
        this._stack = stack;
      }

      /**
       * Get bounding box helper.
       *
       * @type {HelpersBoundingBox}
       */

    }, {
      key: 'bbox',
      get: function get() {
        return this._bBox;
      }

      /**
       * Get slice helper.
       *
       * @type {HelpersSlice}
       */

    }, {
      key: 'slice',
      get: function get() {
        return this._slice;
      }

      /**
       * Get border helper.
       *
       * @type {HelpersSlice}
       */

    }, {
      key: 'border',
      get: function get() {
        return this._border;
      }

      /**
       * Set/get current slice index.<br>
       * Sets outOfBounds flag to know if target index is in/out stack bounding box.<br>
       * <br>
       * Internally updates the sliceHelper index and position. Also updates the
       * borderHelper with the updated sliceHelper.
       *
       * @type {number}
       */

    }, {
      key: 'index',
      get: function get() {
        return this._index;
      },
      set: function set(index) {
        this._index = index;

        // update the slice
        this._slice.index = index;
        var halfDimensions = this._stack.halfDimensionsIJK;
        this._slice.planePosition = this._prepareSlicePosition(halfDimensions, this._index);

        // also update the border
        this._border.helpersSlice = this._slice;

        // update ourOfBounds flag
        this._isIndexOutOfBounds();
      }

      /**
       * Set/get current slice orientation.<br>
       * Values: <br>
       *   - 0: acquisition direction (slice normal is z_cosine)<br>
       *   - 1: next direction (slice normal is x_cosine)<br>
       *   - 2: next direction (slice normal is y_cosine)<br>
       *   - n: set orientation to 0<br>
       * <br>
       * Internally updates the sliceHelper direction. Also updates the
       * borderHelper with the updated sliceHelper.
       *
       * @type {number}
       */

    }, {
      key: 'orientation',
      set: function set(orientation) {
        this._orientation = orientation;
        this._computeOrientationMaxIndex();

        this._computeOrientationSpacing();
        this._slice.spacing = Math.abs(this._orientationSpacing);
        this._slice.thickness = this._slice.spacing;

        this._slice.planeDirection = this._prepareDirection(this._orientation);

        // also update the border
        this._border.helpersSlice = this._slice;
      },
      get: function get() {
        return this._orientation;
      }

      /**
       * Set/get the outOfBound flag.
       *
       * @type {boolean}
       */

    }, {
      key: 'outOfBounds',
      set: function set(outOfBounds) {
        this._outOfBounds = outOfBounds;
      },
      get: function get() {
        return this._outOfBounds;
      }

      /**
       * Set/get the orientationMaxIndex.
       *
       * @type {number}
       */

    }, {
      key: 'orientationMaxIndex',
      set: function set(orientationMaxIndex) {
        this._orientationMaxIndex = orientationMaxIndex;
      },
      get: function get() {
        return this._orientationMaxIndex;
      }

      /**
       * Set/get the orientationSpacing.
       *
       * @type {number}
       */

    }, {
      key: 'orientationSpacing',
      set: function set(orientationSpacing) {
        this._orientationSpacing = orientationSpacing;
      },
      get: function get() {
        return this._orientationSpacing;
      }
    }, {
      key: 'canvasWidth',
      set: function set(canvasWidth) {
        this._canvasWidth = canvasWidth;
        this._slice.canvasWidth = this._canvasWidth;
      },
      get: function get() {
        return this._canvasWidth;
      }
    }, {
      key: 'canvasHeight',
      set: function set(canvasHeight) {
        this._canvasHeight = canvasHeight;
        this._slice.canvasHeight = this._canvasHeight;
      },
      get: function get() {
        return this._canvasHeight;
      }
    }, {
      key: 'borderColor',
      set: function set(borderColor) {
        this._borderColor = borderColor;
        this._border.color = borderColor;
        this._slice.borderColor = this._borderColor;
      },
      get: function get() {
        return this._borderColor;
      }
    }]);

    return _class;
  }(Constructor);
};

// export factory

// default export to
/* harmony default export */ __webpack_exports__["default"] = (helpersStack());

/***/ }),

/***/ "./src/helpers/helpers.volumerendering.js":
/*!************************************************!*\
  !*** ./src/helpers/helpers.volumerendering.js ***!
  \************************************************/
/*! exports provided: helpersVolumeRendering, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "helpersVolumeRendering", function() { return helpersVolumeRendering; });
/* harmony import */ var _shaders_shaders_vr_uniform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shaders/shaders.vr.uniform */ "./src/shaders/shaders.vr.uniform.js");
/* harmony import */ var _shaders_shaders_vr_vertex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shaders/shaders.vr.vertex */ "./src/shaders/shaders.vr.vertex.js");
/* harmony import */ var _shaders_shaders_vr_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shaders/shaders.vr.fragment */ "./src/shaders/shaders.vr.fragment.js");
/* harmony import */ var _helpers_helpers_material_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/helpers.material.mixin */ "./src/helpers/helpers.material.mixin.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/






/**
 * @module helpers/volumerendering
 */

var helpersVolumeRendering = function helpersVolumeRendering() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_helpers_helpers_material_mixin__WEBPACK_IMPORTED_MODULE_3__["helpersMaterialMixin"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(stack) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this));
      //


      _this._stack = stack;
      _this._textures = [];
      _this._shadersFragment = _shaders_shaders_vr_fragment__WEBPACK_IMPORTED_MODULE_2__["default"];
      _this._shadersVertex = _shaders_shaders_vr_vertex__WEBPACK_IMPORTED_MODULE_1__["default"];
      _this._uniforms = _shaders_shaders_vr_uniform__WEBPACK_IMPORTED_MODULE_0__["default"].uniforms();
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      _this._algorithm = 0; // ray marching
      _this._alphaCorrection = 0.5; // default
      _this._interpolation = 1; // default to trilinear interpolation
      _this._shading = 1; // shading is on by default
      _this._shininess = 10.0;
      _this._steps = 256; // default
      _this._offset = 0;
      _this._windowCenter = 0.0;
      _this._windowWidth = 1.0;

      _this._create();
      return _this;
    }

    _class.prototype._create = function _create() {
      this._prepareStack();
      this._prepareTexture();
      this._prepareMaterial();
      this._prepareGeometry();

      this._mesh = new three.Mesh(this._geometry, this._material);
      this.add(this._mesh);
    };

    _class.prototype._prepareStack = function _prepareStack() {
      if (!this._stack.prepared) {
        this._stack.prepare();
      }

      if (!this._stack.packed) {
        this._stack.pack();
      }

      // compensate for the offset to only pass > 0 values to shaders
      // models > models.stack.js : _packTo8Bits
      this._offset = Math.min(0, this._stack._minMax[0]);
      this._windowCenter = this._stack.windowCenter;
      this._windowWidth = this._stack.windowWidth * 0.8; // multiply for better default visualization
    };

    _class.prototype._prepareMaterial = function _prepareMaterial() {
      // uniforms
      this._uniforms = _shaders_shaders_vr_uniform__WEBPACK_IMPORTED_MODULE_0__["default"].uniforms();
      this._uniforms.uWorldBBox.value = this._stack.worldBoundingBox();
      this._uniforms.uTextureSize.value = this._stack.textureSize;
      this._uniforms.uTextureContainer.value = this._textures;
      if (this._stack.textureUnits > 8) {
        this._uniforms.uTextureContainer.length = 14;
      }
      this._uniforms.uWorldToData.value = this._stack.lps2IJK;
      this._uniforms.uNumberOfChannels.value = this._stack.numberOfChannels;
      this._uniforms.uPixelType.value = this._stack.pixelType;
      this._uniforms.uBitsAllocated.value = this._stack.bitsAllocated;
      this._uniforms.uPackedPerPixel.value = this._stack.packedPerPixel;
      this._uniforms.uWindowCenterWidth.value = [this._windowCenter - this._offset, this._windowWidth];
      this._uniforms.uRescaleSlopeIntercept.value = [this._stack.rescaleSlope, this._stack.rescaleIntercept];
      this._uniforms.uDataDimensions.value = [this._stack.dimensionsIJK.x, this._stack.dimensionsIJK.y, this._stack.dimensionsIJK.z];
      this._uniforms.uAlphaCorrection.value = this._alphaCorrection;
      this._uniforms.uInterpolation.value = this._interpolation;
      this._uniforms.uShading.value = this._shading;
      this._uniforms.uShininess.value = this._shininess;
      this._uniforms.uSteps.value = this._steps;
      this._uniforms.uAlgorithm.value = this._algorithm;

      this._createMaterial({
        side: three.BackSide,
        transparent: true
      });
    };

    _class.prototype._prepareGeometry = function _prepareGeometry() {
      var worldBBox = this._stack.worldBoundingBox();
      var centerLPS = this._stack.worldCenter();

      this._geometry = new three.BoxGeometry(worldBBox[1] - worldBBox[0], worldBBox[3] - worldBBox[2], worldBBox[5] - worldBBox[4]);
      this._geometry.applyMatrix(new three.Matrix4().makeTranslation(centerLPS.x, centerLPS.y, centerLPS.z));
    };

    _class.prototype.dispose = function dispose() {
      // Release memory
      for (var j = 0; j < this._textures.length; j++) {
        this._textures[j].dispose();
        this._textures[j] = null;
      }
      this._textures = null;
      this._shadersFragment = null;
      this._shadersVertex = null;

      this._uniforms.uTextureContainer = null;
      this._uniforms.uTextureLUT = null;
      this._uniforms = null;

      // material, geometry and mesh
      this.remove(this._mesh);
      this._mesh.geometry.dispose();
      this._mesh.geometry = null;
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._mesh = null;

      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      this._stack = null;
    };

    _createClass(_class, [{
      key: 'uniforms',
      get: function get() {
        return this._uniforms;
      },
      set: function set(uniforms) {
        this._uniforms = uniforms;
      }
    }, {
      key: 'mesh',
      set: function set(mesh) {
        this._mesh = mesh;
      },
      get: function get() {
        return this._mesh;
      }
    }, {
      key: 'stack',
      get: function get() {
        return this._stack;
      },
      set: function set(stack) {
        this._stack = stack;
      }
    }, {
      key: 'windowCenter',
      get: function get() {
        return this._windowCenter;
      },
      set: function set(windowCenter) {
        this._windowCenter = windowCenter;
        this._uniforms.uWindowCenterWidth.value[0] = this._windowCenter - this._offset;
      }
    }, {
      key: 'windowWidth',
      get: function get() {
        return this._windowWidth;
      },
      set: function set(windowWidth) {
        this._windowWidth = Math.max(1, windowWidth);
        this._uniforms.uWindowCenterWidth.value[1] = this._windowWidth;
      }
    }, {
      key: 'steps',
      get: function get() {
        return this._steps;
      },
      set: function set(steps) {
        this._steps = steps;
        this._uniforms.uSteps.value = this._steps;
      }
    }, {
      key: 'alphaCorrection',
      get: function get() {
        return this._alphaCorrection;
      },
      set: function set(alphaCorrection) {
        this._alphaCorrection = alphaCorrection;
        this._uniforms.uAlphaCorrection.value = this._alphaCorrection;
      }
    }, {
      key: 'interpolation',
      get: function get() {
        return this._interpolation;
      },
      set: function set(interpolation) {
        this._interpolation = interpolation;
        this._uniforms.uInterpolation.value = this._interpolation;
        this._updateMaterial();
      }
    }, {
      key: 'shading',
      get: function get() {
        return this._shading;
      },
      set: function set(shading) {
        this._shading = shading;
        this._uniforms.uShading.value = this._shading;
      }
    }, {
      key: 'shininess',
      get: function get() {
        return this._shininess;
      },
      set: function set(shininess) {
        this._shininess = shininess;
        this._uniforms.uShininess.value = this._shininess;
      }
    }, {
      key: 'algorithm',
      get: function get() {
        return this._algorithm;
      },
      set: function set(algorithm) {
        this._algorithm = algorithm;
        this._uniforms.uAlgorithm.value = this._algorithm;
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (helpersVolumeRendering());

/***/ }),

/***/ "./src/loaders/loaders.base.js":
/*!*************************************!*\
  !*** ./src/loaders/loaders.base.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _helpers_helpers_progressbar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/helpers.progressbar */ "./src/helpers/helpers.progressbar.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** Imports **/



/**
 *
 * It is typically used to load a DICOM image. Use loading manager for
 * advanced usage, such as multiple files handling.
 *
 * Demo: {@link https://fnndsc.github.io/vjs#loader_dicom}
 *
 * @module loaders/base
 * @extends EventEmitter
 * @example
 * var files = ['/data/dcm/fruit'];
 *
 * // Instantiate a dicom loader
 * var lDicomoader = new dicom();
 *
 * // load a resource
 * loader.load(
 *   // resource URL
 *   files[0],
 *   // Function when resource is loaded
 *   function(object) {
 *     //scene.add( object );
 *     window.console.log(object);
 *   }
 * );
 */

var LoadersBase = function (_EventEmitter) {
  _inherits(LoadersBase, _EventEmitter);

  /**
   * Create a Loader.
   * @param {dom} container - The dom container of loader.
   * @param {object} ProgressBar - The progressbar of loader.
   */
  function LoadersBase() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var ProgressBar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _helpers_helpers_progressbar__WEBPACK_IMPORTED_MODULE_0__["default"];

    _classCallCheck(this, LoadersBase);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    _this._loaded = -1;
    _this._totalLoaded = -1;
    _this._parsed = -1;
    _this._totalParsed = -1;

    _this._data = [];

    _this._container = container;
    _this._progressBar = null;
    if (_this._container && ProgressBar) {
      _this._progressBar = new ProgressBar(_this._container);
    }
    return _this;
  }

  /**
   * free the reference.
   */


  LoadersBase.prototype.free = function free() {
    this._data = [];
    this._container = null;
    // this._helpersProgressBar = null;

    if (this._progressBar) {
      this._progressBar.free();
      this._progressBar = null;
    }
  };

  /**
   * load the resource by url.
   * @param {string} url - resource url.
   * @param {Map} requests - used for cancellation.
   * @return {promise} promise.
   */


  LoadersBase.prototype.fetch = function fetch(url, requests) {
    var _this2 = this;

    return new Promise(function (resolve, reject) {
      var request = new XMLHttpRequest();
      request.open('GET', url);
      request.crossOrigin = true;
      request.responseType = 'arraybuffer';

      request.onloadstart = function (event) {
        // emit 'fetch-start' event
        _this2.emit('fetch-start', {
          file: url,
          time: new Date()
        });
      };

      request.onload = function (event) {
        if (request.status === 200 || request.status === 0) {
          _this2._loaded = event.loaded;
          _this2._totalLoaded = event.total;

          // will be removed after eventer set up
          if (_this2._progressBar) {
            _this2._progressBar.update(_this2._loaded, _this2._totalLoaded, 'load', url);
          }

          var buffer = request.response;
          var response = {
            url: url,
            buffer: buffer
          };

          // emit 'fetch-success' event
          _this2.emit('fetch-success', {
            file: url,
            time: new Date(),
            totalLoaded: event.total
          });

          resolve(response);
        } else {
          reject(request.statusText);
        }
      };

      request.onerror = function () {
        // emit 'fetch-error' event
        _this2.emit('fetch-error', {
          file: url,
          time: new Date()
        });

        reject(request.statusText);
      };

      request.onabort = function (event) {
        // emit 'fetch-abort' event
        _this2.emit('fetch-abort', {
          file: url,
          time: new Date()
        });

        reject(request.statusText || 'Aborted');
      };

      request.ontimeout = function () {
        // emit 'fetch-timeout' event
        _this2.emit('fetch-timeout', {
          file: url,
          time: new Date()
        });

        reject(request.statusText);
      };

      request.onprogress = function (event) {
        _this2._loaded = event.loaded;
        _this2._totalLoaded = event.total;
        // emit 'fetch-progress' event
        _this2.emit('fetch-progress', {
          file: url,
          total: event.total,
          loaded: event.loaded,
          time: new Date()
        });
        // will be removed after eventer set up
        if (_this2._progressBar) {
          _this2._progressBar.update(_this2._loaded, _this2._totalLoaded, 'load', url);
        }
      };

      request.onloadend = function (event) {
        // emit 'fetch-end' event
        _this2.emit('fetch-end', {
          file: url,
          time: new Date()
        });
        // just use onload when success and onerror when failure, etc onabort
        // reject(request.statusText);
      };

      if (requests instanceof Map) {
        requests.set(url, request);
      }

      request.send();
    });
  };

  /**
   * parse the data loaded
   * SHOULD BE implementd by detail loader.
   * @param {object} response - loaded data.
   * @return {promise} promise.
   */


  LoadersBase.prototype.parse = function parse(response) {
    return new Promise(function (resolve, reject) {
      resolve(response);
    });
  };

  /**
   * default load sequence group promise.
   * @param {array} url - resource url.
   * @param {Map} requests - used for cancellation.
   * @return {promise} promise.
   */


  LoadersBase.prototype.loadSequenceGroup = function loadSequenceGroup(url, requests) {
    var _this3 = this;

    var fetchSequence = [];

    url.forEach(function (file) {
      fetchSequence.push(_this3.fetch(file, requests));
    });

    return Promise.all(fetchSequence).then(function (rawdata) {
      return _this3.parse(rawdata);
    }).then(function (data) {
      _this3._data.push(data);
      return data;
    }).catch(function (error) {
      if (error === 'Aborted') {
        return;
      }
      window.console.log('oops... something went wrong...');
      window.console.log(error);
    });
  };

  /**
   * default load sequence promise.
   * @param {string} url - resource url.
   * @param {Map} requests - used for cancellation.
   * @return {promise} promise.
   */


  LoadersBase.prototype.loadSequence = function loadSequence(url, requests) {
    var _this4 = this;

    return this.fetch(url, requests).then(function (rawdata) {
      return _this4.parse(rawdata);
    }).then(function (data) {
      _this4._data.push(data);
      return data;
    }).catch(function (error) {
      if (error === 'Aborted') {
        return;
      }
      window.console.log('oops... something went wrong...');
      window.console.log(error);
    });
  };

  /**
   * load the data by url(urls)
   * @param {string|array} url - resource url.
   * @param {Map} requests - used for cancellation.
   * @return {promise} promise
   */


  LoadersBase.prototype.load = function load(url, requests) {
    var _this5 = this;

    // if we load a single file, convert it to an array
    if (!Array.isArray(url)) {
      url = [url];
    }

    if (this._progressBar) {
      this._progressBar.totalFiles = url.length;
      this._progressBar.requests = requests;
    }

    // emit 'load-start' event
    this.emit('load-start', {
      files: url,
      time: new Date()
    });

    var loadSequences = [];
    url.forEach(function (file) {
      if (!Array.isArray(file)) {
        loadSequences.push(_this5.loadSequence(file, requests));
      } else {
        loadSequences.push(_this5.loadSequenceGroup(file, requests));
      }
    });
    return Promise.all(loadSequences);
  };

  /**
   * Set data
   * @param {array} data
   */


  _createClass(LoadersBase, [{
    key: 'data',
    set: function set(data) {
      this._data = data;
    }

    /**
     * Get data
     * @return {array} data loaded
     */
    ,
    get: function get() {
      return this._data;
    }
  }]);

  return LoadersBase;
}(events__WEBPACK_IMPORTED_MODULE_1___default.a);

/* harmony default export */ __webpack_exports__["default"] = (LoadersBase);

/***/ }),

/***/ "./src/loaders/loaders.js":
/*!********************************!*\
  !*** ./src/loaders/loaders.js ***!
  \********************************/
/*! exports provided: VolumeLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _loaders_volume__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loaders.volume */ "./src/loaders/loaders.volume.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VolumeLoader", function() { return _loaders_volume__WEBPACK_IMPORTED_MODULE_0__["default"]; });





/***/ }),

/***/ "./src/loaders/loaders.volume.js":
/*!***************************************!*\
  !*** ./src/loaders/loaders.volume.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _loaders_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loaders.base */ "./src/loaders/loaders.base.js");
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
/* harmony import */ var _models_models_series__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/models.series */ "./src/models/models.series.js");
/* harmony import */ var _models_models_stack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models.stack */ "./src/models/models.stack.js");
/* harmony import */ var _models_models_frame__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models.frame */ "./src/models/models.frame.js");
/* harmony import */ var _parsers_parsers_dicom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../parsers/parsers.dicom */ "./src/parsers/parsers.dicom.js");
/* harmony import */ var _parsers_parsers_mhd__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../parsers/parsers.mhd */ "./src/parsers/parsers.mhd.js");
/* harmony import */ var _parsers_parsers_nifti__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../parsers/parsers.nifti */ "./src/parsers/parsers.nifti.js");
/* harmony import */ var _parsers_parsers_nrrd__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../parsers/parsers.nrrd */ "./src/parsers/parsers.nrrd.js");
/* harmony import */ var _parsers_parsers_mgh__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../parsers/parsers.mgh */ "./src/parsers/parsers.mgh.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/
var PAKO = __webpack_require__(/*! pako */ "./node_modules/pako/index.js");












/**
 *
 * It is typically used to load a DICOM image. Use loading manager for
 * advanced usage, such as multiple files handling.
 *
 * Demo: {@link https://fnndsc.github.io/vjs#loader_dicom}
 *
 * @module loaders/volumes
 * @example
 * var files = ['/data/dcm/fruit'];
 *
 * // Instantiate a dicom loader
 * var lDicomoader = new dicom();
 *
 * // load a resource
 * loader.load(
 *   // resource URL
 *   files[0],
 *   // Function when resource is loaded
 *   function(object) {
 *     //scene.add( object );
 *     console.log(object);
 *   }
 * );
 */

var LoadersVolumes = function (_LoadersBase) {
  _inherits(LoadersVolumes, _LoadersBase);

  function LoadersVolumes() {
    _classCallCheck(this, LoadersVolumes);

    return _possibleConstructorReturn(this, _LoadersBase.apply(this, arguments));
  }

  /**
   * Parse response.
   * response is formated as:
   *    {
   *      url: 'resource url',
   *      buffer: xmlresponse,
   *    }
   * @param {object} response - response
   * @return {promise} promise
   */
  LoadersVolumes.prototype.parse = function parse(response) {
    var _this2 = this;

    // emit 'parse-start' event
    this.emit('parse-start', {
      file: response.url,
      time: new Date()
    });

    // give a chance to the UI to update because
    // after the rendering will be blocked with intensive JS
    // will be removed after eventer set up
    if (this._progressBar) {
      this._progressBar.update(0, 100, 'parse', response.url);
    }

    return new Promise(function (resolve, reject) {
      setTimeout(function () {
        resolve(new Promise(function (resolve, reject) {
          var data = response;

          if (!Array.isArray(data)) {
            data = [data];
          }

          data.forEach(function (dataset) {
            _this2._preprocess(dataset);
          });

          if (data.length === 1) {
            data = data[0];
          } else {
            // if raw/mhd pair
            var mhdFile = data.filter(_this2._filterByExtension.bind(null, 'MHD'));
            var rawFile = data.filter(_this2._filterByExtension.bind(null, 'RAW'));
            if (data.length === 2 && mhdFile.length === 1 && rawFile.length === 1) {
              data.url = mhdFile[0].url;
              data.extension = mhdFile[0].extension;
              data.mhdBuffer = mhdFile[0].buffer;
              data.rawBuffer = rawFile[0].buffer;
            }
          }

          var Parser = _this2._parser(data.extension);
          if (!Parser) {
            // emit 'parse-error' event
            _this2.emit('parse-error', {
              file: response.url,
              time: new Date(),
              error: data.filename + 'can not be parsed.'
            });
            reject(data.filename + ' can not be parsed.');
          }

          // check extension
          var volumeParser = null;
          try {
            volumeParser = new Parser(data, 0);
          } catch (e) {
            console.warn(e);
            // emit 'parse-error' event
            _this2.emit('parse-error', {
              file: response.url,
              time: new Date(),
              error: e
            });
            reject(e);
          }

          // create a series
          var series = new _models_models_series__WEBPACK_IMPORTED_MODULE_2__["default"]();
          // global information
          series.seriesInstanceUID = volumeParser.seriesInstanceUID();
          series.transferSyntaxUID = volumeParser.transferSyntaxUID();
          series.seriesDate = volumeParser.seriesDate();
          series.seriesDescription = volumeParser.seriesDescription();
          series.studyDate = volumeParser.studyDate();
          series.studyDescription = volumeParser.studyDescription();
          series.numberOfFrames = volumeParser.numberOfFrames();
          if (!series.numberOfFrames) {
            series.numberOfFrames = 1;
          }
          series.numberOfChannels = volumeParser.numberOfChannels();
          series.modality = volumeParser.modality();
          // if it is a segmentation, attach extra information
          if (series.modality === 'SEG') {
            // colors
            // labels
            // etc.
            series.segmentationType = volumeParser.segmentationType();
            series.segmentationSegments = volumeParser.segmentationSegments();
          }
          // patient information
          series.patientID = volumeParser.patientID();
          series.patientName = volumeParser.patientName();
          series.patientAge = volumeParser.patientAge();
          series.patientBirthdate = volumeParser.patientBirthdate();
          series.patientSex = volumeParser.patientSex();

          // just create 1 dummy stack for now
          var stack = new _models_models_stack__WEBPACK_IMPORTED_MODULE_3__["default"]();
          stack.numberOfChannels = volumeParser.numberOfChannels();
          stack.pixelRepresentation = volumeParser.pixelRepresentation();
          stack.pixelType = volumeParser.pixelType();
          stack.invert = volumeParser.invert();
          stack.spacingBetweenSlices = volumeParser.spacingBetweenSlices();
          stack.modality = series.modality;
          // if it is a segmentation, attach extra information
          if (stack.modality === 'SEG') {
            // colors
            // labels
            // etc.
            stack.segmentationType = series.segmentationType;
            stack.segmentationSegments = series.segmentationSegments;
          }
          series.stack.push(stack);
          // recursive call for each frame
          // better than for loop to be able
          // to update dom with "progress" callback
          setTimeout(_this2.parseFrameClosure(series, stack, response.url, 0, volumeParser, resolve, reject), 0);
        }));
      }, 10);
    });
  };

  LoadersVolumes.prototype.parseFrameClosure = function parseFrameClosure(series, stack, url, i, dataParser, resolve, reject) {
    var _this3 = this;

    return function () {
      _this3.parseFrame(series, stack, url, i, dataParser, resolve, reject);
    };
  };

  /**
   * recursive parse frame
   * @param {ModelsSeries} series - data series
   * @param {ModelsStack} stack - data stack
   * @param {string} url - resource url
   * @param {number} i - frame index
   * @param {parser} dataParser - selected parser
   * @param {promise.resolve} resolve - promise resolve args
   * @param {promise.reject} reject - promise reject args
   */


  LoadersVolumes.prototype.parseFrame = function parseFrame(series, stack, url, i, dataParser, resolve, reject) {
    var frame = new _models_models_frame__WEBPACK_IMPORTED_MODULE_4__["default"]();
    frame.sopInstanceUID = dataParser.sopInstanceUID(i);
    frame.url = url;
    frame.index = i;
    frame.invert = stack.invert;
    frame.frameTime = dataParser.frameTime(i);
    frame.ultrasoundRegions = dataParser.ultrasoundRegions(i);
    frame.rows = dataParser.rows(i);
    frame.columns = dataParser.columns(i);
    frame.numberOfChannels = stack.numberOfChannels;
    frame.pixelPaddingValue = dataParser.pixelPaddingValue(i);
    frame.pixelRepresentation = stack.pixelRepresentation;
    frame.pixelType = stack.pixelType;
    frame.pixelData = dataParser.extractPixelData(i);
    frame.pixelSpacing = dataParser.pixelSpacing(i);
    frame.spacingBetweenSlices = dataParser.spacingBetweenSlices(i);
    frame.sliceThickness = dataParser.sliceThickness(i);
    frame.imageOrientation = dataParser.imageOrientation(i);
    frame.rightHanded = dataParser.rightHanded();
    stack.rightHanded = frame.rightHanded;
    if (frame.imageOrientation === null) {
      frame.imageOrientation = [1, 0, 0, 0, 1, 0];
    }
    frame.imagePosition = dataParser.imagePosition(i);
    /*
    null ImagePosition should not be handle here
    if (frame.imagePosition === null) {
      frame.imagePosition = [0, 0, i];
    }*/
    frame.dimensionIndexValues = dataParser.dimensionIndexValues(i);
    frame.bitsAllocated = dataParser.bitsAllocated(i);
    frame.instanceNumber = dataParser.instanceNumber(i);
    frame.windowCenter = dataParser.windowCenter(i);
    frame.windowWidth = dataParser.windowWidth(i);
    frame.rescaleSlope = dataParser.rescaleSlope(i);
    frame.rescaleIntercept = dataParser.rescaleIntercept(i);
    // should pass frame index for consistency...
    frame.minMax = dataParser.minMaxPixelData(frame.pixelData);

    // if series.mo
    if (series.modality === 'SEG') {
      frame.referencedSegmentNumber = dataParser.referencedSegmentNumber(i);
    }

    stack.frame.push(frame);

    // update status
    this._parsed = i + 1;
    this._totalParsed = series.numberOfFrames;

    // will be removed after eventer set up
    if (this._progressBar) {
      this._progressBar.update(this._parsed, this._totalParsed, 'parse', url);
    }

    // emit 'parsing' event
    this.emit('parsing', {
      file: url,
      total: this._totalParsed,
      parsed: this._parsed,
      time: new Date()
    });

    if (this._parsed === this._totalParsed) {
      // emit 'parse-success' event
      this.emit('parse-success', {
        file: url,
        total: this._totalParsed,
        parsed: this._parsed,
        time: new Date()
      });

      resolve(series);
    } else {
      setTimeout(this.parseFrameClosure(series, stack, url, this._parsed, dataParser, resolve, reject), 0);
    }
  };

  /**
   * Return parser given an extension
   * @param {string} extension - extension
   * @return {parser} selected parser
   */


  LoadersVolumes.prototype._parser = function _parser(extension) {
    var Parser = null;

    switch (extension.toUpperCase()) {
      case 'NII':
      case 'NII_':
        Parser = _parsers_parsers_nifti__WEBPACK_IMPORTED_MODULE_7__["default"];
        break;
      case 'DCM':
      case 'DIC':
      case 'DICOM':
      case 'IMA':
      case '':
        Parser = _parsers_parsers_dicom__WEBPACK_IMPORTED_MODULE_5__["default"];
        break;
      case 'MHD':
        Parser = _parsers_parsers_mhd__WEBPACK_IMPORTED_MODULE_6__["default"];
        break;
      case 'NRRD':
        Parser = _parsers_parsers_nrrd__WEBPACK_IMPORTED_MODULE_8__["default"];
        break;
      case 'MGH':
      case 'MGZ':
        Parser = _parsers_parsers_mgh__WEBPACK_IMPORTED_MODULE_9__["default"];
        break;
      default:
        console.warn('unsupported extension: ' + extension);
        return false;
    }
    return Parser;
  };

  /**
   * Pre-process data to be parsed (find data type and de-compress)
   * @param {*} data
   */


  LoadersVolumes.prototype._preprocess = function _preprocess(data) {
    var parsedUrl = _core_core_utils__WEBPACK_IMPORTED_MODULE_1__["default"].parseUrl(data.url);
    // update data
    data.filename = parsedUrl.filename;
    data.extension = parsedUrl.extension;
    data.pathname = parsedUrl.pathname;
    data.query = parsedUrl.query;

    // unzip if extension is '.gz'
    if (data.extension === 'gz') {
      data.gzcompressed = true;
      data.extension = data.filename.split('.gz').shift().split('.').pop();
    } else if (data.extension === 'mgz') {
      data.gzcompressed = true;
      data.extension = 'mgh';
    } else if (data.extension === 'zraw') {
      data.gzcompressed = true;
      data.extension = 'raw';
    } else {
      data.gzcompressed = false;
    }

    if (data.gzcompressed) {
      var decompressedData = PAKO.inflate(data.buffer);
      data.buffer = decompressedData.buffer;
    }
  };

  /**
   * Filter data by extension
   * @param {*} extension
   * @param {*} item
   * @returns Boolean
   */


  LoadersVolumes.prototype._filterByExtension = function _filterByExtension(extension, item) {
    if (item.extension.toUpperCase() === extension.toUpperCase()) {
      return true;
    }
    return false;
  };

  return LoadersVolumes;
}(_loaders_base__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (LoadersVolumes);

/***/ }),

/***/ "./src/models/models.base.js":
/*!***********************************!*\
  !*** ./src/models/models.base.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base object.
 *
 * @module models/base
 */

var ModelsBase = function () {
  function ModelsBase() {
    _classCallCheck(this, ModelsBase);

    this._id = -1;
  }
  /**
   * Merge 2 arrays of models.
   * Merge the target array into the reference array.
   *
   * @param {Array.<Models>} referenceArray - Array to be merge against
   * @param {Array.<Models>} targetArray - Array to be merged against reference.
   *
   * @return {boolean} True if merge was sucessful. False if something went wrong.
   */


  ModelsBase.prototype.mergeModels = function mergeModels(referenceArray, targetArray) {
    if (!(this._validateModelArray(referenceArray) && this._validateModelArray(targetArray))) {
      window.console.log('invalid inputs provided.');
      return false;
    }

    for (var i = 0, targetLength = targetArray.length; i < targetLength; i++) {
      // test targetArray against existing targetArray
      for (var j = 0, refLength = referenceArray.length; j < refLength; j++) {
        if (referenceArray[j].merge(targetArray[i])) {
          // merged successfully
          break;
        } else if (j === referenceArray.length - 1) {
          // last merge was not successful
          // this is a new targetArray
          referenceArray.push(targetArray[i]);
        }
      }
    }

    return true;
  };

  /**
   * Merge model against current model.
   */


  ModelsBase.prototype.merge = function merge(model) {
    // make sure model is valid
    if (!this.validate(model)) {
      return false;
    }

    // they can be merged if they match
    if (this._id === model._id) {
      return true;
    }
    return false;
  };

  /**
   * Validate a model.
   *
   * @return {boolean} True if model is valid. False if not.
   */


  ModelsBase.prototype.validate = function validate(model) {
    if (!(model && model !== null && typeof model.merge === 'function')) {
      return false;
    }

    return true;
  };

  /**
   * Validate array of models.
   *
   * @param {Array.<Models>} modelArray - Array containing models.
   *
   * @return {boolean} True if array is valid. False if not.
   */


  ModelsBase.prototype._validateModelArray = function _validateModelArray(modelArray) {
    if (!(modelArray !== null && Array === modelArray.constructor)) {
      window.console.log('invalid model array provided.');
      return false;
    }

    for (var i = 0; i < modelArray.length; i++) {
      if (!(modelArray[i] && modelArray[i] !== null && typeof modelArray[i].validate === 'function' && modelArray[i].validate(modelArray[i]))) {
        return false;
      }
    }

    return true;
  };

  return ModelsBase;
}();

/* harmony default export */ __webpack_exports__["default"] = (ModelsBase);

/***/ }),

/***/ "./src/models/models.frame.js":
/*!************************************!*\
  !*** ./src/models/models.frame.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_models_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/models.base */ "./src/models/models.base.js");
/* harmony import */ var three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/src/math/Vector3 */ "./node_modules/three/src/math/Vector3.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/




/**
 * Frame object.
 *
 * @module models/frame
 */

var ModelsFrame = function (_ModelsBase) {
  _inherits(ModelsFrame, _ModelsBase);

  /**
   * Constructor
   */
  function ModelsFrame() {
    _classCallCheck(this, ModelsFrame);

    var _this = _possibleConstructorReturn(this, _ModelsBase.call(this));

    _this._sopInstanceUID = null;
    _this._url = null;
    _this._stackID = -1;
    _this._invert = false;
    _this._frameTime = null;
    _this._ultrasoundRegions = [];
    _this._rows = 0;
    _this._columns = 0;
    _this._dimensionIndexValues = [];
    _this._imagePosition = null;
    _this._imageOrientation = null;
    _this._rightHanded = true;
    _this._sliceThickness = 1;
    _this._spacingBetweenSlices = null;
    _this._pixelPaddingValue = null;
    _this._pixelRepresentation = 0;
    _this._pixelType = 0;
    _this._pixelSpacing = null;
    _this._pixelAspectRatio = null;
    _this._pixelData = null;

    _this._instanceNumber = null;
    _this._windowCenter = null;
    _this._windowWidth = null;
    _this._rescaleSlope = null;
    _this._rescaleIntercept = null;

    _this._bitsAllocated = 8;
    _this._numberOfChannels = 1;

    _this._minMax = null;
    _this._dist = null;

    _this._index = -1;

    _this._referencedSegmentNumber = -1;
    return _this;
  }

  /**
   * Validate the frame.
   *
   * @param {*} model
   *
   * @return {*}
   */


  ModelsFrame.prototype.validate = function validate(model) {
    if (!(_ModelsBase.prototype.validate.call(this, model) && typeof model.cosines === 'function' && typeof model.spacingXY === 'function' && model.hasOwnProperty('_sopInstanceUID') && model.hasOwnProperty('_dimensionIndexValues') && model.hasOwnProperty('_imageOrientation') && model.hasOwnProperty('_imagePosition'))) {
      return false;
    }

    return true;
  };

  /**
   * Merge current frame with provided frame.
   *
   * Frames can be merged (i.e. are identical) if following are equals:
   *  - dimensionIndexValues
   *  - imageOrientation
   *  - imagePosition
   *  - instanceNumber
   *  - sopInstanceUID
   *
   * @param {*} frame
   *
   * @return {boolean} True if frames could be merge. False if not.
   */


  ModelsFrame.prototype.merge = function merge(frame) {
    if (!this.validate(frame)) {
      return false;
    }

    if (this._compareArrays(this._dimensionIndexValues, frame.dimensionIndexValues) && this._compareArrays(this._imageOrientation, frame.imageOrientation) && this._compareArrays(this._imagePosition, frame.imagePosition) && this._instanceNumber === frame.instanceNumber && this._sopInstanceUID === frame.sopInstanceUID) {
      return true;
    } else {
      return false;
    }
  };

  /**
   * Generate X, y and Z cosines from image orientation
   * Returns default orientation if _imageOrientation was invalid.
   *
   * @returns {array} Array[3] containing cosinesX, Y and Z.
   */


  ModelsFrame.prototype.cosines = function cosines() {
    var cosines = [new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](1, 0, 0), new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](0, 1, 0), new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](0, 0, 1)];

    if (this._imageOrientation && this._imageOrientation.length === 6) {
      var xCos = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](this._imageOrientation[0], this._imageOrientation[1], this._imageOrientation[2]);
      var yCos = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](this._imageOrientation[3], this._imageOrientation[4], this._imageOrientation[5]);

      if (xCos.length() > 0 && yCos.length() > 0) {
        cosines[0] = xCos;
        cosines[1] = yCos;
        cosines[2] = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](0, 0, 0).crossVectors(cosines[0], cosines[1]).normalize();
      }
    } else {
      window.console.log('No valid image orientation for frame');
      window.console.log(this);
      window.console.log('Returning default orientation.');
    }

    if (!this._rightHanded) {
      cosines[2].negate();
    }

    return cosines;
  };

  /**
   * Get x/y spacing of a frame.
   *
   * @return {*}
   */


  ModelsFrame.prototype.spacingXY = function spacingXY() {
    var spacingXY = [1.0, 1.0];

    if (this.pixelSpacing) {
      spacingXY[0] = this.pixelSpacing[0];

      spacingXY[1] = this.pixelSpacing[1];
    } else if (this.pixelAspectRatio) {
      spacingXY[0] = 1.0;
      spacingXY[1] = 1.0 * this.pixelAspectRatio[1] / this.pixelAspectRatio[0];
    }

    return spacingXY;
  };

  /**
   * Get data value
   *
   * @param {*} column
   * @param {*} row
   * @return {*}
   */


  ModelsFrame.prototype.getPixelData = function getPixelData(column, row) {
    if (column >= 0 && column < this._columns && row >= 0 && row < this._rows) {
      return this.pixelData[column + this._columns * row];
    } else {
      return null;
    }
  };
  /**
   * Set data value
   *
   * @param {*} column
   * @param {*} row
   * @param {*} value
   * @return {*}
   */


  ModelsFrame.prototype.setPixelData = function setPixelData(column, row, value) {
    this.pixelData[column + this._columns * row] = value;
  };

  /**
   * Get frame preview as data:URL
   *
   * @return {String}
   */


  ModelsFrame.prototype.getImageDataUrl = function getImageDataUrl() {
    var canvas = document.createElement('canvas');
    canvas.width = this._columns;
    canvas.height = this._rows;

    var context = canvas.getContext('2d');

    var imageData = context.createImageData(canvas.width, canvas.height);

    imageData.data.set(this._frameToCanvas());
    context.putImageData(imageData, 0, 0);

    return canvas.toDataURL();
  };

  /**
   * Convert frame.pixelData to canvas.context.imageData.data
   *
   * @return {Uint8Array}
   */


  ModelsFrame.prototype._frameToCanvas = function _frameToCanvas() {
    var dimension = this._columns * this._rows;

    var params = {
      invert: this._invert,
      min: this._minMax[0],
      padding: this._pixelPaddingValue
    };
    var data = new Uint8Array(dimension * 4);

    if (params.padding !== null) {
      // recalculation of min ignoring pixelPaddingValue
      params.min = this._minMax[1];
      for (var index = 0, numPixels = this._pixelData.length; index < numPixels; index++) {
        if (this._pixelData[index] !== params.padding) {
          params.min = Math.min(params.min, this._pixelData[index]);
        }
      }
    }

    if (this._windowWidth && this._windowCenter !== null) {
      // applying windowCenter and windowWidth
      var intercept = this._rescaleIntercept || 0;

      var slope = this._rescaleSlope || 1;

      params.min = Math.max((this._windowCenter - this._windowWidth / 2 - intercept) / slope, params.min);
      params.max = Math.min((this._windowCenter + this._windowWidth / 2 - intercept) / slope, this._minMax[1]);
    } else {
      params.max = this._minMax[1];
    }

    params.range = params.max - params.min || 255; // if max is 0 convert it to: 255 - black, 1 - white

    if (this._numberOfChannels === 1) {
      for (var i = 0; i < dimension; i++) {
        var normalized = this._pixelTo8Bit(this._pixelData[i], params);
        data[4 * i] = normalized;
        data[4 * i + 1] = normalized;
        data[4 * i + 2] = normalized;
        data[4 * i + 3] = 255; // alpha channel (fully opaque)
      }
    } else if (this._numberOfChannels === 3) {
      for (var _i = 0; _i < dimension; _i++) {
        data[4 * _i] = this._pixelTo8Bit(this._pixelData[3 * _i], params);
        data[4 * _i + 1] = this._pixelTo8Bit(this._pixelData[3 * _i + 1], params);
        data[4 * _i + 2] = this._pixelTo8Bit(this._pixelData[3 * _i + 2], params);
        data[4 * _i + 3] = 255; // alpha channel (fully opaque)
      }
    }

    return data;
  };

  /**
   * Convert pixel value to 8 bit (canvas.context.imageData.data: maximum 8 bit per each of RGBA value)
   *
   * @param {Number} value  Pixel value
   * @param {Object} params {invert, min, mix, padding, range}
   *
   * @return {Number}
   */


  ModelsFrame.prototype._pixelTo8Bit = function _pixelTo8Bit(value, params) {
    // values equal to pixelPaddingValue are outside of the image and should be ignored
    var packedValue = value <= params.min || value === params.padding ? 0 : 255;

    if (value > params.min && value < params.max) {
      packedValue = Math.round((value - params.min) * 255 / params.range);
    }

    return Number.isNaN(packedValue) ? 0 : params.invert ? 255 - packedValue : packedValue;
  };

  /**
   * Compare 2 arrays.
   *
   * 2 null arrays return true.
   * Do no perform strict type checking.
   *
   * @param {*} reference
   * @param {*} target
   *
   * @return {boolean} True if arrays are identicals. False if not.
   */


  ModelsFrame.prototype._compareArrays = function _compareArrays(reference, target) {
    // could both be null
    if (reference === target) {
      return true;
    }

    // if not null....
    if (reference && target && reference.join() === target.join()) {
      return true;
    }

    return false;
  };

  _createClass(ModelsFrame, [{
    key: 'frameTime',
    get: function get() {
      return this._frameTime;
    },
    set: function set(frameTime) {
      this._frameTime = frameTime;
    }
  }, {
    key: 'ultrasoundRegions',
    get: function get() {
      return this._ultrasoundRegions;
    },
    set: function set(ultrasoundRegions) {
      this._ultrasoundRegions = ultrasoundRegions;
    }
  }, {
    key: 'rows',
    get: function get() {
      return this._rows;
    },
    set: function set(rows) {
      this._rows = rows;
    }
  }, {
    key: 'columns',
    get: function get() {
      return this._columns;
    },
    set: function set(columns) {
      this._columns = columns;
    }
  }, {
    key: 'spacingBetweenSlices',
    get: function get() {
      return this._spacingBetweenSlices;
    },
    set: function set(spacingBetweenSlices) {
      this._spacingBetweenSlices = spacingBetweenSlices;
    }
  }, {
    key: 'sliceThickness',
    get: function get() {
      return this._sliceThickness;
    },
    set: function set(sliceThickness) {
      this._sliceThickness = sliceThickness;
    }
  }, {
    key: 'imagePosition',
    get: function get() {
      return this._imagePosition;
    },
    set: function set(imagePosition) {
      this._imagePosition = imagePosition;
    }
  }, {
    key: 'imageOrientation',
    get: function get() {
      return this._imageOrientation;
    },
    set: function set(imageOrientation) {
      this._imageOrientation = imageOrientation;
    }
  }, {
    key: 'windowWidth',
    get: function get() {
      return this._windowWidth;
    },
    set: function set(windowWidth) {
      this._windowWidth = windowWidth;
    }
  }, {
    key: 'windowCenter',
    get: function get() {
      return this._windowCenter;
    },
    set: function set(windowCenter) {
      this._windowCenter = windowCenter;
    }
  }, {
    key: 'rescaleSlope',
    get: function get() {
      return this._rescaleSlope;
    },
    set: function set(rescaleSlope) {
      this._rescaleSlope = rescaleSlope;
    }
  }, {
    key: 'rescaleIntercept',
    get: function get() {
      return this._rescaleIntercept;
    },
    set: function set(rescaleIntercept) {
      this._rescaleIntercept = rescaleIntercept;
    }
  }, {
    key: 'bitsAllocated',
    get: function get() {
      return this._bitsAllocated;
    },
    set: function set(bitsAllocated) {
      this._bitsAllocated = bitsAllocated;
    }
  }, {
    key: 'dist',
    get: function get() {
      return this._dist;
    },
    set: function set(dist) {
      this._dist = dist;
    }
  }, {
    key: 'pixelSpacing',
    get: function get() {
      return this._pixelSpacing;
    },
    set: function set(pixelSpacing) {
      this._pixelSpacing = pixelSpacing;
    }
  }, {
    key: 'pixelAspectRatio',
    get: function get() {
      return this._pixelAspectRatio;
    },
    set: function set(pixelAspectRatio) {
      this._pixelAspectRatio = pixelAspectRatio;
    }
  }, {
    key: 'minMax',
    get: function get() {
      return this._minMax;
    },
    set: function set(minMax) {
      this._minMax = minMax;
    }
  }, {
    key: 'dimensionIndexValues',
    get: function get() {
      return this._dimensionIndexValues;
    },
    set: function set(dimensionIndexValues) {
      this._dimensionIndexValues = dimensionIndexValues;
    }
  }, {
    key: 'instanceNumber',
    get: function get() {
      return this._instanceNumber;
    },
    set: function set(instanceNumber) {
      this._instanceNumber = instanceNumber;
    }
  }, {
    key: 'pixelData',
    get: function get() {
      return this._pixelData;
    },
    set: function set(pixelData) {
      this._pixelData = pixelData;
    }
  }, {
    key: 'sopInstanceUID',
    set: function set(sopInstanceUID) {
      this._sopInstanceUID = sopInstanceUID;
    },
    get: function get() {
      return this._sopInstanceUID;
    }
  }, {
    key: 'pixelPaddingValue',
    get: function get() {
      return this._pixelPaddingValue;
    },
    set: function set(pixelPaddingValue) {
      this._pixelPaddingValue = pixelPaddingValue;
    }
  }, {
    key: 'pixelRepresentation',
    get: function get() {
      return this._pixelRepresentation;
    },
    set: function set(pixelRepresentation) {
      this._pixelRepresentation = pixelRepresentation;
    }
  }, {
    key: 'pixelType',
    get: function get() {
      return this._pixelType;
    },
    set: function set(pixelType) {
      this._pixelType = pixelType;
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    },
    set: function set(url) {
      this._url = url;
    }
  }, {
    key: 'referencedSegmentNumber',
    get: function get() {
      return this._referencedSegmentNumber;
    },
    set: function set(referencedSegmentNumber) {
      this._referencedSegmentNumber = referencedSegmentNumber;
    }
  }, {
    key: 'rightHanded',
    get: function get() {
      return this._rightHanded;
    },
    set: function set(rightHanded) {
      this._rightHanded = rightHanded;
    }
  }, {
    key: 'index',
    get: function get() {
      return this._index;
    },
    set: function set(index) {
      this._index = index;
    }
  }, {
    key: 'invert',
    get: function get() {
      return this._invert;
    },
    set: function set(invert) {
      this._invert = invert;
    }
  }, {
    key: 'numberOfChannels',
    get: function get() {
      return this._numberOfChannels;
    },
    set: function set(numberOfChannels) {
      this._numberOfChannels = numberOfChannels;
    }
  }]);

  return ModelsFrame;
}(_models_models_base__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (ModelsFrame);

/***/ }),

/***/ "./src/models/models.js":
/*!******************************!*\
  !*** ./src/models/models.js ***!
  \******************************/
/*! exports provided: FrameModel, StackModel, SeriesModel, VoxelModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_frame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models.frame */ "./src/models/models.frame.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FrameModel", function() { return _models_frame__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _models_stack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models.stack */ "./src/models/models.stack.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StackModel", function() { return _models_stack__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _models_series__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models.series */ "./src/models/models.series.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SeriesModel", function() { return _models_series__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _models_voxel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models.voxel */ "./src/models/models.voxel.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VoxelModel", function() { return _models_voxel__WEBPACK_IMPORTED_MODULE_3__["default"]; });








/***/ }),

/***/ "./src/models/models.series.js":
/*!*************************************!*\
  !*** ./src/models/models.series.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_models_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/models.base */ "./src/models/models.base.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/


/**
 * Series object.
 *
 * @module models/series
 */

var ModelsSeries = function (_ModelsBase) {
  _inherits(ModelsSeries, _ModelsBase);

  /**
   * Models series constructor
   */
  function ModelsSeries() {
    _classCallCheck(this, ModelsSeries);

    var _this = _possibleConstructorReturn(this, _ModelsBase.call(this));

    _this._concatenationUID = -1;
    _this._seriesInstanceUID = -1;
    _this._transferSyntaxUID = '';
    _this._seriesNumber = -1;
    _this._seriesDescription = '';
    _this._seriesDate = '';
    _this._studyDescription = '';
    _this._studyDate = '';
    _this._accessionNumber = -1;
    _this._modality = 'Modality not set';
    _this._dimensionIndexSequence = [];
    // it is used in the loader in case a dicom/nifti contains multiple frames
    // should be updated after merge or renamed
    _this._numberOfFrames = 0;
    _this._numberOfChannels = 1;

    // patient information
    _this._patientID = '';
    _this._patientName = '';
    _this._patientAge = '';
    _this._patientBirthdate = '';
    _this._patientSex = '';

    // SEGMENTATION STUFF
    _this._segmentationType = null;
    _this._segmentationSegments = [];

    // STACK
    _this._stack = [];
    return _this;
  }

  /**
   * Validate a series.
   *
   * Requirements:
   *   - mergeSeries method
   *   - _seriesInstanceUID
   *   - _numberOfFrames
   *   - _numberOfChannels
   *   _ _stack
   *
   * @param {ModelsSeries} model - Model to be validated as series.
   *
   * @return {boolean} True if series is valid. False if not.
   *
   * @override
   */


  ModelsSeries.prototype.validate = function validate(model) {
    if (!(_ModelsBase.prototype.validate.call(this, model) && typeof model.mergeSeries === 'function' && model.hasOwnProperty('_seriesInstanceUID') && model.hasOwnProperty('_numberOfFrames') && model.hasOwnProperty('_numberOfChannels') && model.hasOwnProperty('_stack') && typeof model._stack !== 'undefined' && Array === model._stack.constructor)) {
      return false;
    }

    return true;
  };

  /**
   * Merge current series with provided series.
   * 2 series can ONLY be merge if they have the same SeriesInstanceUID.
   *
   * Also merges the stacks inside a series.
   *
   * @param {ModelsSeries} series - Series to be merged against current series.
   *
   * @return {boolean} True if series could be merge. False if not.
   *
   * @override
   */


  ModelsSeries.prototype.merge = function merge(series) {
    if (!this.validate(series)) {
      return false;
    }

    if (this._seriesInstanceUID === series.seriesInstanceUID) {
      // may merge incorrectly if loader will return more than one stacks per series
      if (series.stack[0]) {
        if (this._stack[0]._numberOfFrames === 0) {
          this._stack[0].computeNumberOfFrames();
        }
        this._stack[0].computeCosines();
        if (series.stack[0]._numberOfFrames === 0) {
          series.stack[0].computeNumberOfFrames();
        }
        series.stack[0].computeCosines();
      }
      return this.mergeModels(this._stack, series.stack);
    } else {
      return false;
    }
  };

  /**
   * Merge current series with provided array of series.
   * 2 series can ONLY be merge if they have the same SeriesInstanceUID.
   *
   * Also merges the stacks inside a series.
   *
   * @param {Array.<ModelsSeries>} target - Series to be merged against current series.
   *
   * @return {Array.<ModelsSeries>} Array of series properly merged.
   */


  ModelsSeries.prototype.mergeSeries = function mergeSeries(target) {
    var seriesContainer = [this];
    this.mergeModels(seriesContainer, target);
    return seriesContainer;
  };

  /**
   * Series instance UID setter
   *
   * @param {*} seriesInstanceUID
   */


  _createClass(ModelsSeries, [{
    key: 'seriesInstanceUID',
    set: function set(seriesInstanceUID) {
      this._seriesInstanceUID = seriesInstanceUID;
    }

    /**
     * Series instace UID getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._seriesInstanceUID;
    }

    /**
     * Transfer syntax UID setter
     *
     * @param {*} transferSyntaxUID
     */

  }, {
    key: 'transferSyntaxUID',
    set: function set(transferSyntaxUID) {
      this._transferSyntaxUID = transferSyntaxUID;
    }

    /**
     * Transfer syntax UID getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._transferSyntaxUID;
    }

    /**
     * Transfer syntax UID getter
     *
     * @return {*}
     */

  }, {
    key: 'transferSyntaxUIDLabel',
    get: function get() {
      switch (this._transferSyntaxUID) {
        case '1.2.840.10008.1.2.4.90':
          return 'JPEG 2000 Lossless';
        case '1.2.840.10008.1.2.4.91':
          return 'JPEG 2000 Lossy';
        case '1.2.840.10008.1.2.4.57':
          return 'JPEG Lossless, Nonhierarchical (Processes 14)';
        case '1.2.840.10008.1.2.4.70':
          return 'JPEG Lossless, Nonhierarchical (Processes 14 [Selection 1])';
        case '1.2.840.10008.1.2.4.50':
          return 'JPEG Baseline lossy process 1 (8 bit)';
        case '1.2.840.10008.1.2.4.51':
          return 'JPEG Baseline lossy process 2 & 4 (12 bit)';
        case '1.2.840.10008.1.2':
          return 'Implicit VR Little Endian';
        case '1.2.840.10008.1.2.1':
          return 'Explicit VR Little Endian';
        case '1.2.840.10008.1.2.2':
          return 'Explicit VR Big Endian';
        default:
          return 'Unknown transfersyntax: ' + this._transferSyntaxUID;
      }
    }

    /**
     * Study date setter
     *
     * @param {*} studyDate
     */

  }, {
    key: 'studyDate',
    set: function set(studyDate) {
      this._studyDate = studyDate;
    }

    /**
     * Study date getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._studyDate;
    }

    /**
     * Study descripition setter
     *
     * @param {*} studyDescription
     */

  }, {
    key: 'studyDescription',
    set: function set(studyDescription) {
      this._studyDescription = studyDescription;
    }

    /**
     * Study description getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._studyDescription;
    }

    /**
     * Series date setter
     *
     * @param {*} seriesDate
     */

  }, {
    key: 'seriesDate',
    set: function set(seriesDate) {
      this._seriesDate = seriesDate;
    }

    /**
     * Series date getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._seriesDate;
    }

    /**
     * Series descripition setter
     *
     * @param {*} seriesDescription
     */

  }, {
    key: 'seriesDescription',
    set: function set(seriesDescription) {
      this._seriesDescription = seriesDescription;
    }

    /**
     * Series description getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._seriesDescription;
    }

    /**
     * Patient ID setter
     *
     * @param {*} patientID
     */

  }, {
    key: 'patientID',
    set: function set(patientID) {
      this._patientID = patientID;
    }

    /**
     * Patient ID getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._patientID;
    }

    /**
     * Patient name setter
     *
     * @param {*} patientName
     */

  }, {
    key: 'patientName',
    set: function set(patientName) {
      this._patientName = patientName;
    }

    /**
     * Patient name getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._patientName;
    }

    /**
     * Patient age setter
     *
     * @param {*} patientAge
     */

  }, {
    key: 'patientAge',
    set: function set(patientAge) {
      this._patientAge = patientAge;
    }

    /**
     * Patient age getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._patientAge;
    }

    /**
     * Patient birthdate setter
     *
     * @param {*} patientBirthdate
     */

  }, {
    key: 'patientBirthdate',
    set: function set(patientBirthdate) {
      this._patientBirthdate = patientBirthdate;
    }

    /**
     * Patient birthdate getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._patientBirthdate;
    }

    /**
     * Patient sex setter
     *
     * @param {*} patientSex
     */

  }, {
    key: 'patientSex',
    set: function set(patientSex) {
      this._patientSex = patientSex;
    }

    /**
     * Patient sex getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._patientSex;
    }

    /**
     * Number of frames setter
     *
     * @param {*} numberOfFrames
     */

  }, {
    key: 'numberOfFrames',
    set: function set(numberOfFrames) {
      this._numberOfFrames = numberOfFrames;
    }

    /**
     * Number of frames getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._numberOfFrames;
    }

    /**
     * Number of channels setter
     *
     * @param {*} numberOfChannels
     */

  }, {
    key: 'numberOfChannels',
    set: function set(numberOfChannels) {
      this._numberOfChannels = numberOfChannels;
    }

    /**
     * Number of channels getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._numberOfChannels;
    }

    /**
     * Stack setter
     *
     * @param {*} stack
     */

  }, {
    key: 'stack',
    set: function set(stack) {
      this._stack = stack;
    }

    /**
     * Stack getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._stack;
    }

    /**
     * Modality setter
     *
     * @param {*} modality
     */

  }, {
    key: 'modality',
    set: function set(modality) {
      this._modality = modality;
    }

    /**
     * Modality getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._modality;
    }

    /**
     * Segmentation type setter
     *
     * @param {*} segmentationType
     */

  }, {
    key: 'segmentationType',
    set: function set(segmentationType) {
      this._segmentationType = segmentationType;
    }

    /**
     * Segmentation type getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._segmentationType;
    }

    /**
     * Segmentation segments setter
     *
     * @param {*} segmentationSegments
     */

  }, {
    key: 'segmentationSegments',
    set: function set(segmentationSegments) {
      this._segmentationSegments = segmentationSegments;
    }

    /**
     * Segmentation segments getter
     *
     * @return {*}
     */
    ,
    get: function get() {
      return this._segmentationSegments;
    }
  }]);

  return ModelsSeries;
}(_models_models_base__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (ModelsSeries);

/***/ }),

/***/ "./src/models/models.stack.js":
/*!************************************!*\
  !*** ./src/models/models.stack.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three/src/math/Matrix4 */ "./node_modules/three/src/math/Matrix4.js");
/* harmony import */ var three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/src/math/Vector3 */ "./node_modules/three/src/math/Vector3.js");
/* harmony import */ var three_src_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/src/constants */ "./node_modules/three/src/constants.js");
/* harmony import */ var _core_core_colors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/core.colors */ "./src/core/core.colors.ts");
/* harmony import */ var _core_core_colors__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_core_core_colors__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
/* harmony import */ var _models_models_base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models.base */ "./src/models/models.base.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/








var binaryString = __webpack_require__(/*! math-float32-to-binary-string */ "./node_modules/math-float32-to-binary-string/lib/index.js");

/**
 * Stack object.
 *
 * @module models/stack
 */

var ModelsStack = function (_ModelsBase) {
  _inherits(ModelsStack, _ModelsBase);

  /**
   * Models Stack constructor
   */
  function ModelsStack() {
    _classCallCheck(this, ModelsStack);

    var _this = _possibleConstructorReturn(this, _ModelsBase.call(this));

    _this._uid = null;
    _this._stackID = -1;

    _this._frame = [];
    _this._numberOfFrames = 0;

    _this._rows = 0;
    _this._columns = 0;
    _this._numberOfChannels = 1;
    _this._bitsAllocated = 8;
    _this._pixelType = 0;
    _this._pixelRepresentation = 0;

    _this._textureSize = 4096;
    _this._textureUnits = 7;

    _this._rawData = [];

    _this._windowCenter = 0;
    _this._windowWidth = 0;

    _this._rescaleSlope = 1;
    _this._rescaleIntercept = 0;

    _this._minMax = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];

    // TRANSFORMATION MATRICES
    _this._regMatrix = new three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_0__["Matrix4"]();

    _this._ijk2LPS = null;
    _this._lps2IJK = null;

    _this._aabb2LPS = null;
    _this._lps2AABB = null;

    //
    // IJK dimensions
    _this._dimensionsIJK = null;
    _this._halfDimensionsIJK = null;
    _this._spacing = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](1, 1, 1);
    _this._spacingBetweenSlices = 0;
    _this._sliceThickness = 0;
    _this._origin = null;
    _this._rightHanded = true;
    _this._xCosine = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](1, 0, 0);
    _this._yCosine = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](0, 1, 0);
    _this._zCosine = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](0, 0, 1);

    // convenience vars
    _this._prepared = false;
    _this._packed = false;
    _this._packedPerPixel = 1;

    //
    _this._modality = 'Modality not set';

    // SEGMENTATION STUFF
    _this._segmentationType = null;
    _this._segmentationSegments = [];
    _this._segmentationDefaultColor = [63, 174, 128];
    _this._frameSegment = [];
    _this._segmentationLUT = [];
    _this._segmentationLUTO = [];

    // photometricInterpretation Monochrome1 VS Monochrome2
    _this._invert = false;
    return _this;
  }

  /**
   * Prepare segmentation stack.
   * A segmentation stack can hold x frames that are at the same location
   * but segmentation specific information:
   * - Frame X contains voxels for segmentation A.
   * - Frame Y contains voxels for segmenttation B.
   * - Frame X and Y are at the same location.
   *
   * We currently merge overlaping frames into 1.
   */


  ModelsStack.prototype.prepareSegmentation = function prepareSegmentation() {
    // store frame and do special pre-processing
    this._frameSegment = this._frame;
    var mergedFrames = [];

    // order frames
    this.computeCosines();
    this._frame.map(this._computeDistanceArrayMap.bind(null, this._zCosine));
    this._frame.sort(this._sortDistanceArraySort);

    // merge frames
    var prevIndex = -1;
    for (var i = 0; i < this._frame.length; i++) {
      if (!mergedFrames[prevIndex] || mergedFrames[prevIndex]._dist != this._frame[i]._dist) {
        mergedFrames.push(this._frame[i]);
        prevIndex++;

        // Scale frame
        // by default each frame contains binary data about a segmentation.
        // we scale it by the referenceSegmentNumber in order to have a
        // segmentation specific voxel value rather than 0 or 1.
        // That allows us to merge frames later on.
        // If we merge frames without scaling, then we can not differenciate
        // voxels from segmentation A or B as the value is 0 or 1 in both cases.
        for (var k = 0; k < mergedFrames[prevIndex]._rows * mergedFrames[prevIndex]._columns; k++) {
          mergedFrames[prevIndex]._pixelData[k] *= this._frame[i]._referencedSegmentNumber;
        }
      } else {
        // frame already exsits at this location.
        // merge data from this segmentation into existing frame
        for (var _k = 0; _k < mergedFrames[prevIndex]._rows * mergedFrames[prevIndex]._columns; _k++) {
          mergedFrames[prevIndex]._pixelData[_k] += this._frame[i].pixelData[_k] * this._frame[i]._referencedSegmentNumber;
        }
      }

      mergedFrames[prevIndex].minMax = _core_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].minMax(mergedFrames[prevIndex]._pixelData);
    }

    // get information about segments
    var dict = {};
    var max = 0;
    for (var _i = 0; _i < this._segmentationSegments.length; _i++) {
      max = Math.max(max, parseInt(this._segmentationSegments[_i].segmentNumber, 10));

      var color = this._segmentationSegments[_i].recommendedDisplayCIELab;
      if (color === null) {
        dict[this._segmentationSegments[_i].segmentNumber] = this._segmentationDefaultColor;
      } else {
        dict[this._segmentationSegments[_i].segmentNumber] = _core_core_colors__WEBPACK_IMPORTED_MODULE_3___default.a.cielab2RGB.apply(_core_core_colors__WEBPACK_IMPORTED_MODULE_3___default.a, color);
      }
    }

    // generate LUTs
    for (var _i2 = 0; _i2 <= max; _i2++) {
      var index = _i2 / max;
      var opacity = _i2 ? 1 : 0;
      var rgb = [0, 0, 0];
      if (dict.hasOwnProperty(_i2.toString())) {
        rgb = dict[_i2.toString()];
      }

      rgb[0] /= 255;
      rgb[1] /= 255;
      rgb[2] /= 255;

      this._segmentationLUT.push([index].concat(rgb));
      this._segmentationLUTO.push([index, opacity]);
    }

    this._frame = mergedFrames;
  };

  /**
   * Compute cosines
   * Order frames
   * computeSpacing
   * sanityCheck
   * init some vars
   * compute min/max
   * compute transformation matrices
   *
   * @return {*}
   */


  ModelsStack.prototype.prepare = function prepare() {
    // if segmentation, merge some frames...
    if (this._modality === 'SEG') {
      this.prepareSegmentation();
    }

    this.computeNumberOfFrames();

    // pass parameters from frame to stack
    this._rows = this._frame[0].rows;
    this._columns = this._frame[0].columns;
    this._dimensionsIJK = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](this._columns, this._rows, this._numberOfFrames);
    this._halfDimensionsIJK = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](this._dimensionsIJK.x / 2, this._dimensionsIJK.y / 2, this._dimensionsIJK.z / 2);
    this._spacingBetweenSlices = this._frame[0].spacingBetweenSlices;
    this._sliceThickness = this._frame[0].sliceThickness;

    // compute direction cosines
    this.computeCosines();

    // order the frames
    if (this._numberOfFrames > 1) {
      this.orderFrames();
    }

    // compute/guess spacing
    this.computeSpacing();
    // set extra vars if nulls
    // do it now because before we would think image position/orientation
    // are defined and we would use it to compute spacing.
    if (!this._frame[0].imagePosition) {
      this._frame[0].imagePosition = [0, 0, 0];
    }
    if (!this._frame[0].imageOrientation) {
      this._frame[0].imageOrientation = [1, 0, 0, 0, 1, 0];
    }

    this._origin = this._arrayToVector3(this._frame[0].imagePosition, 0);

    // compute transforms
    this.computeIJK2LPS();

    this.computeLPS2AABB();
    // this.packEchos();

    var middleFrameIndex = Math.floor(this._frame.length / 2);
    var middleFrame = this._frame[middleFrameIndex];

    this._rescaleSlope = middleFrame.rescaleSlope || 1;
    this._rescaleIntercept = middleFrame.rescaleIntercept || 0;

    // rescale/slope min max
    this.computeMinMaxIntensities();
    this._minMax[0] = _core_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].rescaleSlopeIntercept(this._minMax[0], this._rescaleSlope, this._rescaleIntercept);
    this._minMax[1] = _core_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].rescaleSlopeIntercept(this._minMax[1], this._rescaleSlope, this._rescaleIntercept);

    this._windowWidth = middleFrame.windowWidth || this._minMax[1] - this._minMax[0];

    this._windowCenter = middleFrame.windowCenter || this._minMax[0] + this._windowWidth / 2;

    this._bitsAllocated = middleFrame.bitsAllocated;
    this._prepared = true;
  };

  ModelsStack.prototype.packEchos = function packEchos() {
    // 4 echo times...
    var echos = 4;
    var packedEcho = [];
    for (var i = 0; i < this._frame.length; i += echos) {
      var frame = this._frame[i];
      for (var k = 0; k < this._rows * this._columns; k++) {
        for (var j = 1; j < echos; j++) {
          frame.pixelData[k] += this._frame[i + j].pixelData[k];
        }
        frame.pixelData[k] /= echos;
      }
      packedEcho.push(frame);
    }
    this._frame = packedEcho;
    this._numberOfFrames = this._frame.length;
    this._dimensionsIJK = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](this._columns, this._rows, this._numberOfFrames);
    this._halfDimensionsIJK = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](this._dimensionsIJK.x / 2, this._dimensionsIJK.y / 2, this._dimensionsIJK.z / 2);
  };

  ModelsStack.prototype.computeNumberOfFrames = function computeNumberOfFrames() {
    // we need at least 1 frame
    if (this._frame && this._frame.length > 0) {
      this._numberOfFrames = this._frame.length;
    } else {
      window.console.warn("_frame doesn't contain anything....");
      window.console.warn(this._frame);
      return false;
    }
  };

  // frame.cosines - returns array [x, y, z]


  ModelsStack.prototype.computeCosines = function computeCosines() {
    if (this._frame && this._frame[0]) {
      var cosines = this._frame[0].cosines();
      this._xCosine = cosines[0];
      this._yCosine = cosines[1];
      this._zCosine = cosines[2];
    }
  };

  ModelsStack.prototype.orderFrames = function orderFrames() {
    // order the frames based on theirs dimension indices
    // first index is the most important.
    // 1,1,1,1 will be first
    // 1,1,2,1 will be next
    // 1,1,2,3 will be next
    // 1,1,3,1 will be next
    if (this._frame[0].dimensionIndexValues) {
      this._frame.sort(this._orderFrameOnDimensionIndicesArraySort);

      // else order with image position and orientation
    } else if (this._frame[0].imagePosition && this._frame[0].imageOrientation && this._frame[1] && this._frame[1].imagePosition && this._frame[1].imageOrientation && this._frame[0].imagePosition.join() !== this._frame[1].imagePosition.join()) {
      // compute and sort by dist in this series
      this._frame.map(this._computeDistanceArrayMap.bind(null, this._zCosine));
      this._frame.sort(this._sortDistanceArraySort);
    } else if (this._frame[0].instanceNumber !== null && this._frame[1] && this._frame[1].instanceNumber !== null && this._frame[0].instanceNumber !== this._frame[1].instanceNumber) {
      this._frame.sort(this._sortInstanceNumberArraySort);
    } else if (this._frame[0].sopInstanceUID && this._frame[1] && this._frame[1].sopInstanceUID && this._frame[0].sopInstanceUID !== this._frame[1].sopInstanceUID) {
      this._frame.sort(this._sortSopInstanceUIDArraySort);
    } else if (!this._frame[0].imagePosition) {
      // cancel warning if you have set null imagePosition on purpose (?)
    } else {
      window.console.warn('do not know how to order the frames...');
    }
  };

  ModelsStack.prototype.computeSpacing = function computeSpacing() {
    this.xySpacing();
    this.zSpacing();
  };

  /**
   * Compute stack z spacing
   */


  ModelsStack.prototype.zSpacing = function zSpacing() {
    if (this._numberOfFrames > 1) {
      if (this._frame[0].pixelSpacing && this._frame[0].pixelSpacing[2]) {
        this._spacing.z = this._frame[0].pixelSpacing[2];
      } else {
        // compute and sort by dist in this series
        this._frame.map(this._computeDistanceArrayMap.bind(null, this._zCosine));

        // if distances are different, re-sort array
        if (this._frame[1].dist !== this._frame[0].dist) {
          this._frame.sort(this._sortDistanceArraySort);
          this._spacing.z = this._frame[1].dist - this._frame[0].dist;
        } else if (this._spacingBetweenSlices) {
          this._spacing.z = this._spacingBetweenSlices;
        } else if (this._frame[0].sliceThickness) {
          this._spacing.z = this._frame[0].sliceThickness;
        }
      }
    }

    // Spacing
    // can not be 0 if not matrix can not be inverted.
    if (this._spacing.z === 0) {
      this._spacing.z = 1;
    }
  };

  /**
   *  FRAME CAN DO IT
   */


  ModelsStack.prototype.xySpacing = function xySpacing() {
    if (this._frame && this._frame[0]) {
      var spacingXY = this._frame[0].spacingXY();
      this._spacing.x = spacingXY[0];
      this._spacing.y = spacingXY[1];
    }
  };

  /**
   * Find min and max intensities among all frames.
   */


  ModelsStack.prototype.computeMinMaxIntensities = function computeMinMaxIntensities() {
    // what about colors!!!!?
    // we ignore values if NaNs
    // https://github.com/FNNDSC/ami/issues/185
    for (var i = 0; i < this._frame.length; i++) {
      // get min/max
      var min = this._frame[i].minMax[0];
      if (!Number.isNaN(min)) {
        this._minMax[0] = Math.min(this._minMax[0], min);
      }

      var max = this._frame[i].minMax[1];
      if (!Number.isNaN(max)) {
        this._minMax[1] = Math.max(this._minMax[1], max);
      }
    }
  };

  /**
   * Compute IJK to LPS and invert transforms
   */


  ModelsStack.prototype.computeIJK2LPS = function computeIJK2LPS() {
    // ijk to lps
    this._ijk2LPS = _core_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].ijk2LPS(this._xCosine, this._yCosine, this._zCosine, this._spacing, this._origin, this._regMatrix);

    // lps 2 ijk
    this._lps2IJK = new three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_0__["Matrix4"]();
    this._lps2IJK.getInverse(this._ijk2LPS);
  };

  /**
   * Compute LPS to AABB and invert transforms
   */


  ModelsStack.prototype.computeLPS2AABB = function computeLPS2AABB() {
    this._aabb2LPS = _core_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].aabb2LPS(this._xCosine, this._yCosine, this._zCosine, this._origin);

    this._lps2AABB = new three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_0__["Matrix4"]();
    this._lps2AABB.getInverse(this._aabb2LPS);
  };

  /**
   * Merge stacks
   *
   * @param {*} stack
   *
   * @return {*}
   */


  ModelsStack.prototype.merge = function merge(stack) {
    // also make sure x/y/z cosines are a match!
    if (this._stackID === stack.stackID && this._numberOfFrames === 1 && stack._numberOfFrames === 1 && this._frame[0].columns === stack.frame[0].columns && this._frame[0].rows === stack.frame[0].rows && this._xCosine.equals(stack.xCosine) && this._yCosine.equals(stack.yCosine) && this._zCosine.equals(stack.zCosine)) {
      return this.mergeModels(this._frame, stack.frame);
    } else {
      return false;
    }
  };

  /**
   * Pack current stack pixel data into 8 bits array buffers
   */


  ModelsStack.prototype.pack = function pack() {
    // Get total number of voxels
    var nbVoxels = this._dimensionsIJK.x * this._dimensionsIJK.y * this._dimensionsIJK.z;

    // Packing style
    if (this._bitsAllocated === 8 && this._numberOfChannels === 1 || this._bitsAllocated === 1) {
      this._packedPerPixel = 4;
    }

    if (this._bitsAllocated === 16 && this._numberOfChannels === 1) {
      this._packedPerPixel = 2;
    }

    // Loop through all the textures we need
    var textureDimension = this._textureSize * this._textureSize;
    var requiredTextures = Math.ceil(nbVoxels / (textureDimension * this._packedPerPixel));
    var voxelIndexStart = 0;
    var voxelIndexStop = this._packedPerPixel * textureDimension;
    if (voxelIndexStop > nbVoxels) {
      voxelIndexStop = nbVoxels;
    }

    if (this._textureUnits < requiredTextures) {
      console.warn('Insufficient number of supported textures. Some frames will not be packed.');
      requiredTextures = this._textureUnits;
    }

    for (var ii = 0; ii < requiredTextures; ii++) {
      var packed = this._packTo8Bits(this._numberOfChannels, this._frame, this._textureSize, voxelIndexStart, voxelIndexStop);
      this._textureType = packed.textureType;
      this._rawData.push(packed.data);

      voxelIndexStart += this._packedPerPixel * textureDimension;
      voxelIndexStop += this._packedPerPixel * textureDimension;
      if (voxelIndexStop > nbVoxels) {
        voxelIndexStop = nbVoxels;
      }
    }

    this._packed = true;
  };

  /**
   * Pack frame data to 32 bits texture
   * @param {*} channels
   * @param {*} frame
   * @param {*} textureSize
   * @param {*} startVoxel
   * @param {*} stopVoxel
   */


  ModelsStack.prototype._packTo8Bits = function _packTo8Bits(channels, frame, textureSize, startVoxel, stopVoxel) {
    var packed = {
      textureType: null,
      data: null
    };

    var bitsAllocated = frame[0].bitsAllocated;
    var pixelType = frame[0].pixelType;

    // transform signed to unsigned for convenience
    var offset = 0;
    if (this._minMax[0] < 0) {
      offset -= this._minMax[0];
    }

    var packIndex = 0;
    var frameIndex = 0;
    var inFrameIndex = 0;
    // frame should return it!
    var frameDimension = frame[0].rows * frame[0].columns;

    if (bitsAllocated === 8 && channels === 1 || bitsAllocated === 1) {
      var data = new Uint8Array(textureSize * textureSize * 4);
      var coordinate = 0;
      var channelOffset = 0;
      for (var i = startVoxel; i < stopVoxel; i++) {
        frameIndex = ~~(i / frameDimension);
        inFrameIndex = i % frameDimension;

        var raw = frame[frameIndex].pixelData[inFrameIndex] + offset;
        if (!Number.isNaN(raw)) {
          data[4 * coordinate + channelOffset] = raw;
        }

        packIndex++;
        coordinate = Math.floor(packIndex / 4);
        channelOffset = packIndex % 4;
      }
      packed.textureType = three_src_constants__WEBPACK_IMPORTED_MODULE_2__["RGBAFormat"];
      packed.data = data;
    } else if (bitsAllocated === 16 && channels === 1) {
      var _data = new Uint8Array(textureSize * textureSize * 4);
      var _coordinate = 0;
      var _channelOffset = 0;

      for (var _i3 = startVoxel; _i3 < stopVoxel; _i3++) {
        frameIndex = ~~(_i3 / frameDimension);
        inFrameIndex = _i3 % frameDimension;

        var _raw = frame[frameIndex].pixelData[inFrameIndex] + offset;
        if (!Number.isNaN(_raw)) {
          _data[4 * _coordinate + 2 * _channelOffset] = _raw & 0x00ff;
          _data[4 * _coordinate + 2 * _channelOffset + 1] = _raw >>> 8 & 0x00ff;
        }

        packIndex++;
        _coordinate = Math.floor(packIndex / 2);
        _channelOffset = packIndex % 2;
      }

      packed.textureType = three_src_constants__WEBPACK_IMPORTED_MODULE_2__["RGBAFormat"];
      packed.data = _data;
    } else if (bitsAllocated === 32 && channels === 1 && pixelType === 0) {
      var _data2 = new Uint8Array(textureSize * textureSize * 4);
      for (var _i4 = startVoxel; _i4 < stopVoxel; _i4++) {
        frameIndex = ~~(_i4 / frameDimension);
        inFrameIndex = _i4 % frameDimension;

        var _raw2 = frame[frameIndex].pixelData[inFrameIndex] + offset;
        if (!Number.isNaN(_raw2)) {
          _data2[4 * packIndex] = _raw2 & 0x000000ff;
          _data2[4 * packIndex + 1] = _raw2 >>> 8 & 0x000000ff;
          _data2[4 * packIndex + 2] = _raw2 >>> 16 & 0x000000ff;
          _data2[4 * packIndex + 3] = _raw2 >>> 24 & 0x000000ff;
        }

        packIndex++;
      }
      packed.textureType = three_src_constants__WEBPACK_IMPORTED_MODULE_2__["RGBAFormat"];
      packed.data = _data2;
    } else if (bitsAllocated === 32 && channels === 1 && pixelType === 1) {
      var _data3 = new Uint8Array(textureSize * textureSize * 4);

      for (var _i5 = startVoxel; _i5 < stopVoxel; _i5++) {
        frameIndex = ~~(_i5 / frameDimension);
        inFrameIndex = _i5 % frameDimension;

        var _raw3 = frame[frameIndex].pixelData[inFrameIndex] + offset;
        if (!Number.isNaN(_raw3)) {
          var bitString = binaryString(_raw3);
          var bitStringArray = bitString.match(/.{1,8}/g);

          _data3[4 * packIndex] = parseInt(bitStringArray[0], 2);
          _data3[4 * packIndex + 1] = parseInt(bitStringArray[1], 2);
          _data3[4 * packIndex + 2] = parseInt(bitStringArray[2], 2);
          _data3[4 * packIndex + 3] = parseInt(bitStringArray[3], 2);
        }

        packIndex++;
      }

      packed.textureType = three_src_constants__WEBPACK_IMPORTED_MODULE_2__["RGBAFormat"];
      packed.data = _data3;
    } else if (bitsAllocated === 8 && channels === 3) {
      var _data4 = new Uint8Array(textureSize * textureSize * 3);

      for (var _i6 = startVoxel; _i6 < stopVoxel; _i6++) {
        frameIndex = ~~(_i6 / frameDimension);
        inFrameIndex = _i6 % frameDimension;

        _data4[3 * packIndex] = frame[frameIndex].pixelData[3 * inFrameIndex];
        _data4[3 * packIndex + 1] = frame[frameIndex].pixelData[3 * inFrameIndex + 1];
        _data4[3 * packIndex + 2] = frame[frameIndex].pixelData[3 * inFrameIndex + 2];
        packIndex++;
      }

      packed.textureType = three_src_constants__WEBPACK_IMPORTED_MODULE_2__["RGBFormat"];
      packed.data = _data4;
    }

    return packed;
  };

  /**
   * Get the stack world center
   *
   *@return {*}
   */


  ModelsStack.prototype.worldCenter = function worldCenter() {
    var center = this._halfDimensionsIJK.clone().addScalar(-0.5).applyMatrix4(this._ijk2LPS);
    return center;
  };

  /**
   * Get the stack world bounding box
   * @return {*}
   */


  ModelsStack.prototype.worldBoundingBox = function worldBoundingBox() {
    var bbox = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];

    var dims = this._dimensionsIJK;

    for (var i = 0; i <= dims.x; i += dims.x) {
      for (var j = 0; j <= dims.y; j += dims.y) {
        for (var k = 0; k <= dims.z; k += dims.z) {
          var world = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](i, j, k).applyMatrix4(this._ijk2LPS);
          bbox = [Math.min(bbox[0], world.x), Math.max(bbox[1], world.x), // x min/max
          Math.min(bbox[2], world.y), Math.max(bbox[3], world.y), Math.min(bbox[4], world.z), Math.max(bbox[5], world.z)];
        }
      }
    }

    return bbox;
  };

  /**
   * Get AABB size in LPS space.
   *
   * @return {*}
   */


  ModelsStack.prototype.AABBox = function AABBox() {
    var world0 = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"]().addScalar(-0.5).applyMatrix4(this._ijk2LPS).applyMatrix4(this._lps2AABB);

    var world7 = this._dimensionsIJK.clone().addScalar(-0.5).applyMatrix4(this._ijk2LPS).applyMatrix4(this._lps2AABB);

    var minBBox = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](Math.abs(world0.x - world7.x), Math.abs(world0.y - world7.y), Math.abs(world0.z - world7.z));

    return minBBox;
  };

  /**
   * Get AABB center in LPS space
   */


  ModelsStack.prototype.centerAABBox = function centerAABBox() {
    var centerBBox = this.worldCenter();
    centerBBox.applyMatrix4(this._lps2AABB);
    return centerBBox;
  };

  ModelsStack.indexInDimensions = function indexInDimensions(index, dimensions) {
    if (index.x >= 0 && index.y >= 0 && index.z >= 0 && index.x < dimensions.x && index.y < dimensions.y && index.z < dimensions.z) {
      return true;
    }

    return false;
  };

  ModelsStack.prototype._arrayToVector3 = function _arrayToVector3(array, index) {
    return new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](array[index], array[index + 1], array[index + 2]);
  };

  ModelsStack.prototype._orderFrameOnDimensionIndicesArraySort = function _orderFrameOnDimensionIndicesArraySort(a, b) {
    if ('dimensionIndexValues' in a && Object.prototype.toString.call(a.dimensionIndexValues) === '[object Array]' && 'dimensionIndexValues' in b && Object.prototype.toString.call(b.dimensionIndexValues) === '[object Array]') {
      for (var i = 0; i < a.dimensionIndexValues.length; i++) {
        if (parseInt(a.dimensionIndexValues[i], 10) > parseInt(b.dimensionIndexValues[i], 10)) {
          return 1;
        }
        if (parseInt(a.dimensionIndexValues[i], 10) < parseInt(b.dimensionIndexValues[i], 10)) {
          return -1;
        }
      }
    } else {
      window.console.warn("One of the frames doesn't have a dimensionIndexValues array.");
      window.console.warn(a);
      window.console.warn(b);
    }

    return 0;
  };

  ModelsStack.prototype._computeDistanceArrayMap = function _computeDistanceArrayMap(normal, frame) {
    if (frame.imagePosition) {
      frame.dist = frame.imagePosition[0] * normal.x + frame.imagePosition[1] * normal.y + frame.imagePosition[2] * normal.z;
    }
    return frame;
  };

  ModelsStack.prototype._sortDistanceArraySort = function _sortDistanceArraySort(a, b) {
    return a.dist - b.dist;
  };

  ModelsStack.prototype._sortInstanceNumberArraySort = function _sortInstanceNumberArraySort(a, b) {
    return a.instanceNumber - b.instanceNumber;
  };

  ModelsStack.prototype._sortSopInstanceUIDArraySort = function _sortSopInstanceUIDArraySort(a, b) {
    return a.sopInstanceUID - b.sopInstanceUID;
  };

  // DEPRECATED FUNCTION

  /**
   * @deprecated for core.utils.value
   *
   * Get voxel value.
   *
   * @param {*} stack
   * @param {*} coordinate
   *
   * @return {*}
   */
  ModelsStack.value = function value(stack, coordinate) {
    window.console.warn('models.stack.value is deprecated.\n       Please use core.utils.value instead.');
    return _core_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].value(stack, coordinate);
  };

  /**
   * @deprecated for core.utils.rescaleSlopeIntercept
   *
   * Apply slope/intercept to a value.
   *
   * @param {*} value
   * @param {*} slope
   * @param {*} intercept
   *
   * @return {*}
   */


  ModelsStack.valueRescaleSlopeIntercept = function valueRescaleSlopeIntercept(value, slope, intercept) {
    window.console.warn('models.stack.valueRescaleSlopeIntercept is deprecated.\n       Please use core.utils.rescaleSlopeIntercept instead.');
    return _core_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].rescaleSlopeIntercept(value, slope, intercept);
  };

  /**
   * @deprecated for core.utils.worldToData
   *
   * Transform coordinates from world coordinate to data
   *
   * @param {*} stack
   * @param {*} worldCoordinates
   *
   * @return {*}
   */


  ModelsStack.worldToData = function worldToData(stack, worldCoordinates) {
    window.console.warn('models.stack.worldToData is deprecated.\n       Please use core.utils.worldToData instead.');

    return _core_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].worldToData(stack._lps2IJK, worldCoordinates);
  };

  _createClass(ModelsStack, [{
    key: 'numberOfChannels',
    set: function set(numberOfChannels) {
      this._numberOfChannels = numberOfChannels;
    },
    get: function get() {
      return this._numberOfChannels;
    }
  }, {
    key: 'frame',
    set: function set(frame) {
      this._frame = frame;
    },
    get: function get() {
      return this._frame;
    }
  }, {
    key: 'prepared',
    set: function set(prepared) {
      this._prepared = prepared;
    },
    get: function get() {
      return this._prepared;
    }
  }, {
    key: 'packed',
    set: function set(packed) {
      this._packed = packed;
    },
    get: function get() {
      return this._packed;
    }
  }, {
    key: 'packedPerPixel',
    set: function set(packedPerPixel) {
      this._packedPerPixel = packedPerPixel;
    },
    get: function get() {
      return this._packedPerPixel;
    }
  }, {
    key: 'dimensionsIJK',
    set: function set(dimensionsIJK) {
      this._dimensionsIJK = dimensionsIJK;
    },
    get: function get() {
      return this._dimensionsIJK;
    }
  }, {
    key: 'halfDimensionsIJK',
    set: function set(halfDimensionsIJK) {
      this._halfDimensionsIJK = halfDimensionsIJK;
    },
    get: function get() {
      return this._halfDimensionsIJK;
    }
  }, {
    key: 'regMatrix',
    set: function set(regMatrix) {
      this._regMatrix = regMatrix;
    },
    get: function get() {
      return this._regMatrix;
    }
  }, {
    key: 'ijk2LPS',
    set: function set(ijk2LPS) {
      this._ijk2LPS = ijk2LPS;
    },
    get: function get() {
      return this._ijk2LPS;
    }
  }, {
    key: 'lps2IJK',
    set: function set(lps2IJK) {
      this._lps2IJK = lps2IJK;
    },
    get: function get() {
      return this._lps2IJK;
    }
  }, {
    key: 'lps2AABB',
    set: function set(lps2AABB) {
      this._lps2AABB = lps2AABB;
    },
    get: function get() {
      return this._lps2AABB;
    }
  }, {
    key: 'textureSize',
    set: function set(textureSize) {
      this._textureSize = textureSize;
    },
    get: function get() {
      return this._textureSize;
    }
  }, {
    key: 'textureUnits',
    set: function set(textureUnits) {
      this._textureUnits = textureUnits;
    },
    get: function get() {
      return this._textureUnits;
    }
  }, {
    key: 'textureType',
    set: function set(textureType) {
      this._textureType = textureType;
    },
    get: function get() {
      return this._textureType;
    }
  }, {
    key: 'bitsAllocated',
    set: function set(bitsAllocated) {
      this._bitsAllocated = bitsAllocated;
    },
    get: function get() {
      return this._bitsAllocated;
    }
  }, {
    key: 'rawData',
    set: function set(rawData) {
      this._rawData = rawData;
    },
    get: function get() {
      return this._rawData;
    }
  }, {
    key: 'windowWidth',
    get: function get() {
      return this._windowWidth;
    },
    set: function set(windowWidth) {
      this._windowWidth = windowWidth;
    }
  }, {
    key: 'windowCenter',
    get: function get() {
      return this._windowCenter;
    },
    set: function set(windowCenter) {
      this._windowCenter = windowCenter;
    }
  }, {
    key: 'rescaleSlope',
    get: function get() {
      return this._rescaleSlope;
    },
    set: function set(rescaleSlope) {
      this._rescaleSlope = rescaleSlope;
    }
  }, {
    key: 'rescaleIntercept',
    get: function get() {
      return this._rescaleIntercept;
    },
    set: function set(rescaleIntercept) {
      this._rescaleIntercept = rescaleIntercept;
    }
  }, {
    key: 'xCosine',
    get: function get() {
      return this._xCosine;
    },
    set: function set(xCosine) {
      this._xCosine = xCosine;
    }
  }, {
    key: 'yCosine',
    get: function get() {
      return this._yCosine;
    },
    set: function set(yCosine) {
      this._yCosine = yCosine;
    }
  }, {
    key: 'zCosine',
    get: function get() {
      return this._zCosine;
    },
    set: function set(zCosine) {
      this._zCosine = zCosine;
    }
  }, {
    key: 'minMax',
    get: function get() {
      return this._minMax;
    },
    set: function set(minMax) {
      this._minMax = minMax;
    }
  }, {
    key: 'stackID',
    get: function get() {
      return this._stackID;
    },
    set: function set(stackID) {
      this._stackID = stackID;
    }
  }, {
    key: 'pixelType',
    get: function get() {
      return this._pixelType;
    },
    set: function set(pixelType) {
      this._pixelType = pixelType;
    }
  }, {
    key: 'pixelRepresentation',
    get: function get() {
      return this._pixelRepresentation;
    },
    set: function set(pixelRepresentation) {
      this._pixelRepresentation = pixelRepresentation;
    }
  }, {
    key: 'invert',
    set: function set(invert) {
      this._invert = invert;
    },
    get: function get() {
      return this._invert;
    }
  }, {
    key: 'modality',
    set: function set(modality) {
      this._modality = modality;
    },
    get: function get() {
      return this._modality;
    }
  }, {
    key: 'rightHanded',
    get: function get() {
      return this._rightHanded;
    },
    set: function set(rightHanded) {
      this._rightHanded = rightHanded;
    }
  }, {
    key: 'spacingBetweenSlices',
    get: function get() {
      return this._spacingBetweenSlices;
    },
    set: function set(spacingBetweenSlices) {
      this._spacingBetweenSlices = spacingBetweenSlices;
    }
  }, {
    key: 'segmentationSegments',
    set: function set(segmentationSegments) {
      this._segmentationSegments = segmentationSegments;
    },
    get: function get() {
      return this._segmentationSegments;
    }
  }, {
    key: 'segmentationType',
    set: function set(segmentationType) {
      this._segmentationType = segmentationType;
    },
    get: function get() {
      return this._segmentationType;
    }
  }, {
    key: 'segmentationLUT',
    set: function set(segmentationLUT) {
      this._segmentationLUT = segmentationLUT;
    },
    get: function get() {
      return this._segmentationLUT;
    }
  }, {
    key: 'segmentationLUTO',
    set: function set(segmentationLUTO) {
      this._segmentationLUTO = segmentationLUTO;
    },
    get: function get() {
      return this._segmentationLUTO;
    }
  }]);

  return ModelsStack;
}(_models_models_base__WEBPACK_IMPORTED_MODULE_5__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (ModelsStack);

/***/ }),

/***/ "./src/models/models.voxel.js":
/*!************************************!*\
  !*** ./src/models/models.voxel.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @module models/voxel
 */

var ModelsVoxel = function () {
  function ModelsVoxel() {
    _classCallCheck(this, ModelsVoxel);

    this._id = -1;
    this._worldCoordinates = null;
    this._dataCoordinates = null;
    this._screenCoordinates = null;
    this._value = null;
  }

  _createClass(ModelsVoxel, [{
    key: "worldCoordinates",
    set: function set(worldCoordinates) {
      this._worldCoordinates = worldCoordinates;
    },
    get: function get() {
      return this._worldCoordinates;
    }
  }, {
    key: "dataCoordinates",
    set: function set(dataCoordinates) {
      this._dataCoordinates = dataCoordinates;
    },
    get: function get() {
      return this._dataCoordinates;
    }
  }, {
    key: "screenCoordinates",
    set: function set(screenCoordinates) {
      this._screenCoordinates = screenCoordinates;
    },
    get: function get() {
      return this._screenCoordinates;
    }
  }, {
    key: "value",
    set: function set(value) {
      this._value = value;
    },
    get: function get() {
      return this._value;
    }
  }, {
    key: "id",
    set: function set(id) {
      this._id = id;
    },
    get: function get() {
      return this._id;
    }
  }]);

  return ModelsVoxel;
}();

/* harmony default export */ __webpack_exports__["default"] = (ModelsVoxel);

/***/ }),

/***/ "./src/parsers/parsers.dicom.js":
/*!**************************************!*\
  !*** ./src/parsers/parsers.dicom.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _parsers_volume__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers.volume */ "./src/parsers/parsers.volume.js");
/* harmony import */ var OpenJPEG_js_dist_openJPEG_DynamicMemory_browser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! OpenJPEG.js/dist/openJPEG-DynamicMemory-browser.js */ "./node_modules/OpenJPEG.js/dist/openJPEG-DynamicMemory-browser.js");
/* harmony import */ var OpenJPEG_js_dist_openJPEG_DynamicMemory_browser_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(OpenJPEG_js_dist_openJPEG_DynamicMemory_browser_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _decoders_decoders_rle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../decoders/decoders.rle */ "./src/decoders/decoders.rle.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/





var DicomParser = __webpack_require__(/*! dicom-parser */ "./node_modules/dicom-parser/dist/dicomParser.min.js");
var Jpeg = __webpack_require__(/*! jpeg-lossless-decoder-js */ "./node_modules/jpeg-lossless-decoder-js/src/main.js");
var JpegBaseline = __webpack_require__(/*! ../../external/scripts/jpeg */ "./external/scripts/jpeg.js");
var Jpx = __webpack_require__(/*! ../../external/scripts/jpx */ "./external/scripts/jpx.js");
var openJPEG = void 0; // for one time initialization

/**
 * Dicom parser is a combination of utilities to get a VJS image from dicom files.
 *scripts
 * Relies on dcmjs, jquery, HTML5 fetch API, HTML5 promise API.
 *
 * image-JPEG2000 (jpx) is still in use, because Cornerstone does it and may have identified some edge corners.
 * Ref:
 *   https://github.com/cornerstonejs/cornerstoneWADOImageLoader/blob/master/docs/Codecs.md
 *   https://github.com/cornerstonejs/cornerstoneWADOImageLoader/blob/a9b408f5562bde5543fc6986bd23fbac9d676562/src/shared/decoders/decodeJPEG2000.js#L127-L134
 *
 * @module parsers/dicom
 *
 * @param arrayBuffer {arraybuffer} - List of files to be parsed. It is urls from which
 * VJS.parsers.dicom can pull the data from.
 */

var ParsersDicom = function (_ParsersVolume) {
  _inherits(ParsersDicom, _ParsersVolume);

  function ParsersDicom(data, id) {
    _classCallCheck(this, ParsersDicom);

    var _this = _possibleConstructorReturn(this, _ParsersVolume.call(this));

    _this._id = id;

    _this._arrayBuffer = data.buffer;

    var byteArray = new Uint8Array(_this._arrayBuffer);

    // catch error
    // throw error if any!
    _this._dataSet = null;

    try {
      _this._dataSet = DicomParser.parseDicom(byteArray);
    } catch (e) {
      window.console.log(e);
      var error = new Error('parsers.dicom could not parse the file');
      throw error;
    }
    return _this;
  }

  /**
   * Series instance UID (0020,000e)
   *
   * @return {String}
   */


  ParsersDicom.prototype.seriesInstanceUID = function seriesInstanceUID() {
    return this._dataSet.string('x0020000e');
  };

  /**
   * Study instance UID (0020,000d)
   *
   * @return {String}
   */


  ParsersDicom.prototype.studyInstanceUID = function studyInstanceUID() {
    return this._dataSet.string('x0020000d');
  };

  /**
   * Get modality (0008,0060)
   *
   * @return {String}
   */


  ParsersDicom.prototype.modality = function modality() {
    return this._dataSet.string('x00080060');
  };

  /**
   * Segmentation type (0062,0001)
   *
   * @return {String}
   */


  ParsersDicom.prototype.segmentationType = function segmentationType() {
    return this._dataSet.string('x00620001');
  };

  /**
   * Segmentation segments
   * -> Sequence of segments (0062,0002)
   *   -> Recommended Display CIELab
   *   -> Segmentation Code
   *   -> Segment Number (0062,0004)
   *   -> Segment Label (0062,0005)
   *   -> Algorithm Type (0062,0008)
   *
   * @return {*}
   */


  ParsersDicom.prototype.segmentationSegments = function segmentationSegments() {
    var segmentationSegments = [];
    var segmentSequence = this._dataSet.elements.x00620002;

    if (!segmentSequence) {
      return segmentationSegments;
    }

    for (var i = 0; i < segmentSequence.items.length; i++) {
      var recommendedDisplayCIELab = this._recommendedDisplayCIELab(segmentSequence.items[i]);
      var segmentationCode = this._segmentationCode(segmentSequence.items[i]);
      var segmentNumber = segmentSequence.items[i].dataSet.uint16('x00620004');
      var segmentLabel = segmentSequence.items[i].dataSet.string('x00620005');
      var segmentAlgorithmType = segmentSequence.items[i].dataSet.string('x00620008');

      segmentationSegments.push({
        recommendedDisplayCIELab: recommendedDisplayCIELab,
        segmentationCodeDesignator: segmentationCode['segmentationCodeDesignator'],
        segmentationCodeValue: segmentationCode['segmentationCodeValue'],
        segmentationCodeMeaning: segmentationCode['segmentationCodeMeaning'],
        segmentNumber: segmentNumber,
        segmentLabel: segmentLabel,
        segmentAlgorithmType: segmentAlgorithmType
      });
    }

    return segmentationSegments;
  };

  /**
   * Segmentation code
   * -> Code designator (0008,0102)
   * -> Code value (0008,0200)
   * -> Code Meaning Type (0008,0104)
   *
   * @param {*} segment
   *
   * @return {*}
   */


  ParsersDicom.prototype._segmentationCode = function _segmentationCode(segment) {
    var segmentationCodeDesignator = 'unknown';
    var segmentationCodeValue = 'unknown';
    var segmentationCodeMeaning = 'unknown';
    var element = segment.dataSet.elements.x00082218;

    if (element && element.items && element.items.length > 0) {
      segmentationCodeDesignator = element.items[0].dataSet.string('x00080102');
      segmentationCodeValue = element.items[0].dataSet.string('x00080100');
      segmentationCodeMeaning = element.items[0].dataSet.string('x00080104');
    }

    return {
      segmentationCodeDesignator: segmentationCodeDesignator,
      segmentationCodeValue: segmentationCodeValue,
      segmentationCodeMeaning: segmentationCodeMeaning
    };
  };

  /**
   * Recommended display CIELab
   *
   * @param {*} segment
   *
   * @return {*}
   */


  ParsersDicom.prototype._recommendedDisplayCIELab = function _recommendedDisplayCIELab(segment) {
    if (!segment.dataSet.elements.x0062000d) {
      return null;
    }

    var offset = segment.dataSet.elements.x0062000d.dataOffset;
    var length = segment.dataSet.elements.x0062000d.length;
    var byteArray = segment.dataSet.byteArray.slice(offset, offset + length);

    // https://www.dabsoft.ch/dicom/3/C.10.7.1.1/
    var CIELabScaled = new Uint16Array(length / 2);
    for (var i = 0; i < length / 2; i++) {
      CIELabScaled[i] = (byteArray[2 * i + 1] << 8) + byteArray[2 * i];
    }

    var CIELabNormalized = [CIELabScaled[0] / 65535 * 100, CIELabScaled[1] / 65535 * 255 - 128, CIELabScaled[2] / 65535 * 255 - 128];

    return CIELabNormalized;
  };

  /**
   * SOP Instance UID
   *
   * @param {*} frameIndex
   *
   * @return {*}
   */


  ParsersDicom.prototype.sopInstanceUID = function sopInstanceUID() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var sopInstanceUID = this._findStringEverywhere('x2005140f', 'x00080018', frameIndex);
    return sopInstanceUID;
  };

  /**
   * Transfer syntax UID
   *
   * @return {*}
   */


  ParsersDicom.prototype.transferSyntaxUID = function transferSyntaxUID() {
    return this._dataSet.string('x00020010');
  };

  /**
   * Study date
   *
   * @return {*}
   */


  ParsersDicom.prototype.studyDate = function studyDate() {
    return this._dataSet.string('x00080020');
  };

  /**
   * Study description
   *
   * @return {*}
   */


  ParsersDicom.prototype.studyDescription = function studyDescription() {
    return this._dataSet.string('x00081030');
  };

  /**
   * Series date
   *
   * @return {*}
   */


  ParsersDicom.prototype.seriesDate = function seriesDate() {
    return this._dataSet.string('x00080021');
  };

  /**
   * Series description
   *
   * @return {*}
   */


  ParsersDicom.prototype.seriesDescription = function seriesDescription() {
    return this._dataSet.string('x0008103e');
  };

  /**
   * Patient name
   *
   * @return {*}
   */


  ParsersDicom.prototype.patientName = function patientName() {
    return this._dataSet.string('x00100010');
  };

  /**
   * Patient ID
   *
   * @return {*}
   */


  ParsersDicom.prototype.patientID = function patientID() {
    return this._dataSet.string('x00100020');
  };

  /**
   * Patient birthdate
   *
   * @return {*}
   */


  ParsersDicom.prototype.patientBirthdate = function patientBirthdate() {
    return this._dataSet.string('x00100030');
  };

  /**
   * Patient sex
   *
   * @return {*}
   */


  ParsersDicom.prototype.patientSex = function patientSex() {
    return this._dataSet.string('x00100040');
  };

  /**
   * Patient age
   *
   * @return {*}
   */


  ParsersDicom.prototype.patientAge = function patientAge() {
    return this._dataSet.string('x00101010');
  };

  /**
   * Photometric interpretation
   *
   * @return {*}
   */


  ParsersDicom.prototype.photometricInterpretation = function photometricInterpretation() {
    return this._dataSet.string('x00280004');
  };

  ParsersDicom.prototype.planarConfiguration = function planarConfiguration() {
    var planarConfiguration = this._dataSet.uint16('x00280006');

    if (typeof planarConfiguration === 'undefined') {
      planarConfiguration = null;
    }

    return planarConfiguration;
  };

  ParsersDicom.prototype.samplesPerPixel = function samplesPerPixel() {
    return this._dataSet.uint16('x00280002');
  };

  ParsersDicom.prototype.numberOfFrames = function numberOfFrames() {
    var numberOfFrames = this._dataSet.intString('x00280008');

    // need something smarter!
    if (typeof numberOfFrames === 'undefined') {
      numberOfFrames = null;
    }

    return numberOfFrames;
  };

  ParsersDicom.prototype.numberOfChannels = function numberOfChannels() {
    var numberOfChannels = 1;
    var photometricInterpretation = this.photometricInterpretation();

    if (!(photometricInterpretation !== 'RGB' && photometricInterpretation !== 'PALETTE COLOR' && photometricInterpretation !== 'YBR_FULL' && photometricInterpretation !== 'YBR_FULL_422' && photometricInterpretation !== 'YBR_PARTIAL_422' && photometricInterpretation !== 'YBR_PARTIAL_420' && photometricInterpretation !== 'YBR_RCT')) {
      numberOfChannels = 3;
    }

    // make sure we return a number! (not a string!)
    return numberOfChannels;
  };

  ParsersDicom.prototype.invert = function invert() {
    var photometricInterpretation = this.photometricInterpretation();

    return photometricInterpretation === 'MONOCHROME1' ? true : false;
  };

  ParsersDicom.prototype.imageOrientation = function imageOrientation() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // expect frame index to start at 0!
    var imageOrientation = this._findStringEverywhere('x00209116', 'x00200037', frameIndex);

    // format image orientation ('1\0\0\0\1\0') to array containing 6 numbers
    if (imageOrientation) {
      // make sure we return a number! (not a string!)
      // might not need to split (floatString + index)
      imageOrientation = imageOrientation.split('\\').map(Number);
    }

    return imageOrientation;
  };

  ParsersDicom.prototype.referencedSegmentNumber = function referencedSegmentNumber() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var referencedSegmentNumber = -1;
    var referencedSegmentNumberElement = this._findInGroupSequence('x52009230', 'x0062000a', frameIndex);

    if (referencedSegmentNumberElement !== null) {
      referencedSegmentNumber = referencedSegmentNumberElement.uint16('x0062000b');
    }

    return referencedSegmentNumber;
  };

  ParsersDicom.prototype.pixelAspectRatio = function pixelAspectRatio() {
    var pixelAspectRatio = [this._dataSet.intString('x00280034', 0), this._dataSet.intString('x00280034', 1)];

    // need something smarter!
    if (typeof pixelAspectRatio[0] === 'undefined') {
      pixelAspectRatio = null;
    }

    // make sure we return a number! (not a string!)
    return pixelAspectRatio;
  };

  ParsersDicom.prototype.imagePosition = function imagePosition() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var imagePosition = this._findStringEverywhere('x00209113', 'x00200032', frameIndex);

    // format image orientation ('1\0\0\0\1\0') to array containing 6 numbers
    if (imagePosition) {
      // make sure we return a number! (not a string!)
      imagePosition = imagePosition.split('\\').map(Number);
    }

    return imagePosition;
  };

  ParsersDicom.prototype.instanceNumber = function instanceNumber() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var instanceNumber = null;
    // first look for frame!
    // per frame functionnal group sequence
    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;

    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {
      if (perFrameFunctionnalGroupSequence.items[frameIndex].dataSet.elements.x2005140f) {
        var planeOrientationSequence = perFrameFunctionnalGroupSequence.items[frameIndex].dataSet.elements.x2005140f.items[0].dataSet;
        instanceNumber = planeOrientationSequence.intString('x00200013');
      } else {
        instanceNumber = this._dataSet.intString('x00200013');

        if (typeof instanceNumber === 'undefined') {
          instanceNumber = null;
        }
      }
    } else {
      // should we default to undefined??
      // default orientation
      instanceNumber = this._dataSet.intString('x00200013');

      if (typeof instanceNumber === 'undefined') {
        instanceNumber = null;
      }
    }

    return instanceNumber;
  };

  ParsersDicom.prototype.pixelSpacing = function pixelSpacing() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // expect frame index to start at 0!
    var pixelSpacing = this._findStringEverywhere('x00289110', 'x00280030', frameIndex);

    if (pixelSpacing === null) {
      pixelSpacing = this._dataSet.string('x00181164');
    }

    if (pixelSpacing) {
      // make sure we return array of numbers! (not strings!)
      pixelSpacing = pixelSpacing.split('\\').map(Number);
    }

    if (typeof pixelSpacing === 'undefined') {
      pixelSpacing = null;
    }

    return pixelSpacing;
  };

  ParsersDicom.prototype.ultrasoundRegions = function ultrasoundRegions() {
    var _this2 = this;

    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var sequence = this._dataSet.elements['x00186011'];

    if (!sequence || !sequence.items) {
      return [];
    }

    var ultrasoundRegions = [];

    sequence.items.forEach(function (item) {
      ultrasoundRegions.push({
        x0: item.dataSet.uint32('x00186018'),
        y0: item.dataSet.uint32('x0018601a'),
        x1: item.dataSet.uint32('x0018601c'),
        y1: item.dataSet.uint32('x0018601e'),
        axisX: item.dataSet.int32('x00186020') || null, // optional
        axisY: item.dataSet.int32('x00186022') || null, // optional
        unitsX: _this2._getUnitsName(item.dataSet.uint16('x00186024')),
        unitsY: _this2._getUnitsName(item.dataSet.uint16('x00186026')),
        deltaX: item.dataSet.double('x0018602c'),
        deltaY: item.dataSet.double('x0018602e')
      });
    });

    return ultrasoundRegions;
  };

  ParsersDicom.prototype.frameTime = function frameTime() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var frameIncrementPointer = this._dataSet.uint16('x00280009', 1);
    var frameRate = this._dataSet.intString('x00082144');
    var frameTime = void 0;

    if (typeof frameIncrementPointer === 'number') {
      frameIncrementPointer = frameIncrementPointer.toString(16);
      frameTime = this._dataSet.floatString('x0018' + frameIncrementPointer);
    }

    if (typeof frameTime === 'undefined' && typeof frameRate === 'number') {
      frameTime = 1000 / frameRate;
    }

    if (typeof frameTime === 'undefined') {
      frameTime = null;
    }

    return frameTime;
  };

  ParsersDicom.prototype.rows = function rows() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var rows = this._dataSet.uint16('x00280010');

    if (typeof rows === 'undefined') {
      rows = null;
      // print warning at least...
    }

    return rows;
  };

  ParsersDicom.prototype.columns = function columns() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var columns = this._dataSet.uint16('x00280011');

    if (typeof columns === 'undefined') {
      columns = null;
      // print warning at least...
    }

    return columns;
  };

  ParsersDicom.prototype.pixelType = function pixelType() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // 0 integer, 1 float
    // dicom only support integers
    return 0;
  };

  ParsersDicom.prototype.pixelRepresentation = function pixelRepresentation() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var pixelRepresentation = this._dataSet.uint16('x00280103');
    return pixelRepresentation;
  };

  ParsersDicom.prototype.pixelPaddingValue = function pixelPaddingValue() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var padding = this._dataSet.int16('x00280120');

    if (typeof padding === 'undefined') {
      padding = null;
    }

    return padding;
  };

  ParsersDicom.prototype.bitsAllocated = function bitsAllocated() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // expect frame index to start at 0!
    var bitsAllocated = this._dataSet.uint16('x00280100');
    return bitsAllocated;
  };

  ParsersDicom.prototype.highBit = function highBit() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // expect frame index to start at 0!
    var highBit = this._dataSet.uint16('x00280102');
    return highBit;
  };

  ParsersDicom.prototype.rescaleIntercept = function rescaleIntercept() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._findFloatStringInFrameGroupSequence('x00289145', 'x00281052', frameIndex);
  };

  ParsersDicom.prototype.rescaleSlope = function rescaleSlope() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._findFloatStringInFrameGroupSequence('x00289145', 'x00281053', frameIndex);
  };

  ParsersDicom.prototype.windowCenter = function windowCenter() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._findFloatStringInFrameGroupSequence('x00289132', 'x00281050', frameIndex);
  };

  ParsersDicom.prototype.windowWidth = function windowWidth() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._findFloatStringInFrameGroupSequence('x00289132', 'x00281051', frameIndex);
  };

  ParsersDicom.prototype.sliceThickness = function sliceThickness() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._findFloatStringInFrameGroupSequence('x00289110', 'x00180050', frameIndex);
  };

  ParsersDicom.prototype.spacingBetweenSlices = function spacingBetweenSlices() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var spacing = this._dataSet.floatString('x00180088');

    if (typeof spacing === 'undefined') {
      spacing = null;
    }

    return spacing;
  };

  ParsersDicom.prototype.dimensionIndexValues = function dimensionIndexValues() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var dimensionIndexValues = null;

    // try to get it from enhanced MR images
    // per-frame functionnal group sequence
    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;

    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {
      var frameContentSequence = perFrameFunctionnalGroupSequence.items[frameIndex].dataSet.elements.x00209111;
      if (frameContentSequence !== undefined && frameContentSequence !== null) {
        frameContentSequence = frameContentSequence.items[0].dataSet;
        var dimensionIndexValuesElt = frameContentSequence.elements.x00209157;
        if (dimensionIndexValuesElt !== undefined && dimensionIndexValuesElt !== null) {
          // /4 because UL
          var nbValues = dimensionIndexValuesElt.length / 4;
          dimensionIndexValues = [];

          for (var i = 0; i < nbValues; i++) {
            dimensionIndexValues.push(frameContentSequence.uint32('x00209157', i));
          }
        }
      }
    }

    return dimensionIndexValues;
  };

  ParsersDicom.prototype.inStackPositionNumber = function inStackPositionNumber() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var inStackPositionNumber = null;

    // try to get it from enhanced MR images
    // per-frame functionnal group sequence
    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;

    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {
      // NOT A PHILIPS TRICK!
      var philipsPrivateSequence = perFrameFunctionnalGroupSequence.items[frameIndex].dataSet.elements.x00209111.items[0].dataSet;
      inStackPositionNumber = philipsPrivateSequence.uint32('x00209057');
    } else {
      inStackPositionNumber = null;
    }

    return inStackPositionNumber;
  };

  ParsersDicom.prototype.stackID = function stackID() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var stackID = null;

    // try to get it from enhanced MR images
    // per-frame functionnal group sequence
    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;

    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {
      // NOT A PHILIPS TRICK!
      var philipsPrivateSequence = perFrameFunctionnalGroupSequence.items[frameIndex].dataSet.elements.x00209111.items[0].dataSet;
      stackID = philipsPrivateSequence.intString('x00209056');
    } else {
      stackID = null;
    }

    return stackID;
  };

  ParsersDicom.prototype.extractPixelData = function extractPixelData() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // decompress
    var decompressedData = this._decodePixelData(frameIndex);

    var numberOfChannels = this.numberOfChannels();

    if (numberOfChannels > 1) {
      return this._convertColorSpace(decompressedData);
    } else {
      return decompressedData;
    }
  };

  //
  // private methods
  //

  ParsersDicom.prototype._findInGroupSequence = function _findInGroupSequence(sequence, subsequence, index) {
    var functionalGroupSequence = this._dataSet.elements[sequence];

    if (typeof functionalGroupSequence !== 'undefined') {
      var inSequence = functionalGroupSequence.items[index].dataSet.elements[subsequence];

      if (typeof inSequence !== 'undefined') {
        return inSequence.items[0].dataSet;
      }
    }

    return null;
  };

  ParsersDicom.prototype._findStringInGroupSequence = function _findStringInGroupSequence(sequence, subsequence, tag, index) {
    // index = 0 if shared!!!
    var dataSet = this._findInGroupSequence(sequence, subsequence, index);

    if (dataSet !== null) {
      return dataSet.string(tag);
    }

    return null;
  };

  ParsersDicom.prototype._findStringInFrameGroupSequence = function _findStringInFrameGroupSequence(subsequence, tag, index) {
    return this._findStringInGroupSequence('x52009229', subsequence, tag, 0) || this._findStringInGroupSequence('x52009230', subsequence, tag, index);
  };

  ParsersDicom.prototype._findStringEverywhere = function _findStringEverywhere(subsequence, tag, index) {
    var targetString = this._findStringInFrameGroupSequence(subsequence, tag, index);
    // PET MODULE
    if (targetString === null) {
      var petModule = 'x00540022';
      targetString = this._findStringInSequence(petModule, tag);
    }

    if (targetString === null) {
      targetString = this._dataSet.string(tag);
    }

    if (typeof targetString === 'undefined') {
      targetString = null;
    }

    return targetString;
  };

  ParsersDicom.prototype._findStringInSequence = function _findStringInSequence(sequenceTag, tag, index) {
    var sequence = this._dataSet.elements[sequenceTag];

    var targetString = void 0;
    if (sequence) {
      targetString = sequence.items[0].dataSet.string(tag);
    }

    if (typeof targetString === 'undefined') {
      targetString = null;
    }

    return targetString;
  };

  ParsersDicom.prototype._findFloatStringInGroupSequence = function _findFloatStringInGroupSequence(sequence, subsequence, tag, index) {
    var dataInGroupSequence = this._dataSet.floatString(tag);

    // try to get it from enhanced MR images
    // per-frame functionnal group
    if (typeof dataInGroupSequence === 'undefined') {
      dataInGroupSequence = this._findInGroupSequence(sequence, subsequence, index);

      if (dataInGroupSequence !== null) {
        return dataInGroupSequence.floatString(tag);
      }
    }

    return dataInGroupSequence;
  };

  ParsersDicom.prototype._findFloatStringInFrameGroupSequence = function _findFloatStringInFrameGroupSequence(subsequence, tag, index) {
    return this._findFloatStringInGroupSequence('x52009229', subsequence, tag, 0) || this._findFloatStringInGroupSequence('x52009230', subsequence, tag, index);
  };

  ParsersDicom.prototype._decodePixelData = function _decodePixelData() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // if compressed..?
    var transferSyntaxUID = this.transferSyntaxUID();

    // find compression scheme
    if (transferSyntaxUID === '1.2.840.10008.1.2.4.90' ||
    // JPEG 2000 Lossless
    transferSyntaxUID === '1.2.840.10008.1.2.4.91') {
      // JPEG 2000 Lossy
      return this._decodeJ2K(frameIndex);
    } else if (transferSyntaxUID === '1.2.840.10008.1.2.5'
    // decodeRLE
    ) {
        return this._decodeRLE(frameIndex);
      } else if (transferSyntaxUID === '1.2.840.10008.1.2.4.57' ||
    // JPEG Lossless, Nonhierarchical (Processes 14)
    transferSyntaxUID === '1.2.840.10008.1.2.4.70') {
      // JPEG Lossless, Nonhierarchical (Processes 14 [Selection 1])
      return this._decodeJPEGLossless(frameIndex);
    } else if (transferSyntaxUID === '1.2.840.10008.1.2.4.50' ||
    // JPEG Baseline lossy process 1 (8 bit)
    transferSyntaxUID === '1.2.840.10008.1.2.4.51') {
      // JPEG Baseline lossy process 2 & 4 (12 bit)
      return this._decodeJPEGBaseline(frameIndex);
    } else if (transferSyntaxUID === '1.2.840.10008.1.2' ||
    // Implicit VR Little Endian
    transferSyntaxUID === '1.2.840.10008.1.2.1') {
      // Explicit VR Little Endian
      return this._decodeUncompressed(frameIndex);
    } else if (transferSyntaxUID === '1.2.840.10008.1.2.2') {
      // Explicit VR Big Endian
      var frame = this._decodeUncompressed(frameIndex);
      // and sawp it!
      return this._swapFrame(frame);
    } else {
      throw {
        error: 'no decoder for transfer syntax ' + transferSyntaxUID
      };
    }
  };

  // github.com/chafey/cornerstoneWADOImageLoader/blob/master/src/imageLoader/wadouri/getEncapsulatedImageFrame.js


  ParsersDicom.prototype.framesAreFragmented = function framesAreFragmented() {
    var numberOfFrames = this._dataSet.intString('x00280008');
    var pixelDataElement = this._dataSet.elements.x7fe00010;

    return numberOfFrames !== pixelDataElement.fragments.length;
  };

  ParsersDicom.prototype.getEncapsulatedImageFrame = function getEncapsulatedImageFrame(frameIndex) {
    if (this._dataSet.elements.x7fe00010 && this._dataSet.elements.x7fe00010.basicOffsetTable.length) {
      // Basic Offset Table is not empty
      return DicomParser.readEncapsulatedImageFrame(this._dataSet, this._dataSet.elements.x7fe00010, frameIndex);
    }

    if (this.framesAreFragmented()) {
      // Basic Offset Table is empty
      return DicomParser.readEncapsulatedImageFrame(this._dataSet, this._dataSet.elements.x7fe00010, frameIndex, DicomParser.createJPEGBasicOffsetTable(this._dataSet, this._dataSet.elements.x7fe00010));
    }

    return DicomParser.readEncapsulatedPixelDataFromFragments(this._dataSet, this._dataSet.elements.x7fe00010, frameIndex);
  };

  // used if OpenJPEG library isn't loaded (OHIF/image-JPEG2000 isn't supported and can't parse some images)


  ParsersDicom.prototype._decodeJpx = function _decodeJpx() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var jpxImage = new Jpx();
    // https://github.com/OHIF/image-JPEG2000/issues/6
    // It currently returns either Int16 or Uint16 based on whether the codestream is signed or not.
    jpxImage.parse(this.getEncapsulatedImageFrame(frameIndex));

    if (jpxImage.componentsCount !== 1) {
      throw new Error('JPEG2000 decoder returned a componentCount of ${componentsCount}, when 1 is expected');
    }

    if (jpxImage.tiles.length !== 1) {
      throw new Error('JPEG2000 decoder returned a tileCount of ${tileCount}, when 1 is expected');
    }

    return jpxImage.tiles[0].items;
  };

  ParsersDicom.prototype._decodeOpenJPEG = function _decodeOpenJPEG() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var encodedPixelData = this.getEncapsulatedImageFrame(frameIndex);
    var bytesPerPixel = this.bitsAllocated(frameIndex) <= 8 ? 1 : 2;
    var signed = this.pixelRepresentation(frameIndex) === 1;
    var dataPtr = openJPEG._malloc(encodedPixelData.length);

    openJPEG.writeArrayToMemory(encodedPixelData, dataPtr);

    // create param outpout
    var imagePtrPtr = openJPEG._malloc(4);
    var imageSizePtr = openJPEG._malloc(4);
    var imageSizeXPtr = openJPEG._malloc(4);
    var imageSizeYPtr = openJPEG._malloc(4);
    var imageSizeCompPtr = openJPEG._malloc(4);
    var ret = openJPEG.ccall('jp2_decode', 'number', ['number', 'number', 'number', 'number', 'number', 'number', 'number'], [dataPtr, encodedPixelData.length, imagePtrPtr, imageSizePtr, imageSizeXPtr, imageSizeYPtr, imageSizeCompPtr]);
    var imagePtr = openJPEG.getValue(imagePtrPtr, '*');

    if (ret !== 0) {
      console.log('[opj_decode] decoding failed!');
      openJPEG._free(dataPtr);
      openJPEG._free(imagePtr);
      openJPEG._free(imageSizeXPtr);
      openJPEG._free(imageSizeYPtr);
      openJPEG._free(imageSizePtr);
      openJPEG._free(imageSizeCompPtr);

      return;
    }

    // Copy the data from the EMSCRIPTEN heap into the correct type array
    var length = openJPEG.getValue(imageSizeXPtr, 'i32') * openJPEG.getValue(imageSizeYPtr, 'i32') * openJPEG.getValue(imageSizeCompPtr, 'i32');
    var src32 = new Int32Array(openJPEG.HEAP32.buffer, imagePtr, length);
    var pixelData = void 0;

    if (bytesPerPixel === 1) {
      if (Uint8Array.from) {
        pixelData = Uint8Array.from(src32);
      } else {
        pixelData = new Uint8Array(length);
        for (var i = 0; i < length; i++) {
          pixelData[i] = src32[i];
        }
      }
    } else if (signed) {
      if (Int16Array.from) {
        pixelData = Int16Array.from(src32);
      } else {
        pixelData = new Int16Array(length);
        for (var _i = 0; _i < length; _i++) {
          pixelData[_i] = src32[_i];
        }
      }
    } else if (Uint16Array.from) {
      pixelData = Uint16Array.from(src32);
    } else {
      pixelData = new Uint16Array(length);
      for (var _i2 = 0; _i2 < length; _i2++) {
        pixelData[_i2] = src32[_i2];
      }
    }

    openJPEG._free(dataPtr);
    openJPEG._free(imagePtrPtr);
    openJPEG._free(imagePtr);
    openJPEG._free(imageSizePtr);
    openJPEG._free(imageSizeXPtr);
    openJPEG._free(imageSizeYPtr);
    openJPEG._free(imageSizeCompPtr);

    return pixelData;
  };

  // from cornerstone


  ParsersDicom.prototype._decodeJ2K = function _decodeJ2K() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    if (typeof OpenJPEG_js_dist_openJPEG_DynamicMemory_browser_js__WEBPACK_IMPORTED_MODULE_1__ === 'undefined') {
      // OpenJPEG decoder not loaded
      return this._decodeJpx(frameIndex);
    }

    if (!openJPEG) {
      openJPEG = OpenJPEG_js_dist_openJPEG_DynamicMemory_browser_js__WEBPACK_IMPORTED_MODULE_1__();
      if (!openJPEG || !openJPEG._jp2_decode) {
        // OpenJPEG failed to initialize
        return this._decodeJpx(frameIndex);
      }
    }

    return this._decodeOpenJPEG(frameIndex);
  };

  ParsersDicom.prototype._decodeRLE = function _decodeRLE() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var bitsAllocated = this.bitsAllocated(frameIndex);
    var planarConfiguration = this.planarConfiguration();
    var columns = this.columns();
    var rows = this.rows();
    var samplesPerPixel = this.samplesPerPixel(frameIndex);
    var pixelRepresentation = this.pixelRepresentation(frameIndex);

    // format data for the RLE decoder
    var imageFrame = {
      pixelRepresentation: pixelRepresentation,
      bitsAllocated: bitsAllocated,
      planarConfiguration: planarConfiguration,
      columns: columns,
      rows: rows,
      samplesPerPixel: samplesPerPixel
    };

    var pixelData = DicomParser.readEncapsulatedPixelDataFromFragments(this._dataSet, this._dataSet.elements.x7fe00010, frameIndex);

    var decoded = Object(_decoders_decoders_rle__WEBPACK_IMPORTED_MODULE_2__["RLEDecoder"])(imageFrame, pixelData);
    return decoded.pixelData;
  };

  // from cornerstone


  ParsersDicom.prototype._decodeJPEGLossless = function _decodeJPEGLossless() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var encodedPixelData = this.getEncapsulatedImageFrame(frameIndex);
    var pixelRepresentation = this.pixelRepresentation(frameIndex);
    var bitsAllocated = this.bitsAllocated(frameIndex);
    var byteOutput = bitsAllocated <= 8 ? 1 : 2;
    var decoder = new Jpeg.lossless.Decoder();
    var decompressedData = decoder.decode(encodedPixelData.buffer, encodedPixelData.byteOffset, encodedPixelData.length, byteOutput);

    if (pixelRepresentation === 0) {
      if (byteOutput === 2) {
        return new Uint16Array(decompressedData.buffer);
      } else {
        // untested!
        return new Uint8Array(decompressedData.buffer);
      }
    } else {
      return new Int16Array(decompressedData.buffer);
    }
  };

  ParsersDicom.prototype._decodeJPEGBaseline = function _decodeJPEGBaseline() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var encodedPixelData = this.getEncapsulatedImageFrame(frameIndex);
    var rows = this.rows(frameIndex);
    var columns = this.columns(frameIndex);
    var bitsAllocated = this.bitsAllocated(frameIndex);
    var jpegBaseline = new JpegBaseline();
    jpegBaseline.parse(encodedPixelData);

    if (bitsAllocated === 8) {
      return jpegBaseline.getData(columns, rows);
    } else if (bitsAllocated === 16) {
      return jpegBaseline.getData16(columns, rows);
    }
  };

  ParsersDicom.prototype._decodeUncompressed = function _decodeUncompressed() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var pixelRepresentation = this.pixelRepresentation(frameIndex);
    var bitsAllocated = this.bitsAllocated(frameIndex);
    var pixelDataElement = this._dataSet.elements.x7fe00010;
    var pixelDataOffset = pixelDataElement.dataOffset;
    var numberOfChannels = this.numberOfChannels();
    var numPixels = this.rows(frameIndex) * this.columns(frameIndex) * numberOfChannels;
    var frameOffset = 0;
    var buffer = this._dataSet.byteArray.buffer;

    if (pixelRepresentation === 0 && bitsAllocated === 8) {
      // unsigned 8 bit
      frameOffset = pixelDataOffset + frameIndex * numPixels;
      return new Uint8Array(buffer, frameOffset, numPixels);
    } else if (pixelRepresentation === 0 && bitsAllocated === 16) {
      // unsigned 16 bit
      frameOffset = pixelDataOffset + frameIndex * numPixels * 2;
      return new Uint16Array(buffer, frameOffset, numPixels);
    } else if (pixelRepresentation === 1 && bitsAllocated === 16) {
      // signed 16 bit
      frameOffset = pixelDataOffset + frameIndex * numPixels * 2;
      return new Int16Array(buffer, frameOffset, numPixels);
    } else if (pixelRepresentation === 0 && bitsAllocated === 32) {
      // unsigned 32 bit
      frameOffset = pixelDataOffset + frameIndex * numPixels * 4;
      return new Uint32Array(buffer, frameOffset, numPixels);
    } else if (pixelRepresentation === 0 && bitsAllocated === 1) {
      var newBuffer = new ArrayBuffer(numPixels);
      var newArray = new Uint8Array(newBuffer);

      frameOffset = pixelDataOffset + frameIndex * numPixels;
      var index = 0;

      var bitStart = frameIndex * numPixels;
      var bitEnd = frameIndex * numPixels + numPixels;

      var byteStart = Math.floor(bitStart / 8);
      var bitStartOffset = bitStart - byteStart * 8;
      var byteEnd = Math.ceil(bitEnd / 8);

      var targetBuffer = new Uint8Array(buffer, pixelDataOffset);

      for (var i = byteStart; i <= byteEnd; i++) {
        while (bitStartOffset < 8) {
          switch (bitStartOffset) {
            case 0:
              newArray[index] = targetBuffer[i] & 0x0001;
              break;
            case 1:
              newArray[index] = targetBuffer[i] >>> 1 & 0x0001;
              break;
            case 2:
              newArray[index] = targetBuffer[i] >>> 2 & 0x0001;
              break;
            case 3:
              newArray[index] = targetBuffer[i] >>> 3 & 0x0001;
              break;
            case 4:
              newArray[index] = targetBuffer[i] >>> 4 & 0x0001;
              break;
            case 5:
              newArray[index] = targetBuffer[i] >>> 5 & 0x0001;
              break;
            case 6:
              newArray[index] = targetBuffer[i] >>> 6 & 0x0001;
              break;
            case 7:
              newArray[index] = targetBuffer[i] >>> 7 & 0x0001;
              break;
            default:
              break;
          }

          bitStartOffset++;
          index++;
          // if return..
          if (index >= numPixels) {
            return newArray;
          }
        }
        bitStartOffset = 0;
      }
    }
  };

  ParsersDicom.prototype._interpretAsRGB = function _interpretAsRGB(photometricInterpretation) {
    var rgbLikeTypes = ['RGB', 'YBR_RCT', 'YBR_ICT', 'YBR_FULL_422'];

    return rgbLikeTypes.indexOf(photometricInterpretation) !== -1;
  };

  ParsersDicom.prototype._convertColorSpace = function _convertColorSpace(uncompressedData) {
    var rgbData = null;
    var photometricInterpretation = this.photometricInterpretation();
    var planarConfiguration = this.planarConfiguration();

    var interpretAsRGB = this._interpretAsRGB(photometricInterpretation);
    if (interpretAsRGB && planarConfiguration === 0) {
      // ALL GOOD, ALREADY ORDERED
      // planar or non planar planarConfiguration
      rgbData = uncompressedData;
    } else if (interpretAsRGB && planarConfiguration === 1) {
      if (uncompressedData instanceof Int8Array) {
        rgbData = new Int8Array(uncompressedData.length);
      } else if (uncompressedData instanceof Uint8Array) {
        rgbData = new Uint8Array(uncompressedData.length);
      } else if (uncompressedData instanceof Int16Array) {
        rgbData = new Int16Array(uncompressedData.length);
      } else if (uncompressedData instanceof Uint16Array) {
        rgbData = new Uint16Array(uncompressedData.length);
      } else {
        var error = new Error('unsuported typed array: ' + uncompressedData);
        throw error;
      }

      var numPixels = uncompressedData.length / 3;
      var rgbaIndex = 0;
      var rIndex = 0;
      var gIndex = numPixels;
      var bIndex = numPixels * 2;
      for (var i = 0; i < numPixels; i++) {
        rgbData[rgbaIndex++] = uncompressedData[rIndex++]; // red
        rgbData[rgbaIndex++] = uncompressedData[gIndex++]; // green
        rgbData[rgbaIndex++] = uncompressedData[bIndex++]; // blue
      }
    } else if (photometricInterpretation === 'YBR_FULL') {
      if (uncompressedData instanceof Int8Array) {
        rgbData = new Int8Array(uncompressedData.length);
      } else if (uncompressedData instanceof Uint8Array) {
        rgbData = new Uint8Array(uncompressedData.length);
      } else if (uncompressedData instanceof Int16Array) {
        rgbData = new Int16Array(uncompressedData.length);
      } else if (uncompressedData instanceof Uint16Array) {
        rgbData = new Uint16Array(uncompressedData.length);
      } else {
        var _error = new Error('unsuported typed array: ' + uncompressedData);
        throw _error;
      }

      // https://github.com/chafey/cornerstoneWADOImageLoader/blob/master/src/decodeYBRFull.js
      var nPixels = uncompressedData.length / 3;
      var ybrIndex = 0;
      var _rgbaIndex = 0;
      for (var _i3 = 0; _i3 < nPixels; _i3++) {
        var y = uncompressedData[ybrIndex++];
        var cb = uncompressedData[ybrIndex++];
        var cr = uncompressedData[ybrIndex++];
        rgbData[_rgbaIndex++] = y + 1.402 * (cr - 128); // red
        rgbData[_rgbaIndex++] = y - 0.34414 * (cb - 128) - 0.71414 * (cr - 128); // green
        rgbData[_rgbaIndex++] = y + 1.772 * (cb - 128); // blue
        // rgbData[rgbaIndex++] = 255; //alpha
      }
    } else {
      var _error2 = new Error('photometric interpolation not supported: ' + photometricInterpretation);
      throw _error2;
    }

    return rgbData;
  };

  /**
   * Swap bytes in frame.
   */


  ParsersDicom.prototype._swapFrame = function _swapFrame(frame) {
    // swap bytes ( if 8bits (1byte), nothing to swap)
    var bitsAllocated = this.bitsAllocated();

    if (bitsAllocated === 16) {
      for (var i = 0; i < frame.length; i++) {
        frame[i] = this._swap16(frame[i]);
      }
    } else if (bitsAllocated === 32) {
      for (var _i4 = 0; _i4 < frame.length; _i4++) {
        frame[_i4] = this._swap32(frame[_i4]);
      }
    }

    return frame;
  };

  ParsersDicom.prototype._getUnitsName = function _getUnitsName(value) {
    var units = {
      0: 'none',
      1: 'percent',
      2: 'dB',
      3: 'cm',
      4: 'seconds',
      5: 'hertz',
      6: 'dB/seconds',
      7: 'cm/sec',
      8: 'cm2',
      9: 'cm2/sec',
      10: 'cm3',
      11: 'cm3/sec',
      12: 'degrees'
    };

    return units.hasOwnProperty(value) ? units[value] : 'none';
  };

  return ParsersDicom;
}(_parsers_volume__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (ParsersDicom);

/***/ }),

/***/ "./src/parsers/parsers.js":
/*!********************************!*\
  !*** ./src/parsers/parsers.js ***!
  \********************************/
/*! exports provided: DicomParser, MghParser, NiftiParser, NrrdParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _parsers_dicom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers.dicom */ "./src/parsers/parsers.dicom.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DicomParser", function() { return _parsers_dicom__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _parsers_mgh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsers.mgh */ "./src/parsers/parsers.mgh.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MghParser", function() { return _parsers_mgh__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _parsers_nifti__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parsers.nifti */ "./src/parsers/parsers.nifti.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NiftiParser", function() { return _parsers_nifti__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _parsers_nrrd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers.nrrd */ "./src/parsers/parsers.nrrd.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NrrdParser", function() { return _parsers_nrrd__WEBPACK_IMPORTED_MODULE_3__["default"]; });








/***/ }),

/***/ "./src/parsers/parsers.mgh.js":
/*!************************************!*\
  !*** ./src/parsers/parsers.mgh.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _parsers_volume__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers.volume */ "./src/parsers/parsers.volume.js");
/* harmony import */ var three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/src/math/Vector3 */ "./node_modules/three/src/math/Vector3.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/




/**
 * @module parsers/mgh
 */

var ParsersMgh = function (_ParsersVolume) {
  _inherits(ParsersMgh, _ParsersVolume);

  function ParsersMgh(data, id) {
    _classCallCheck(this, ParsersMgh);

    /**
     * @member
     * @type {arraybuffer}
     */
    var _this = _possibleConstructorReturn(this, _ParsersVolume.call(this));

    _this._id = id;
    _this._url = data.url;
    _this._buffer = null;
    _this._bufferPos = 0;
    _this._dataPos = 0;
    _this._pixelData = null;

    // Default MGH Header as described at:
    // https://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/MghFormat
    // Image "header" with default values
    _this._version = 1;
    _this._width = 0;
    _this._height = 0;
    _this._depth = 0;
    _this._nframes = 0;
    _this._type = ParsersMgh.MRI_UCHAR; // 0-UCHAR, 4-SHORT, 1-INT, 3-FLOAT
    _this._dof = 0;
    _this._goodRASFlag = 0; // True: Use directional cosines, false assume CORONAL
    _this._spacingXYZ = [1, 1, 1];
    _this._Xras = [-1, 0, 0];
    _this._Yras = [0, 0, -1];
    _this._Zras = [0, 1, 0];
    _this._Cras = [0, 0, 0];
    // Image "footer"
    _this._tr = 0; // ms
    _this._flipAngle = 0; // radians
    _this._te = 0; // ms
    _this._ti = 0; // ms
    _this._fov = 0; // from doc: IGNORE THIS FIELD (data is inconsistent)
    _this._tags = []; // Will then contain variable length char strings

    // Other misc
    _this._origin = [0, 0, 0];
    _this._imageOrient = [0, 0, 0, 0, 0, 0];

    // Read header
    // ArrayBuffer in data.buffer may need endian swap
    _this._buffer = data.buffer;

    _this._version = _this._readInt();
    _this._swapEndian = false;
    if (_this._version == 1) {
      // Life is good
    } else if (_this._version == 16777216) {
      _this._swapEndian = true;
      _this._version = _this._swap32(_this._version);
    } else {
      var error = new Error('MGH/MGZ parser: Unknown Endian.  Version reports: ' + _this._version);
      throw error;
    }
    _this._width = _this._readInt();
    _this._height = _this._readInt();
    _this._depth = _this._readInt(); // AMI calls this frames
    _this._nframes = _this._readInt();
    _this._type = _this._readInt();
    _this._dof = _this._readInt();
    _this._goodRASFlag = _this._readShort();
    _this._spacingXYZ = _this._readFloat(3);
    _this._Xras = _this._readFloat(3);
    _this._Yras = _this._readFloat(3);
    _this._Zras = _this._readFloat(3);
    _this._Cras = _this._readFloat(3);

    _this._bufferPos = 284;
    var dataSize = _this._width * _this._height * _this._depth * _this._nframes;
    var vSize = _this._width * _this._height * _this._depth;

    switch (_this._type) {
      case ParsersMgh.MRI_UCHAR:
        _this._pixelData = _this._readUChar(dataSize);
        break;
      case ParsersMgh.MRI_INT:
        _this._pixelData = _this._readInt(dataSize);
        break;
      case ParsersMgh.MRI_FLOAT:
        _this._pixelData = _this._readFloat(dataSize);
        break;
      case ParsersMgh.MRI_SHORT:
        _this._pixelData = _this._readShort(dataSize);
        break;
      default:
        throw Error('MGH/MGZ parser: Unknown _type.  _type reports: ' + _this._type);
    }

    _this._tr = _this._readFloat(1);
    _this._flipAngle = _this._readFloat(1);
    _this._te = _this._readFloat(1);
    _this._ti = _this._readFloat(1);
    _this._fov = _this._readFloat(1);

    var enc = new TextDecoder();
    var t = _this._tagReadStart();
    while (t[0] != undefined) {
      var tagType = t[0];
      var tagLen = t[1];
      var tagValue = undefined;

      switch (tagType) {
        case ParsersMgh.TAG_OLD_MGH_XFORM:
        case ParsersMgh.TAG_MGH_XFORM:
          tagValue = _this._readChar(tagLen);
          break;
        default:
          tagValue = _this._readChar(tagLen);
      }
      tagValue = enc.decode(tagValue);
      _this._tags.push({ tagType: tagType, tagValue: tagValue });

      // read for next loop
      t = _this._tagReadStart();
    }

    // detect if we are in a right handed coordinate system
    var first = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"]().fromArray(_this._Xras);
    var second = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"]().fromArray(_this._Yras);
    var crossFirstSecond = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"]().crossVectors(first, second);
    var third = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"]().fromArray(_this._Zras);

    if (crossFirstSecond.angleTo(third) > Math.PI / 2) {
      _this._rightHanded = false;
    }

    // - sign to move to LPS space
    _this._imageOrient = [-_this._Xras[0], -_this._Xras[1], _this._Xras[2], -_this._Yras[0], -_this._Yras[1], _this._Yras[2]];

    // Calculate origin
    var fcx = _this._width / 2.0;
    var fcy = _this._height / 2.0;
    var fcz = _this._depth / 2.0;

    for (var ui = 0; ui < 3; ++ui) {
      _this._origin[ui] = _this._Cras[ui] - (_this._Xras[ui] * _this._spacingXYZ[0] * fcx + _this._Yras[ui] * _this._spacingXYZ[1] * fcy + _this._Zras[ui] * _this._spacingXYZ[2] * fcz);
    }

    // - sign to move to LPS space
    _this._origin = [-_this._origin[0], -_this._origin[1], _this._origin[2]];
    return _this;
  }

  ParsersMgh.prototype.seriesInstanceUID = function seriesInstanceUID() {
    // use filename + timestamp..?
    return this._url;
  };

  ParsersMgh.prototype.numberOfFrames = function numberOfFrames() {
    // AMI calls Z component frames, not T (_nframes)
    return this._depth;
  };

  ParsersMgh.prototype.sopInstanceUID = function sopInstanceUID() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return frameIndex;
  };

  ParsersMgh.prototype.rows = function rows() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._width;
  };

  ParsersMgh.prototype.columns = function columns() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._height;
  };

  ParsersMgh.prototype.pixelType = function pixelType() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // Return: 0 integer, 1 float
    switch (this._type) {
      case ParsersMgh.MRI_UCHAR:
      case ParsersMgh.MRI_INT:
      case ParsersMgh.MRI_SHORT:
        return 0;
      case ParsersMgh.MRI_FLOAT:
        return 1;
      default:
        throw Error('MGH/MGZ parser: Unknown _type.  _type reports: ' + this._type);
    }
  };

  ParsersMgh.prototype.bitsAllocated = function bitsAllocated() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    switch (this._type) {
      case ParsersMgh.MRI_UCHAR:
        return 8;
      case ParsersMgh.MRI_SHORT:
        return 16;
      case ParsersMgh.MRI_INT:
      case ParsersMgh.MRI_FLOAT:
        return 32;
      default:
        throw Error('MGH/MGZ parser: Unknown _type.  _type reports: ' + this._type);
    }
  };

  ParsersMgh.prototype.pixelSpacing = function pixelSpacing() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._spacingXYZ;
  };

  ParsersMgh.prototype.imageOrientation = function imageOrientation() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._imageOrient;
  };

  ParsersMgh.prototype.imagePosition = function imagePosition() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._origin;
  };

  ParsersMgh.prototype.extractPixelData = function extractPixelData() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var sliceSize = this._width * this._height;
    return this._pixelData.slice(frameIndex * sliceSize, (frameIndex + 1) * sliceSize);
  };

  // signed int32


  ParsersMgh.prototype._readInt = function _readInt() {
    var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    var tempBuff = new DataView(this._buffer.slice(this._bufferPos, this._bufferPos + len * 4));
    this._bufferPos += len * 4;
    var v = undefined;
    if (len == 1) {
      v = tempBuff.getInt32(0, this._swapEndian);
    } else {
      v = new Int32Array(len);
      for (var i = 0; i < len; i++) {
        v[i] = tempBuff.getInt32(i * 4, this._swapEndian);
      }
    }
    return v;
  };

  // signed int16


  ParsersMgh.prototype._readShort = function _readShort() {
    var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    var tempBuff = new DataView(this._buffer.slice(this._bufferPos, this._bufferPos + len * 2));
    this._bufferPos += len * 2;
    var v = undefined;
    if (len == 1) {
      v = tempBuff.getInt16(0, this._swapEndian);
    } else {
      v = new Int16Array(len);
      for (var i = 0; i < len; i++) {
        v[i] = tempBuff.getInt16(i * 2, this._swapEndian);
      }
    }
    return v;
  };

  // signed int64


  ParsersMgh.prototype._readLong = function _readLong() {
    var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    var tempBuff = new DataView(this._buffer.slice(this._bufferPos, this._bufferPos + len * 8));
    this._bufferPos += len * 8;
    var v = new Uint16Array(len);
    for (var i = 0; i < len; i++) {
      /* DataView doesn't have Int64.
       * This work around based off Scalajs
       * (https://github.com/scala-js/scala-js/blob/master/library/src/main/scala/scala/scalajs/js/typedarray/DataViewExt.scala)
       * v[i]=tempBuff.getInt64(i*8,this._swapEndian);
       */
      var shiftHigh = 0;
      var shiftLow = 0;
      if (this._swapendian) {
        shiftHigh = 4;
      } else {
        shiftLow = 4;
      }
      var high = tempBuff.getInt32(i * 8 + shiftHigh, this._swapEndian);
      var low = tempBuff.getInt32(i * 8 + shiftLow, this._swapEndian);
      if (high != 0) {
        console.log('Unable to read Int64 with high word: ' + high + 'low word: ' + low);
        low = undefined;
      }
      v[i] = low;
    }
    if (len == 0) {
      return undefined;
    } else if (len == 1) {
      return v[0];
    } else {
      return v;
    }
  };

  // signed int8


  ParsersMgh.prototype._readChar = function _readChar() {
    var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    var tempBuff = new DataView(this._buffer.slice(this._bufferPos, this._bufferPos + len));
    this._bufferPos += len;
    var v = undefined;
    if (len == 1) {
      v = tempBuff.getInt8(0, this._swapEndian);
    } else {
      v = new Int8Array(len);
      for (var i = 0; i < len; i++) {
        v[i] = tempBuff.getInt8(i, this._swapEndian);
      }
    }
    return v;
  };

  // unsigned int8


  ParsersMgh.prototype._readUChar = function _readUChar() {
    var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    var tempBuff = new DataView(this._buffer.slice(this._bufferPos, this._bufferPos + len));
    this._bufferPos += len;
    var v = undefined;
    if (len == 1) {
      v = tempBuff.getUint8(0, this._swapEndian);
    } else {
      v = new Uint8Array(len);
      for (var i = 0; i < len; i++) {
        v[i] = tempBuff.getUint8(i, this._swapEndian);
      }
    }
    return v;
  };

  // float32


  ParsersMgh.prototype._readFloat = function _readFloat() {
    var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    var tempBuff = new DataView(this._buffer.slice(this._bufferPos, this._bufferPos + len * 4));
    this._bufferPos += len * 4;
    var v = undefined;
    if (len == 1) {
      v = tempBuff.getFloat32(0, this._swapEndian);
    } else {
      v = new Float32Array(len);
      for (var i = 0; i < len; i++) {
        v[i] = tempBuff.getFloat32(i * 4, this._swapEndian);
      }
    }
    return v;
  };

  ParsersMgh.prototype._tagReadStart = function _tagReadStart() {
    if (this._bufferPos >= this._buffer.byteLength) {
      return [undefined, undefined];
    }
    var tagType = this._readInt();
    var tagLen = undefined;
    switch (tagType) {
      case ParsersMgh.TAG_OLD_MGH_XFORM:
        tagLen = this._readInt();
        tagLen -= 1;
        break;
      case ParsersMgh.TAG_OLD_SURF_GEOM:
      case ParsersMgh.TAG_OLD_USEREALRAS:
      case ParsersMgh.TAG_OLD_COLORTABLE:
        tagLen = 0;
        break;
      default:
        tagLen = this._readLong();
    }
    if (tagLen == undefined) {
      tagType = undefined;
    }
    return [tagType, tagLen];
  };

  return ParsersMgh;
}(_parsers_volume__WEBPACK_IMPORTED_MODULE_0__["default"]);

// https://github.com/freesurfer/freesurfer/
// See include/mri.h


/* harmony default export */ __webpack_exports__["default"] = (ParsersMgh);
ParsersMgh.MRI_UCHAR = 0;
ParsersMgh.MRI_INT = 1;
ParsersMgh.MRI_LONG = 2;
ParsersMgh.MRI_FLOAT = 3;
ParsersMgh.MRI_SHORT = 4;
ParsersMgh.MRI_BITMAP = 5;
ParsersMgh.MRI_TENSOR = 6;
ParsersMgh.MRI_FLOAT_COMPLEX = 7;
ParsersMgh.MRI_DOUBLE_COMPLEX = 8;
ParsersMgh.MRI_RGB = 9;

// https://github.com/freesurfer/freesurfer/
// See include/tags.h
ParsersMgh.TAG_OLD_COLORTABLE = 1;
ParsersMgh.TAG_OLD_USEREALRAS = 2;
ParsersMgh.TAG_CMDLINE = 3;
ParsersMgh.TAG_USEREALRAS = 4;
ParsersMgh.TAG_COLORTABLE = 5;
ParsersMgh.TAG_GCAMORPH_GEOM = 10;
ParsersMgh.TAG_GCAMORPH_TYPE = 11;
ParsersMgh.TAG_GCAMORPH_LABELS = 12;
ParsersMgh.TAG_OLD_SURF_GEOM = 20;
ParsersMgh.TAG_SURF_GEOM = 21;
ParsersMgh.TAG_OLD_MGH_XFORM = 30;
ParsersMgh.TAG_MGH_XFORM = 31;
ParsersMgh.TAG_GROUP_AVG_SURFACE_AREA = 32;
ParsersMgh.TAG_AUTO_ALIGN = 33;
ParsersMgh.TAG_SCALAR_DOUBLE = 40;
ParsersMgh.TAG_PEDIR = 41;
ParsersMgh.TAG_MRI_FRAME = 42;
ParsersMgh.TAG_FIELDSTRENGTH = 43;

/***/ }),

/***/ "./src/parsers/parsers.mhd.js":
/*!************************************!*\
  !*** ./src/parsers/parsers.mhd.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _parsers_volume__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers.volume */ "./src/parsers/parsers.volume.js");
/* harmony import */ var three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/src/math/Vector3 */ "./node_modules/three/src/math/Vector3.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/




/**
 * @module parsers/mhd
 */

var ParsersMHD = function (_ParsersVolume) {
  _inherits(ParsersMHD, _ParsersVolume);

  function ParsersMHD(data, id) {
    _classCallCheck(this, ParsersMHD);

    /**
     * @member
     * @type {arraybuffer}
     */
    var _this = _possibleConstructorReturn(this, _ParsersVolume.call(this));

    _this._id = id;
    _this._url = data.url;
    _this._header = {};
    _this._buffer = null;

    try {
      // parse header (mhd) data
      var lines = new TextDecoder().decode(data.mhdBuffer).split('\n');
      lines.forEach(function (line) {
        var keyvalue = line.split('=');
        if (keyvalue.length === 2) {
          _this._header[keyvalue[0].trim()] = keyvalue[1].trim();
        }
      });

      _this._header.DimSize = _this._header.DimSize.split(' ');
      _this._header.ElementSpacing = _this._header.ElementSpacing.split(' ');
      _this._header.TransformMatrix = _this._header.TransformMatrix.split(' ');
      _this._header.Offset = _this._header.Offset.split(' ');
      //
      _this._buffer = data.rawBuffer;
    } catch (error) {
      window.console.log('ooops... :(');
    }
    return _this;
  }

  ParsersMHD.prototype.rightHanded = function rightHanded() {
    var anatomicalOrientation = this._header.AnatomicalOrientation;
    if (anatomicalOrientation === 'RAS' || anatomicalOrientation === 'RPI' || anatomicalOrientation === 'LPS' || anatomicalOrientation === 'LAI') {
      this._rightHanded = true;
    } else {
      this._rightHanded = false;
    }

    return this._rightHanded;
  };

  ParsersMHD.prototype.seriesInstanceUID = function seriesInstanceUID() {
    // use filename + timestamp..?
    return this._url;
  };

  ParsersMHD.prototype.numberOfFrames = function numberOfFrames() {
    return parseInt(this._header.DimSize[2], 10);
  };

  ParsersMHD.prototype.sopInstanceUID = function sopInstanceUID() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return frameIndex;
  };

  ParsersMHD.prototype.rows = function rows() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return parseInt(this._header.DimSize[1], 10);
  };

  ParsersMHD.prototype.columns = function columns() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return parseInt(this._header.DimSize[0], 10);
  };

  ParsersMHD.prototype.pixelType = function pixelType() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // 0 - int
    // 1 - float
    var type = 0;
    if (this._header.ElementType === 'MET_UFLOAT' || this._header.ElementType === 'MET_FLOAT') {
      type = 1;
    }
    return type;
  };

  ParsersMHD.prototype.bitsAllocated = function bitsAllocated() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var bitsAllocated = 1;

    if (this._header.ElementType === 'MET_UCHAR' || this._header.ElementType === 'MET_CHAR') {
      bitsAllocated = 8;
    } else if (this._header.ElementType === 'MET_USHORT' || this._header.ElementType === 'MET_SHORT') {
      bitsAllocated = 16;
    } else if (this._header.ElementType === 'MET_UINT' || this._header.ElementType === 'MET_INT' || this._header.ElementType === 'MET_UFLOAT' || this._header.ElementType === 'MET_FLOAT') {
      bitsAllocated = 32;
    }

    return bitsAllocated;
  };

  /**
   * https://itk.org/Wiki/ITK/MetaIO/Documentation
   * ElementSpacing[0] spacing between elements along X axis (i.e. column spacing)
   * ElementSpacing[1] spacing between elements along Y axis (i.e. row spacing)
   *
   * @param {*} frameIndex
   */


  ParsersMHD.prototype.pixelSpacing = function pixelSpacing() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var x = parseFloat(this._header.ElementSpacing[1], 10);
    var y = parseFloat(this._header.ElementSpacing[0], 10);
    var z = parseFloat(this._header.ElementSpacing[2], 10);
    return [x, y, z];
  };

  ParsersMHD.prototype.imageOrientation = function imageOrientation() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var invertX = this._header.AnatomicalOrientation.match(/L/) ? -1 : 1;
    var invertY = this._header.AnatomicalOrientation.match(/P/) ? -1 : 1;

    var x = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](parseFloat(this._header.TransformMatrix[0]) * invertX, parseFloat(this._header.TransformMatrix[1]) * invertY, parseFloat(this._header.TransformMatrix[2]));
    x.normalize();

    var y = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](parseFloat(this._header.TransformMatrix[3]) * invertX, parseFloat(this._header.TransformMatrix[4]) * invertY, parseFloat(this._header.TransformMatrix[5]));
    y.normalize();

    return [x.x, x.y, x.z, y.x, y.y, y.z];
  };

  ParsersMHD.prototype.imagePosition = function imagePosition() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return [parseFloat(this._header.Offset[0]), parseFloat(this._header.Offset[1]), parseFloat(this._header.Offset[2])];
  };

  ParsersMHD.prototype.extractPixelData = function extractPixelData() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._decompressUncompressed(frameIndex);
  };

  ParsersMHD.prototype._decompressUncompressed = function _decompressUncompressed() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var buffer = this._buffer;
    var numberOfChannels = this.numberOfChannels();
    var numPixels = this.rows(frameIndex) * this.columns(frameIndex) * numberOfChannels;
    if (!this.rightHanded()) {
      frameIndex = this.numberOfFrames() - 1 - frameIndex;
    }
    var frameOffset = frameIndex * numPixels;

    if (this._header.ElementType === 'MET_CHAR') {
      return new Int8Array(buffer, frameOffset, numPixels);
    } else if (this._header.ElementType === 'MET_UCHAR') {
      return new Uint8Array(buffer, frameOffset, numPixels);
    } else if (this._header.ElementType === 'MET_SHORT') {
      frameOffset = frameOffset * 2;
      return new Int16Array(buffer, frameOffset, numPixels);
    } else if (this._header.ElementType === 'MET_USHORT') {
      frameOffset = frameOffset * 2;
      return new Uint16Array(buffer, frameOffset, numPixels);
    } else if (this._header.ElementType === 'MET_INT') {
      frameOffset = frameOffset * 4;
      return new Int32Array(buffer, frameOffset, numPixels);
    } else if (this._header.ElementType === 'MET_UINT') {
      frameOffset = frameOffset * 4;
      return new Uint32Array(buffer, frameOffset, numPixels);
    } else if (this._header.ElementType === 'MET_FLOAT') {
      frameOffset = frameOffset * 4;
      return new Float32Array(buffer, frameOffset, numPixels);
    }
  };

  return ParsersMHD;
}(_parsers_volume__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (ParsersMHD);

/***/ }),

/***/ "./src/parsers/parsers.nifti.js":
/*!**************************************!*\
  !*** ./src/parsers/parsers.nifti.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _parsers_volume__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers.volume */ "./src/parsers/parsers.volume.js");
/* harmony import */ var nifti_reader_js_src_nifti__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nifti-reader-js/src/nifti */ "./node_modules/nifti-reader-js/src/nifti.js");
/* harmony import */ var nifti_reader_js_src_nifti__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(nifti_reader_js_src_nifti__WEBPACK_IMPORTED_MODULE_1__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/




/**
 * @module parsers/nifti
 */

var ParsersNifti = function (_ParsersVolume) {
  _inherits(ParsersNifti, _ParsersVolume);

  function ParsersNifti(data, id) {
    _classCallCheck(this, ParsersNifti);

    /**
     * @member
     * @type {arraybuffer}
     */
    var _this = _possibleConstructorReturn(this, _ParsersVolume.call(this));

    _this._id = id;
    _this._arrayBuffer = data.buffer;
    _this._url = data.url;
    _this._dataSet = null;
    _this._niftiHeader = null;
    _this._niftiImage = null;
    _this._ordered = true;
    _this._orderedData = null;

    //
    _this._qfac = 1.0;

    if (nifti_reader_js_src_nifti__WEBPACK_IMPORTED_MODULE_1___default.a.isNIFTI(_this._arrayBuffer)) {
      _this._dataSet = nifti_reader_js_src_nifti__WEBPACK_IMPORTED_MODULE_1___default.a.readHeader(_this._arrayBuffer);
      _this._niftiImage = nifti_reader_js_src_nifti__WEBPACK_IMPORTED_MODULE_1___default.a.readImage(_this._dataSet, _this._arrayBuffer);
    } else {
      var error = new Error('parsers.nifti could not parse the file');
      throw error;
    }
    return _this;
  }

  ParsersNifti.prototype.seriesInstanceUID = function seriesInstanceUID() {
    // use filename + timestamp..?
    return this._url;
  };

  ParsersNifti.prototype.numberOfFrames = function numberOfFrames() {
    return this._dataSet.dims[3];
  };

  ParsersNifti.prototype.numberOfChannels = function numberOfChannels() {
    var numberOfChannels = 1;

    // can dims[0] >= 5 and not multi channels with RGB datatypecode?

    if (this._dataSet.dims[0] >= 5) {
      numberOfChannels = this._dataSet.dims[5];
      this._ordered = false;
    } else if (this._dataSet.datatypeCode === 128) {
      numberOfChannels = 3;
    } else if (this._dataSet.datatypeCode === 2304) {
      numberOfChannels = 4;
    }

    return numberOfChannels;
  };

  ParsersNifti.prototype.sopInstanceUID = function sopInstanceUID() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return frameIndex;
  };

  ParsersNifti.prototype.rows = function rows() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._dataSet.dims[2];
  };

  ParsersNifti.prototype.columns = function columns() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._dataSet.dims[1];
  };

  ParsersNifti.prototype.pixelType = function pixelType() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // papaya.volume.nifti.NIFTI_TYPE_UINT8           = 2;
    // papaya.volume.nifti.NIFTI_TYPE_INT16           = 4;
    // papaya.volume.nifti.NIFTI_TYPE_INT32           = 8;
    // papaya.volume.nifti.NIFTI_TYPE_FLOAT32        = 16;
    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX64      = 32;
    // papaya.volume.nifti.NIFTI_TYPE_FLOAT64        = 64;
    // papaya.volume.nifti.NIFTI_TYPE_RGB24         = 128;
    // papaya.volume.nifti.NIFTI_TYPE_INT8          = 256;
    // papaya.volume.nifti.NIFTI_TYPE_UINT16        = 512;
    // papaya.volume.nifti.NIFTI_TYPE_UINT32        = 768;
    // papaya.volume.nifti.NIFTI_TYPE_INT64        = 1024;
    // papaya.volume.nifti.NIFTI_TYPE_UINT64       = 1280;
    // papaya.volume.nifti.NIFTI_TYPE_FLOAT128     = 1536;
    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX128   = 1792;
    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX256   = 2048;

    // 0 integer, 1 float

    var pixelType = 0;
    if (this._dataSet.datatypeCode === 16 || this._dataSet.datatypeCode === 64 || this._dataSet.datatypeCode === 1536) {
      pixelType = 1;
    }
    return pixelType;
  };

  ParsersNifti.prototype.bitsAllocated = function bitsAllocated() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._dataSet.numBitsPerVoxel;
  };

  ParsersNifti.prototype.pixelSpacing = function pixelSpacing() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return [this._dataSet.pixDims[1], this._dataSet.pixDims[2], this._dataSet.pixDims[3]];
  };

  ParsersNifti.prototype.sliceThickness = function sliceThickness() {
    // should be a string...
    return null; // this._dataSet.pixDims[3].toString();
  };

  ParsersNifti.prototype.imageOrientation = function imageOrientation() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h
    // http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c
    if (this._dataSet.qform_code > 0) {
      // METHOD 2 (used when qform_code > 0, which should be the "normal" case):
      // ---------------------------------------------------------------------
      // The (x,y,z) coordinates are given by the pixdim[] scales, a rotation
      // matrix, and a shift.  This method is intended to represent
      // "scanner-anatomical" coordinates, which are often embedded in the
      // image header (e.g., DICOM fields (0020,0032), (0020,0037), (0028,0030),
      // and (0018,0050)), and represent the nominal orientation and location of
      // the data.  This method can also be used to represent "aligned"
      // coordinates, which would typically result from some post-acquisition
      // alignment of the volume to a standard orientation (e.g., the same
      // subject on another day, or a rigid rotation to true anatomical
      // orientation from the tilted position of the subject in the scanner).
      // The formula for (x,y,z) in terms of header parameters and (i,j,k) is:

      //   [ x ]   [ R11 R12 R13 ] [        pixdim[1] * i ]   [ qoffset_x ]
      //   [ y ] = [ R21 R22 R23 ] [        pixdim[2] * j ] + [ qoffset_y ]
      //   [ z ]   [ R31 R32 R33 ] [ qfac * pixdim[3] * k ]   [ qoffset_z ]

      // The qoffset_* shifts are in the NIFTI-1 header.  Note that the center
      // of the (i,j,k)=(0,0,0) voxel (first value in the dataset array) is
      // just (x,y,z)=(qoffset_x,qoffset_y,qoffset_z).

      // The rotation matrix R is calculated from the quatern_* parameters.
      // This calculation is described below.

      // The scaling factor qfac is either 1 or -1.  The rotation matrix R
      // defined by the quaternion parameters is "proper" (has determinant 1).
      // This may not fit the needs of the data; for example, if the image
      // grid is
      //   i increases from Left-to-Right
      //   j increases from Anterior-to-Posterior
      //   k increases from Inferior-to-Superior
      // Then (i,j,k) is a left-handed triple.  In this example, if qfac=1,
      // the R matrix would have to be

      //   [  1   0   0 ]
      //   [  0  -1   0 ]  which is "improper" (determinant = -1).
      //   [  0   0   1 ]

      // If we set qfac=-1, then the R matrix would be

      //   [  1   0   0 ]
      //   [  0  -1   0 ]  which is proper.
      //   [  0   0  -1 ]

      // This R matrix is represented by quaternion [a,b,c,d] = [0,1,0,0]
      // (which encodes a 180 degree rotation about the x-axis).
      // https://github.com/Kitware/ITK/blob/master/Modules/IO/NIFTI/src/itkNiftiImageIO.cxx
      var a = 0.0;
      var b = this._dataSet.quatern_b;
      var c = this._dataSet.quatern_c;
      var d = this._dataSet.quatern_d;
      // compute a
      a = 1.0 - (b * b + c * c + d * d);
      if (a < 0.0000001) {
        /* special case */

        a = 1.0 / Math.sqrt(b * b + c * c + d * d);
        b *= a;
        c *= a;
        d *= a; /* normalize (b,c,d) vector */
        a = 0.0; /* a = 0 ==> 180 degree rotation */
      } else {
        a = Math.sqrt(a); /* angle = 2*arccos(a) */
      }

      if (this._dataSet.pixDims[0] < 0.0) {
        this._rightHanded = false;
      }

      return [-(a * a + b * b - c * c - d * d), -2 * (b * c + a * d), 2 * (b * d - a * c), -2 * (b * c - a * d), -(a * a + c * c - b * b - d * d), 2 * (c * d + a * b)];
    } else if (this._dataSet.sform_code > 0) {
      // METHOD 3 (used when sform_code > 0):
      // -----------------------------------
      // The (x,y,z) coordinates are given by a general affine transformation
      // of the (i,j,k) indexes:

      //   x = srow_x[0] * i + srow_x[1] * j + srow_x[2] * k + srow_x[3]
      //   y = srow_y[0] * i + srow_y[1] * j + srow_y[2] * k + srow_y[3]
      //   z = srow_z[0] * i + srow_z[1] * j + srow_z[2] * k + srow_z[3]

      // The srow_* vectors are in the NIFTI_1 header.  Note that no use is
      // made of pixdim[] in this method.
      var rowX = [-this._dataSet.affine[0][0], -this._dataSet.affine[0][1], this._dataSet.affine[0][2]];
      var rowY = [-this._dataSet.affine[1][0], -this._dataSet.affine[1][1], this._dataSet.affine[0][2]];
      return [].concat(rowX, rowY);
    } else if (this._dataSet.qform_code === 0) {
      // METHOD 1 (the "old" way, used only when qform_code = 0):
      // -------------------------------------------------------
      // The coordinate mapping from (i,j,k) to (x,y,z) is the ANALYZE
      // 7.5 way.  This is a simple scaling relationship:
      //   x = pixdim[1] * i
      //   y = pixdim[2] * j
      //   z = pixdim[3] * k
      // No particular spatial orientation is attached to these (x,y,z)
      // coordinates.  (NIFTI-1 does not have the ANALYZE 7.5 orient field,
      // which is not general and is often not set properly.)  This method
      // is not recommended, and is present mainly for compatibility with
      // ANALYZE 7.5 files.
    }
    return [1, 0, 0, 0, 1, 0];
  };

  ParsersNifti.prototype.imagePosition = function imagePosition() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // qoffset is RAS
    return [-this._dataSet.qoffset_x, -this._dataSet.qoffset_y, this._dataSet.qoffset_z];
  };

  ParsersNifti.prototype.dimensionIndexValues = function dimensionIndexValues() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return null;
  };

  ParsersNifti.prototype.instanceNumber = function instanceNumber() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return frameIndex;
  };

  ParsersNifti.prototype.windowCenter = function windowCenter() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // calc min and calc max
    return null;
  };

  ParsersNifti.prototype.windowWidth = function windowWidth() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // calc min and calc max
    return null;
  };

  ParsersNifti.prototype.rescaleSlope = function rescaleSlope() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._dataSet.scl_slope;
  };

  ParsersNifti.prototype.rescaleIntercept = function rescaleIntercept() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._dataSet.scl_inter;
  };

  ParsersNifti.prototype.extractPixelData = function extractPixelData() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._decompressUncompressed(frameIndex);
  };

  ParsersNifti.prototype._decompressUncompressed = function _decompressUncompressed() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // papaya.volume.nifti.NIFTI_TYPE_UINT8           = 2;
    // papaya.volume.nifti.NIFTI_TYPE_INT16           = 4;
    // papaya.volume.nifti.NIFTI_TYPE_INT32           = 8;
    // papaya.volume.nifti.NIFTI_TYPE_FLOAT32        = 16;
    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX64      = 32;
    // papaya.volume.nifti.NIFTI_TYPE_FLOAT64        = 64;
    // papaya.volume.nifti.NIFTI_TYPE_RGB24         = 128;
    // papaya.volume.nifti.NIFTI_TYPE_INT8          = 256;
    // papaya.volume.nifti.NIFTI_TYPE_UINT16        = 512;
    // papaya.volume.nifti.NIFTI_TYPE_UINT32        = 768;
    // papaya.volume.nifti.NIFTI_TYPE_INT64        = 1024;
    // papaya.volume.nifti.NIFTI_TYPE_UINT64       = 1280;
    // papaya.volume.nifti.NIFTI_TYPE_FLOAT128     = 1536;
    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX128   = 1792;
    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX256   = 2048;

    var numberOfChannels = this.numberOfChannels();
    var numPixels = this.rows(frameIndex) * this.columns(frameIndex) * numberOfChannels;
    // if( !this.rightHanded() ){
    //   frameIndex = this.numberOfFrames() - 1 - frameIndex;
    // }
    var frameOffset = frameIndex * numPixels;
    var buffer = this._niftiImage;

    // use bits allocated && pixel reprensentation too
    if (!this._ordered && this._orderedData === null) {
      // order then
      this._reorderData();
    }

    if (this._orderedData !== null) {
      // just a slice...
      return this._orderedData.slice(frameOffset, frameOffset + numPixels);
    } else if (this._dataSet.datatypeCode === 2) {
      // unsigned int 8 bit
      return new Uint8Array(buffer, frameOffset, numPixels);
    } else if (this._dataSet.datatypeCode === 256) {
      // signed int 8 bit
      return new Int8Array(buffer, frameOffset, numPixels);
    } else if (this._dataSet.datatypeCode === 512) {
      // unsigned int 16 bit
      frameOffset = frameOffset * 2;
      return new Uint16Array(buffer, frameOffset, numPixels);
    } else if (this._dataSet.datatypeCode === 4) {
      // signed int 16 bit
      frameOffset = frameOffset * 2;
      return new Int16Array(buffer, frameOffset, numPixels);
    } else if (this._dataSet.datatypeCode === 8) {
      // signed int 32 bit
      frameOffset = frameOffset * 4;
      return new Int32Array(buffer, frameOffset, numPixels);
    } else if (this._dataSet.datatypeCode === 16) {
      // signed float 32 bit
      frameOffset = frameOffset * 4;
      var data = new Float32Array(buffer, frameOffset, numPixels);
      for (var i = 0; i < data.length; i++) {
        if (data[i] === Infinity || data[i] === -Infinity) {
          data[i] = 0;
        }
      }
      return data;
    } else {
      window.console.warn('Unknown data type: datatypeCode : ' + this._dataSet.datatypeCode);
    }
  };

  ParsersNifti.prototype._reorderData = function _reorderData() {
    var numberOfChannels = this.numberOfChannels();
    var numPixels = this.rows() * this.columns() * numberOfChannels;
    var buffer = this._niftiImage;

    var totalNumPixels = numPixels * this.numberOfFrames();
    var tmp = null;
    this._orderedData = null;

    if (this._dataSet.datatypeCode === 2) {
      // unsigned 8 bit
      tmp = new Uint8Array(buffer, 0, totalNumPixels);
      this._orderedData = new Uint8Array(tmp.length);
    } else if (this._dataSet.datatypeCode === 256) {
      // signed 8 bit
      tmp = new Int8Array(buffer, 0, totalNumPixels);
      this._orderedData = new Int8Array(tmp.length);
    } else if (this._dataSet.datatypeCode === 512) {
      tmp = new Uint16Array(buffer, 0, totalNumPixels);
      this._orderedData = new Uint16Array(tmp.length);
    } else if (this._dataSet.datatypeCode === 4) {
      tmp = new Int16Array(buffer, 0, totalNumPixels);
      this._orderedData = new Int16Array(tmp.length);
    } else if (this._dataSet.datatypeCode === 16) {
      tmp = new Float32Array(buffer, 0, totalNumPixels);
      this._orderedData = new Float32Array(tmp.length);
    }

    // re-order pixels...
    var numPixels2 = tmp.length / 3;
    var rgbaIndex = 0;
    var rIndex = 0;
    var gIndex = numPixels2;
    var bIndex = numPixels2 * 2;

    for (var i = 0; i < numPixels2; i++) {
      this._orderedData[rgbaIndex++] = tmp[rIndex++]; // red
      this._orderedData[rgbaIndex++] = tmp[gIndex++]; // green
      this._orderedData[rgbaIndex++] = tmp[bIndex++]; // blue
    }

    this._ordered = true;
  };

  return ParsersNifti;
}(_parsers_volume__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (ParsersNifti);

/***/ }),

/***/ "./src/parsers/parsers.nrrd.js":
/*!*************************************!*\
  !*** ./src/parsers/parsers.nrrd.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _parsers_volume__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers.volume */ "./src/parsers/parsers.volume.js");
/* harmony import */ var three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/src/math/Vector3 */ "./node_modules/three/src/math/Vector3.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** * Imports ***/



var pako = __webpack_require__(/*! pako */ "./node_modules/pako/index.js");
var NrrdReader = __webpack_require__(/*! nrrd-js */ "./node_modules/nrrd-js/nrrd.js");
/**
 * @module parsers/nifti
 */

var ParsersNifti = function (_ParsersVolume) {
  _inherits(ParsersNifti, _ParsersVolume);

  /**
   * Constructor
   *
   * @param {*} data
   * @param {*} id
   */
  function ParsersNifti(data, id) {
    _classCallCheck(this, ParsersNifti);

    /**
     * @member
     * @type {arraybuffer}
     */
    var _this = _possibleConstructorReturn(this, _ParsersVolume.call(this));

    _this._id = id;
    _this._arrayBuffer = data.buffer;
    _this._url = data.url;
    _this._dataSet = null;
    _this._unpackedData = null;

    try {
      _this._dataSet = NrrdReader.parse(_this._arrayBuffer);
    } catch (error) {
      window.console.log('ooops... :(');
    }
    return _this;
  }

  /**
   * Is the data right-handed
   *
   * @return {*}
   */


  ParsersNifti.prototype.rightHanded = function rightHanded() {
    if (this._dataSet.space.match(/^right-anterior-superior/) || this._dataSet.space.match(/^left-posterior-superior/)) {
      this._rightHanded = true;
    } else {
      this._rightHanded = false;
    }

    return this._rightHanded;
  };

  /**
   * Series instance UID
   *
   * @return {*}
   */


  ParsersNifti.prototype.seriesInstanceUID = function seriesInstanceUID() {
    // use filename + timestamp..?
    return this._url;
  };

  /**
   * Number of frames
   *
   * @return {*}
   */


  ParsersNifti.prototype.numberOfFrames = function numberOfFrames() {
    return this._dataSet.sizes[2];
  };

  /**
   * Number of channels
   *
   * @return {*}
   */


  ParsersNifti.prototype.numberOfChannels = function numberOfChannels() {
    return 1;
  };

  /**
   * SOP instance UID
   *
   * @param {*} frameIndex
   *
   * @return {*}
   */


  ParsersNifti.prototype.sopInstanceUID = function sopInstanceUID() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return frameIndex;
  };

  /**
   * Rows
   *
   * @param {*} frameIndex
   *
   * @return {*}
   */


  ParsersNifti.prototype.rows = function rows() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._dataSet.sizes[1];
  };

  /**
   * Columns
   *
   * @param {*} frameIndex
   *
   * @return {*}
   */


  ParsersNifti.prototype.columns = function columns() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._dataSet.sizes[0];
  };

  /**
   * Pixel type
   *
   * @param {*} frameIndex
   *
   * @return {*}
   */


  ParsersNifti.prototype.pixelType = function pixelType() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    // 0 - int
    // 1 - float
    var pixelType = 0;
    if (this._dataSet.type === 'float') {
      pixelType = 1;
    }
    return pixelType;
  };

  /**
   * Bits allocated
   *
   * @param {*} frameIndex
   *
   * @return {*}
   */


  ParsersNifti.prototype.bitsAllocated = function bitsAllocated() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var bitsAllocated = 1;

    if (this._dataSet.type === 'int8' || this._dataSet.type === 'uint8' || this._dataSet.type === 'char') {
      bitsAllocated = 8;
    } else if (this._dataSet.type === 'int16' || this._dataSet.type === 'uint16' || this._dataSet.type === 'short') {
      bitsAllocated = 16;
    } else if (this._dataSet.type === 'int32' || this._dataSet.type === 'uint32' || this._dataSet.type === 'float') {
      bitsAllocated = 32;
    }

    return bitsAllocated;
  };

  /**
   * Pixel spacing
   *
   * @param {*} frameIndex
   *
   * @return {*}
   */


  ParsersNifti.prototype.pixelSpacing = function pixelSpacing() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var x = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](this._dataSet.spaceDirections[0][0], this._dataSet.spaceDirections[0][1], this._dataSet.spaceDirections[0][2]);

    var y = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](this._dataSet.spaceDirections[1][0], this._dataSet.spaceDirections[1][1], this._dataSet.spaceDirections[1][2]);

    var z = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](this._dataSet.spaceDirections[2][0], this._dataSet.spaceDirections[2][1], this._dataSet.spaceDirections[2][2]);

    return [x.length(), y.length(), z.length()];
  };

  /**
   * Image orientation
   *
   * @param {*} frameIndex
   *
   * @return {*}
   */


  ParsersNifti.prototype.imageOrientation = function imageOrientation() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var invertX = this._dataSet.space.match(/right/) ? -1 : 1;
    var invertY = this._dataSet.space.match(/anterior/) ? -1 : 1;

    var x = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](this._dataSet.spaceDirections[0][0] * invertX, this._dataSet.spaceDirections[0][1] * invertY, this._dataSet.spaceDirections[0][2]);
    x.normalize();

    var y = new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](this._dataSet.spaceDirections[1][0] * invertX, this._dataSet.spaceDirections[1][1] * invertY, this._dataSet.spaceDirections[1][2]);
    y.normalize();

    return [x.x, x.y, x.z, y.x, y.y, y.z];
  };

  /**
   * Image position
   *
   * @param {*} frameIndex
   *
   * @return {*}
   */


  ParsersNifti.prototype.imagePosition = function imagePosition() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return [this._dataSet.spaceOrigin[0], this._dataSet.spaceOrigin[1], this._dataSet.spaceOrigin[2]];
  };

  /**
   * Extract pixel data ffrom array buffer
   *
   * @param {*} frameIndex
   *
   * @return {*}
   */


  ParsersNifti.prototype.extractPixelData = function extractPixelData() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return this._decompressUncompressed(frameIndex);
  };

  /**
   * Decompress data from uncompressed array buffer
   *
   * @param {*} frameIndex
   *
   * @return {*}
   */


  ParsersNifti.prototype._decompressUncompressed = function _decompressUncompressed() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var buffer = this._dataSet.buffer;
    var numberOfChannels = this.numberOfChannels();
    var numPixels = this.rows(frameIndex) * this.columns(frameIndex) * numberOfChannels;
    if (!this.rightHanded()) {
      frameIndex = this.numberOfFrames() - 1 - frameIndex;
    }
    var frameOffset = frameIndex * numPixels;

    // unpack data if needed
    if (this._unpackedData === null && this._dataSet.encoding === 'gzip') {
      var unpackedData = pako.inflate(this._dataSet.buffer);
      this._unpackedData = unpackedData.buffer;
      buffer = this._unpackedData;
    } else if (this._dataSet.encoding === 'gzip') {
      buffer = this._unpackedData;
    }

    if (this._dataSet.type === 'int8' || this._dataSet.type === 'char') {
      return new Int8Array(buffer, frameOffset, numPixels);
    } else if (this._dataSet.type === 'uint8') {
      return new Uint8Array(buffer, frameOffset, numPixels);
    } else if (this._dataSet.type === 'int16' || this._dataSet.type === 'short') {
      frameOffset = frameOffset * 2;
      return new Int16Array(buffer, frameOffset, numPixels);
    } else if (this._dataSet.type === 'uint16') {
      frameOffset = frameOffset * 2;
      return new Uint16Array(buffer, frameOffset, numPixels);
    } else if (this._dataSet.type === 'int32') {
      frameOffset = frameOffset * 4;
      return new Int32Array(buffer, frameOffset, numPixels);
    } else if (this._dataSet.type === 'uint32') {
      frameOffset = frameOffset * 4;
      return new Uint32Array(buffer, frameOffset, numPixels);
    } else if (this._dataSet.type === 'float') {
      frameOffset = frameOffset * 4;
      return new Float32Array(buffer, frameOffset, numPixels);
    }
  };

  return ParsersNifti;
}(_parsers_volume__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (ParsersNifti);

/***/ }),

/***/ "./src/parsers/parsers.volume.js":
/*!***************************************!*\
  !*** ./src/parsers/parsers.volume.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @module parsers/volume
 */
var ParsersVolume = function () {
  function ParsersVolume() {
    _classCallCheck(this, ParsersVolume);

    this._rightHanded = true;
  }

  ParsersVolume.prototype.pixelRepresentation = function pixelRepresentation() {
    return 0;
  };

  ParsersVolume.prototype.pixelPaddingValue = function pixelPaddingValue() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return null;
  };

  ParsersVolume.prototype.modality = function modality() {
    return 'unknown';
  };

  ParsersVolume.prototype.segmentationType = function segmentationType() {
    return 'unknown';
  };

  ParsersVolume.prototype.segmentationSegments = function segmentationSegments() {
    return [];
  };

  ParsersVolume.prototype.referencedSegmentNumber = function referencedSegmentNumber(frameIndex) {
    return -1;
  };

  ParsersVolume.prototype.rightHanded = function rightHanded() {
    return this._rightHanded;
  };

  ParsersVolume.prototype.spacingBetweenSlices = function spacingBetweenSlices() {
    return null;
  };

  ParsersVolume.prototype.numberOfChannels = function numberOfChannels() {
    return 1;
  };

  ParsersVolume.prototype.sliceThickness = function sliceThickness() {
    return null;
  };

  ParsersVolume.prototype.dimensionIndexValues = function dimensionIndexValues() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return null;
  };

  ParsersVolume.prototype.instanceNumber = function instanceNumber() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return frameIndex;
  };

  ParsersVolume.prototype.windowCenter = function windowCenter() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return null;
  };

  ParsersVolume.prototype.windowWidth = function windowWidth() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return null;
  };

  ParsersVolume.prototype.rescaleSlope = function rescaleSlope() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return 1;
  };

  ParsersVolume.prototype.rescaleIntercept = function rescaleIntercept() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return 0;
  };

  ParsersVolume.prototype.ultrasoundRegions = function ultrasoundRegions() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return [];
  };

  ParsersVolume.prototype.frameTime = function frameTime() {
    var frameIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    return null;
  };

  ParsersVolume.prototype._decompressUncompressed = function _decompressUncompressed() {};

  // http://stackoverflow.com/questions/5320439/how-do-i-swap-endian-ness-byte-order-of-a-variable-in-javascript


  ParsersVolume.prototype._swap16 = function _swap16(val) {
    return (val & 0xff) << 8 | val >> 8 & 0xff;
  };

  ParsersVolume.prototype._swap32 = function _swap32(val) {
    return (val & 0xff) << 24 | (val & 0xff00) << 8 | val >> 8 & 0xff00 | val >> 24 & 0xff;
  };

  ParsersVolume.prototype.invert = function invert() {
    return false;
  };

  /**
   * Get the transfer syntax UID.
   * @return {*}
   */


  ParsersVolume.prototype.transferSyntaxUID = function transferSyntaxUID() {
    return 'no value provided';
  };

  /**
   * Get the study date.
   * @return {*}
   */


  ParsersVolume.prototype.studyDate = function studyDate() {
    return 'no value provided';
  };

  /**
   * Get the study desciption.
   * @return {*}
   */


  ParsersVolume.prototype.studyDescription = function studyDescription() {
    return 'no value provided';
  };

  /**
   * Get the series date.
   * @return {*}
   */


  ParsersVolume.prototype.seriesDate = function seriesDate() {
    return 'no value provided';
  };

  /**
   * Get the series desciption.
   * @return {*}
   */


  ParsersVolume.prototype.seriesDescription = function seriesDescription() {
    return 'no value provided';
  };

  /**
   * Get the patient ID.
   * @return {*}
   */


  ParsersVolume.prototype.patientID = function patientID() {
    return 'no value provided';
  };

  /**
   * Get the patient name.
   * @return {*}
   */


  ParsersVolume.prototype.patientName = function patientName() {
    return 'no value provided';
  };

  /**
   * Get the patient age.
   * @return {*}
   */


  ParsersVolume.prototype.patientAge = function patientAge() {
    return 'no value provided';
  };

  /**
   * Get the patient birthdate.
   * @return {*}
   */


  ParsersVolume.prototype.patientBirthdate = function patientBirthdate() {
    return 'no value provided';
  };

  /**
   * Get the patient sex.
   * @return {*}
   */


  ParsersVolume.prototype.patientSex = function patientSex() {
    return 'no value provided';
  };

  /**
   * Get min/max values in array
   *
   * @param {*} pixelData
   *
   * @return {*}
   */


  ParsersVolume.prototype.minMaxPixelData = function minMaxPixelData() {
    var pixelData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var minMax = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];
    var numPixels = pixelData.length;
    for (var index = 0; index < numPixels; index++) {
      var spv = pixelData[index];
      minMax[0] = Math.min(minMax[0], spv);
      minMax[1] = Math.max(minMax[1], spv);
    }

    return minMax;
  };

  return ParsersVolume;
}();

/* harmony default export */ __webpack_exports__["default"] = (ParsersVolume);

/***/ }),

/***/ "./src/presets/presets.js":
/*!********************************!*\
  !*** ./src/presets/presets.js ***!
  \********************************/
/*! exports provided: SegmentationPreset */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _presets_segmentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./presets.segmentation */ "./src/presets/presets.segmentation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SegmentationPreset", function() { return _presets_segmentation__WEBPACK_IMPORTED_MODULE_0__["default"]; });




/***/ }),

/***/ "./src/presets/presets.segmentation.freesurfer.js":
/*!********************************************************!*\
  !*** ./src/presets/presets.segmentation.freesurfer.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var segmentationFs = {
  0: { color: [0, 0, 0], opacity: 0, label: 'Unknown' },
  1: { color: [70, 130, 180], opacity: 1, label: 'Left-Cerebral-Exterior' },
  2: { color: [245, 245, 245], opacity: 1, label: 'Left-Cerebral-White-Matter' },
  3: { color: [205, 62, 78], opacity: 1, label: 'Left-Cerebral-Cortex' },
  4: { color: [120, 18, 134], opacity: 1, label: 'Left-Lateral-Ventricle' },
  5: { color: [196, 58, 250], opacity: 1, label: 'Left-Inf-Lat-Vent' },
  6: { color: [0, 148, 0], opacity: 1, label: 'Left-Cerebellum-Exterior' },
  7: { color: [220, 248, 164], opacity: 1, label: 'Left-Cerebellum-White-Matter' },
  8: { color: [230, 148, 34], opacity: 1, label: 'Left-Cerebellum-Cortex' },
  9: { color: [0, 118, 14], opacity: 1, label: 'Left-Thalamus' },
  10: { color: [0, 118, 14], opacity: 1, label: 'Left-Thalamus-Proper' },
  11: { color: [122, 186, 220], opacity: 1, label: 'Left-Caudate' },
  12: { color: [236, 13, 176], opacity: 1, label: 'Left-Putamen' },
  13: { color: [12, 48, 255], opacity: 1, label: 'Left-Pallidum' },
  14: { color: [204, 182, 142], opacity: 1, label: '3rd-Ventricle' },
  15: { color: [42, 204, 164], opacity: 1, label: '4th-Ventricle' },
  16: { color: [119, 159, 176], opacity: 1, label: 'Brain-Stem' },
  17: { color: [220, 216, 20], opacity: 1, label: 'Left-Hippocampus' },
  18: { color: [103, 255, 255], opacity: 1, label: 'Left-Amygdala' },
  19: { color: [80, 196, 98], opacity: 1, label: 'Left-Insula' },
  20: { color: [60, 58, 210], opacity: 1, label: 'Left-Operculum' },
  21: { color: [60, 58, 210], opacity: 1, label: 'Line-1' },
  22: { color: [60, 58, 210], opacity: 1, label: 'Line-2' },
  23: { color: [60, 58, 210], opacity: 1, label: 'Line-3' },
  24: { color: [60, 60, 60], opacity: 1, label: 'CSF' },
  25: { color: [255, 165, 0], opacity: 1, label: 'Left-Lesion' },
  26: { color: [255, 165, 0], opacity: 1, label: 'Left-Accumbens-area' },
  27: { color: [0, 255, 127], opacity: 1, label: 'Left-Substancia-Nigra' },
  28: { color: [165, 42, 42], opacity: 1, label: 'Left-VentralDC' },
  29: { color: [135, 206, 235], opacity: 1, label: 'Left-undetermined' },
  30: { color: [160, 32, 240], opacity: 1, label: 'Left-vessel' },
  31: { color: [0, 200, 200], opacity: 1, label: 'Left-choroid-plexus' },
  32: { color: [100, 50, 100], opacity: 1, label: 'Left-F3orb' },
  33: { color: [135, 50, 74], opacity: 1, label: 'Left-lOg' },
  34: { color: [122, 135, 50], opacity: 1, label: 'Left-aOg' },
  35: { color: [51, 50, 135], opacity: 1, label: 'Left-mOg' },
  36: { color: [74, 155, 60], opacity: 1, label: 'Left-pOg' },
  37: { color: [120, 62, 43], opacity: 1, label: 'Left-Stellate' },
  38: { color: [74, 155, 60], opacity: 1, label: 'Left-Porg' },
  39: { color: [122, 135, 50], opacity: 1, label: 'Left-Aorg' },
  40: { color: [70, 130, 180], opacity: 1, label: 'Right-Cerebral-Exterior' },
  41: { color: [245, 245, 245], opacity: 1, label: 'Right-Cerebral-White-Matter' },
  42: { color: [205, 62, 78], opacity: 1, label: 'Right-Cerebral-Cortex' },
  43: { color: [120, 18, 134], opacity: 1, label: 'Right-Lateral-Ventricle' },
  44: { color: [196, 58, 250], opacity: 1, label: 'Right-Inf-Lat-Vent' },
  45: { color: [0, 148, 0], opacity: 1, label: 'Right-Cerebellum-Exterior' },
  46: { color: [220, 248, 164], opacity: 1, label: 'Right-Cerebellum-White-Matter' },
  47: { color: [230, 148, 34], opacity: 1, label: 'Right-Cerebellum-Cortex' },
  48: { color: [0, 118, 14], opacity: 1, label: 'Right-Thalamus' },
  49: { color: [0, 118, 14], opacity: 1, label: 'Right-Thalamus-Proper' },
  50: { color: [122, 186, 220], opacity: 1, label: 'Right-Caudate' },
  51: { color: [236, 13, 176], opacity: 1, label: 'Right-Putamen' },
  52: { color: [13, 48, 255], opacity: 1, label: 'Right-Pallidum' },
  53: { color: [220, 216, 20], opacity: 1, label: 'Right-Hippocampus' },
  54: { color: [103, 255, 255], opacity: 1, label: 'Right-Amygdala' },
  55: { color: [80, 196, 98], opacity: 1, label: 'Right-Insula' },
  56: { color: [60, 58, 210], opacity: 1, label: 'Right-Operculum' },
  57: { color: [255, 165, 0], opacity: 1, label: 'Right-Lesion' },
  58: { color: [255, 165, 0], opacity: 1, label: 'Right-Accumbens-area' },
  59: { color: [0, 255, 127], opacity: 1, label: 'Right-Substancia-Nigra' },
  60: { color: [165, 42, 42], opacity: 1, label: 'Right-VentralDC' },
  61: { color: [135, 206, 235], opacity: 1, label: 'Right-undetermined' },
  62: { color: [160, 32, 240], opacity: 1, label: 'Right-vessel' },
  63: { color: [0, 200, 221], opacity: 1, label: 'Right-choroid-plexus' },
  64: { color: [100, 50, 100], opacity: 1, label: 'Right-F3orb' },
  65: { color: [135, 50, 74], opacity: 1, label: 'Right-lOg' },
  66: { color: [122, 135, 50], opacity: 1, label: 'Right-aOg' },
  67: { color: [51, 50, 135], opacity: 1, label: 'Right-mOg' },
  68: { color: [74, 155, 60], opacity: 1, label: 'Right-pOg' },
  69: { color: [120, 62, 43], opacity: 1, label: 'Right-Stellate' },
  70: { color: [74, 155, 60], opacity: 1, label: 'Right-Porg' },
  71: { color: [122, 135, 50], opacity: 1, label: 'Right-Aorg' },
  72: { color: [120, 190, 150], opacity: 1, label: '5th-Ventricle' },
  73: { color: [122, 135, 50], opacity: 1, label: 'Left-Interior' },
  74: { color: [122, 135, 50], opacity: 1, label: 'Right-Interior' },
  77: { color: [200, 70, 255], opacity: 1, label: 'WM-hypointensities' },
  78: { color: [255, 148, 10], opacity: 1, label: 'Left-WM-hypointensities' },
  79: { color: [255, 148, 10], opacity: 1, label: 'Right-WM-hypointensities' },
  80: { color: [164, 108, 226], opacity: 1, label: 'non-WM-hypointensities' },
  81: { color: [164, 108, 226], opacity: 1, label: 'Left-non-WM-hypointensities' },
  82: { color: [164, 108, 226], opacity: 1, label: 'Right-non-WM-hypointensities' },
  83: { color: [255, 218, 185], opacity: 1, label: 'Left-F1' },
  84: { color: [255, 218, 185], opacity: 1, label: 'Right-F1' },
  85: { color: [234, 169, 30], opacity: 1, label: 'Optic-Chiasm' },
  192: { color: [250, 255, 50], opacity: 1, label: 'Corpus_Callosum' },
  86: { color: [200, 120, 255], opacity: 1, label: 'Left_future_WMSA' },
  87: { color: [200, 121, 255], opacity: 1, label: 'Right_future_WMSA' },
  88: { color: [200, 122, 255], opacity: 1, label: 'future_WMSA' },
  96: { color: [205, 10, 125], opacity: 1, label: 'Left-Amygdala-Anterior' },
  97: { color: [205, 10, 125], opacity: 1, label: 'Right-Amygdala-Anterior' },
  98: { color: [160, 32, 240], opacity: 1, label: 'Dura' },
  100: { color: [124, 140, 178], opacity: 1, label: 'Left-wm-intensity-abnormality' },
  101: { color: [125, 140, 178], opacity: 1, label: 'Left-caudate-intensity-abnormality' },
  102: { color: [126, 140, 178], opacity: 1, label: 'Left-putamen-intensity-abnormality' },
  103: { color: [127, 140, 178], opacity: 1, label: 'Left-accumbens-intensity-abnormality' },
  104: { color: [124, 141, 178], opacity: 1, label: 'Left-pallidum-intensity-abnormality' },
  105: { color: [124, 142, 178], opacity: 1, label: 'Left-amygdala-intensity-abnormality' },
  106: { color: [124, 143, 178], opacity: 1, label: 'Left-hippocampus-intensity-abnormality' },
  107: { color: [124, 144, 178], opacity: 1, label: 'Left-thalamus-intensity-abnormality' },
  108: { color: [124, 140, 179], opacity: 1, label: 'Left-VDC-intensity-abnormality' },
  109: { color: [124, 140, 178], opacity: 1, label: 'Right-wm-intensity-abnormality' },
  110: { color: [125, 140, 178], opacity: 1, label: 'Right-caudate-intensity-abnormality' },
  111: { color: [126, 140, 178], opacity: 1, label: 'Right-putamen-intensity-abnormality' },
  112: { color: [127, 140, 178], opacity: 1, label: 'Right-accumbens-intensity-abnormality' },
  113: { color: [124, 141, 178], opacity: 1, label: 'Right-pallidum-intensity-abnormality' },
  114: { color: [124, 142, 178], opacity: 1, label: 'Right-amygdala-intensity-abnormality' },
  115: { color: [124, 143, 178], opacity: 1, label: 'Right-hippocampus-intensity-abnormality' },
  116: { color: [124, 144, 178], opacity: 1, label: 'Right-thalamus-intensity-abnormality' },
  117: { color: [124, 140, 179], opacity: 1, label: 'Right-VDC-intensity-abnormality' },
  118: { color: [255, 20, 147], opacity: 1, label: 'Epidermis' },
  119: { color: [205, 179, 139], opacity: 1, label: 'Conn-Tissue' },
  120: { color: [238, 238, 209], opacity: 1, label: 'SC-Fat-Muscle' },
  121: { color: [200, 200, 200], opacity: 1, label: 'Cranium' },
  122: { color: [74, 255, 74], opacity: 1, label: 'CSF-SA' },
  123: { color: [238, 0, 0], opacity: 1, label: 'Muscle' },
  124: { color: [0, 0, 139], opacity: 1, label: 'Ear' },
  125: { color: [173, 255, 47], opacity: 1, label: 'Adipose' },
  126: { color: [133, 203, 229], opacity: 1, label: 'Spinal-Cord' },
  127: { color: [26, 237, 57], opacity: 1, label: 'Soft-Tissue' },
  128: { color: [34, 139, 34], opacity: 1, label: 'Nerve' },
  129: { color: [30, 144, 255], opacity: 1, label: 'Bone' },
  130: { color: [147, 19, 173], opacity: 1, label: 'Air' },
  131: { color: [238, 59, 59], opacity: 1, label: 'Orbital-Fat' },
  132: { color: [221, 39, 200], opacity: 1, label: 'Tongue' },
  133: { color: [238, 174, 238], opacity: 1, label: 'Nasal-Structures' },
  134: { color: [255, 0, 0], opacity: 1, label: 'Globe' },
  135: { color: [72, 61, 139], opacity: 1, label: 'Teeth' },
  136: { color: [21, 39, 132], opacity: 1, label: 'Left-Caudate-Putamen' },
  137: { color: [21, 39, 132], opacity: 1, label: 'Right-Caudate-Putamen' },
  138: { color: [65, 135, 20], opacity: 1, label: 'Left-Claustrum' },
  139: { color: [65, 135, 20], opacity: 1, label: 'Right-Claustrum' },
  140: { color: [134, 4, 160], opacity: 1, label: 'Cornea' },
  142: { color: [221, 226, 68], opacity: 1, label: 'Diploe' },
  143: { color: [255, 255, 254], opacity: 1, label: 'Vitreous-Humor' },
  144: { color: [52, 209, 226], opacity: 1, label: 'Lens' },
  145: { color: [239, 160, 223], opacity: 1, label: 'Aqueous-Humor' },
  146: { color: [70, 130, 180], opacity: 1, label: 'Outer-Table' },
  147: { color: [70, 130, 181], opacity: 1, label: 'Inner-Table' },
  148: { color: [139, 121, 94], opacity: 1, label: 'Periosteum' },
  149: { color: [224, 224, 224], opacity: 1, label: 'Endosteum' },
  150: { color: [255, 0, 0], opacity: 1, label: 'R-C-S' },
  151: { color: [205, 205, 0], opacity: 1, label: 'Iris' },
  152: { color: [238, 238, 209], opacity: 1, label: 'SC-Adipose-Muscle' },
  153: { color: [139, 121, 94], opacity: 1, label: 'SC-Tissue' },
  154: { color: [238, 59, 59], opacity: 1, label: 'Orbital-Adipose' },
  155: { color: [238, 59, 59], opacity: 1, label: 'Left-IntCapsule-Ant' },
  156: { color: [238, 59, 59], opacity: 1, label: 'Right-IntCapsule-Ant' },
  157: { color: [62, 10, 205], opacity: 1, label: 'Left-IntCapsule-Pos' },
  158: { color: [62, 10, 205], opacity: 1, label: 'Right-IntCapsule-Pos' },
  159: { color: [0, 118, 14], opacity: 1, label: 'Left-Cerebral-WM-unmyelinated' },
  160: { color: [0, 118, 14], opacity: 1, label: 'Right-Cerebral-WM-unmyelinated' },
  161: { color: [220, 216, 21], opacity: 1, label: 'Left-Cerebral-WM-myelinated' },
  162: { color: [220, 216, 21], opacity: 1, label: 'Right-Cerebral-WM-myelinated' },
  163: { color: [122, 186, 220], opacity: 1, label: 'Left-Subcortical-Gray-Matter' },
  164: { color: [122, 186, 220], opacity: 1, label: 'Right-Subcortical-Gray-Matter' },
  165: { color: [120, 120, 120], opacity: 1, label: 'Skull' },
  166: { color: [14, 48, 255], opacity: 1, label: 'Posterior-fossa' },
  167: { color: [166, 42, 42], opacity: 1, label: 'Scalp' },
  168: { color: [121, 18, 134], opacity: 1, label: 'Hematoma' },
  169: { color: [236, 13, 127], opacity: 1, label: 'Left-Basal-Ganglia' },
  176: { color: [236, 13, 126], opacity: 1, label: 'Right-Basal-Ganglia' },
  170: { color: [119, 159, 176], opacity: 1, label: 'brainstem' },
  171: { color: [119, 0, 176], opacity: 1, label: 'DCG' },
  172: { color: [119, 100, 176], opacity: 1, label: 'Vermis' },
  173: { color: [242, 104, 76], opacity: 1, label: 'Midbrain' },
  174: { color: [206, 195, 58], opacity: 1, label: 'Pons' },
  175: { color: [119, 159, 176], opacity: 1, label: 'Medulla' },
  177: { color: [119, 50, 176], opacity: 1, label: 'Vermis-White-Matter' },
  178: { color: [142, 182, 0], opacity: 1, label: 'SCP' },
  179: { color: [19, 100, 176], opacity: 1, label: 'Floculus' },
  180: { color: [73, 61, 139], opacity: 1, label: 'Left-Cortical-Dysplasia' },
  181: { color: [73, 62, 139], opacity: 1, label: 'Right-Cortical-Dysplasia' },
  182: { color: [10, 100, 176], opacity: 1, label: 'CblumNodulus' },
  193: { color: [0, 196, 255], opacity: 1, label: 'Left-hippocampal_fissure' },
  194: { color: [255, 164, 164], opacity: 1, label: 'Left-CADG-head' },
  195: { color: [196, 196, 0], opacity: 1, label: 'Left-subiculum' },
  196: { color: [0, 100, 255], opacity: 1, label: 'Left-fimbria' },
  197: { color: [128, 196, 164], opacity: 1, label: 'Right-hippocampal_fissure' },
  198: { color: [0, 126, 75], opacity: 1, label: 'Right-CADG-head' },
  199: { color: [128, 96, 64], opacity: 1, label: 'Right-subiculum' },
  200: { color: [0, 50, 128], opacity: 1, label: 'Right-fimbria' },
  201: { color: [255, 204, 153], opacity: 1, label: 'alveus' },
  202: { color: [255, 128, 128], opacity: 1, label: 'perforant_pathway' },
  203: { color: [255, 255, 0], opacity: 1, label: 'parasubiculum' },
  204: { color: [64, 0, 64], opacity: 1, label: 'presubiculum' },
  205: { color: [0, 0, 255], opacity: 1, label: 'subiculum' },
  206: { color: [255, 0, 0], opacity: 1, label: 'CA1' },
  207: { color: [128, 128, 255], opacity: 1, label: 'CA2' },
  208: { color: [0, 128, 0], opacity: 1, label: 'CA3' },
  209: { color: [196, 160, 128], opacity: 1, label: 'CA4' },
  210: { color: [32, 200, 255], opacity: 1, label: 'GC-DG' },
  211: { color: [128, 255, 128], opacity: 1, label: 'HATA' },
  212: { color: [204, 153, 204], opacity: 1, label: 'fimbria' },
  213: { color: [121, 17, 136], opacity: 1, label: 'lateral_ventricle' },
  214: { color: [128, 0, 0], opacity: 1, label: 'molecular_layer_HP' },
  215: { color: [128, 32, 255], opacity: 1, label: 'hippocampal_fissure' },
  216: { color: [255, 204, 102], opacity: 1, label: 'entorhinal_cortex' },
  217: { color: [128, 128, 128], opacity: 1, label: 'molecular_layer_subiculum' },
  218: { color: [104, 255, 255], opacity: 1, label: 'Amygdala' },
  219: { color: [0, 226, 0], opacity: 1, label: 'Cerebral_White_Matter' },
  220: { color: [205, 63, 78], opacity: 1, label: 'Cerebral_Cortex' },
  221: { color: [197, 58, 250], opacity: 1, label: 'Inf_Lat_Vent' },
  222: { color: [33, 150, 250], opacity: 1, label: 'Perirhinal' },
  223: { color: [226, 0, 0], opacity: 1, label: 'Cerebral_White_Matter_Edge' },
  224: { color: [100, 100, 100], opacity: 1, label: 'Background' },
  225: { color: [197, 150, 250], opacity: 1, label: 'Ectorhinal' },
  226: { color: [170, 170, 255], opacity: 1, label: 'HP_tail' },
  250: { color: [255, 0, 0], opacity: 1, label: 'Fornix' },
  251: { color: [0, 0, 64], opacity: 1, label: 'CC_Posterior' },
  252: { color: [0, 0, 112], opacity: 1, label: 'CC_Mid_Posterior' },
  253: { color: [0, 0, 160], opacity: 1, label: 'CC_Central' },
  254: { color: [0, 0, 208], opacity: 1, label: 'CC_Mid_Anterior' },
  255: { color: [0, 0, 255], opacity: 1, label: 'CC_Anterior' },
  256: { color: [0, 0, 0], opacity: 1, label: 'Voxel-Unchanged' },
  257: { color: [60, 60, 60], opacity: 1, label: 'CSF-ExtraCerebral' },
  258: { color: [150, 150, 200], opacity: 1, label: 'Head-ExtraCerebral' },
  259: { color: [120, 120, 120], opacity: 1, label: 'SkullApprox' },
  260: { color: [119, 159, 176], opacity: 1, label: 'BoneOrAir' },
  261: { color: [120, 18, 134], opacity: 1, label: 'PossibleFluid' },
  262: { color: [119, 159, 176], opacity: 1, label: 'Sinus' },
  263: { color: [119, 159, 176], opacity: 1, label: 'Left-Eustachian' },
  264: { color: [119, 159, 176], opacity: 1, label: 'Right-Eustachian' },
  331: { color: [255, 0, 0], opacity: 1, label: 'Aorta' },
  332: { color: [255, 80, 0], opacity: 1, label: 'Left-Common-IliacA' },
  333: { color: [255, 160, 0], opacity: 1, label: 'Right-Common-IliacA' },
  334: { color: [255, 255, 0], opacity: 1, label: 'Left-External-IliacA' },
  335: { color: [0, 255, 0], opacity: 1, label: 'Right-External-IliacA' },
  336: { color: [255, 0, 160], opacity: 1, label: 'Left-Internal-IliacA' },
  337: { color: [255, 0, 255], opacity: 1, label: 'Right-Internal-IliacA' },
  338: { color: [255, 50, 80], opacity: 1, label: 'Left-Lateral-SacralA' },
  339: { color: [80, 255, 50], opacity: 1, label: 'Right-Lateral-SacralA' },
  340: { color: [160, 255, 50], opacity: 1, label: 'Left-ObturatorA' },
  341: { color: [160, 200, 255], opacity: 1, label: 'Right-ObturatorA' },
  342: { color: [0, 255, 160], opacity: 1, label: 'Left-Internal-PudendalA' },
  343: { color: [0, 0, 255], opacity: 1, label: 'Right-Internal-PudendalA' },
  344: { color: [80, 50, 255], opacity: 1, label: 'Left-UmbilicalA' },
  345: { color: [160, 0, 255], opacity: 1, label: 'Right-UmbilicalA' },
  346: { color: [255, 210, 0], opacity: 1, label: 'Left-Inf-RectalA' },
  347: { color: [0, 160, 255], opacity: 1, label: 'Right-Inf-RectalA' },
  348: { color: [255, 200, 80], opacity: 1, label: 'Left-Common-IliacV' },
  349: { color: [255, 200, 160], opacity: 1, label: 'Right-Common-IliacV' },
  350: { color: [255, 80, 200], opacity: 1, label: 'Left-External-IliacV' },
  351: { color: [255, 160, 200], opacity: 1, label: 'Right-External-IliacV' },
  352: { color: [30, 255, 80], opacity: 1, label: 'Left-Internal-IliacV' },
  353: { color: [80, 200, 255], opacity: 1, label: 'Right-Internal-IliacV' },
  354: { color: [80, 255, 200], opacity: 1, label: 'Left-ObturatorV' },
  355: { color: [195, 255, 200], opacity: 1, label: 'Right-ObturatorV' },
  356: { color: [120, 200, 20], opacity: 1, label: 'Left-Internal-PudendalV' },
  357: { color: [170, 10, 200], opacity: 1, label: 'Right-Internal-PudendalV' },
  358: { color: [20, 130, 180], opacity: 1, label: 'Pos-Lymph' },
  359: { color: [20, 180, 130], opacity: 1, label: 'Neg-Lymph' },
  400: { color: [206, 62, 78], opacity: 1, label: 'V1' },
  401: { color: [121, 18, 134], opacity: 1, label: 'V2' },
  402: { color: [199, 58, 250], opacity: 1, label: 'BA44' },
  403: { color: [1, 148, 0], opacity: 1, label: 'BA45' },
  404: { color: [221, 248, 164], opacity: 1, label: 'BA4a' },
  405: { color: [231, 148, 34], opacity: 1, label: 'BA4p' },
  406: { color: [1, 118, 14], opacity: 1, label: 'BA6' },
  407: { color: [120, 118, 14], opacity: 1, label: 'BA2' },
  408: { color: [123, 186, 221], opacity: 1, label: 'BA1_old' },
  409: { color: [238, 13, 177], opacity: 1, label: 'BAun2' },
  410: { color: [123, 186, 220], opacity: 1, label: 'BA1' },
  411: { color: [138, 13, 206], opacity: 1, label: 'BA2b' },
  412: { color: [238, 130, 176], opacity: 1, label: 'BA3a' },
  413: { color: [218, 230, 76], opacity: 1, label: 'BA3b' },
  414: { color: [38, 213, 176], opacity: 1, label: 'MT' },
  415: { color: [1, 225, 176], opacity: 1, label: 'AIPS_AIP_l' },
  416: { color: [1, 225, 176], opacity: 1, label: 'AIPS_AIP_r' },
  417: { color: [200, 2, 100], opacity: 1, label: 'AIPS_VIP_l' },
  418: { color: [200, 2, 100], opacity: 1, label: 'AIPS_VIP_r' },
  419: { color: [5, 200, 90], opacity: 1, label: 'IPL_PFcm_l' },
  420: { color: [5, 200, 90], opacity: 1, label: 'IPL_PFcm_r' },
  421: { color: [100, 5, 200], opacity: 1, label: 'IPL_PF_l' },
  422: { color: [25, 255, 100], opacity: 1, label: 'IPL_PFm_l' },
  423: { color: [25, 255, 100], opacity: 1, label: 'IPL_PFm_r' },
  424: { color: [230, 7, 100], opacity: 1, label: 'IPL_PFop_l' },
  425: { color: [230, 7, 100], opacity: 1, label: 'IPL_PFop_r' },
  426: { color: [100, 5, 200], opacity: 1, label: 'IPL_PF_r' },
  427: { color: [150, 10, 200], opacity: 1, label: 'IPL_PFt_l' },
  428: { color: [150, 10, 200], opacity: 1, label: 'IPL_PFt_r' },
  429: { color: [175, 10, 176], opacity: 1, label: 'IPL_PGa_l' },
  430: { color: [175, 10, 176], opacity: 1, label: 'IPL_PGa_r' },
  431: { color: [10, 100, 255], opacity: 1, label: 'IPL_PGp_l' },
  432: { color: [10, 100, 255], opacity: 1, label: 'IPL_PGp_r' },
  433: { color: [150, 45, 70], opacity: 1, label: 'Visual_V3d_l' },
  434: { color: [150, 45, 70], opacity: 1, label: 'Visual_V3d_r' },
  435: { color: [45, 200, 15], opacity: 1, label: 'Visual_V4_l' },
  436: { color: [45, 200, 15], opacity: 1, label: 'Visual_V4_r' },
  437: { color: [227, 45, 100], opacity: 1, label: 'Visual_V5_b' },
  438: { color: [227, 45, 100], opacity: 1, label: 'Visual_VP_l' },
  439: { color: [227, 45, 100], opacity: 1, label: 'Visual_VP_r' },
  498: { color: [143, 188, 143], opacity: 1, label: 'wmsa' },
  499: { color: [255, 248, 220], opacity: 1, label: 'other_wmsa' },
  500: { color: [17, 85, 136], opacity: 1, label: 'right_CA2_3' },
  501: { color: [119, 187, 102], opacity: 1, label: 'right_alveus' },
  502: { color: [204, 68, 34], opacity: 1, label: 'right_CA1' },
  503: { color: [204, 0, 255], opacity: 1, label: 'right_fimbria' },
  504: { color: [221, 187, 17], opacity: 1, label: 'right_presubiculum' },
  505: { color: [153, 221, 238], opacity: 1, label: 'right_hippocampal_fissure' },
  506: { color: [51, 17, 17], opacity: 1, label: 'right_CA4_DG' },
  507: { color: [0, 119, 85], opacity: 1, label: 'right_subiculum' },
  508: { color: [20, 100, 200], opacity: 1, label: 'right_fornix' },
  550: { color: [17, 85, 137], opacity: 1, label: 'left_CA2_3' },
  551: { color: [119, 187, 103], opacity: 1, label: 'left_alveus' },
  552: { color: [204, 68, 35], opacity: 1, label: 'left_CA1' },
  553: { color: [204, 0, 254], opacity: 1, label: 'left_fimbria' },
  554: { color: [221, 187, 16], opacity: 1, label: 'left_presubiculum' },
  555: { color: [153, 221, 239], opacity: 1, label: 'left_hippocampal_fissure' },
  556: { color: [51, 17, 18], opacity: 1, label: 'left_CA4_DG' },
  557: { color: [0, 119, 86], opacity: 1, label: 'left_subiculum' },
  558: { color: [20, 100, 201], opacity: 1, label: 'left_fornix' },
  600: { color: [254, 254, 254], opacity: 1, label: 'Tumor' },
  601: { color: [70, 130, 180], opacity: 1, label: 'Cbm_Left_I_IV' },
  602: { color: [245, 245, 245], opacity: 1, label: 'Cbm_Right_I_IV' },
  603: { color: [205, 62, 78], opacity: 1, label: 'Cbm_Left_V' },
  604: { color: [120, 18, 134], opacity: 1, label: 'Cbm_Right_V' },
  605: { color: [196, 58, 250], opacity: 1, label: 'Cbm_Left_VI' },
  606: { color: [0, 148, 0], opacity: 1, label: 'Cbm_Vermis_VI' },
  607: { color: [220, 248, 164], opacity: 1, label: 'Cbm_Right_VI' },
  608: { color: [230, 148, 34], opacity: 1, label: 'Cbm_Left_CrusI' },
  609: { color: [0, 118, 14], opacity: 1, label: 'Cbm_Vermis_CrusI' },
  610: { color: [0, 118, 14], opacity: 1, label: 'Cbm_Right_CrusI' },
  611: { color: [122, 186, 220], opacity: 1, label: 'Cbm_Left_CrusII' },
  612: { color: [236, 13, 176], opacity: 1, label: 'Cbm_Vermis_CrusII' },
  613: { color: [12, 48, 255], opacity: 1, label: 'Cbm_Right_CrusII' },
  614: { color: [204, 182, 142], opacity: 1, label: 'Cbm_Left_VIIb' },
  615: { color: [42, 204, 164], opacity: 1, label: 'Cbm_Vermis_VIIb' },
  616: { color: [119, 159, 176], opacity: 1, label: 'Cbm_Right_VIIb' },
  617: { color: [220, 216, 20], opacity: 1, label: 'Cbm_Left_VIIIa' },
  618: { color: [103, 255, 255], opacity: 1, label: 'Cbm_Vermis_VIIIa' },
  619: { color: [80, 196, 98], opacity: 1, label: 'Cbm_Right_VIIIa' },
  620: { color: [60, 58, 210], opacity: 1, label: 'Cbm_Left_VIIIb' },
  621: { color: [60, 58, 210], opacity: 1, label: 'Cbm_Vermis_VIIIb' },
  622: { color: [60, 58, 210], opacity: 1, label: 'Cbm_Right_VIIIb' },
  623: { color: [60, 58, 210], opacity: 1, label: 'Cbm_Left_IX' },
  624: { color: [60, 60, 60], opacity: 1, label: 'Cbm_Vermis_IX' },
  625: { color: [255, 165, 0], opacity: 1, label: 'Cbm_Right_IX' },
  626: { color: [255, 165, 0], opacity: 1, label: 'Cbm_Left_X' },
  627: { color: [0, 255, 127], opacity: 1, label: 'Cbm_Vermis_X' },
  628: { color: [165, 42, 42], opacity: 1, label: 'Cbm_Right_X' },
  640: { color: [204, 0, 0], opacity: 1, label: 'Cbm_Right_I_V_med' },
  641: { color: [255, 0, 0], opacity: 1, label: 'Cbm_Right_I_V_mid' },
  642: { color: [0, 0, 255], opacity: 1, label: 'Cbm_Right_VI_med' },
  643: { color: [30, 144, 255], opacity: 1, label: 'Cbm_Right_VI_mid' },
  644: { color: [100, 212, 237], opacity: 1, label: 'Cbm_Right_VI_lat' },
  645: { color: [218, 165, 32], opacity: 1, label: 'Cbm_Right_CrusI_med' },
  646: { color: [255, 215, 0], opacity: 1, label: 'Cbm_Right_CrusI_mid' },
  647: { color: [255, 255, 166], opacity: 1, label: 'Cbm_Right_CrusI_lat' },
  648: { color: [153, 0, 204], opacity: 1, label: 'Cbm_Right_CrusII_med' },
  649: { color: [153, 141, 209], opacity: 1, label: 'Cbm_Right_CrusII_mid' },
  650: { color: [204, 204, 255], opacity: 1, label: 'Cbm_Right_CrusII_lat' },
  651: { color: [31, 212, 194], opacity: 1, label: 'Cbm_Right_7med' },
  652: { color: [3, 255, 237], opacity: 1, label: 'Cbm_Right_7mid' },
  653: { color: [204, 255, 255], opacity: 1, label: 'Cbm_Right_7lat' },
  654: { color: [86, 74, 147], opacity: 1, label: 'Cbm_Right_8med' },
  655: { color: [114, 114, 190], opacity: 1, label: 'Cbm_Right_8mid' },
  656: { color: [184, 178, 255], opacity: 1, label: 'Cbm_Right_8lat' },
  657: { color: [126, 138, 37], opacity: 1, label: 'Cbm_Right_PUNs' },
  658: { color: [189, 197, 117], opacity: 1, label: 'Cbm_Right_TONs' },
  659: { color: [240, 230, 140], opacity: 1, label: 'Cbm_Right_FLOs' },
  660: { color: [204, 0, 0], opacity: 1, label: 'Cbm_Left_I_V_med' },
  661: { color: [255, 0, 0], opacity: 1, label: 'Cbm_Left_I_V_mid' },
  662: { color: [0, 0, 255], opacity: 1, label: 'Cbm_Left_VI_med' },
  663: { color: [30, 144, 255], opacity: 1, label: 'Cbm_Left_VI_mid' },
  664: { color: [100, 212, 237], opacity: 1, label: 'Cbm_Left_VI_lat' },
  665: { color: [218, 165, 32], opacity: 1, label: 'Cbm_Left_CrusI_med' },
  666: { color: [255, 215, 0], opacity: 1, label: 'Cbm_Left_CrusI_mid' },
  667: { color: [255, 255, 166], opacity: 1, label: 'Cbm_Left_CrusI_lat' },
  668: { color: [153, 0, 204], opacity: 1, label: 'Cbm_Left_CrusII_med' },
  669: { color: [153, 141, 209], opacity: 1, label: 'Cbm_Left_CrusII_mid' },
  670: { color: [204, 204, 255], opacity: 1, label: 'Cbm_Left_CrusII_lat' },
  671: { color: [31, 212, 194], opacity: 1, label: 'Cbm_Left_7med' },
  672: { color: [3, 255, 237], opacity: 1, label: 'Cbm_Left_7mid' },
  673: { color: [204, 255, 255], opacity: 1, label: 'Cbm_Left_7lat' },
  674: { color: [86, 74, 147], opacity: 1, label: 'Cbm_Left_8med' },
  675: { color: [114, 114, 190], opacity: 1, label: 'Cbm_Left_8mid' },
  676: { color: [184, 178, 255], opacity: 1, label: 'Cbm_Left_8lat' },
  677: { color: [126, 138, 37], opacity: 1, label: 'Cbm_Left_PUNs' },
  678: { color: [189, 197, 117], opacity: 1, label: 'Cbm_Left_TONs' },
  679: { color: [240, 230, 140], opacity: 1, label: 'Cbm_Left_FLOs' },
  690: { color: [122, 135, 50], opacity: 1, label: 'CbmWM_Gyri_Left' },
  691: { color: [122, 135, 50], opacity: 1, label: 'CbmWM_Gyri_Right' },
  701: { color: [120, 18, 134], opacity: 1, label: 'CSF-FSL-FAST' },
  702: { color: [205, 62, 78], opacity: 1, label: 'GrayMatter-FSL-FAST' },
  703: { color: [0, 225, 0], opacity: 1, label: 'WhiteMatter-FSL-FAST' },
  999: { color: [255, 100, 100], opacity: 1, label: 'SUSPICIOUS' },
  1000: { color: [25, 5, 25], opacity: 1, label: 'ctx-lh-unknown' },
  1001: { color: [25, 100, 40], opacity: 1, label: 'ctx-lh-bankssts' },
  1002: { color: [125, 100, 160], opacity: 1, label: 'ctx-lh-caudalanteriorcingulate' },
  1003: { color: [100, 25, 0], opacity: 1, label: 'ctx-lh-caudalmiddlefrontal' },
  1004: { color: [120, 70, 50], opacity: 1, label: 'ctx-lh-corpuscallosum' },
  1005: { color: [220, 20, 100], opacity: 1, label: 'ctx-lh-cuneus' },
  1006: { color: [220, 20, 10], opacity: 1, label: 'ctx-lh-entorhinal' },
  1007: { color: [180, 220, 140], opacity: 1, label: 'ctx-lh-fusiform' },
  1008: { color: [220, 60, 220], opacity: 1, label: 'ctx-lh-inferiorparietal' },
  1009: { color: [180, 40, 120], opacity: 1, label: 'ctx-lh-inferiortemporal' },
  1010: { color: [140, 20, 140], opacity: 1, label: 'ctx-lh-isthmuscingulate' },
  1011: { color: [20, 30, 140], opacity: 1, label: 'ctx-lh-lateraloccipital' },
  1012: { color: [35, 75, 50], opacity: 1, label: 'ctx-lh-lateralorbitofrontal' },
  1013: { color: [225, 140, 140], opacity: 1, label: 'ctx-lh-lingual' },
  1014: { color: [200, 35, 75], opacity: 1, label: 'ctx-lh-medialorbitofrontal' },
  1015: { color: [160, 100, 50], opacity: 1, label: 'ctx-lh-middletemporal' },
  1016: { color: [20, 220, 60], opacity: 1, label: 'ctx-lh-parahippocampal' },
  1017: { color: [60, 220, 60], opacity: 1, label: 'ctx-lh-paracentral' },
  1018: { color: [220, 180, 140], opacity: 1, label: 'ctx-lh-parsopercularis' },
  1019: { color: [20, 100, 50], opacity: 1, label: 'ctx-lh-parsorbitalis' },
  1020: { color: [220, 60, 20], opacity: 1, label: 'ctx-lh-parstriangularis' },
  1021: { color: [120, 100, 60], opacity: 1, label: 'ctx-lh-pericalcarine' },
  1022: { color: [220, 20, 20], opacity: 1, label: 'ctx-lh-postcentral' },
  1023: { color: [220, 180, 220], opacity: 1, label: 'ctx-lh-posteriorcingulate' },
  1024: { color: [60, 20, 220], opacity: 1, label: 'ctx-lh-precentral' },
  1025: { color: [160, 140, 180], opacity: 1, label: 'ctx-lh-precuneus' },
  1026: { color: [80, 20, 140], opacity: 1, label: 'ctx-lh-rostralanteriorcingulate' },
  1027: { color: [75, 50, 125], opacity: 1, label: 'ctx-lh-rostralmiddlefrontal' },
  1028: { color: [20, 220, 160], opacity: 1, label: 'ctx-lh-superiorfrontal' },
  1029: { color: [20, 180, 140], opacity: 1, label: 'ctx-lh-superiorparietal' },
  1030: { color: [140, 220, 220], opacity: 1, label: 'ctx-lh-superiortemporal' },
  1031: { color: [80, 160, 20], opacity: 1, label: 'ctx-lh-supramarginal' },
  1032: { color: [100, 0, 100], opacity: 1, label: 'ctx-lh-frontalpole' },
  1033: { color: [70, 70, 70], opacity: 1, label: 'ctx-lh-temporalpole' },
  1034: { color: [150, 150, 200], opacity: 1, label: 'ctx-lh-transversetemporal' },
  1035: { color: [255, 192, 32], opacity: 1, label: 'ctx-lh-insula' },
  2000: { color: [25, 5, 25], opacity: 1, label: 'ctx-rh-unknown' },
  2001: { color: [25, 100, 40], opacity: 1, label: 'ctx-rh-bankssts' },
  2002: { color: [125, 100, 160], opacity: 1, label: 'ctx-rh-caudalanteriorcingulate' },
  2003: { color: [100, 25, 0], opacity: 1, label: 'ctx-rh-caudalmiddlefrontal' },
  2004: { color: [120, 70, 50], opacity: 1, label: 'ctx-rh-corpuscallosum' },
  2005: { color: [220, 20, 100], opacity: 1, label: 'ctx-rh-cuneus' },
  2006: { color: [220, 20, 10], opacity: 1, label: 'ctx-rh-entorhinal' },
  2007: { color: [180, 220, 140], opacity: 1, label: 'ctx-rh-fusiform' },
  2008: { color: [220, 60, 220], opacity: 1, label: 'ctx-rh-inferiorparietal' },
  2009: { color: [180, 40, 120], opacity: 1, label: 'ctx-rh-inferiortemporal' },
  2010: { color: [140, 20, 140], opacity: 1, label: 'ctx-rh-isthmuscingulate' },
  2011: { color: [20, 30, 140], opacity: 1, label: 'ctx-rh-lateraloccipital' },
  2012: { color: [35, 75, 50], opacity: 1, label: 'ctx-rh-lateralorbitofrontal' },
  2013: { color: [225, 140, 140], opacity: 1, label: 'ctx-rh-lingual' },
  2014: { color: [200, 35, 75], opacity: 1, label: 'ctx-rh-medialorbitofrontal' },
  2015: { color: [160, 100, 50], opacity: 1, label: 'ctx-rh-middletemporal' },
  2016: { color: [20, 220, 60], opacity: 1, label: 'ctx-rh-parahippocampal' },
  2017: { color: [60, 220, 60], opacity: 1, label: 'ctx-rh-paracentral' },
  2018: { color: [220, 180, 140], opacity: 1, label: 'ctx-rh-parsopercularis' },
  2019: { color: [20, 100, 50], opacity: 1, label: 'ctx-rh-parsorbitalis' },
  2020: { color: [220, 60, 20], opacity: 1, label: 'ctx-rh-parstriangularis' },
  2021: { color: [120, 100, 60], opacity: 1, label: 'ctx-rh-pericalcarine' },
  2022: { color: [220, 20, 20], opacity: 1, label: 'ctx-rh-postcentral' },
  2023: { color: [220, 180, 220], opacity: 1, label: 'ctx-rh-posteriorcingulate' },
  2024: { color: [60, 20, 220], opacity: 1, label: 'ctx-rh-precentral' },
  2025: { color: [160, 140, 180], opacity: 1, label: 'ctx-rh-precuneus' },
  2026: { color: [80, 20, 140], opacity: 1, label: 'ctx-rh-rostralanteriorcingulate' },
  2027: { color: [75, 50, 125], opacity: 1, label: 'ctx-rh-rostralmiddlefrontal' },
  2028: { color: [20, 220, 160], opacity: 1, label: 'ctx-rh-superiorfrontal' },
  2029: { color: [20, 180, 140], opacity: 1, label: 'ctx-rh-superiorparietal' },
  2030: { color: [140, 220, 220], opacity: 1, label: 'ctx-rh-superiortemporal' },
  2031: { color: [80, 160, 20], opacity: 1, label: 'ctx-rh-supramarginal' },
  2032: { color: [100, 0, 100], opacity: 1, label: 'ctx-rh-frontalpole' },
  2033: { color: [70, 70, 70], opacity: 1, label: 'ctx-rh-temporalpole' },
  2034: { color: [150, 150, 200], opacity: 1, label: 'ctx-rh-transversetemporal' },
  2035: { color: [255, 192, 32], opacity: 1, label: 'ctx-rh-insula' },
  3000: { color: [230, 250, 230], opacity: 1, label: 'wm-lh-unknown' },
  3001: { color: [230, 155, 215], opacity: 1, label: 'wm-lh-bankssts' },
  3002: { color: [130, 155, 95], opacity: 1, label: 'wm-lh-caudalanteriorcingulate' },
  3003: { color: [155, 230, 255], opacity: 1, label: 'wm-lh-caudalmiddlefrontal' },
  3004: { color: [135, 185, 205], opacity: 1, label: 'wm-lh-corpuscallosum' },
  3005: { color: [35, 235, 155], opacity: 1, label: 'wm-lh-cuneus' },
  3006: { color: [35, 235, 245], opacity: 1, label: 'wm-lh-entorhinal' },
  3007: { color: [75, 35, 115], opacity: 1, label: 'wm-lh-fusiform' },
  3008: { color: [35, 195, 35], opacity: 1, label: 'wm-lh-inferiorparietal' },
  3009: { color: [75, 215, 135], opacity: 1, label: 'wm-lh-inferiortemporal' },
  3010: { color: [115, 235, 115], opacity: 1, label: 'wm-lh-isthmuscingulate' },
  3011: { color: [235, 225, 115], opacity: 1, label: 'wm-lh-lateraloccipital' },
  3012: { color: [220, 180, 205], opacity: 1, label: 'wm-lh-lateralorbitofrontal' },
  3013: { color: [30, 115, 115], opacity: 1, label: 'wm-lh-lingual' },
  3014: { color: [55, 220, 180], opacity: 1, label: 'wm-lh-medialorbitofrontal' },
  3015: { color: [95, 155, 205], opacity: 1, label: 'wm-lh-middletemporal' },
  3016: { color: [235, 35, 195], opacity: 1, label: 'wm-lh-parahippocampal' },
  3017: { color: [195, 35, 195], opacity: 1, label: 'wm-lh-paracentral' },
  3018: { color: [35, 75, 115], opacity: 1, label: 'wm-lh-parsopercularis' },
  3019: { color: [235, 155, 205], opacity: 1, label: 'wm-lh-parsorbitalis' },
  3020: { color: [35, 195, 235], opacity: 1, label: 'wm-lh-parstriangularis' },
  3021: { color: [135, 155, 195], opacity: 1, label: 'wm-lh-pericalcarine' },
  3022: { color: [35, 235, 235], opacity: 1, label: 'wm-lh-postcentral' },
  3023: { color: [35, 75, 35], opacity: 1, label: 'wm-lh-posteriorcingulate' },
  3024: { color: [195, 235, 35], opacity: 1, label: 'wm-lh-precentral' },
  3025: { color: [95, 115, 75], opacity: 1, label: 'wm-lh-precuneus' },
  3026: { color: [175, 235, 115], opacity: 1, label: 'wm-lh-rostralanteriorcingulate' },
  3027: { color: [180, 205, 130], opacity: 1, label: 'wm-lh-rostralmiddlefrontal' },
  3028: { color: [235, 35, 95], opacity: 1, label: 'wm-lh-superiorfrontal' },
  3029: { color: [235, 75, 115], opacity: 1, label: 'wm-lh-superiorparietal' },
  3030: { color: [115, 35, 35], opacity: 1, label: 'wm-lh-superiortemporal' },
  3031: { color: [175, 95, 235], opacity: 1, label: 'wm-lh-supramarginal' },
  3032: { color: [155, 255, 155], opacity: 1, label: 'wm-lh-frontalpole' },
  3033: { color: [185, 185, 185], opacity: 1, label: 'wm-lh-temporalpole' },
  3034: { color: [105, 105, 55], opacity: 1, label: 'wm-lh-transversetemporal' },
  3035: { color: [20, 220, 160], opacity: 1, label: 'wm-lh-insula' },
  4000: { color: [230, 250, 230], opacity: 1, label: 'wm-rh-unknown' },
  4001: { color: [230, 155, 215], opacity: 1, label: 'wm-rh-bankssts' },
  4002: { color: [130, 155, 95], opacity: 1, label: 'wm-rh-caudalanteriorcingulate' },
  4003: { color: [155, 230, 255], opacity: 1, label: 'wm-rh-caudalmiddlefrontal' },
  4004: { color: [135, 185, 205], opacity: 1, label: 'wm-rh-corpuscallosum' },
  4005: { color: [35, 235, 155], opacity: 1, label: 'wm-rh-cuneus' },
  4006: { color: [35, 235, 245], opacity: 1, label: 'wm-rh-entorhinal' },
  4007: { color: [75, 35, 115], opacity: 1, label: 'wm-rh-fusiform' },
  4008: { color: [35, 195, 35], opacity: 1, label: 'wm-rh-inferiorparietal' },
  4009: { color: [75, 215, 135], opacity: 1, label: 'wm-rh-inferiortemporal' },
  4010: { color: [115, 235, 115], opacity: 1, label: 'wm-rh-isthmuscingulate' },
  4011: { color: [235, 225, 115], opacity: 1, label: 'wm-rh-lateraloccipital' },
  4012: { color: [220, 180, 205], opacity: 1, label: 'wm-rh-lateralorbitofrontal' },
  4013: { color: [30, 115, 115], opacity: 1, label: 'wm-rh-lingual' },
  4014: { color: [55, 220, 180], opacity: 1, label: 'wm-rh-medialorbitofrontal' },
  4015: { color: [95, 155, 205], opacity: 1, label: 'wm-rh-middletemporal' },
  4016: { color: [235, 35, 195], opacity: 1, label: 'wm-rh-parahippocampal' },
  4017: { color: [195, 35, 195], opacity: 1, label: 'wm-rh-paracentral' },
  4018: { color: [35, 75, 115], opacity: 1, label: 'wm-rh-parsopercularis' },
  4019: { color: [235, 155, 205], opacity: 1, label: 'wm-rh-parsorbitalis' },
  4020: { color: [35, 195, 235], opacity: 1, label: 'wm-rh-parstriangularis' },
  4021: { color: [135, 155, 195], opacity: 1, label: 'wm-rh-pericalcarine' },
  4022: { color: [35, 235, 235], opacity: 1, label: 'wm-rh-postcentral' },
  4023: { color: [35, 75, 35], opacity: 1, label: 'wm-rh-posteriorcingulate' },
  4024: { color: [195, 235, 35], opacity: 1, label: 'wm-rh-precentral' },
  4025: { color: [95, 115, 75], opacity: 1, label: 'wm-rh-precuneus' },
  4026: { color: [175, 235, 115], opacity: 1, label: 'wm-rh-rostralanteriorcingulate' },
  4027: { color: [180, 205, 130], opacity: 1, label: 'wm-rh-rostralmiddlefrontal' },
  4028: { color: [235, 35, 95], opacity: 1, label: 'wm-rh-superiorfrontal' },
  4029: { color: [235, 75, 115], opacity: 1, label: 'wm-rh-superiorparietal' },
  4030: { color: [115, 35, 35], opacity: 1, label: 'wm-rh-superiortemporal' },
  4031: { color: [175, 95, 235], opacity: 1, label: 'wm-rh-supramarginal' },
  4032: { color: [155, 255, 155], opacity: 1, label: 'wm-rh-frontalpole' },
  4033: { color: [185, 185, 185], opacity: 1, label: 'wm-rh-temporalpole' },
  4034: { color: [105, 105, 55], opacity: 1, label: 'wm-rh-transversetemporal' },
  4035: { color: [20, 220, 160], opacity: 1, label: 'wm-rh-insula' },
  3201: { color: [235, 35, 95], opacity: 1, label: 'wm-lh-frontal-lobe' },
  3203: { color: [35, 75, 35], opacity: 1, label: 'wm-lh-cingulate-lobe' },
  3204: { color: [135, 155, 195], opacity: 1, label: 'wm-lh-occiptal-lobe' },
  3205: { color: [115, 35, 35], opacity: 1, label: 'wm-lh-temporal-lobe' },
  3206: { color: [35, 195, 35], opacity: 1, label: 'wm-lh-parietal-lobe' },
  3207: { color: [20, 220, 160], opacity: 1, label: 'wm-lh-insula-lobe' },
  4201: { color: [235, 35, 95], opacity: 1, label: 'wm-rh-frontal-lobe' },
  4203: { color: [35, 75, 35], opacity: 1, label: 'wm-rh-cingulate-lobe' },
  4204: { color: [135, 155, 195], opacity: 1, label: 'wm-rh-occiptal-lobe' },
  4205: { color: [115, 35, 35], opacity: 1, label: 'wm-rh-temporal-lobe' },
  4206: { color: [35, 195, 35], opacity: 1, label: 'wm-rh-parietal-lobe' },
  4207: { color: [20, 220, 160], opacity: 1, label: 'wm-rh-insula-lobe' },
  1100: { color: [0, 0, 0], opacity: 1, label: 'ctx-lh-Unknown' },
  1101: { color: [50, 50, 50], opacity: 1, label: 'ctx-lh-Corpus_callosum' },
  1102: { color: [180, 20, 30], opacity: 1, label: 'ctx-lh-G_and_S_Insula_ONLY_AVERAGE' },
  1103: { color: [60, 25, 25], opacity: 1, label: 'ctx-lh-G_cingulate-Isthmus' },
  1104: { color: [25, 60, 60], opacity: 1, label: 'ctx-lh-G_cingulate-Main_part' },
  1200: { color: [25, 60, 61], opacity: 1, label: 'ctx-lh-G_cingulate-caudal_ACC' },
  1201: { color: [25, 90, 60], opacity: 1, label: 'ctx-lh-G_cingulate-rostral_ACC' },
  1202: { color: [25, 120, 60], opacity: 1, label: 'ctx-lh-G_cingulate-posterior' },
  1205: { color: [25, 150, 60], opacity: 1, label: 'ctx-lh-S_cingulate-caudal_ACC' },
  1206: { color: [25, 180, 60], opacity: 1, label: 'ctx-lh-S_cingulate-rostral_ACC' },
  1207: { color: [25, 210, 60], opacity: 1, label: 'ctx-lh-S_cingulate-posterior' },
  1210: { color: [25, 150, 90], opacity: 1, label: 'ctx-lh-S_pericallosal-caudal' },
  1211: { color: [25, 180, 90], opacity: 1, label: 'ctx-lh-S_pericallosal-rostral' },
  1212: { color: [25, 210, 90], opacity: 1, label: 'ctx-lh-S_pericallosal-posterior' },
  1105: { color: [180, 20, 20], opacity: 1, label: 'ctx-lh-G_cuneus' },
  1106: { color: [220, 20, 100], opacity: 1, label: 'ctx-lh-G_frontal_inf-Opercular_part' },
  1107: { color: [140, 60, 60], opacity: 1, label: 'ctx-lh-G_frontal_inf-Orbital_part' },
  1108: { color: [180, 220, 140], opacity: 1, label: 'ctx-lh-G_frontal_inf-Triangular_part' },
  1109: { color: [140, 100, 180], opacity: 1, label: 'ctx-lh-G_frontal_middle' },
  1110: { color: [180, 20, 140], opacity: 1, label: 'ctx-lh-G_frontal_superior' },
  1111: { color: [140, 20, 140], opacity: 1, label: 'ctx-lh-G_frontomarginal' },
  1112: { color: [21, 10, 10], opacity: 1, label: 'ctx-lh-G_insular_long' },
  1113: { color: [225, 140, 140], opacity: 1, label: 'ctx-lh-G_insular_short' },
  1114: { color: [23, 60, 180], opacity: 1, label: 'ctx-lh-G_and_S_occipital_inferior' },
  1115: { color: [180, 60, 180], opacity: 1, label: 'ctx-lh-G_occipital_middle' },
  1116: { color: [20, 220, 60], opacity: 1, label: 'ctx-lh-G_occipital_superior' },
  1117: { color: [60, 20, 140], opacity: 1, label: 'ctx-lh-G_occipit-temp_lat-Or_fusiform' },
  1118: { color: [220, 180, 140], opacity: 1, label: 'ctx-lh-G_occipit-temp_med-Lingual_part' },
  1119: {
    color: [65, 100, 20],
    opacity: 1,
    label: 'ctx-lh-G_occipit-temp_med-Parahippocampal_part'
  },
  1120: { color: [220, 60, 20], opacity: 1, label: 'ctx-lh-G_orbital' },
  1121: { color: [60, 100, 60], opacity: 1, label: 'ctx-lh-G_paracentral' },
  1122: { color: [20, 60, 220], opacity: 1, label: 'ctx-lh-G_parietal_inferior-Angular_part' },
  1123: {
    color: [100, 100, 60],
    opacity: 1,
    label: 'ctx-lh-G_parietal_inferior-Supramarginal_part'
  },
  1124: { color: [220, 180, 220], opacity: 1, label: 'ctx-lh-G_parietal_superior' },
  1125: { color: [20, 180, 140], opacity: 1, label: 'ctx-lh-G_postcentral' },
  1126: { color: [60, 140, 180], opacity: 1, label: 'ctx-lh-G_precentral' },
  1127: { color: [25, 20, 140], opacity: 1, label: 'ctx-lh-G_precuneus' },
  1128: { color: [20, 60, 100], opacity: 1, label: 'ctx-lh-G_rectus' },
  1129: { color: [60, 220, 20], opacity: 1, label: 'ctx-lh-G_subcallosal' },
  1130: { color: [60, 20, 220], opacity: 1, label: 'ctx-lh-G_subcentral' },
  1131: { color: [220, 220, 100], opacity: 1, label: 'ctx-lh-G_temporal_inferior' },
  1132: { color: [180, 60, 60], opacity: 1, label: 'ctx-lh-G_temporal_middle' },
  1133: { color: [60, 60, 220], opacity: 1, label: 'ctx-lh-G_temp_sup-G_temp_transv_and_interm_S' },
  1134: { color: [220, 60, 220], opacity: 1, label: 'ctx-lh-G_temp_sup-Lateral_aspect' },
  1135: { color: [65, 220, 60], opacity: 1, label: 'ctx-lh-G_temp_sup-Planum_polare' },
  1136: { color: [25, 140, 20], opacity: 1, label: 'ctx-lh-G_temp_sup-Planum_tempolare' },
  1137: { color: [13, 0, 250], opacity: 1, label: 'ctx-lh-G_and_S_transverse_frontopolar' },
  1138: { color: [61, 20, 220], opacity: 1, label: 'ctx-lh-Lat_Fissure-ant_sgt-ramus_horizontal' },
  1139: { color: [61, 20, 60], opacity: 1, label: 'ctx-lh-Lat_Fissure-ant_sgt-ramus_vertical' },
  1140: { color: [61, 60, 100], opacity: 1, label: 'ctx-lh-Lat_Fissure-post_sgt' },
  1141: { color: [25, 25, 25], opacity: 1, label: 'ctx-lh-Medial_wall' },
  1142: { color: [140, 20, 60], opacity: 1, label: 'ctx-lh-Pole_occipital' },
  1143: { color: [220, 180, 20], opacity: 1, label: 'ctx-lh-Pole_temporal' },
  1144: { color: [63, 180, 180], opacity: 1, label: 'ctx-lh-S_calcarine' },
  1145: { color: [221, 20, 10], opacity: 1, label: 'ctx-lh-S_central' },
  1146: { color: [21, 220, 20], opacity: 1, label: 'ctx-lh-S_central_insula' },
  1147: {
    color: [183, 100, 20],
    opacity: 1,
    label: 'ctx-lh-S_cingulate-Main_part_and_Intracingulate'
  },
  1148: { color: [221, 20, 100], opacity: 1, label: 'ctx-lh-S_cingulate-Marginalis_part' },
  1149: { color: [221, 60, 140], opacity: 1, label: 'ctx-lh-S_circular_insula_anterior' },
  1150: { color: [221, 20, 220], opacity: 1, label: 'ctx-lh-S_circular_insula_inferior' },
  1151: { color: [61, 220, 220], opacity: 1, label: 'ctx-lh-S_circular_insula_superior' },
  1152: { color: [100, 200, 200], opacity: 1, label: 'ctx-lh-S_collateral_transverse_ant' },
  1153: { color: [10, 200, 200], opacity: 1, label: 'ctx-lh-S_collateral_transverse_post' },
  1154: { color: [221, 220, 20], opacity: 1, label: 'ctx-lh-S_frontal_inferior' },
  1155: { color: [141, 20, 100], opacity: 1, label: 'ctx-lh-S_frontal_middle' },
  1156: { color: [61, 220, 100], opacity: 1, label: 'ctx-lh-S_frontal_superior' },
  1157: { color: [21, 220, 60], opacity: 1, label: 'ctx-lh-S_frontomarginal' },
  1158: { color: [141, 60, 20], opacity: 1, label: 'ctx-lh-S_intermedius_primus-Jensen' },
  1159: {
    color: [143, 20, 220],
    opacity: 1,
    label: 'ctx-lh-S_intraparietal-and_Parietal_transverse'
  },
  1160: { color: [61, 20, 180], opacity: 1, label: 'ctx-lh-S_occipital_anterior' },
  1161: { color: [101, 60, 220], opacity: 1, label: 'ctx-lh-S_occipital_middle_and_Lunatus' },
  1162: {
    color: [21, 20, 140],
    opacity: 1,
    label: 'ctx-lh-S_occipital_superior_and_transversalis'
  },
  1163: { color: [221, 140, 20], opacity: 1, label: 'ctx-lh-S_occipito-temporal_lateral' },
  1164: {
    color: [141, 100, 220],
    opacity: 1,
    label: 'ctx-lh-S_occipito-temporal_medial_and_S_Lingual'
  },
  1165: { color: [101, 20, 20], opacity: 1, label: 'ctx-lh-S_orbital-H_shapped' },
  1166: { color: [221, 100, 20], opacity: 1, label: 'ctx-lh-S_orbital_lateral' },
  1167: { color: [181, 200, 20], opacity: 1, label: 'ctx-lh-S_orbital_medial-Or_olfactory' },
  1168: { color: [21, 180, 140], opacity: 1, label: 'ctx-lh-S_paracentral' },
  1169: { color: [101, 100, 180], opacity: 1, label: 'ctx-lh-S_parieto_occipital' },
  1170: { color: [181, 220, 20], opacity: 1, label: 'ctx-lh-S_pericallosal' },
  1171: { color: [21, 140, 200], opacity: 1, label: 'ctx-lh-S_postcentral' },
  1172: { color: [21, 20, 240], opacity: 1, label: 'ctx-lh-S_precentral-Inferior-part' },
  1173: { color: [21, 20, 200], opacity: 1, label: 'ctx-lh-S_precentral-Superior-part' },
  1174: { color: [61, 180, 60], opacity: 1, label: 'ctx-lh-S_subcentral_ant' },
  1175: { color: [61, 180, 250], opacity: 1, label: 'ctx-lh-S_subcentral_post' },
  1176: { color: [21, 20, 60], opacity: 1, label: 'ctx-lh-S_suborbital' },
  1177: { color: [101, 60, 60], opacity: 1, label: 'ctx-lh-S_subparietal' },
  1178: { color: [21, 220, 220], opacity: 1, label: 'ctx-lh-S_supracingulate' },
  1179: { color: [21, 180, 180], opacity: 1, label: 'ctx-lh-S_temporal_inferior' },
  1180: { color: [223, 220, 60], opacity: 1, label: 'ctx-lh-S_temporal_superior' },
  1181: { color: [221, 60, 60], opacity: 1, label: 'ctx-lh-S_temporal_transverse' },
  2100: { color: [0, 0, 0], opacity: 1, label: 'ctx-rh-Unknown' },
  2101: { color: [50, 50, 50], opacity: 1, label: 'ctx-rh-Corpus_callosum' },
  2102: { color: [180, 20, 30], opacity: 1, label: 'ctx-rh-G_and_S_Insula_ONLY_AVERAGE' },
  2103: { color: [60, 25, 25], opacity: 1, label: 'ctx-rh-G_cingulate-Isthmus' },
  2104: { color: [25, 60, 60], opacity: 1, label: 'ctx-rh-G_cingulate-Main_part' },
  2105: { color: [180, 20, 20], opacity: 1, label: 'ctx-rh-G_cuneus' },
  2106: { color: [220, 20, 100], opacity: 1, label: 'ctx-rh-G_frontal_inf-Opercular_part' },
  2107: { color: [140, 60, 60], opacity: 1, label: 'ctx-rh-G_frontal_inf-Orbital_part' },
  2108: { color: [180, 220, 140], opacity: 1, label: 'ctx-rh-G_frontal_inf-Triangular_part' },
  2109: { color: [140, 100, 180], opacity: 1, label: 'ctx-rh-G_frontal_middle' },
  2110: { color: [180, 20, 140], opacity: 1, label: 'ctx-rh-G_frontal_superior' },
  2111: { color: [140, 20, 140], opacity: 1, label: 'ctx-rh-G_frontomarginal' },
  2112: { color: [21, 10, 10], opacity: 1, label: 'ctx-rh-G_insular_long' },
  2113: { color: [225, 140, 140], opacity: 1, label: 'ctx-rh-G_insular_short' },
  2114: { color: [23, 60, 180], opacity: 1, label: 'ctx-rh-G_and_S_occipital_inferior' },
  2115: { color: [180, 60, 180], opacity: 1, label: 'ctx-rh-G_occipital_middle' },
  2116: { color: [20, 220, 60], opacity: 1, label: 'ctx-rh-G_occipital_superior' },
  2117: { color: [60, 20, 140], opacity: 1, label: 'ctx-rh-G_occipit-temp_lat-Or_fusiform' },
  2118: { color: [220, 180, 140], opacity: 1, label: 'ctx-rh-G_occipit-temp_med-Lingual_part' },
  2119: {
    color: [65, 100, 20],
    opacity: 1,
    label: 'ctx-rh-G_occipit-temp_med-Parahippocampal_part'
  },
  2120: { color: [220, 60, 20], opacity: 1, label: 'ctx-rh-G_orbital' },
  2121: { color: [60, 100, 60], opacity: 1, label: 'ctx-rh-G_paracentral' },
  2122: { color: [20, 60, 220], opacity: 1, label: 'ctx-rh-G_parietal_inferior-Angular_part' },
  2123: {
    color: [100, 100, 60],
    opacity: 1,
    label: 'ctx-rh-G_parietal_inferior-Supramarginal_part'
  },
  2124: { color: [220, 180, 220], opacity: 1, label: 'ctx-rh-G_parietal_superior' },
  2125: { color: [20, 180, 140], opacity: 1, label: 'ctx-rh-G_postcentral' },
  2126: { color: [60, 140, 180], opacity: 1, label: 'ctx-rh-G_precentral' },
  2127: { color: [25, 20, 140], opacity: 1, label: 'ctx-rh-G_precuneus' },
  2128: { color: [20, 60, 100], opacity: 1, label: 'ctx-rh-G_rectus' },
  2129: { color: [60, 220, 20], opacity: 1, label: 'ctx-rh-G_subcallosal' },
  2130: { color: [60, 20, 220], opacity: 1, label: 'ctx-rh-G_subcentral' },
  2131: { color: [220, 220, 100], opacity: 1, label: 'ctx-rh-G_temporal_inferior' },
  2132: { color: [180, 60, 60], opacity: 1, label: 'ctx-rh-G_temporal_middle' },
  2133: { color: [60, 60, 220], opacity: 1, label: 'ctx-rh-G_temp_sup-G_temp_transv_and_interm_S' },
  2134: { color: [220, 60, 220], opacity: 1, label: 'ctx-rh-G_temp_sup-Lateral_aspect' },
  2135: { color: [65, 220, 60], opacity: 1, label: 'ctx-rh-G_temp_sup-Planum_polare' },
  2136: { color: [25, 140, 20], opacity: 1, label: 'ctx-rh-G_temp_sup-Planum_tempolare' },
  2137: { color: [13, 0, 250], opacity: 1, label: 'ctx-rh-G_and_S_transverse_frontopolar' },
  2138: { color: [61, 20, 220], opacity: 1, label: 'ctx-rh-Lat_Fissure-ant_sgt-ramus_horizontal' },
  2139: { color: [61, 20, 60], opacity: 1, label: 'ctx-rh-Lat_Fissure-ant_sgt-ramus_vertical' },
  2140: { color: [61, 60, 100], opacity: 1, label: 'ctx-rh-Lat_Fissure-post_sgt' },
  2141: { color: [25, 25, 25], opacity: 1, label: 'ctx-rh-Medial_wall' },
  2142: { color: [140, 20, 60], opacity: 1, label: 'ctx-rh-Pole_occipital' },
  2143: { color: [220, 180, 20], opacity: 1, label: 'ctx-rh-Pole_temporal' },
  2144: { color: [63, 180, 180], opacity: 1, label: 'ctx-rh-S_calcarine' },
  2145: { color: [221, 20, 10], opacity: 1, label: 'ctx-rh-S_central' },
  2146: { color: [21, 220, 20], opacity: 1, label: 'ctx-rh-S_central_insula' },
  2147: {
    color: [183, 100, 20],
    opacity: 1,
    label: 'ctx-rh-S_cingulate-Main_part_and_Intracingulate'
  },
  2148: { color: [221, 20, 100], opacity: 1, label: 'ctx-rh-S_cingulate-Marginalis_part' },
  2149: { color: [221, 60, 140], opacity: 1, label: 'ctx-rh-S_circular_insula_anterior' },
  2150: { color: [221, 20, 220], opacity: 1, label: 'ctx-rh-S_circular_insula_inferior' },
  2151: { color: [61, 220, 220], opacity: 1, label: 'ctx-rh-S_circular_insula_superior' },
  2152: { color: [100, 200, 200], opacity: 1, label: 'ctx-rh-S_collateral_transverse_ant' },
  2153: { color: [10, 200, 200], opacity: 1, label: 'ctx-rh-S_collateral_transverse_post' },
  2154: { color: [221, 220, 20], opacity: 1, label: 'ctx-rh-S_frontal_inferior' },
  2155: { color: [141, 20, 100], opacity: 1, label: 'ctx-rh-S_frontal_middle' },
  2156: { color: [61, 220, 100], opacity: 1, label: 'ctx-rh-S_frontal_superior' },
  2157: { color: [21, 220, 60], opacity: 1, label: 'ctx-rh-S_frontomarginal' },
  2158: { color: [141, 60, 20], opacity: 1, label: 'ctx-rh-S_intermedius_primus-Jensen' },
  2159: {
    color: [143, 20, 220],
    opacity: 1,
    label: 'ctx-rh-S_intraparietal-and_Parietal_transverse'
  },
  2160: { color: [61, 20, 180], opacity: 1, label: 'ctx-rh-S_occipital_anterior' },
  2161: { color: [101, 60, 220], opacity: 1, label: 'ctx-rh-S_occipital_middle_and_Lunatus' },
  2162: {
    color: [21, 20, 140],
    opacity: 1,
    label: 'ctx-rh-S_occipital_superior_and_transversalis'
  },
  2163: { color: [221, 140, 20], opacity: 1, label: 'ctx-rh-S_occipito-temporal_lateral' },
  2164: {
    color: [141, 100, 220],
    opacity: 1,
    label: 'ctx-rh-S_occipito-temporal_medial_and_S_Lingual'
  },
  2165: { color: [101, 20, 20], opacity: 1, label: 'ctx-rh-S_orbital-H_shapped' },
  2166: { color: [221, 100, 20], opacity: 1, label: 'ctx-rh-S_orbital_lateral' },
  2167: { color: [181, 200, 20], opacity: 1, label: 'ctx-rh-S_orbital_medial-Or_olfactory' },
  2168: { color: [21, 180, 140], opacity: 1, label: 'ctx-rh-S_paracentral' },
  2169: { color: [101, 100, 180], opacity: 1, label: 'ctx-rh-S_parieto_occipital' },
  2170: { color: [181, 220, 20], opacity: 1, label: 'ctx-rh-S_pericallosal' },
  2171: { color: [21, 140, 200], opacity: 1, label: 'ctx-rh-S_postcentral' },
  2172: { color: [21, 20, 240], opacity: 1, label: 'ctx-rh-S_precentral-Inferior-part' },
  2173: { color: [21, 20, 200], opacity: 1, label: 'ctx-rh-S_precentral-Superior-part' },
  2174: { color: [61, 180, 60], opacity: 1, label: 'ctx-rh-S_subcentral_ant' },
  2175: { color: [61, 180, 250], opacity: 1, label: 'ctx-rh-S_subcentral_post' },
  2176: { color: [21, 20, 60], opacity: 1, label: 'ctx-rh-S_suborbital' },
  2177: { color: [101, 60, 60], opacity: 1, label: 'ctx-rh-S_subparietal' },
  2178: { color: [21, 220, 220], opacity: 1, label: 'ctx-rh-S_supracingulate' },
  2179: { color: [21, 180, 180], opacity: 1, label: 'ctx-rh-S_temporal_inferior' },
  2180: { color: [223, 220, 60], opacity: 1, label: 'ctx-rh-S_temporal_superior' },
  2181: { color: [221, 60, 60], opacity: 1, label: 'ctx-rh-S_temporal_transverse' },
  2200: { color: [25, 60, 61], opacity: 1, label: 'ctx-rh-G_cingulate-caudal_ACC' },
  2201: { color: [25, 90, 60], opacity: 1, label: 'ctx-rh-G_cingulate-rostral_ACC' },
  2202: { color: [25, 120, 60], opacity: 1, label: 'ctx-rh-G_cingulate-posterior' },
  2205: { color: [25, 150, 60], opacity: 1, label: 'ctx-rh-S_cingulate-caudal_ACC' },
  2206: { color: [25, 180, 60], opacity: 1, label: 'ctx-rh-S_cingulate-rostral_ACC' },
  2207: { color: [25, 210, 60], opacity: 1, label: 'ctx-rh-S_cingulate-posterior' },
  2210: { color: [25, 150, 90], opacity: 1, label: 'ctx-rh-S_pericallosal-caudal' },
  2211: { color: [25, 180, 90], opacity: 1, label: 'ctx-rh-S_pericallosal-rostral' },
  2212: { color: [25, 210, 90], opacity: 1, label: 'ctx-rh-S_pericallosal-posterior' },
  3100: { color: [0, 0, 0], opacity: 1, label: 'wm-lh-Unknown' },
  3101: { color: [50, 50, 50], opacity: 1, label: 'wm-lh-Corpus_callosum' },
  3102: { color: [180, 20, 30], opacity: 1, label: 'wm-lh-G_and_S_Insula_ONLY_AVERAGE' },
  3103: { color: [60, 25, 25], opacity: 1, label: 'wm-lh-G_cingulate-Isthmus' },
  3104: { color: [25, 60, 60], opacity: 1, label: 'wm-lh-G_cingulate-Main_part' },
  3105: { color: [180, 20, 20], opacity: 1, label: 'wm-lh-G_cuneus' },
  3106: { color: [220, 20, 100], opacity: 1, label: 'wm-lh-G_frontal_inf-Opercular_part' },
  3107: { color: [140, 60, 60], opacity: 1, label: 'wm-lh-G_frontal_inf-Orbital_part' },
  3108: { color: [180, 220, 140], opacity: 1, label: 'wm-lh-G_frontal_inf-Triangular_part' },
  3109: { color: [140, 100, 180], opacity: 1, label: 'wm-lh-G_frontal_middle' },
  3110: { color: [180, 20, 140], opacity: 1, label: 'wm-lh-G_frontal_superior' },
  3111: { color: [140, 20, 140], opacity: 1, label: 'wm-lh-G_frontomarginal' },
  3112: { color: [21, 10, 10], opacity: 1, label: 'wm-lh-G_insular_long' },
  3113: { color: [225, 140, 140], opacity: 1, label: 'wm-lh-G_insular_short' },
  3114: { color: [23, 60, 180], opacity: 1, label: 'wm-lh-G_and_S_occipital_inferior' },
  3115: { color: [180, 60, 180], opacity: 1, label: 'wm-lh-G_occipital_middle' },
  3116: { color: [20, 220, 60], opacity: 1, label: 'wm-lh-G_occipital_superior' },
  3117: { color: [60, 20, 140], opacity: 1, label: 'wm-lh-G_occipit-temp_lat-Or_fusiform' },
  3118: { color: [220, 180, 140], opacity: 1, label: 'wm-lh-G_occipit-temp_med-Lingual_part' },
  3119: {
    color: [65, 100, 20],
    opacity: 1,
    label: 'wm-lh-G_occipit-temp_med-Parahippocampal_part'
  },
  3120: { color: [220, 60, 20], opacity: 1, label: 'wm-lh-G_orbital' },
  3121: { color: [60, 100, 60], opacity: 1, label: 'wm-lh-G_paracentral' },
  3122: { color: [20, 60, 220], opacity: 1, label: 'wm-lh-G_parietal_inferior-Angular_part' },
  3123: {
    color: [100, 100, 60],
    opacity: 1,
    label: 'wm-lh-G_parietal_inferior-Supramarginal_part'
  },
  3124: { color: [220, 180, 220], opacity: 1, label: 'wm-lh-G_parietal_superior' },
  3125: { color: [20, 180, 140], opacity: 1, label: 'wm-lh-G_postcentral' },
  3126: { color: [60, 140, 180], opacity: 1, label: 'wm-lh-G_precentral' },
  3127: { color: [25, 20, 140], opacity: 1, label: 'wm-lh-G_precuneus' },
  3128: { color: [20, 60, 100], opacity: 1, label: 'wm-lh-G_rectus' },
  3129: { color: [60, 220, 20], opacity: 1, label: 'wm-lh-G_subcallosal' },
  3130: { color: [60, 20, 220], opacity: 1, label: 'wm-lh-G_subcentral' },
  3131: { color: [220, 220, 100], opacity: 1, label: 'wm-lh-G_temporal_inferior' },
  3132: { color: [180, 60, 60], opacity: 1, label: 'wm-lh-G_temporal_middle' },
  3133: { color: [60, 60, 220], opacity: 1, label: 'wm-lh-G_temp_sup-G_temp_transv_and_interm_S' },
  3134: { color: [220, 60, 220], opacity: 1, label: 'wm-lh-G_temp_sup-Lateral_aspect' },
  3135: { color: [65, 220, 60], opacity: 1, label: 'wm-lh-G_temp_sup-Planum_polare' },
  3136: { color: [25, 140, 20], opacity: 1, label: 'wm-lh-G_temp_sup-Planum_tempolare' },
  3137: { color: [13, 0, 250], opacity: 1, label: 'wm-lh-G_and_S_transverse_frontopolar' },
  3138: { color: [61, 20, 220], opacity: 1, label: 'wm-lh-Lat_Fissure-ant_sgt-ramus_horizontal' },
  3139: { color: [61, 20, 60], opacity: 1, label: 'wm-lh-Lat_Fissure-ant_sgt-ramus_vertical' },
  3140: { color: [61, 60, 100], opacity: 1, label: 'wm-lh-Lat_Fissure-post_sgt' },
  3141: { color: [25, 25, 25], opacity: 1, label: 'wm-lh-Medial_wall' },
  3142: { color: [140, 20, 60], opacity: 1, label: 'wm-lh-Pole_occipital' },
  3143: { color: [220, 180, 20], opacity: 1, label: 'wm-lh-Pole_temporal' },
  3144: { color: [63, 180, 180], opacity: 1, label: 'wm-lh-S_calcarine' },
  3145: { color: [221, 20, 10], opacity: 1, label: 'wm-lh-S_central' },
  3146: { color: [21, 220, 20], opacity: 1, label: 'wm-lh-S_central_insula' },
  3147: {
    color: [183, 100, 20],
    opacity: 1,
    label: 'wm-lh-S_cingulate-Main_part_and_Intracingulate'
  },
  3148: { color: [221, 20, 100], opacity: 1, label: 'wm-lh-S_cingulate-Marginalis_part' },
  3149: { color: [221, 60, 140], opacity: 1, label: 'wm-lh-S_circular_insula_anterior' },
  3150: { color: [221, 20, 220], opacity: 1, label: 'wm-lh-S_circular_insula_inferior' },
  3151: { color: [61, 220, 220], opacity: 1, label: 'wm-lh-S_circular_insula_superior' },
  3152: { color: [100, 200, 200], opacity: 1, label: 'wm-lh-S_collateral_transverse_ant' },
  3153: { color: [10, 200, 200], opacity: 1, label: 'wm-lh-S_collateral_transverse_post' },
  3154: { color: [221, 220, 20], opacity: 1, label: 'wm-lh-S_frontal_inferior' },
  3155: { color: [141, 20, 100], opacity: 1, label: 'wm-lh-S_frontal_middle' },
  3156: { color: [61, 220, 100], opacity: 1, label: 'wm-lh-S_frontal_superior' },
  3157: { color: [21, 220, 60], opacity: 1, label: 'wm-lh-S_frontomarginal' },
  3158: { color: [141, 60, 20], opacity: 1, label: 'wm-lh-S_intermedius_primus-Jensen' },
  3159: {
    color: [143, 20, 220],
    opacity: 1,
    label: 'wm-lh-S_intraparietal-and_Parietal_transverse'
  },
  3160: { color: [61, 20, 180], opacity: 1, label: 'wm-lh-S_occipital_anterior' },
  3161: { color: [101, 60, 220], opacity: 1, label: 'wm-lh-S_occipital_middle_and_Lunatus' },
  3162: { color: [21, 20, 140], opacity: 1, label: 'wm-lh-S_occipital_superior_and_transversalis' },
  3163: { color: [221, 140, 20], opacity: 1, label: 'wm-lh-S_occipito-temporal_lateral' },
  3164: {
    color: [141, 100, 220],
    opacity: 1,
    label: 'wm-lh-S_occipito-temporal_medial_and_S_Lingual'
  },
  3165: { color: [101, 20, 20], opacity: 1, label: 'wm-lh-S_orbital-H_shapped' },
  3166: { color: [221, 100, 20], opacity: 1, label: 'wm-lh-S_orbital_lateral' },
  3167: { color: [181, 200, 20], opacity: 1, label: 'wm-lh-S_orbital_medial-Or_olfactory' },
  3168: { color: [21, 180, 140], opacity: 1, label: 'wm-lh-S_paracentral' },
  3169: { color: [101, 100, 180], opacity: 1, label: 'wm-lh-S_parieto_occipital' },
  3170: { color: [181, 220, 20], opacity: 1, label: 'wm-lh-S_pericallosal' },
  3171: { color: [21, 140, 200], opacity: 1, label: 'wm-lh-S_postcentral' },
  3172: { color: [21, 20, 240], opacity: 1, label: 'wm-lh-S_precentral-Inferior-part' },
  3173: { color: [21, 20, 200], opacity: 1, label: 'wm-lh-S_precentral-Superior-part' },
  3174: { color: [61, 180, 60], opacity: 1, label: 'wm-lh-S_subcentral_ant' },
  3175: { color: [61, 180, 250], opacity: 1, label: 'wm-lh-S_subcentral_post' },
  3176: { color: [21, 20, 60], opacity: 1, label: 'wm-lh-S_suborbital' },
  3177: { color: [101, 60, 60], opacity: 1, label: 'wm-lh-S_subparietal' },
  3178: { color: [21, 220, 220], opacity: 1, label: 'wm-lh-S_supracingulate' },
  3179: { color: [21, 180, 180], opacity: 1, label: 'wm-lh-S_temporal_inferior' },
  3180: { color: [223, 220, 60], opacity: 1, label: 'wm-lh-S_temporal_superior' },
  3181: { color: [221, 60, 60], opacity: 1, label: 'wm-lh-S_temporal_transverse' },
  4100: { color: [0, 0, 0], opacity: 1, label: 'wm-rh-Unknown' },
  4101: { color: [50, 50, 50], opacity: 1, label: 'wm-rh-Corpus_callosum' },
  4102: { color: [180, 20, 30], opacity: 1, label: 'wm-rh-G_and_S_Insula_ONLY_AVERAGE' },
  4103: { color: [60, 25, 25], opacity: 1, label: 'wm-rh-G_cingulate-Isthmus' },
  4104: { color: [25, 60, 60], opacity: 1, label: 'wm-rh-G_cingulate-Main_part' },
  4105: { color: [180, 20, 20], opacity: 1, label: 'wm-rh-G_cuneus' },
  4106: { color: [220, 20, 100], opacity: 1, label: 'wm-rh-G_frontal_inf-Opercular_part' },
  4107: { color: [140, 60, 60], opacity: 1, label: 'wm-rh-G_frontal_inf-Orbital_part' },
  4108: { color: [180, 220, 140], opacity: 1, label: 'wm-rh-G_frontal_inf-Triangular_part' },
  4109: { color: [140, 100, 180], opacity: 1, label: 'wm-rh-G_frontal_middle' },
  4110: { color: [180, 20, 140], opacity: 1, label: 'wm-rh-G_frontal_superior' },
  4111: { color: [140, 20, 140], opacity: 1, label: 'wm-rh-G_frontomarginal' },
  4112: { color: [21, 10, 10], opacity: 1, label: 'wm-rh-G_insular_long' },
  4113: { color: [225, 140, 140], opacity: 1, label: 'wm-rh-G_insular_short' },
  4114: { color: [23, 60, 180], opacity: 1, label: 'wm-rh-G_and_S_occipital_inferior' },
  4115: { color: [180, 60, 180], opacity: 1, label: 'wm-rh-G_occipital_middle' },
  4116: { color: [20, 220, 60], opacity: 1, label: 'wm-rh-G_occipital_superior' },
  4117: { color: [60, 20, 140], opacity: 1, label: 'wm-rh-G_occipit-temp_lat-Or_fusiform' },
  4118: { color: [220, 180, 140], opacity: 1, label: 'wm-rh-G_occipit-temp_med-Lingual_part' },
  4119: {
    color: [65, 100, 20],
    opacity: 1,
    label: 'wm-rh-G_occipit-temp_med-Parahippocampal_part'
  },
  4120: { color: [220, 60, 20], opacity: 1, label: 'wm-rh-G_orbital' },
  4121: { color: [60, 100, 60], opacity: 1, label: 'wm-rh-G_paracentral' },
  4122: { color: [20, 60, 220], opacity: 1, label: 'wm-rh-G_parietal_inferior-Angular_part' },
  4123: {
    color: [100, 100, 60],
    opacity: 1,
    label: 'wm-rh-G_parietal_inferior-Supramarginal_part'
  },
  4124: { color: [220, 180, 220], opacity: 1, label: 'wm-rh-G_parietal_superior' },
  4125: { color: [20, 180, 140], opacity: 1, label: 'wm-rh-G_postcentral' },
  4126: { color: [60, 140, 180], opacity: 1, label: 'wm-rh-G_precentral' },
  4127: { color: [25, 20, 140], opacity: 1, label: 'wm-rh-G_precuneus' },
  4128: { color: [20, 60, 100], opacity: 1, label: 'wm-rh-G_rectus' },
  4129: { color: [60, 220, 20], opacity: 1, label: 'wm-rh-G_subcallosal' },
  4130: { color: [60, 20, 220], opacity: 1, label: 'wm-rh-G_subcentral' },
  4131: { color: [220, 220, 100], opacity: 1, label: 'wm-rh-G_temporal_inferior' },
  4132: { color: [180, 60, 60], opacity: 1, label: 'wm-rh-G_temporal_middle' },
  4133: { color: [60, 60, 220], opacity: 1, label: 'wm-rh-G_temp_sup-G_temp_transv_and_interm_S' },
  4134: { color: [220, 60, 220], opacity: 1, label: 'wm-rh-G_temp_sup-Lateral_aspect' },
  4135: { color: [65, 220, 60], opacity: 1, label: 'wm-rh-G_temp_sup-Planum_polare' },
  4136: { color: [25, 140, 20], opacity: 1, label: 'wm-rh-G_temp_sup-Planum_tempolare' },
  4137: { color: [13, 0, 250], opacity: 1, label: 'wm-rh-G_and_S_transverse_frontopolar' },
  4138: { color: [61, 20, 220], opacity: 1, label: 'wm-rh-Lat_Fissure-ant_sgt-ramus_horizontal' },
  4139: { color: [61, 20, 60], opacity: 1, label: 'wm-rh-Lat_Fissure-ant_sgt-ramus_vertical' },
  4140: { color: [61, 60, 100], opacity: 1, label: 'wm-rh-Lat_Fissure-post_sgt' },
  4141: { color: [25, 25, 25], opacity: 1, label: 'wm-rh-Medial_wall' },
  4142: { color: [140, 20, 60], opacity: 1, label: 'wm-rh-Pole_occipital' },
  4143: { color: [220, 180, 20], opacity: 1, label: 'wm-rh-Pole_temporal' },
  4144: { color: [63, 180, 180], opacity: 1, label: 'wm-rh-S_calcarine' },
  4145: { color: [221, 20, 10], opacity: 1, label: 'wm-rh-S_central' },
  4146: { color: [21, 220, 20], opacity: 1, label: 'wm-rh-S_central_insula' },
  4147: {
    color: [183, 100, 20],
    opacity: 1,
    label: 'wm-rh-S_cingulate-Main_part_and_Intracingulate'
  },
  4148: { color: [221, 20, 100], opacity: 1, label: 'wm-rh-S_cingulate-Marginalis_part' },
  4149: { color: [221, 60, 140], opacity: 1, label: 'wm-rh-S_circular_insula_anterior' },
  4150: { color: [221, 20, 220], opacity: 1, label: 'wm-rh-S_circular_insula_inferior' },
  4151: { color: [61, 220, 220], opacity: 1, label: 'wm-rh-S_circular_insula_superior' },
  4152: { color: [100, 200, 200], opacity: 1, label: 'wm-rh-S_collateral_transverse_ant' },
  4153: { color: [10, 200, 200], opacity: 1, label: 'wm-rh-S_collateral_transverse_post' },
  4154: { color: [221, 220, 20], opacity: 1, label: 'wm-rh-S_frontal_inferior' },
  4155: { color: [141, 20, 100], opacity: 1, label: 'wm-rh-S_frontal_middle' },
  4156: { color: [61, 220, 100], opacity: 1, label: 'wm-rh-S_frontal_superior' },
  4157: { color: [21, 220, 60], opacity: 1, label: 'wm-rh-S_frontomarginal' },
  4158: { color: [141, 60, 20], opacity: 1, label: 'wm-rh-S_intermedius_primus-Jensen' },
  4159: {
    color: [143, 20, 220],
    opacity: 1,
    label: 'wm-rh-S_intraparietal-and_Parietal_transverse'
  },
  4160: { color: [61, 20, 180], opacity: 1, label: 'wm-rh-S_occipital_anterior' },
  4161: { color: [101, 60, 220], opacity: 1, label: 'wm-rh-S_occipital_middle_and_Lunatus' },
  4162: { color: [21, 20, 140], opacity: 1, label: 'wm-rh-S_occipital_superior_and_transversalis' },
  4163: { color: [221, 140, 20], opacity: 1, label: 'wm-rh-S_occipito-temporal_lateral' },
  4164: {
    color: [141, 100, 220],
    opacity: 1,
    label: 'wm-rh-S_occipito-temporal_medial_and_S_Lingual'
  },
  4165: { color: [101, 20, 20], opacity: 1, label: 'wm-rh-S_orbital-H_shapped' },
  4166: { color: [221, 100, 20], opacity: 1, label: 'wm-rh-S_orbital_lateral' },
  4167: { color: [181, 200, 20], opacity: 1, label: 'wm-rh-S_orbital_medial-Or_olfactory' },
  4168: { color: [21, 180, 140], opacity: 1, label: 'wm-rh-S_paracentral' },
  4169: { color: [101, 100, 180], opacity: 1, label: 'wm-rh-S_parieto_occipital' },
  4170: { color: [181, 220, 20], opacity: 1, label: 'wm-rh-S_pericallosal' },
  4171: { color: [21, 140, 200], opacity: 1, label: 'wm-rh-S_postcentral' },
  4172: { color: [21, 20, 240], opacity: 1, label: 'wm-rh-S_precentral-Inferior-part' },
  4173: { color: [21, 20, 200], opacity: 1, label: 'wm-rh-S_precentral-Superior-part' },
  4174: { color: [61, 180, 60], opacity: 1, label: 'wm-rh-S_subcentral_ant' },
  4175: { color: [61, 180, 250], opacity: 1, label: 'wm-rh-S_subcentral_post' },
  4176: { color: [21, 20, 60], opacity: 1, label: 'wm-rh-S_suborbital' },
  4177: { color: [101, 60, 60], opacity: 1, label: 'wm-rh-S_subparietal' },
  4178: { color: [21, 220, 220], opacity: 1, label: 'wm-rh-S_supracingulate' },
  4179: { color: [21, 180, 180], opacity: 1, label: 'wm-rh-S_temporal_inferior' },
  4180: { color: [223, 220, 60], opacity: 1, label: 'wm-rh-S_temporal_superior' },
  4181: { color: [221, 60, 60], opacity: 1, label: 'wm-rh-S_temporal_transverse' },
  5001: { color: [20, 30, 40], opacity: 1, label: 'Left-UnsegmentedWhiteMatter' },
  5002: { color: [20, 30, 40], opacity: 1, label: 'Right-UnsegmentedWhiteMatter' },
  5100: { color: [204, 102, 102], opacity: 1, label: 'fmajor' },
  5101: { color: [204, 102, 102], opacity: 1, label: 'fminor' },
  5102: { color: [255, 255, 102], opacity: 1, label: 'lh.atr' },
  5103: { color: [153, 204, 0], opacity: 1, label: 'lh.cab' },
  5104: { color: [0, 153, 153], opacity: 1, label: 'lh.ccg' },
  5105: { color: [204, 153, 255], opacity: 1, label: 'lh.cst' },
  5106: { color: [255, 153, 51], opacity: 1, label: 'lh.ilf' },
  5107: { color: [204, 204, 204], opacity: 1, label: 'lh.slfp' },
  5108: { color: [153, 255, 255], opacity: 1, label: 'lh.slft' },
  5109: { color: [102, 153, 255], opacity: 1, label: 'lh.unc' },
  5110: { color: [255, 255, 102], opacity: 1, label: 'rh.atr' },
  5111: { color: [153, 204, 0], opacity: 1, label: 'rh.cab' },
  5112: { color: [0, 153, 153], opacity: 1, label: 'rh.ccg' },
  5113: { color: [204, 153, 255], opacity: 1, label: 'rh.cst' },
  5114: { color: [255, 153, 51], opacity: 1, label: 'rh.ilf' },
  5115: { color: [204, 204, 204], opacity: 1, label: 'rh.slfp' },
  5116: { color: [153, 255, 255], opacity: 1, label: 'rh.slft' },
  5117: { color: [102, 153, 255], opacity: 1, label: 'rh.unc' },
  5200: { color: [204, 102, 102], opacity: 1, label: 'CC-ForcepsMajor' },
  5201: { color: [204, 102, 102], opacity: 1, label: 'CC-ForcepsMinor' },
  5202: { color: [255, 255, 102], opacity: 1, label: 'LAntThalRadiation' },
  5203: { color: [153, 204, 0], opacity: 1, label: 'LCingulumAngBundle' },
  5204: { color: [0, 153, 153], opacity: 1, label: 'LCingulumCingGyrus' },
  5205: { color: [204, 153, 255], opacity: 1, label: 'LCorticospinalTract' },
  5206: { color: [255, 153, 51], opacity: 1, label: 'LInfLongFas' },
  5207: { color: [204, 204, 204], opacity: 1, label: 'LSupLongFasParietal' },
  5208: { color: [153, 255, 255], opacity: 1, label: 'LSupLongFasTemporal' },
  5209: { color: [102, 153, 255], opacity: 1, label: 'LUncinateFas' },
  5210: { color: [255, 255, 102], opacity: 1, label: 'RAntThalRadiation' },
  5211: { color: [153, 204, 0], opacity: 1, label: 'RCingulumAngBundle' },
  5212: { color: [0, 153, 153], opacity: 1, label: 'RCingulumCingGyrus' },
  5213: { color: [204, 153, 255], opacity: 1, label: 'RCorticospinalTract' },
  5214: { color: [255, 153, 51], opacity: 1, label: 'RInfLongFas' },
  5215: { color: [204, 204, 204], opacity: 1, label: 'RSupLongFasParietal' },
  5216: { color: [153, 255, 255], opacity: 1, label: 'RSupLongFasTemporal' },
  5217: { color: [102, 153, 255], opacity: 1, label: 'RUncinateFas' },
  6000: { color: [0, 255, 0], opacity: 1, label: 'CST-orig' },
  6001: { color: [255, 255, 0], opacity: 1, label: 'CST-hammer' },
  6002: { color: [0, 255, 255], opacity: 1, label: 'CST-CVS' },
  6003: { color: [0, 0, 255], opacity: 1, label: 'CST-flirt' },
  6010: { color: [236, 16, 231], opacity: 1, label: 'Left-SLF1' },
  6020: { color: [237, 18, 232], opacity: 1, label: 'Right-SLF1' },
  6030: { color: [236, 13, 227], opacity: 1, label: 'Left-SLF3' },
  6040: { color: [236, 17, 228], opacity: 1, label: 'Right-SLF3' },
  6050: { color: [1, 255, 1], opacity: 1, label: 'Left-CST' },
  6060: { color: [2, 255, 1], opacity: 1, label: 'Right-CST' },
  6070: { color: [236, 14, 230], opacity: 1, label: 'Left-SLF2' },
  6080: { color: [237, 14, 230], opacity: 1, label: 'Right-SLF2' },
  7001: { color: [72, 132, 181], opacity: 1, label: 'Lateral-nucleus' },
  7002: { color: [243, 243, 243], opacity: 1, label: 'Basolateral-nucleus' },
  7003: { color: [207, 63, 79], opacity: 1, label: 'Basal-nucleus' },
  7004: { color: [121, 20, 135], opacity: 1, label: 'Centromedial-nucleus' },
  7005: { color: [197, 60, 248], opacity: 1, label: 'Central-nucleus' },
  7006: { color: [2, 149, 2], opacity: 1, label: 'Medial-nucleus' },
  7007: { color: [221, 249, 166], opacity: 1, label: 'Cortical-nucleus' },
  7008: { color: [232, 146, 35], opacity: 1, label: 'Accessory-Basal-nucleus' },
  7009: { color: [20, 60, 120], opacity: 1, label: 'Corticoamygdaloid-transitio' },
  7010: { color: [250, 250, 0], opacity: 1, label: 'Anterior-amygdaloid-area-AAA' },
  7011: { color: [122, 187, 222], opacity: 1, label: 'Fusion-amygdala-HP-FAH' },
  7012: { color: [237, 12, 177], opacity: 1, label: 'Hippocampal-amygdala-transition-HATA' },
  7013: { color: [10, 49, 255], opacity: 1, label: 'Endopiriform-nucleus' },
  7014: { color: [205, 184, 144], opacity: 1, label: 'Lateral-nucleus-olfactory-tract' },
  7015: { color: [45, 205, 165], opacity: 1, label: 'Paralaminar-nucleus' },
  7016: { color: [117, 160, 175], opacity: 1, label: 'Intercalated-nucleus' },
  7017: { color: [221, 217, 21], opacity: 1, label: 'Prepiriform-cortex' },
  7018: { color: [20, 60, 120], opacity: 1, label: 'Periamygdaloid-cortex' },
  7019: { color: [141, 21, 100], opacity: 1, label: 'Envelope-Amygdala' },
  7020: { color: [225, 140, 141], opacity: 1, label: 'Extranuclear-Amydala' },
  7100: { color: [42, 201, 168], opacity: 1, label: 'Brainstem-inferior-colliculus' },
  7101: { color: [168, 104, 162], opacity: 1, label: 'Brainstem-cochlear-nucleus' },
  8001: { color: [74, 130, 181], opacity: 1, label: 'Thalamus-Anterior' },
  8002: { color: [242, 241, 240], opacity: 1, label: 'Thalamus-Ventral-anterior' },
  8003: { color: [206, 65, 78], opacity: 1, label: 'Thalamus-Lateral-dorsal' },
  8004: { color: [120, 21, 133], opacity: 1, label: 'Thalamus-Lateral-posterior' },
  8005: { color: [195, 61, 246], opacity: 1, label: 'Thalamus-Ventral-lateral' },
  8006: { color: [3, 147, 6], opacity: 1, label: 'Thalamus-Ventral-posterior-medial' },
  8007: { color: [220, 251, 163], opacity: 1, label: 'Thalamus-Ventral-posterior-lateral' },
  8008: { color: [232, 146, 33], opacity: 1, label: 'Thalamus-intralaminar' },
  8009: { color: [4, 114, 14], opacity: 1, label: 'Thalamus-centromedian' },
  8010: { color: [121, 184, 220], opacity: 1, label: 'Thalamus-mediodorsal' },
  8011: { color: [235, 11, 175], opacity: 1, label: 'Thalamus-medial' },
  8012: { color: [12, 46, 250], opacity: 1, label: 'Thalamus-pulvinar' },
  8013: { color: [203, 182, 143], opacity: 1, label: 'Thalamus-lateral-geniculate' },
  8014: { color: [42, 204, 167], opacity: 1, label: 'Thalamus-medial-geniculate' },
  9000: { color: [50, 100, 30], opacity: 1, label: 'ctx-lh-prefrontal' },
  9001: { color: [30, 100, 45], opacity: 1, label: 'ctx-lh-primary-motor' },
  9002: { color: [130, 100, 165], opacity: 1, label: 'ctx-lh-premotor' },
  9003: { color: [105, 25, 5], opacity: 1, label: 'ctx-lh-temporal' },
  9004: { color: [125, 70, 55], opacity: 1, label: 'ctx-lh-posterior-parietal' },
  9005: { color: [225, 20, 105], opacity: 1, label: 'ctx-lh-prim-sec-somatosensory' },
  9006: { color: [225, 20, 15], opacity: 1, label: 'ctx-lh-occipital' },
  9500: { color: [50, 200, 30], opacity: 1, label: 'ctx-rh-prefrontal' },
  9501: { color: [30, 150, 45], opacity: 1, label: 'ctx-rh-primary-motor' },
  9502: { color: [130, 150, 165], opacity: 1, label: 'ctx-rh-premotor' },
  9503: { color: [105, 75, 5], opacity: 1, label: 'ctx-rh-temporal' },
  9504: { color: [125, 120, 55], opacity: 1, label: 'ctx-rh-posterior-parietal' },
  9505: { color: [225, 70, 105], opacity: 1, label: 'ctx-rh-prim-sec-somatosensory' },
  9506: { color: [225, 70, 15], opacity: 1, label: 'ctx-rh-occipital' },
  11100: { color: [0, 0, 0], opacity: 1, label: 'ctx_lh_Unknown' },
  11101: { color: [23, 220, 60], opacity: 1, label: 'ctx_lh_G_and_S_frontomargin' },
  11102: { color: [23, 60, 180], opacity: 1, label: 'ctx_lh_G_and_S_occipital_inf' },
  11103: { color: [63, 100, 60], opacity: 1, label: 'ctx_lh_G_and_S_paracentral' },
  11104: { color: [63, 20, 220], opacity: 1, label: 'ctx_lh_G_and_S_subcentral' },
  11105: { color: [13, 0, 250], opacity: 1, label: 'ctx_lh_G_and_S_transv_frontopol' },
  11106: { color: [26, 60, 0], opacity: 1, label: 'ctx_lh_G_and_S_cingul-Ant' },
  11107: { color: [26, 60, 75], opacity: 1, label: 'ctx_lh_G_and_S_cingul-Mid-Ant' },
  11108: { color: [26, 60, 150], opacity: 1, label: 'ctx_lh_G_and_S_cingul-Mid-Post' },
  11109: { color: [25, 60, 250], opacity: 1, label: 'ctx_lh_G_cingul-Post-dorsal' },
  11110: { color: [60, 25, 25], opacity: 1, label: 'ctx_lh_G_cingul-Post-ventral' },
  11111: { color: [180, 20, 20], opacity: 1, label: 'ctx_lh_G_cuneus' },
  11112: { color: [220, 20, 100], opacity: 1, label: 'ctx_lh_G_front_inf-Opercular' },
  11113: { color: [140, 60, 60], opacity: 1, label: 'ctx_lh_G_front_inf-Orbital' },
  11114: { color: [180, 220, 140], opacity: 1, label: 'ctx_lh_G_front_inf-Triangul' },
  11115: { color: [140, 100, 180], opacity: 1, label: 'ctx_lh_G_front_middle' },
  11116: { color: [180, 20, 140], opacity: 1, label: 'ctx_lh_G_front_sup' },
  11117: { color: [23, 10, 10], opacity: 1, label: 'ctx_lh_G_Ins_lg_and_S_cent_ins' },
  11118: { color: [225, 140, 140], opacity: 1, label: 'ctx_lh_G_insular_short' },
  11119: { color: [180, 60, 180], opacity: 1, label: 'ctx_lh_G_occipital_middle' },
  11120: { color: [20, 220, 60], opacity: 1, label: 'ctx_lh_G_occipital_sup' },
  11121: { color: [60, 20, 140], opacity: 1, label: 'ctx_lh_G_oc-temp_lat-fusifor' },
  11122: { color: [220, 180, 140], opacity: 1, label: 'ctx_lh_G_oc-temp_med-Lingual' },
  11123: { color: [65, 100, 20], opacity: 1, label: 'ctx_lh_G_oc-temp_med-Parahip' },
  11124: { color: [220, 60, 20], opacity: 1, label: 'ctx_lh_G_orbital' },
  11125: { color: [20, 60, 220], opacity: 1, label: 'ctx_lh_G_pariet_inf-Angular' },
  11126: { color: [100, 100, 60], opacity: 1, label: 'ctx_lh_G_pariet_inf-Supramar' },
  11127: { color: [220, 180, 220], opacity: 1, label: 'ctx_lh_G_parietal_sup' },
  11128: { color: [20, 180, 140], opacity: 1, label: 'ctx_lh_G_postcentral' },
  11129: { color: [60, 140, 180], opacity: 1, label: 'ctx_lh_G_precentral' },
  11130: { color: [25, 20, 140], opacity: 1, label: 'ctx_lh_G_precuneus' },
  11131: { color: [20, 60, 100], opacity: 1, label: 'ctx_lh_G_rectus' },
  11132: { color: [60, 220, 20], opacity: 1, label: 'ctx_lh_G_subcallosal' },
  11133: { color: [60, 60, 220], opacity: 1, label: 'ctx_lh_G_temp_sup-G_T_transv' },
  11134: { color: [220, 60, 220], opacity: 1, label: 'ctx_lh_G_temp_sup-Lateral' },
  11135: { color: [65, 220, 60], opacity: 1, label: 'ctx_lh_G_temp_sup-Plan_polar' },
  11136: { color: [25, 140, 20], opacity: 1, label: 'ctx_lh_G_temp_sup-Plan_tempo' },
  11137: { color: [220, 220, 100], opacity: 1, label: 'ctx_lh_G_temporal_inf' },
  11138: { color: [180, 60, 60], opacity: 1, label: 'ctx_lh_G_temporal_middle' },
  11139: { color: [61, 20, 220], opacity: 1, label: 'ctx_lh_Lat_Fis-ant-Horizont' },
  11140: { color: [61, 20, 60], opacity: 1, label: 'ctx_lh_Lat_Fis-ant-Vertical' },
  11141: { color: [61, 60, 100], opacity: 1, label: 'ctx_lh_Lat_Fis-post' },
  11142: { color: [25, 25, 25], opacity: 1, label: 'ctx_lh_Medial_wall' },
  11143: { color: [140, 20, 60], opacity: 1, label: 'ctx_lh_Pole_occipital' },
  11144: { color: [220, 180, 20], opacity: 1, label: 'ctx_lh_Pole_temporal' },
  11145: { color: [63, 180, 180], opacity: 1, label: 'ctx_lh_S_calcarine' },
  11146: { color: [221, 20, 10], opacity: 1, label: 'ctx_lh_S_central' },
  11147: { color: [221, 20, 100], opacity: 1, label: 'ctx_lh_S_cingul-Marginalis' },
  11148: { color: [221, 60, 140], opacity: 1, label: 'ctx_lh_S_circular_insula_ant' },
  11149: { color: [221, 20, 220], opacity: 1, label: 'ctx_lh_S_circular_insula_inf' },
  11150: { color: [61, 220, 220], opacity: 1, label: 'ctx_lh_S_circular_insula_sup' },
  11151: { color: [100, 200, 200], opacity: 1, label: 'ctx_lh_S_collat_transv_ant' },
  11152: { color: [10, 200, 200], opacity: 1, label: 'ctx_lh_S_collat_transv_post' },
  11153: { color: [221, 220, 20], opacity: 1, label: 'ctx_lh_S_front_inf' },
  11154: { color: [141, 20, 100], opacity: 1, label: 'ctx_lh_S_front_middle' },
  11155: { color: [61, 220, 100], opacity: 1, label: 'ctx_lh_S_front_sup' },
  11156: { color: [141, 60, 20], opacity: 1, label: 'ctx_lh_S_interm_prim-Jensen' },
  11157: { color: [143, 20, 220], opacity: 1, label: 'ctx_lh_S_intrapariet_and_P_trans' },
  11158: { color: [101, 60, 220], opacity: 1, label: 'ctx_lh_S_oc_middle_and_Lunatus' },
  11159: { color: [21, 20, 140], opacity: 1, label: 'ctx_lh_S_oc_sup_and_transversal' },
  11160: { color: [61, 20, 180], opacity: 1, label: 'ctx_lh_S_occipital_ant' },
  11161: { color: [221, 140, 20], opacity: 1, label: 'ctx_lh_S_oc-temp_lat' },
  11162: { color: [141, 100, 220], opacity: 1, label: 'ctx_lh_S_oc-temp_med_and_Lingual' },
  11163: { color: [221, 100, 20], opacity: 1, label: 'ctx_lh_S_orbital_lateral' },
  11164: { color: [181, 200, 20], opacity: 1, label: 'ctx_lh_S_orbital_med-olfact' },
  11165: { color: [101, 20, 20], opacity: 1, label: 'ctx_lh_S_orbital-H_Shaped' },
  11166: { color: [101, 100, 180], opacity: 1, label: 'ctx_lh_S_parieto_occipital' },
  11167: { color: [181, 220, 20], opacity: 1, label: 'ctx_lh_S_pericallosal' },
  11168: { color: [21, 140, 200], opacity: 1, label: 'ctx_lh_S_postcentral' },
  11169: { color: [21, 20, 240], opacity: 1, label: 'ctx_lh_S_precentral-inf-part' },
  11170: { color: [21, 20, 200], opacity: 1, label: 'ctx_lh_S_precentral-sup-part' },
  11171: { color: [21, 20, 60], opacity: 1, label: 'ctx_lh_S_suborbital' },
  11172: { color: [101, 60, 60], opacity: 1, label: 'ctx_lh_S_subparietal' },
  11173: { color: [21, 180, 180], opacity: 1, label: 'ctx_lh_S_temporal_inf' },
  11174: { color: [223, 220, 60], opacity: 1, label: 'ctx_lh_S_temporal_sup' },
  11175: { color: [221, 60, 60], opacity: 1, label: 'ctx_lh_S_temporal_transverse' },
  12100: { color: [0, 0, 0], opacity: 1, label: 'ctx_rh_Unknown' },
  12101: { color: [23, 220, 60], opacity: 1, label: 'ctx_rh_G_and_S_frontomargin' },
  12102: { color: [23, 60, 180], opacity: 1, label: 'ctx_rh_G_and_S_occipital_inf' },
  12103: { color: [63, 100, 60], opacity: 1, label: 'ctx_rh_G_and_S_paracentral' },
  12104: { color: [63, 20, 220], opacity: 1, label: 'ctx_rh_G_and_S_subcentral' },
  12105: { color: [13, 0, 250], opacity: 1, label: 'ctx_rh_G_and_S_transv_frontopol' },
  12106: { color: [26, 60, 0], opacity: 1, label: 'ctx_rh_G_and_S_cingul-Ant' },
  12107: { color: [26, 60, 75], opacity: 1, label: 'ctx_rh_G_and_S_cingul-Mid-Ant' },
  12108: { color: [26, 60, 150], opacity: 1, label: 'ctx_rh_G_and_S_cingul-Mid-Post' },
  12109: { color: [25, 60, 250], opacity: 1, label: 'ctx_rh_G_cingul-Post-dorsal' },
  12110: { color: [60, 25, 25], opacity: 1, label: 'ctx_rh_G_cingul-Post-ventral' },
  12111: { color: [180, 20, 20], opacity: 1, label: 'ctx_rh_G_cuneus' },
  12112: { color: [220, 20, 100], opacity: 1, label: 'ctx_rh_G_front_inf-Opercular' },
  12113: { color: [140, 60, 60], opacity: 1, label: 'ctx_rh_G_front_inf-Orbital' },
  12114: { color: [180, 220, 140], opacity: 1, label: 'ctx_rh_G_front_inf-Triangul' },
  12115: { color: [140, 100, 180], opacity: 1, label: 'ctx_rh_G_front_middle' },
  12116: { color: [180, 20, 140], opacity: 1, label: 'ctx_rh_G_front_sup' },
  12117: { color: [23, 10, 10], opacity: 1, label: 'ctx_rh_G_Ins_lg_and_S_cent_ins' },
  12118: { color: [225, 140, 140], opacity: 1, label: 'ctx_rh_G_insular_short' },
  12119: { color: [180, 60, 180], opacity: 1, label: 'ctx_rh_G_occipital_middle' },
  12120: { color: [20, 220, 60], opacity: 1, label: 'ctx_rh_G_occipital_sup' },
  12121: { color: [60, 20, 140], opacity: 1, label: 'ctx_rh_G_oc-temp_lat-fusifor' },
  12122: { color: [220, 180, 140], opacity: 1, label: 'ctx_rh_G_oc-temp_med-Lingual' },
  12123: { color: [65, 100, 20], opacity: 1, label: 'ctx_rh_G_oc-temp_med-Parahip' },
  12124: { color: [220, 60, 20], opacity: 1, label: 'ctx_rh_G_orbital' },
  12125: { color: [20, 60, 220], opacity: 1, label: 'ctx_rh_G_pariet_inf-Angular' },
  12126: { color: [100, 100, 60], opacity: 1, label: 'ctx_rh_G_pariet_inf-Supramar' },
  12127: { color: [220, 180, 220], opacity: 1, label: 'ctx_rh_G_parietal_sup' },
  12128: { color: [20, 180, 140], opacity: 1, label: 'ctx_rh_G_postcentral' },
  12129: { color: [60, 140, 180], opacity: 1, label: 'ctx_rh_G_precentral' },
  12130: { color: [25, 20, 140], opacity: 1, label: 'ctx_rh_G_precuneus' },
  12131: { color: [20, 60, 100], opacity: 1, label: 'ctx_rh_G_rectus' },
  12132: { color: [60, 220, 20], opacity: 1, label: 'ctx_rh_G_subcallosal' },
  12133: { color: [60, 60, 220], opacity: 1, label: 'ctx_rh_G_temp_sup-G_T_transv' },
  12134: { color: [220, 60, 220], opacity: 1, label: 'ctx_rh_G_temp_sup-Lateral' },
  12135: { color: [65, 220, 60], opacity: 1, label: 'ctx_rh_G_temp_sup-Plan_polar' },
  12136: { color: [25, 140, 20], opacity: 1, label: 'ctx_rh_G_temp_sup-Plan_tempo' },
  12137: { color: [220, 220, 100], opacity: 1, label: 'ctx_rh_G_temporal_inf' },
  12138: { color: [180, 60, 60], opacity: 1, label: 'ctx_rh_G_temporal_middle' },
  12139: { color: [61, 20, 220], opacity: 1, label: 'ctx_rh_Lat_Fis-ant-Horizont' },
  12140: { color: [61, 20, 60], opacity: 1, label: 'ctx_rh_Lat_Fis-ant-Vertical' },
  12141: { color: [61, 60, 100], opacity: 1, label: 'ctx_rh_Lat_Fis-post' },
  12142: { color: [25, 25, 25], opacity: 1, label: 'ctx_rh_Medial_wall' },
  12143: { color: [140, 20, 60], opacity: 1, label: 'ctx_rh_Pole_occipital' },
  12144: { color: [220, 180, 20], opacity: 1, label: 'ctx_rh_Pole_temporal' },
  12145: { color: [63, 180, 180], opacity: 1, label: 'ctx_rh_S_calcarine' },
  12146: { color: [221, 20, 10], opacity: 1, label: 'ctx_rh_S_central' },
  12147: { color: [221, 20, 100], opacity: 1, label: 'ctx_rh_S_cingul-Marginalis' },
  12148: { color: [221, 60, 140], opacity: 1, label: 'ctx_rh_S_circular_insula_ant' },
  12149: { color: [221, 20, 220], opacity: 1, label: 'ctx_rh_S_circular_insula_inf' },
  12150: { color: [61, 220, 220], opacity: 1, label: 'ctx_rh_S_circular_insula_sup' },
  12151: { color: [100, 200, 200], opacity: 1, label: 'ctx_rh_S_collat_transv_ant' },
  12152: { color: [10, 200, 200], opacity: 1, label: 'ctx_rh_S_collat_transv_post' },
  12153: { color: [221, 220, 20], opacity: 1, label: 'ctx_rh_S_front_inf' },
  12154: { color: [141, 20, 100], opacity: 1, label: 'ctx_rh_S_front_middle' },
  12155: { color: [61, 220, 100], opacity: 1, label: 'ctx_rh_S_front_sup' },
  12156: { color: [141, 60, 20], opacity: 1, label: 'ctx_rh_S_interm_prim-Jensen' },
  12157: { color: [143, 20, 220], opacity: 1, label: 'ctx_rh_S_intrapariet_and_P_trans' },
  12158: { color: [101, 60, 220], opacity: 1, label: 'ctx_rh_S_oc_middle_and_Lunatus' },
  12159: { color: [21, 20, 140], opacity: 1, label: 'ctx_rh_S_oc_sup_and_transversal' },
  12160: { color: [61, 20, 180], opacity: 1, label: 'ctx_rh_S_occipital_ant' },
  12161: { color: [221, 140, 20], opacity: 1, label: 'ctx_rh_S_oc-temp_lat' },
  12162: { color: [141, 100, 220], opacity: 1, label: 'ctx_rh_S_oc-temp_med_and_Lingual' },
  12163: { color: [221, 100, 20], opacity: 1, label: 'ctx_rh_S_orbital_lateral' },
  12164: { color: [181, 200, 20], opacity: 1, label: 'ctx_rh_S_orbital_med-olfact' },
  12165: { color: [101, 20, 20], opacity: 1, label: 'ctx_rh_S_orbital-H_Shaped' },
  12166: { color: [101, 100, 180], opacity: 1, label: 'ctx_rh_S_parieto_occipital' },
  12167: { color: [181, 220, 20], opacity: 1, label: 'ctx_rh_S_pericallosal' },
  12168: { color: [21, 140, 200], opacity: 1, label: 'ctx_rh_S_postcentral' },
  12169: { color: [21, 20, 240], opacity: 1, label: 'ctx_rh_S_precentral-inf-part' },
  12170: { color: [21, 20, 200], opacity: 1, label: 'ctx_rh_S_precentral-sup-part' },
  12171: { color: [21, 20, 60], opacity: 1, label: 'ctx_rh_S_suborbital' },
  12172: { color: [101, 60, 60], opacity: 1, label: 'ctx_rh_S_subparietal' },
  12173: { color: [21, 180, 180], opacity: 1, label: 'ctx_rh_S_temporal_inf' },
  12174: { color: [223, 220, 60], opacity: 1, label: 'ctx_rh_S_temporal_sup' },
  12175: { color: [221, 60, 60], opacity: 1, label: 'ctx_rh_S_temporal_transverse' },
  13100: { color: [0, 0, 0], opacity: 1, label: 'wm_lh_Unknown' },
  13101: { color: [23, 220, 60], opacity: 1, label: 'wm_lh_G_and_S_frontomargin' },
  13102: { color: [23, 60, 180], opacity: 1, label: 'wm_lh_G_and_S_occipital_inf' },
  13103: { color: [63, 100, 60], opacity: 1, label: 'wm_lh_G_and_S_paracentral' },
  13104: { color: [63, 20, 220], opacity: 1, label: 'wm_lh_G_and_S_subcentral' },
  13105: { color: [13, 0, 250], opacity: 1, label: 'wm_lh_G_and_S_transv_frontopol' },
  13106: { color: [26, 60, 0], opacity: 1, label: 'wm_lh_G_and_S_cingul-Ant' },
  13107: { color: [26, 60, 75], opacity: 1, label: 'wm_lh_G_and_S_cingul-Mid-Ant' },
  13108: { color: [26, 60, 150], opacity: 1, label: 'wm_lh_G_and_S_cingul-Mid-Post' },
  13109: { color: [25, 60, 250], opacity: 1, label: 'wm_lh_G_cingul-Post-dorsal' },
  13110: { color: [60, 25, 25], opacity: 1, label: 'wm_lh_G_cingul-Post-ventral' },
  13111: { color: [180, 20, 20], opacity: 1, label: 'wm_lh_G_cuneus' },
  13112: { color: [220, 20, 100], opacity: 1, label: 'wm_lh_G_front_inf-Opercular' },
  13113: { color: [140, 60, 60], opacity: 1, label: 'wm_lh_G_front_inf-Orbital' },
  13114: { color: [180, 220, 140], opacity: 1, label: 'wm_lh_G_front_inf-Triangul' },
  13115: { color: [140, 100, 180], opacity: 1, label: 'wm_lh_G_front_middle' },
  13116: { color: [180, 20, 140], opacity: 1, label: 'wm_lh_G_front_sup' },
  13117: { color: [23, 10, 10], opacity: 1, label: 'wm_lh_G_Ins_lg_and_S_cent_ins' },
  13118: { color: [225, 140, 140], opacity: 1, label: 'wm_lh_G_insular_short' },
  13119: { color: [180, 60, 180], opacity: 1, label: 'wm_lh_G_occipital_middle' },
  13120: { color: [20, 220, 60], opacity: 1, label: 'wm_lh_G_occipital_sup' },
  13121: { color: [60, 20, 140], opacity: 1, label: 'wm_lh_G_oc-temp_lat-fusifor' },
  13122: { color: [220, 180, 140], opacity: 1, label: 'wm_lh_G_oc-temp_med-Lingual' },
  13123: { color: [65, 100, 20], opacity: 1, label: 'wm_lh_G_oc-temp_med-Parahip' },
  13124: { color: [220, 60, 20], opacity: 1, label: 'wm_lh_G_orbital' },
  13125: { color: [20, 60, 220], opacity: 1, label: 'wm_lh_G_pariet_inf-Angular' },
  13126: { color: [100, 100, 60], opacity: 1, label: 'wm_lh_G_pariet_inf-Supramar' },
  13127: { color: [220, 180, 220], opacity: 1, label: 'wm_lh_G_parietal_sup' },
  13128: { color: [20, 180, 140], opacity: 1, label: 'wm_lh_G_postcentral' },
  13129: { color: [60, 140, 180], opacity: 1, label: 'wm_lh_G_precentral' },
  13130: { color: [25, 20, 140], opacity: 1, label: 'wm_lh_G_precuneus' },
  13131: { color: [20, 60, 100], opacity: 1, label: 'wm_lh_G_rectus' },
  13132: { color: [60, 220, 20], opacity: 1, label: 'wm_lh_G_subcallosal' },
  13133: { color: [60, 60, 220], opacity: 1, label: 'wm_lh_G_temp_sup-G_T_transv' },
  13134: { color: [220, 60, 220], opacity: 1, label: 'wm_lh_G_temp_sup-Lateral' },
  13135: { color: [65, 220, 60], opacity: 1, label: 'wm_lh_G_temp_sup-Plan_polar' },
  13136: { color: [25, 140, 20], opacity: 1, label: 'wm_lh_G_temp_sup-Plan_tempo' },
  13137: { color: [220, 220, 100], opacity: 1, label: 'wm_lh_G_temporal_inf' },
  13138: { color: [180, 60, 60], opacity: 1, label: 'wm_lh_G_temporal_middle' },
  13139: { color: [61, 20, 220], opacity: 1, label: 'wm_lh_Lat_Fis-ant-Horizont' },
  13140: { color: [61, 20, 60], opacity: 1, label: 'wm_lh_Lat_Fis-ant-Vertical' },
  13141: { color: [61, 60, 100], opacity: 1, label: 'wm_lh_Lat_Fis-post' },
  13142: { color: [25, 25, 25], opacity: 1, label: 'wm_lh_Medial_wall' },
  13143: { color: [140, 20, 60], opacity: 1, label: 'wm_lh_Pole_occipital' },
  13144: { color: [220, 180, 20], opacity: 1, label: 'wm_lh_Pole_temporal' },
  13145: { color: [63, 180, 180], opacity: 1, label: 'wm_lh_S_calcarine' },
  13146: { color: [221, 20, 10], opacity: 1, label: 'wm_lh_S_central' },
  13147: { color: [221, 20, 100], opacity: 1, label: 'wm_lh_S_cingul-Marginalis' },
  13148: { color: [221, 60, 140], opacity: 1, label: 'wm_lh_S_circular_insula_ant' },
  13149: { color: [221, 20, 220], opacity: 1, label: 'wm_lh_S_circular_insula_inf' },
  13150: { color: [61, 220, 220], opacity: 1, label: 'wm_lh_S_circular_insula_sup' },
  13151: { color: [100, 200, 200], opacity: 1, label: 'wm_lh_S_collat_transv_ant' },
  13152: { color: [10, 200, 200], opacity: 1, label: 'wm_lh_S_collat_transv_post' },
  13153: { color: [221, 220, 20], opacity: 1, label: 'wm_lh_S_front_inf' },
  13154: { color: [141, 20, 100], opacity: 1, label: 'wm_lh_S_front_middle' },
  13155: { color: [61, 220, 100], opacity: 1, label: 'wm_lh_S_front_sup' },
  13156: { color: [141, 60, 20], opacity: 1, label: 'wm_lh_S_interm_prim-Jensen' },
  13157: { color: [143, 20, 220], opacity: 1, label: 'wm_lh_S_intrapariet_and_P_trans' },
  13158: { color: [101, 60, 220], opacity: 1, label: 'wm_lh_S_oc_middle_and_Lunatus' },
  13159: { color: [21, 20, 140], opacity: 1, label: 'wm_lh_S_oc_sup_and_transversal' },
  13160: { color: [61, 20, 180], opacity: 1, label: 'wm_lh_S_occipital_ant' },
  13161: { color: [221, 140, 20], opacity: 1, label: 'wm_lh_S_oc-temp_lat' },
  13162: { color: [141, 100, 220], opacity: 1, label: 'wm_lh_S_oc-temp_med_and_Lingual' },
  13163: { color: [221, 100, 20], opacity: 1, label: 'wm_lh_S_orbital_lateral' },
  13164: { color: [181, 200, 20], opacity: 1, label: 'wm_lh_S_orbital_med-olfact' },
  13165: { color: [101, 20, 20], opacity: 1, label: 'wm_lh_S_orbital-H_Shaped' },
  13166: { color: [101, 100, 180], opacity: 1, label: 'wm_lh_S_parieto_occipital' },
  13167: { color: [181, 220, 20], opacity: 1, label: 'wm_lh_S_pericallosal' },
  13168: { color: [21, 140, 200], opacity: 1, label: 'wm_lh_S_postcentral' },
  13169: { color: [21, 20, 240], opacity: 1, label: 'wm_lh_S_precentral-inf-part' },
  13170: { color: [21, 20, 200], opacity: 1, label: 'wm_lh_S_precentral-sup-part' },
  13171: { color: [21, 20, 60], opacity: 1, label: 'wm_lh_S_suborbital' },
  13172: { color: [101, 60, 60], opacity: 1, label: 'wm_lh_S_subparietal' },
  13173: { color: [21, 180, 180], opacity: 1, label: 'wm_lh_S_temporal_inf' },
  13174: { color: [223, 220, 60], opacity: 1, label: 'wm_lh_S_temporal_sup' },
  13175: { color: [221, 60, 60], opacity: 1, label: 'wm_lh_S_temporal_transverse' },
  14100: { color: [0, 0, 0], opacity: 1, label: 'wm_rh_Unknown' },
  14101: { color: [23, 220, 60], opacity: 1, label: 'wm_rh_G_and_S_frontomargin' },
  14102: { color: [23, 60, 180], opacity: 1, label: 'wm_rh_G_and_S_occipital_inf' },
  14103: { color: [63, 100, 60], opacity: 1, label: 'wm_rh_G_and_S_paracentral' },
  14104: { color: [63, 20, 220], opacity: 1, label: 'wm_rh_G_and_S_subcentral' },
  14105: { color: [13, 0, 250], opacity: 1, label: 'wm_rh_G_and_S_transv_frontopol' },
  14106: { color: [26, 60, 0], opacity: 1, label: 'wm_rh_G_and_S_cingul-Ant' },
  14107: { color: [26, 60, 75], opacity: 1, label: 'wm_rh_G_and_S_cingul-Mid-Ant' },
  14108: { color: [26, 60, 150], opacity: 1, label: 'wm_rh_G_and_S_cingul-Mid-Post' },
  14109: { color: [25, 60, 250], opacity: 1, label: 'wm_rh_G_cingul-Post-dorsal' },
  14110: { color: [60, 25, 25], opacity: 1, label: 'wm_rh_G_cingul-Post-ventral' },
  14111: { color: [180, 20, 20], opacity: 1, label: 'wm_rh_G_cuneus' },
  14112: { color: [220, 20, 100], opacity: 1, label: 'wm_rh_G_front_inf-Opercular' },
  14113: { color: [140, 60, 60], opacity: 1, label: 'wm_rh_G_front_inf-Orbital' },
  14114: { color: [180, 220, 140], opacity: 1, label: 'wm_rh_G_front_inf-Triangul' },
  14115: { color: [140, 100, 180], opacity: 1, label: 'wm_rh_G_front_middle' },
  14116: { color: [180, 20, 140], opacity: 1, label: 'wm_rh_G_front_sup' },
  14117: { color: [23, 10, 10], opacity: 1, label: 'wm_rh_G_Ins_lg_and_S_cent_ins' },
  14118: { color: [225, 140, 140], opacity: 1, label: 'wm_rh_G_insular_short' },
  14119: { color: [180, 60, 180], opacity: 1, label: 'wm_rh_G_occipital_middle' },
  14120: { color: [20, 220, 60], opacity: 1, label: 'wm_rh_G_occipital_sup' },
  14121: { color: [60, 20, 140], opacity: 1, label: 'wm_rh_G_oc-temp_lat-fusifor' },
  14122: { color: [220, 180, 140], opacity: 1, label: 'wm_rh_G_oc-temp_med-Lingual' },
  14123: { color: [65, 100, 20], opacity: 1, label: 'wm_rh_G_oc-temp_med-Parahip' },
  14124: { color: [220, 60, 20], opacity: 1, label: 'wm_rh_G_orbital' },
  14125: { color: [20, 60, 220], opacity: 1, label: 'wm_rh_G_pariet_inf-Angular' },
  14126: { color: [100, 100, 60], opacity: 1, label: 'wm_rh_G_pariet_inf-Supramar' },
  14127: { color: [220, 180, 220], opacity: 1, label: 'wm_rh_G_parietal_sup' },
  14128: { color: [20, 180, 140], opacity: 1, label: 'wm_rh_G_postcentral' },
  14129: { color: [60, 140, 180], opacity: 1, label: 'wm_rh_G_precentral' },
  14130: { color: [25, 20, 140], opacity: 1, label: 'wm_rh_G_precuneus' },
  14131: { color: [20, 60, 100], opacity: 1, label: 'wm_rh_G_rectus' },
  14132: { color: [60, 220, 20], opacity: 1, label: 'wm_rh_G_subcallosal' },
  14133: { color: [60, 60, 220], opacity: 1, label: 'wm_rh_G_temp_sup-G_T_transv' },
  14134: { color: [220, 60, 220], opacity: 1, label: 'wm_rh_G_temp_sup-Lateral' },
  14135: { color: [65, 220, 60], opacity: 1, label: 'wm_rh_G_temp_sup-Plan_polar' },
  14136: { color: [25, 140, 20], opacity: 1, label: 'wm_rh_G_temp_sup-Plan_tempo' },
  14137: { color: [220, 220, 100], opacity: 1, label: 'wm_rh_G_temporal_inf' },
  14138: { color: [180, 60, 60], opacity: 1, label: 'wm_rh_G_temporal_middle' },
  14139: { color: [61, 20, 220], opacity: 1, label: 'wm_rh_Lat_Fis-ant-Horizont' },
  14140: { color: [61, 20, 60], opacity: 1, label: 'wm_rh_Lat_Fis-ant-Vertical' },
  14141: { color: [61, 60, 100], opacity: 1, label: 'wm_rh_Lat_Fis-post' },
  14142: { color: [25, 25, 25], opacity: 1, label: 'wm_rh_Medial_wall' },
  14143: { color: [140, 20, 60], opacity: 1, label: 'wm_rh_Pole_occipital' },
  14144: { color: [220, 180, 20], opacity: 1, label: 'wm_rh_Pole_temporal' },
  14145: { color: [63, 180, 180], opacity: 1, label: 'wm_rh_S_calcarine' },
  14146: { color: [221, 20, 10], opacity: 1, label: 'wm_rh_S_central' },
  14147: { color: [221, 20, 100], opacity: 1, label: 'wm_rh_S_cingul-Marginalis' },
  14148: { color: [221, 60, 140], opacity: 1, label: 'wm_rh_S_circular_insula_ant' },
  14149: { color: [221, 20, 220], opacity: 1, label: 'wm_rh_S_circular_insula_inf' },
  14150: { color: [61, 220, 220], opacity: 1, label: 'wm_rh_S_circular_insula_sup' },
  14151: { color: [100, 200, 200], opacity: 1, label: 'wm_rh_S_collat_transv_ant' },
  14152: { color: [10, 200, 200], opacity: 1, label: 'wm_rh_S_collat_transv_post' },
  14153: { color: [221, 220, 20], opacity: 1, label: 'wm_rh_S_front_inf' },
  14154: { color: [141, 20, 100], opacity: 1, label: 'wm_rh_S_front_middle' },
  14155: { color: [61, 220, 100], opacity: 1, label: 'wm_rh_S_front_sup' },
  14156: { color: [141, 60, 20], opacity: 1, label: 'wm_rh_S_interm_prim-Jensen' },
  14157: { color: [143, 20, 220], opacity: 1, label: 'wm_rh_S_intrapariet_and_P_trans' },
  14158: { color: [101, 60, 220], opacity: 1, label: 'wm_rh_S_oc_middle_and_Lunatus' },
  14159: { color: [21, 20, 140], opacity: 1, label: 'wm_rh_S_oc_sup_and_transversal' },
  14160: { color: [61, 20, 180], opacity: 1, label: 'wm_rh_S_occipital_ant' },
  14161: { color: [221, 140, 20], opacity: 1, label: 'wm_rh_S_oc-temp_lat' },
  14162: { color: [141, 100, 220], opacity: 1, label: 'wm_rh_S_oc-temp_med_and_Lingual' },
  14163: { color: [221, 100, 20], opacity: 1, label: 'wm_rh_S_orbital_lateral' },
  14164: { color: [181, 200, 20], opacity: 1, label: 'wm_rh_S_orbital_med-olfact' },
  14165: { color: [101, 20, 20], opacity: 1, label: 'wm_rh_S_orbital-H_Shaped' },
  14166: { color: [101, 100, 180], opacity: 1, label: 'wm_rh_S_parieto_occipital' },
  14167: { color: [181, 220, 20], opacity: 1, label: 'wm_rh_S_pericallosal' },
  14168: { color: [21, 140, 200], opacity: 1, label: 'wm_rh_S_postcentral' },
  14169: { color: [21, 20, 240], opacity: 1, label: 'wm_rh_S_precentral-inf-part' },
  14170: { color: [21, 20, 200], opacity: 1, label: 'wm_rh_S_precentral-sup-part' },
  14171: { color: [21, 20, 60], opacity: 1, label: 'wm_rh_S_suborbital' },
  14172: { color: [101, 60, 60], opacity: 1, label: 'wm_rh_S_subparietal' },
  14173: { color: [21, 180, 180], opacity: 1, label: 'wm_rh_S_temporal_inf' },
  14174: { color: [223, 220, 60], opacity: 1, label: 'wm_rh_S_temporal_sup' },
  14175: { color: [221, 60, 60], opacity: 1, label: 'wm_rh_S_temporal_transverse' }
};

/* harmony default export */ __webpack_exports__["default"] = (segmentationFs);

/***/ }),

/***/ "./src/presets/presets.segmentation.js":
/*!*********************************************!*\
  !*** ./src/presets/presets.segmentation.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _presets_segmentation_freesurfer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./presets.segmentation.freesurfer */ "./src/presets/presets.segmentation.freesurfer.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @module presets/segmentation
 */



var PresetsSegmentation = function () {
  function PresetsSegmentation() {
    var presetID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Freesurfer';

    _classCallCheck(this, PresetsSegmentation);

    this._presetID = presetID;
    this._presets = this.presetSegs();
  }

  PresetsSegmentation.prototype.fetchPreset = function fetchPreset(presetID) {
    var presets = this._presets;
    return presets[presetID];
  };

  PresetsSegmentation.prototype.addPreset = function addPreset(presetObj) {
    this._presets.push(presetObj);
  };

  PresetsSegmentation.prototype.presetsAvailable = function presetsAvailable() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'segmentation';

    var available = [];
    var presets = this._presets;

    for (var i in presets) {
      available.push(i);
    }

    return available;
  };

  PresetsSegmentation.prototype.presetSegs = function presetSegs() {
    return {
      Freesurfer: _presets_segmentation_freesurfer__WEBPACK_IMPORTED_MODULE_0__["default"]
    };
  };

  _createClass(PresetsSegmentation, [{
    key: 'preset',
    set: function set(targetPreset) {
      this._presetID = targetPreset;
    },
    get: function get() {
      return this.fetchPreset(this._presetID);
    }
  }]);

  return PresetsSegmentation;
}();

/* harmony default export */ __webpack_exports__["default"] = (PresetsSegmentation);

/***/ }),

/***/ "./src/shaders/helpers/shaders.helpers.intersectBox.js":
/*!*************************************************************!*\
  !*** ./src/shaders/helpers/shaders.helpers.intersectBox.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shaders_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shaders.base */ "./src/shaders/shaders.base.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var IntersectBox = function (_ShadersBase) {
  _inherits(IntersectBox, _ShadersBase);

  function IntersectBox() {
    _classCallCheck(this, IntersectBox);

    var _this = _possibleConstructorReturn(this, _ShadersBase.call(this));

    _this.name = 'intersectBox';

    // default properties names
    _this._rayOrigin = 'rayOrigin';
    _this._rayDirection = 'rayDirection';
    _this._aabbMin = 'aabbMin';
    _this._aabbMax = 'aabbMax';
    _this._tNear = 'tNear';
    _this._tFar = 'tFar';
    _this._intersect = 'intersect';
    return _this;
  }

  IntersectBox.prototype.api = function api() {
    var baseFragment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._base;
    var rayOrigin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._rayOrigin;
    var rayDirection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._rayDirection;
    var aabbMin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._aabbMin;
    var aabbMax = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this._aabbMax;
    var tNear = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this._tNear;
    var tFar = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._tFar;
    var intersect = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : this._intersect;

    this._base = baseFragment;
    return this.compute(rayOrigin, rayDirection, aabbMin, aabbMax, tNear, tFar, intersect);
  };

  IntersectBox.prototype.compute = function compute(rayOrigin, rayDirection, aabbMin, aabbMax, tNear, tFar, intersect) {
    this.computeDefinition();
    this._base._functions[this._name] = this._definition;
    return this._name + '(' + rayOrigin + ', ' + rayDirection + ', ' + aabbMin + ', ' + aabbMax + ', ' + tNear + ', ' + tFar + ', ' + intersect + ');';
  };

  IntersectBox.prototype.computeDefinition = function computeDefinition() {
    this._definition = '\nvoid ' + this._name + '(vec3 rayOrigin, vec3 rayDirection, vec3 boxMin, vec3 boxMax, out float tNear, out float tFar, out bool intersect){\n  // compute intersection of ray with all six bbox planes\n  vec3 invRay = vec3(1.) / rayDirection;\n  vec3 tBot = invRay * (boxMin - rayOrigin);\n  vec3 tTop = invRay * (boxMax - rayOrigin);\n  // re-order intersections to find smallest and largest on each axis\n  vec3 tMin = min(tTop, tBot);\n  vec3 tMax = max(tTop, tBot);\n  // find the largest tMin and the smallest tMax\n  float largest_tMin = max(max(tMin.x, tMin.y), max(tMin.x, tMin.z));\n  float smallest_tMax = min(min(tMax.x, tMax.y), min(tMax.x, tMax.z));\n  tNear = largest_tMin;\n  tFar = smallest_tMax;\n  intersect = smallest_tMax > largest_tMin;\n}\n\n    ';
  };

  return IntersectBox;
}(_shaders_base__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (new IntersectBox());

/***/ }),

/***/ "./src/shaders/helpers/shaders.helpers.texture3d.js":
/*!**********************************************************!*\
  !*** ./src/shaders/helpers/shaders.helpers.texture3d.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shaders_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shaders.base */ "./src/shaders/shaders.base.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var Texture3d = function (_ShadersBase) {
  _inherits(Texture3d, _ShadersBase);

  function Texture3d() {
    _classCallCheck(this, Texture3d);

    var _this = _possibleConstructorReturn(this, _ShadersBase.call(this));

    _this.name = 'texture3d';

    // default properties names
    _this._dataCoordinates = 'dataCoordinates';
    _this._dataValue = 'dataValue';
    _this._offset = 'offset';
    return _this;
  }

  Texture3d.prototype.api = function api() {
    var baseFragment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._base;
    var dataCoordinates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._dataCoordinates;
    var dataValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._dataValue;
    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._offset;

    this._base = baseFragment;
    return this.compute(dataCoordinates, dataValue, offset);
  };

  Texture3d.prototype.compute = function compute(dataCoordinates, dataValue, offset) {
    this.computeDefinition();
    this._base._functions[this._name] = this._definition;
    return this._name + '(' + dataCoordinates + ', ' + dataValue + ', ' + offset + ');';
  };

  Texture3d.prototype.computeDefinition = function computeDefinition() {
    var content = '\n      step( abs( textureIndexF - 0.0 ), 0.0 ) * texture2D(uTextureContainer[0], uv) +\n      step( abs( textureIndexF - 1.0 ), 0.0 ) * texture2D(uTextureContainer[1], uv) +\n      step( abs( textureIndexF - 2.0 ), 0.0 ) * texture2D(uTextureContainer[2], uv) +\n      step( abs( textureIndexF - 3.0 ), 0.0 ) * texture2D(uTextureContainer[3], uv) +\n      step( abs( textureIndexF - 4.0 ), 0.0 ) * texture2D(uTextureContainer[4], uv) +\n      step( abs( textureIndexF - 5.0 ), 0.0 ) * texture2D(uTextureContainer[5], uv) +\n      step( abs( textureIndexF - 6.0 ), 0.0 ) * texture2D(uTextureContainer[6], uv)';

    if (this._base._uniforms.uTextureContainer.length === 14) {
      content += ' +\n      step( abs( textureIndexF - 7.0 ), 0.0 ) * texture2D(uTextureContainer[7], uv) +\n      step( abs( textureIndexF - 8.0 ), 0.0 ) * texture2D(uTextureContainer[8], uv) +\n      step( abs( textureIndexF - 9.0 ), 0.0 ) * texture2D(uTextureContainer[9], uv) +\n      step( abs( textureIndexF - 10.0 ), 0.0 ) * texture2D(uTextureContainer[10], uv) +\n      step( abs( textureIndexF - 11.0 ), 0.0 ) * texture2D(uTextureContainer[11], uv) +\n      step( abs( textureIndexF - 12.0 ), 0.0 ) * texture2D(uTextureContainer[12], uv) +\n      step( abs( textureIndexF - 13.0 ), 0.0 ) * texture2D(uTextureContainer[13], uv)';
    }

    this._definition = '\nvoid ' + this._name + '(in ivec3 dataCoordinates, out vec4 dataValue, out int offset){\n  float textureSizeF = float(uTextureSize);\n  int voxelsPerTexture = uTextureSize*uTextureSize;\n\n  int index = dataCoordinates.x\n            + dataCoordinates.y * uDataDimensions.x\n            + dataCoordinates.z * uDataDimensions.y * uDataDimensions.x;\n  \n  // dividing an integer by an integer will give you an integer result, rounded down\n  // can not get float numbers to work :(\n  int packedIndex = index/uPackedPerPixel;\n  offset = index - uPackedPerPixel*packedIndex;\n\n  // Map data index to right sampler2D texture\n  int textureIndex = packedIndex/voxelsPerTexture;\n  int inTextureIndex = packedIndex - voxelsPerTexture*textureIndex;\n\n  // Get row and column in the texture\n  int rowIndex = inTextureIndex/uTextureSize;\n  float rowIndexF = float(rowIndex);\n  float colIndex = float(inTextureIndex - uTextureSize * rowIndex);\n\n  // Map row and column to uv\n  vec2 uv = vec2(0,0);\n  uv.x = (0.5 + colIndex) / textureSizeF;\n  uv.y = 1. - (0.5 + rowIndexF) / textureSizeF;\n\n  float textureIndexF = float(textureIndex);\n  dataValue = vec4(0.) + ' + content + ';\n}\n    ';
  };

  return Texture3d;
}(_shaders_base__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (new Texture3d());

/***/ }),

/***/ "./src/shaders/helpers/shaders.helpers.unpack.js":
/*!*******************************************************!*\
  !*** ./src/shaders/helpers/shaders.helpers.unpack.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shaders_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shaders.base */ "./src/shaders/shaders.base.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



/**
 * Set of methods to unpack values from [r][b][g][a] -> float
 */

var Unpack = function (_ShadersBase) {
  _inherits(Unpack, _ShadersBase);

  /**
   * Constructor
   */
  function Unpack() {
    _classCallCheck(this, Unpack);

    var _this = _possibleConstructorReturn(this, _ShadersBase.call(this));

    _this.name = 'unpack';

    // default properties names
    _this._packedData = 'packedData';
    _this._offset = 'offset';
    _this._unpackedData = 'unpackedData';

    _this._base._uniforms = {
      uNumberOfChannels: {
        value: 1
      },
      uBitsAllocated: {
        value: 16
      },
      uPixelType: {
        value: 0
      }
    };
    return _this;
  }

  Unpack.prototype.api = function api() {
    var baseFragment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._base;
    var packedData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._packedData;
    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._offset;
    var unpackedData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._unpackedData;

    this._base = baseFragment;
    return this.compute(packedData, offset, unpackedData);
  };

  Unpack.prototype.compute = function compute(packedData, offset, unpackedData) {
    this.computeDefinition();
    this._base._functions[this._name] = this._definition;
    return this._name + '(' + packedData + ', ' + offset + ', ' + unpackedData + ');';
  };

  Unpack.prototype.computeDefinition = function computeDefinition() {
    // fun stuff
    var content = '';
    if (this._base._uniforms.uNumberOfChannels.value === 1) {
      switch (this._base._uniforms.uBitsAllocated.value) {
        case 1:
        case 8:
          content = this.upack8();
          break;

        case 16:
          content = this.upack16();
          break;

        case 32:
          content = this.upack32();
          break;

        default:
          content = this.upackIdentity();
          break;
      }
    } else {
      content = this.upackIdentity();
    }

    this._definition = '\nvoid ' + this._name + '(in vec4 packedData, in int offset, out vec4 unpackedData){\n\n' + content + '\n\n}  \n    ';
  };

  Unpack.prototype.upack8 = function upack8() {
    this._base._functions['uInt8'] = this.uInt8();

    return '\nfloat floatedOffset = float(offset);\nfloat floatedOffsetSquared = floatedOffset * floatedOffset;\nuInt8(\n  step( floatedOffsetSquared , 0.0 ) * packedData.r +\n  step( floatedOffsetSquared - 2. * floatedOffset + 1., 0.0 ) * packedData.g +\n  step( floatedOffsetSquared - 2. * 2. *  floatedOffset + 4., 0.0 ) * packedData.b +\n  step( floatedOffsetSquared - 2. * 3. *  floatedOffset + 9., 0.0 ) * packedData.a\n  ,\n  unpackedData.x);\n    ';
  };

  Unpack.prototype.upack16 = function upack16() {
    this._base._functions['uInt16'] = this.uInt16();

    return '\nfloat floatedOffset = float(offset);\nuInt16(\n  packedData.r * (1. - floatedOffset) + packedData.b * floatedOffset,\n  packedData.g * (1. - floatedOffset) + packedData.a * floatedOffset,\n  unpackedData.x);\n    ';
  };

  Unpack.prototype.upack32 = function upack32() {
    if (this._base._uniforms.uPixelType.value === 0) {
      this._base._functions['uInt32'] = this.uInt32();

      return '\nuInt32(\n  packedData.r,\n  packedData.g,\n  packedData.b,\n  packedData.a,\n  unpackedData.x);\n      ';
    } else {
      this._base._functions['uFloat32'] = this.uFloat32();

      return '\nuFloat32(\n  packedData.r,\n  packedData.g,\n  packedData.b,\n  packedData.a,\n  unpackedData.x);\n      ';
    }
  };

  Unpack.prototype.upackIdentity = function upackIdentity() {
    return '\nunpackedData = packedData;\n      ';
  };

  Unpack.prototype.uInt8 = function uInt8() {
    return '\nvoid uInt8(in float r, out float value){\n  value = r * 255.;\n}\n    ';
  };

  Unpack.prototype.uInt16 = function uInt16() {
    return '\nvoid uInt16(in float r, in float a, out float value){\n  value = r * 255. + a * 255. * 256.;\n}\n    ';
  };

  Unpack.prototype.uInt32 = function uInt32() {
    return '\nvoid uInt32(in float r, in float g, in float b, in float a, out float value){\n  value = r * 255. + g * 255. * 256. + b * 255. * 256. * 256. + a * 255. * 256. * 256. * 256.;\n  // value = r * 255. + g * 65025. + b * 16581375. + a * 4228250625.;\n}\n    ';
  };

  Unpack.prototype.uFloat32 = function uFloat32() {
    return '\nvoid uFloat32(in float r, in float g, in float b, in float a, out float value){\n\n  // create arrays containing bits for rgba values\n  // value between 0 and 255\n  value = r * 255.;\n  int bytemeR[8];\n  bytemeR[0] = int(floor(value / 128.));\n  value -= float(bytemeR[0] * 128);\n  bytemeR[1] = int(floor(value / 64.));\n  value -= float(bytemeR[1] * 64);\n  bytemeR[2] = int(floor(value / 32.));\n  value -= float(bytemeR[2] * 32);\n  bytemeR[3] = int(floor(value / 16.));\n  value -= float(bytemeR[3] * 16);\n  bytemeR[4] = int(floor(value / 8.));\n  value -= float(bytemeR[4] * 8);\n  bytemeR[5] = int(floor(value / 4.));\n  value -= float(bytemeR[5] * 4);\n  bytemeR[6] = int(floor(value / 2.));\n  value -= float(bytemeR[6] * 2);\n  bytemeR[7] = int(floor(value));\n\n  value = g * 255.;\n  int bytemeG[8];\n  bytemeG[0] = int(floor(value / 128.));\n  value -= float(bytemeG[0] * 128);\n  bytemeG[1] = int(floor(value / 64.));\n  value -= float(bytemeG[1] * 64);\n  bytemeG[2] = int(floor(value / 32.));\n  value -= float(bytemeG[2] * 32);\n  bytemeG[3] = int(floor(value / 16.));\n  value -= float(bytemeG[3] * 16);\n  bytemeG[4] = int(floor(value / 8.));\n  value -= float(bytemeG[4] * 8);\n  bytemeG[5] = int(floor(value / 4.));\n  value -= float(bytemeG[5] * 4);\n  bytemeG[6] = int(floor(value / 2.));\n  value -= float(bytemeG[6] * 2);\n  bytemeG[7] = int(floor(value));\n\n  value = b * 255.;\n  int bytemeB[8];\n  bytemeB[0] = int(floor(value / 128.));\n  value -= float(bytemeB[0] * 128);\n  bytemeB[1] = int(floor(value / 64.));\n  value -= float(bytemeB[1] * 64);\n  bytemeB[2] = int(floor(value / 32.));\n  value -= float(bytemeB[2] * 32);\n  bytemeB[3] = int(floor(value / 16.));\n  value -= float(bytemeB[3] * 16);\n  bytemeB[4] = int(floor(value / 8.));\n  value -= float(bytemeB[4] * 8);\n  bytemeB[5] = int(floor(value / 4.));\n  value -= float(bytemeB[5] * 4);\n  bytemeB[6] = int(floor(value / 2.));\n  value -= float(bytemeB[6] * 2);\n  bytemeB[7] = int(floor(value));\n\n  value = a * 255.;\n  int bytemeA[8];\n  bytemeA[0] = int(floor(value / 128.));\n  value -= float(bytemeA[0] * 128);\n  bytemeA[1] = int(floor(value / 64.));\n  value -= float(bytemeA[1] * 64);\n  bytemeA[2] = int(floor(value / 32.));\n  value -= float(bytemeA[2] * 32);\n  bytemeA[3] = int(floor(value / 16.));\n  value -= float(bytemeA[3] * 16);\n  bytemeA[4] = int(floor(value / 8.));\n  value -= float(bytemeA[4] * 8);\n  bytemeA[5] = int(floor(value / 4.));\n  value -= float(bytemeA[5] * 4);\n  bytemeA[6] = int(floor(value / 2.));\n  value -= float(bytemeA[6] * 2);\n  bytemeA[7] = int(floor(value));\n\n  // compute float32 value from bit arrays\n\n  // sign\n  int issigned = 1 - 2 * bytemeR[0];\n  //   issigned = int(pow(-1., float(bytemeR[0])));\n\n  // exponent\n  int exponent = 0;\n\n  exponent += bytemeR[1] * int(pow(2., 7.));\n  exponent += bytemeR[2] * int(pow(2., 6.));\n  exponent += bytemeR[3] * int(pow(2., 5.));\n  exponent += bytemeR[4] * int(pow(2., 4.));\n  exponent += bytemeR[5] * int(pow(2., 3.));\n  exponent += bytemeR[6] * int(pow(2., 2.));\n  exponent += bytemeR[7] * int(pow(2., 1.));\n\n  exponent += bytemeG[0];\n\n\n  // fraction\n  float fraction = 0.;\n\n  fraction = float(bytemeG[1]) * pow(2., -1.);\n  fraction += float(bytemeG[2]) * pow(2., -2.);\n  fraction += float(bytemeG[3]) * pow(2., -3.);\n  fraction += float(bytemeG[4]) * pow(2., -4.);\n  fraction += float(bytemeG[5]) * pow(2., -5.);\n  fraction += float(bytemeG[6]) * pow(2., -6.);\n  fraction += float(bytemeG[7]) * pow(2., -7.);\n\n  fraction += float(bytemeB[0]) * pow(2., -8.);\n  fraction += float(bytemeB[1]) * pow(2., -9.);\n  fraction += float(bytemeB[2]) * pow(2., -10.);\n  fraction += float(bytemeB[3]) * pow(2., -11.);\n  fraction += float(bytemeB[4]) * pow(2., -12.);\n  fraction += float(bytemeB[5]) * pow(2., -13.);\n  fraction += float(bytemeB[6]) * pow(2., -14.);\n  fraction += float(bytemeB[7]) * pow(2., -15.);\n\n  fraction += float(bytemeA[0]) * pow(2., -16.);\n  fraction += float(bytemeA[1]) * pow(2., -17.);\n  fraction += float(bytemeA[2]) * pow(2., -18.);\n  fraction += float(bytemeA[3]) * pow(2., -19.);\n  fraction += float(bytemeA[4]) * pow(2., -20.);\n  fraction += float(bytemeA[5]) * pow(2., -21.);\n  fraction += float(bytemeA[6]) * pow(2., -22.);\n  fraction += float(bytemeA[7]) * pow(2., -23.);\n\n  value = float(issigned) * pow( 2., float(exponent - 127)) * (1. + fraction);\n}\n    ';
  };

  return Unpack;
}(_shaders_base__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (new Unpack());

/***/ }),

/***/ "./src/shaders/interpolation/shaders.interpolation.identity.js":
/*!*********************************************************************!*\
  !*** ./src/shaders/interpolation/shaders.interpolation.identity.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shaders_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shaders.base */ "./src/shaders/shaders.base.js");
/* harmony import */ var _helpers_shaders_helpers_unpack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/shaders.helpers.unpack */ "./src/shaders/helpers/shaders.helpers.unpack.js");
/* harmony import */ var _helpers_shaders_helpers_texture3d__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/shaders.helpers.texture3d */ "./src/shaders/helpers/shaders.helpers.texture3d.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var InterpolationIdentity = function (_ShadersBase) {
  _inherits(InterpolationIdentity, _ShadersBase);

  function InterpolationIdentity() {
    _classCallCheck(this, InterpolationIdentity);

    var _this = _possibleConstructorReturn(this, _ShadersBase.call(this));

    _this.name = 'interpolationIdentity';

    // default properties names
    _this._currentVoxel = 'currentVoxel';
    _this._dataValue = 'dataValue';
    return _this;
  }

  InterpolationIdentity.prototype.api = function api() {
    var baseFragment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._base;
    var currentVoxel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._currentVoxel;
    var dataValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._dataValue;

    this._base = baseFragment;
    return this.compute(currentVoxel, dataValue);
  };

  InterpolationIdentity.prototype.compute = function compute(currentVoxel, dataValue) {
    this.computeDefinition();
    this._base._functions[this._name] = this._definition;
    return this._name + '(' + currentVoxel + ', ' + dataValue + ');';
  };

  InterpolationIdentity.prototype.computeDefinition = function computeDefinition() {
    this._definition = '\nvoid ' + this._name + '(in vec3 currentVoxel, out vec4 dataValue){\n  // lower bound\n  vec3 rcurrentVoxel = vec3(floor(currentVoxel.x + 0.5 ), floor(currentVoxel.y + 0.5 ), floor(currentVoxel.z + 0.5 ));\n  ivec3 voxel = ivec3(int(rcurrentVoxel.x), int(rcurrentVoxel.y), int(rcurrentVoxel.z));\n\n  vec4 tmp = vec4(0., 0., 0., 0.);\n  int offset = 0;\n\n  ' + _helpers_shaders_helpers_texture3d__WEBPACK_IMPORTED_MODULE_2__["default"].api(this._base, 'voxel', 'tmp', 'offset') + '\n  ' + _helpers_shaders_helpers_unpack__WEBPACK_IMPORTED_MODULE_1__["default"].api(this._base, 'tmp', 'offset', 'dataValue') + '\n}\n    ';
  };

  return InterpolationIdentity;
}(_shaders_base__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (new InterpolationIdentity());

/***/ }),

/***/ "./src/shaders/interpolation/shaders.interpolation.js":
/*!************************************************************!*\
  !*** ./src/shaders/interpolation/shaders.interpolation.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shaders.interpolation.identity */ "./src/shaders/interpolation/shaders.interpolation.identity.js");
/* harmony import */ var _shaders_interpolation_trilinear__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders.interpolation.trilinear */ "./src/shaders/interpolation/shaders.interpolation.trilinear.js");



function shadersInterpolation(baseFragment, currentVoxel, dataValue, gradient) {
  switch (baseFragment._uniforms.uInterpolation.value) {
    case 0:
      // no interpolation
      return _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_0__["default"].api(baseFragment, currentVoxel, dataValue);

    case 1:
      // trilinear interpolation
      return _shaders_interpolation_trilinear__WEBPACK_IMPORTED_MODULE_1__["default"].api(baseFragment, currentVoxel, dataValue, gradient);

    default:
      return _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_0__["default"].api(baseFragment, currentVoxel, dataValue);
  }
}

/* harmony default export */ __webpack_exports__["default"] = (shadersInterpolation);

/***/ }),

/***/ "./src/shaders/interpolation/shaders.interpolation.trilinear.js":
/*!**********************************************************************!*\
  !*** ./src/shaders/interpolation/shaders.interpolation.trilinear.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shaders_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shaders.base */ "./src/shaders/shaders.base.js");
/* harmony import */ var _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders.interpolation.identity */ "./src/shaders/interpolation/shaders.interpolation.identity.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var InterpolationTrilinear = function (_ShadersBase) {
  _inherits(InterpolationTrilinear, _ShadersBase);

  function InterpolationTrilinear() {
    _classCallCheck(this, InterpolationTrilinear);

    var _this = _possibleConstructorReturn(this, _ShadersBase.call(this));

    _this.name = 'interpolationTrilinear';

    // default properties names
    _this._currentVoxel = 'currentVoxel';
    _this._dataValue = 'dataValue';
    _this._gradient = 'gradient';
    return _this;
  }

  InterpolationTrilinear.prototype.api = function api() {
    var baseFragment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._base;
    var currentVoxel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._currentVoxel;
    var dataValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._dataValue;
    var gradient = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._gradient;

    this._base = baseFragment;
    return this.compute(currentVoxel, dataValue, gradient);
  };

  InterpolationTrilinear.prototype.compute = function compute(currentVoxel, dataValue, gradient) {
    this.computeDefinition();
    this._base._functions[this._name] = this._definition;
    return this._name + '(' + currentVoxel + ', ' + dataValue + ', ' + gradient + ');';
  };

  InterpolationTrilinear.prototype.computeDefinition = function computeDefinition() {
    this._definition = '\nvoid trilinearInterpolation(\n  in vec3 normalizedPosition,\n  out vec4 interpolatedValue,\n  in vec4 v000, in vec4 v100,\n  in vec4 v001, in vec4 v101,\n  in vec4 v010, in vec4 v110,\n  in vec4 v011, in vec4 v111) {\n  // https://en.wikipedia.org/wiki/Trilinear_interpolation\n  vec4 c00 = v000 * ( 1.0 - normalizedPosition.x ) + v100 * normalizedPosition.x;\n  vec4 c01 = v001 * ( 1.0 - normalizedPosition.x ) + v101 * normalizedPosition.x;\n  vec4 c10 = v010 * ( 1.0 - normalizedPosition.x ) + v110 * normalizedPosition.x;\n  vec4 c11 = v011 * ( 1.0 - normalizedPosition.x ) + v111 * normalizedPosition.x;\n\n  // c0 and c1\n  vec4 c0 = c00 * ( 1.0 - normalizedPosition.y) + c10 * normalizedPosition.y;\n  vec4 c1 = c01 * ( 1.0 - normalizedPosition.y) + c11 * normalizedPosition.y;\n\n  // c\n  vec4 c = c0 * ( 1.0 - normalizedPosition.z) + c1 * normalizedPosition.z;\n  interpolatedValue = c;\n}\n\nvoid ' + this._name + '(in vec3 currentVoxel, out vec4 dataValue, out vec3 gradient){\n\n  vec3 lower_bound = floor(currentVoxel);\n  lower_bound = max(vec3(0.), lower_bound);\n  \n  vec3 higher_bound = lower_bound + vec3(1.);\n\n  vec3 normalizedPosition = (currentVoxel - lower_bound);\n  normalizedPosition =  max(vec3(0.), normalizedPosition);\n\n  vec4 interpolatedValue = vec4(0.);\n\n  //\n  // fetch values required for interpolation\n  //\n  vec4 v000 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c000 = vec3(lower_bound.x, lower_bound.y, lower_bound.z);\n  ' + _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_1__["default"].api(this._base, 'c000', 'v000') + '\n\n  //\n  vec4 v100 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c100 = vec3(higher_bound.x, lower_bound.y, lower_bound.z);\n  ' + _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_1__["default"].api(this._base, 'c100', 'v100') + '\n\n  //\n  vec4 v001 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c001 = vec3(lower_bound.x, lower_bound.y, higher_bound.z);\n  ' + _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_1__["default"].api(this._base, 'c001', 'v001') + '\n\n  //\n  vec4 v101 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c101 = vec3(higher_bound.x, lower_bound.y, higher_bound.z);\n  ' + _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_1__["default"].api(this._base, 'c101', 'v101') + '\n  \n  //\n  vec4 v010 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c010 = vec3(lower_bound.x, higher_bound.y, lower_bound.z);\n  ' + _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_1__["default"].api(this._base, 'c010', 'v010') + '\n\n  vec4 v110 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c110 = vec3(higher_bound.x, higher_bound.y, lower_bound.z);\n  ' + _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_1__["default"].api(this._base, 'c110', 'v110') + '\n\n  //\n  vec4 v011 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c011 = vec3(lower_bound.x, higher_bound.y, higher_bound.z);\n  ' + _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_1__["default"].api(this._base, 'c011', 'v011') + '\n\n  vec4 v111 = vec4(0.0, 0.0, 0.0, 0.0);\n  vec3 c111 = vec3(higher_bound.x, higher_bound.y, higher_bound.z);\n  ' + _shaders_interpolation_identity__WEBPACK_IMPORTED_MODULE_1__["default"].api(this._base, 'c111', 'v111') + '\n\n  // compute interpolation at position\n  trilinearInterpolation(normalizedPosition, interpolatedValue ,v000, v100, v001, v101, v010,v110, v011,v111);\n  dataValue = interpolatedValue;\n\n  // That breaks shading in volume rendering\n  // if (gradient.x == 1.) { // skip gradient calculation for slice helper\n  //  return;\n  // }\n\n  // compute gradient\n  float gradientStep = 0.005;\n\n  // x axis\n  vec3 g100 = vec3(1., 0., 0.);\n  vec3 ng100 = normalizedPosition + g100 * gradientStep;\n  ng100.x = min(1., ng100.x);\n\n  vec4 vg100 = vec4(0.);\n  trilinearInterpolation(ng100, vg100 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  vec3 go100 = -g100;\n  vec3 ngo100 = normalizedPosition + go100 * gradientStep;\n  ngo100.x = max(0., ngo100.x);\n\n  vec4 vgo100 = vec4(0.);\n  trilinearInterpolation(ngo100, vgo100 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  gradient.x = (g100.x * vg100.x + go100.x * vgo100.x);\n\n  // y axis\n  vec3 g010 = vec3(0., 1., 0.);\n  vec3 ng010 = normalizedPosition + g010 * gradientStep;\n  ng010.y = min(1., ng010.y);\n\n  vec4 vg010 = vec4(0.);\n  trilinearInterpolation(ng010, vg010 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  vec3 go010 = -g010;\n  vec3 ngo010 = normalizedPosition + go010 * gradientStep;\n  ngo010.y = max(0., ngo010.y);\n\n  vec4 vgo010 = vec4(0.);\n  trilinearInterpolation(ngo010, vgo010 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  gradient.y = (g010.y * vg010.x + go010.y * vgo010.x);\n\n  // z axis\n  vec3 g001 = vec3(0., 0., 1.);\n  vec3 ng001 = normalizedPosition + g001 * gradientStep;\n  ng001.z = min(1., ng001.z);\n\n  vec4 vg001 = vec4(0.);\n  trilinearInterpolation(ng001, vg001 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  vec3 go001 = -g001;\n  vec3 ngo001 = normalizedPosition + go001 * gradientStep;\n  ngo001.z = max(0., ngo001.z);\n\n  vec4 vgo001 = vec4(0.);\n  trilinearInterpolation(ngo001, vgo001 ,v000, v100, v001, v101, v010,v110, v011,v111);\n\n  gradient.z = (g001.z * vg001.x + go001.z * vgo001.x);\n\n  // normalize gradient\n  // +0.0001  instead of if?\n  float gradientMagnitude = length(gradient);\n  if (gradientMagnitude > 0.0) {\n    gradient = -(1. / gradientMagnitude) * gradient;\n  }\n}\n    ';
  };

  return InterpolationTrilinear;
}(_shaders_base__WEBPACK_IMPORTED_MODULE_0__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (new InterpolationTrilinear());

/***/ }),

/***/ "./src/shaders/shaders.base.js":
/*!*************************************!*\
  !*** ./src/shaders/shaders.base.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShadersBase = function () {
  function ShadersBase() {
    _classCallCheck(this, ShadersBase);

    this._name = 'shadersBase';
    this._base = {
      _functions: {},
      _uniforms: {}
    };
    this._definition = '';
  }

  _createClass(ShadersBase, [{
    key: 'name',
    get: function get() {
      return this._name;
    },
    set: function set(name) {
      this._name = name;
    }
  }]);

  return ShadersBase;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersBase);

/***/ }),

/***/ "./src/shaders/shaders.contour.fragment.js":
/*!*************************************************!*\
  !*** ./src/shaders/shaders.contour.fragment.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShadersFragment = function () {
  // pass uniforms object
  function ShadersFragment(uniforms) {
    _classCallCheck(this, ShadersFragment);

    this._uniforms = uniforms;
    this._functions = {};
    this._main = '';
  }

  ShadersFragment.prototype.functions = function functions() {
    if (this._main === '') {
      // if main is empty, functions can not have been computed
      this.main();
    }

    var content = '';
    for (var property in this._functions) {
      content += this._functions[property] + '\n';
    }

    return content;
  };

  ShadersFragment.prototype.uniforms = function uniforms() {
    var content = '';
    for (var property in this._uniforms) {
      var uniform = this._uniforms[property];
      content += 'uniform ' + uniform.typeGLSL + ' ' + property;

      if (uniform && uniform.length) {
        content += '[' + uniform.length + ']';
      }

      content += ';\n';
    }

    return content;
  };

  ShadersFragment.prototype.main = function main() {
    // need to pre-call main to fill up the functions list
    this._main = '\n\nfloat luma (vec3 rgb) {\n  return (rgb.r + rgb.g + rgb.b)/3.0;\n}\n\nconst float T = 0.04;\nconst float M = 1.0;\nconst float L = 0.002;\n\nvoid main(void) {\n\n  vec2 texCoord = vec2(((vProjectedCoords.x / vProjectedCoords.w) + 1.0 ) / 2.0,\n                ((vProjectedCoords.y / vProjectedCoords.w) + 1.0 ) / 2.0 );\n\n  float borderWidth = uWidth; // in px\n  float step_u = borderWidth * 1.0 / uCanvasWidth;\n  float step_v = borderWidth * 1.0 / uCanvasHeight;\n  vec4 centerPixel = texture2D(uTextureFilled, texCoord);\n\n  vec4 rightPixel  = texture2D(uTextureFilled, texCoord + vec2(step_u, 0.0));\n  vec4 bottomPixel = texture2D(uTextureFilled, texCoord + vec2(0.0, step_v));\n\n  // now manually compute the derivatives\n  float _dFdX = length(rightPixel - centerPixel) / step_u;\n  float _dFdY = length(bottomPixel - centerPixel) / step_v;\n\n  // gl_FragColor.r = _dFdX;\n  // gl_FragColor.g = _dFdY;\n  gl_FragColor.r = max(max(centerPixel.r, rightPixel.r), bottomPixel.r);\n  gl_FragColor.g = max(max(centerPixel.g, rightPixel.g), bottomPixel.g);\n  gl_FragColor.b = max(max(centerPixel.b, rightPixel.b), bottomPixel.b);\n  float maxDerivative = max(_dFdX, _dFdY);\n  float clampedDerivative = clamp(maxDerivative, 0., 1.);\n  gl_FragColor.a = uOpacity * clampedDerivative;\n\n  return;\n  // float h = 1./uCanvasHeight;\n  // float w = 1./uCanvasWidth;\n  // vec4 n[9];\n  // n[0] = texture2D(uTextureFilled, vProjectedTextCoords + vec2( -w, -h));\n  // n[1] = texture2D(uTextureFilled, vProjectedTextCoords + vec2(0.0, -h));\n  // n[2] = texture2D(uTextureFilled, vProjectedTextCoords + vec2(  w, -h));\n  // n[3] = texture2D(uTextureFilled, vProjectedTextCoords + vec2( -w, 0.0));\n  // n[4] = texture2D(uTextureFilled, vProjectedTextCoords);\n  // n[5] = texture2D(uTextureFilled, texCoord + vec2(  w, 0.0));\n  // n[6] = texture2D(uTextureFilled, texCoord + vec2( -w, h));\n  // n[7] = texture2D(uTextureFilled, texCoord + vec2(0.0, h));\n  // n[8] = texture2D(uTextureFilled, texCoord + vec2(  w, h));\n  // vec4 sobel_horizEdge = n[2] + (2.0*n[5]) + n[8] - (n[0] + (2.0*n[3]) + n[6]);\n  // vec4 sobel_vertEdge  = n[0] + (2.0*n[1]) + n[2] - (n[6] + (2.0*n[7]) + n[8]);\n  // vec3 sobel = sqrt((sobel_horizEdge.rgb * sobel_horizEdge.rgb) + (sobel_vertEdge.rgb * sobel_vertEdge.rgb));\n  // gl_FragColor = vec4( sobel, max(max(sobel.r, sobel.g), sobel.b) );\n\n  // return;\n}\n   ';
  };

  ShadersFragment.prototype.compute = function compute() {
    var shaderInterpolation = '';
    // shaderInterpolation.inline(args) //true/false
    // shaderInterpolation.functions(args)

    return '\n// uniforms\n' + this.uniforms() + '\n\n// varying (should fetch it from vertex directly)\nvarying vec4      vProjectedCoords;\n\n// tailored functions\n' + this.functions() + '\n\n// main loop\n' + this._main + '\n      ';
  };

  return ShadersFragment;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersFragment);

/***/ }),

/***/ "./src/shaders/shaders.contour.uniform.js":
/*!************************************************!*\
  !*** ./src/shaders/shaders.contour.uniform.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @module shaders/data
 */
var ShadersUniform = function () {
  function ShadersUniform() {
    _classCallCheck(this, ShadersUniform);
  }

  ShadersUniform.uniforms = function uniforms() {
    return {
      uCanvasWidth: {
        type: 'f',
        value: 0,
        typeGLSL: 'float'
      },
      uCanvasHeight: {
        type: 'f',
        value: 0,
        typeGLSL: 'float'
      },
      uWidth: {
        type: 'f',
        value: 1,
        typeGLSL: 'float'
      },
      uOpacity: {
        type: 'f',
        value: 1,
        typeGLSL: 'float'
      },
      uTextureFilled: {
        type: 't',
        value: [],
        typeGLSL: 'sampler2D'
      }
    };
  };

  return ShadersUniform;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersUniform);

/***/ }),

/***/ "./src/shaders/shaders.contour.vertex.js":
/*!***********************************************!*\
  !*** ./src/shaders/shaders.contour.vertex.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShadersVertex = function () {
  function ShadersVertex() {
    _classCallCheck(this, ShadersVertex);
  }

  ShadersVertex.prototype.compute = function compute() {
    return "\nvarying vec4 vProjectedCoords;\n\n//\n// main\n//\nvoid main() {\n\n  vec4 vPos = modelMatrix * vec4(position, 1.0 );\n  mat4 vProjectionViewMatrix = projectionMatrix * viewMatrix;\n  vProjectedCoords =  projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0 );\n\n}\n        ";
  };

  return ShadersVertex;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersVertex);

/***/ }),

/***/ "./src/shaders/shaders.data.fragment.js":
/*!**********************************************!*\
  !*** ./src/shaders/shaders.data.fragment.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _interpolation_shaders_interpolation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interpolation/shaders.interpolation */ "./src/shaders/interpolation/shaders.interpolation.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var ShadersFragment = function () {
  // pass uniforms object
  function ShadersFragment(uniforms) {
    _classCallCheck(this, ShadersFragment);

    this._uniforms = uniforms;
    this._functions = {};
    this._main = '';
  }

  ShadersFragment.prototype.functions = function functions() {
    if (this._main === '') {
      // if main is empty, functions can not have been computed
      this.main();
    }

    var content = '';
    for (var property in this._functions) {
      content += this._functions[property] + '\n';
    }

    return content;
  };

  ShadersFragment.prototype.uniforms = function uniforms() {
    var content = '';
    for (var property in this._uniforms) {
      var uniform = this._uniforms[property];
      content += 'uniform ' + uniform.typeGLSL + ' ' + property;

      if (uniform && uniform.length) {
        content += '[' + uniform.length + ']';
      }

      content += ';\n';
    }

    return content;
  };

  ShadersFragment.prototype.main = function main() {
    // need to pre-call main to fill up the functions list
    this._main = '\nvoid main(void) {\n\n  // draw border if slice is cropped\n  // float uBorderDashLength = 10.;\n\n  if( uCanvasWidth > 0. &&\n      ((gl_FragCoord.x > uBorderMargin && (gl_FragCoord.x - uBorderMargin) < uBorderWidth) ||\n       (gl_FragCoord.x < (uCanvasWidth - uBorderMargin) && (gl_FragCoord.x + uBorderMargin) > (uCanvasWidth - uBorderWidth) ))){\n    float valueY = mod(gl_FragCoord.y, 2. * uBorderDashLength);\n    if( valueY < uBorderDashLength && gl_FragCoord.y > uBorderMargin && gl_FragCoord.y < (uCanvasHeight - uBorderMargin) ){\n      gl_FragColor = vec4(uBorderColor, 1.);\n      return;\n    }\n  }\n\n  if( uCanvasHeight > 0. &&\n      ((gl_FragCoord.y > uBorderMargin && (gl_FragCoord.y - uBorderMargin) < uBorderWidth) ||\n       (gl_FragCoord.y < (uCanvasHeight - uBorderMargin) && (gl_FragCoord.y + uBorderMargin) > (uCanvasHeight - uBorderWidth) ))){\n    float valueX = mod(gl_FragCoord.x, 2. * uBorderDashLength);\n    if( valueX < uBorderDashLength && gl_FragCoord.x > uBorderMargin && gl_FragCoord.x < (uCanvasWidth - uBorderMargin) ){\n      gl_FragColor = vec4(uBorderColor, 1.);\n      return;\n    }\n  }\n\n  // get texture coordinates of current pixel\n  vec4 dataValue = vec4(0.);\n  vec3 gradient = vec3(1.); // gradient calculations will be skipped if it is equal to vec3(1.) \n  float steps = floor(uThickness / uSpacing + 0.5);\n\n  if (steps > 1.) {\n    vec3 origin = vPos - uThickness * 0.5 * vNormal;\n    vec4 dataValueAcc = vec4(0.);\n    for (float step = 0.; step < 128.; step++) {\n      if (step >= steps) {\n        break;\n      }\n\n      vec4 dataCoordinates = uWorldToData * vec4(origin + step * uSpacing * vNormal, 1.);\n      vec3 currentVoxel = dataCoordinates.xyz;\n      ' + Object(_interpolation_shaders_interpolation__WEBPACK_IMPORTED_MODULE_0__["default"])(this, 'currentVoxel', 'dataValueAcc', 'gradient') + ';\n\n      if (step == 0.) {\n        dataValue.r = dataValueAcc.r;\n        continue;\n      }\n\n      if (uThicknessMethod == 0) {\n        dataValue.r = max(dataValueAcc.r, dataValue.r);\n      }\n      if (uThicknessMethod == 1) {\n        dataValue.r += dataValueAcc.r;\n      }\n      if (uThicknessMethod == 2) {\n        dataValue.r = min(dataValueAcc.r, dataValue.r);\n      }\n    }\n\n    if (uThicknessMethod == 1) {\n      dataValue.r /= steps;\n    }\n  } else {\n    vec4 dataCoordinates = uWorldToData * vec4(vPos, 1.);\n    vec3 currentVoxel = dataCoordinates.xyz;\n    ' + Object(_interpolation_shaders_interpolation__WEBPACK_IMPORTED_MODULE_0__["default"])(this, 'currentVoxel', 'dataValue', 'gradient') + '\n  }\n\n  if(uNumberOfChannels == 1){\n    // rescale/slope\n    float realIntensity = dataValue.r * uRescaleSlopeIntercept[0] + uRescaleSlopeIntercept[1];\n  \n    // threshold\n    if (realIntensity < uLowerUpperThreshold[0] || realIntensity > uLowerUpperThreshold[1]) {\n      discard;\n    }\n  \n    // normalize\n    float windowMin = uWindowCenterWidth[0] - uWindowCenterWidth[1] * 0.5;\n    float normalizedIntensity =\n      ( realIntensity - windowMin ) / uWindowCenterWidth[1];\n    dataValue.r = dataValue.g = dataValue.b = normalizedIntensity;\n    dataValue.a = 1.;\n\n    // apply LUT\n    if(uLut == 1){\n      // should opacity be grabbed there?\n      dataValue = texture2D( uTextureLUT, vec2( normalizedIntensity , 1.0) );\n    }\n  \n    // apply segmentation\n    if(uLutSegmentation == 1){\n      // should opacity be grabbed there?\n      //\n      float textureWidth = 256.;\n      float textureHeight = 128.;\n      float min = 0.;\n      // start at 0!\n      int adjustedIntensity = int(floor(realIntensity + 0.5));\n  \n      // Get row and column in the texture\n      int colIndex = int(mod(float(adjustedIntensity), textureWidth));\n      int rowIndex = int(floor(float(adjustedIntensity)/textureWidth));\n  \n      float texWidth = 1./textureWidth;\n      float texHeight = 1./textureHeight;\n    \n      // Map row and column to uv\n      vec2 uv = vec2(0,0);\n      uv.x = 0.5 * texWidth + (texWidth * float(colIndex));\n      uv.y = 1. - (0.5 * texHeight + float(rowIndex) * texHeight);\n  \n      dataValue = texture2D( uTextureLUTSegmentation, uv );\n    }\n  }\n\n  if(uInvert == 1){\n    dataValue.xyz = vec3(1.) - dataValue.xyz;\n  }\n\n  dataValue.a = dataValue.a*uOpacity;\n\n  gl_FragColor = dataValue;\n}\n   ';
  };

  ShadersFragment.prototype.compute = function compute() {
    return '\n// uniforms\n' + this.uniforms() + '\n\n// varying (should fetch it from vertex directly)\nvarying vec3 vPos;\nvarying vec3 vNormal;\n\n// tailored functions\n' + this.functions() + '\n\n// main loop\n' + this._main + '\n      ';
  };

  return ShadersFragment;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersFragment);

/***/ }),

/***/ "./src/shaders/shaders.data.uniform.js":
/*!*********************************************!*\
  !*** ./src/shaders/shaders.data.uniform.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three/src/math/Matrix4 */ "./node_modules/three/src/math/Matrix4.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @module shaders/data
 */

var ShadersUniform = function () {
  function ShadersUniform() {
    _classCallCheck(this, ShadersUniform);
  }

  /**
   * Shaders data uniforms
   */
  ShadersUniform.uniforms = function uniforms() {
    return {
      uTextureSize: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      },
      uTextureContainer: {
        type: 'tv',
        value: [],
        typeGLSL: 'sampler2D',
        length: 7
      },
      uDataDimensions: {
        type: 'iv',
        value: [0, 0, 0],
        typeGLSL: 'ivec3'
      },
      uWorldToData: {
        type: 'm4',
        value: new three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_0__["Matrix4"](),
        typeGLSL: 'mat4'
      },
      uWindowCenterWidth: {
        type: 'fv1',
        value: [0.0, 0.0],
        typeGLSL: 'float',
        length: 2
      },
      uLowerUpperThreshold: {
        type: 'fv1',
        value: [0.0, 0.0],
        typeGLSL: 'float',
        length: 2
      },
      uRescaleSlopeIntercept: {
        type: 'fv1',
        value: [0.0, 0.0],
        typeGLSL: 'float',
        length: 2
      },
      uNumberOfChannels: {
        type: 'i',
        value: 1,
        typeGLSL: 'int'
      },
      uBitsAllocated: {
        type: 'i',
        value: 8,
        typeGLSL: 'int'
      },
      uInvert: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      },
      uLut: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      },
      uTextureLUT: {
        type: 't',
        value: [],
        typeGLSL: 'sampler2D'
      },
      uLutSegmentation: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      },
      uTextureLUTSegmentation: {
        type: 't',
        value: [],
        typeGLSL: 'sampler2D'
      },
      uPixelType: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      },
      uPackedPerPixel: {
        type: 'i',
        value: 1,
        typeGLSL: 'int'
      },
      uInterpolation: {
        type: 'i',
        value: 1,
        typeGLSL: 'int'
      },
      uCanvasWidth: {
        type: 'f',
        value: 0,
        typeGLSL: 'float'
      },
      uCanvasHeight: {
        type: 'f',
        value: 0,
        typeGLSL: 'float'
      },
      uBorderColor: {
        type: 'v3',
        value: [1.0, 0.0, 0.5],
        typeGLSL: 'vec3'
      },
      uBorderWidth: {
        type: 'f',
        value: 2,
        typeGLSL: 'float'
      },
      uBorderMargin: {
        type: 'f',
        value: 2,
        typeGLSL: 'float'
      },
      uBorderDashLength: {
        type: 'f',
        value: 10,
        typeGLSL: 'float'
      },
      uOpacity: {
        type: 'f',
        value: 1.0,
        typeGLSL: 'float'
      },
      uSpacing: {
        type: 'f',
        value: 0,
        typeGLSL: 'float'
      },
      uThickness: {
        type: 'f',
        value: 0,
        typeGLSL: 'float'
      },
      uThicknessMethod: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      }
    };
  };

  return ShadersUniform;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersUniform);

/***/ }),

/***/ "./src/shaders/shaders.data.vertex.js":
/*!********************************************!*\
  !*** ./src/shaders/shaders.data.vertex.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShadersVertex = function () {
  function ShadersVertex() {
    _classCallCheck(this, ShadersVertex);
  }

  ShadersVertex.prototype.compute = function compute() {
    return "\nvarying vec3 vPos;\nvarying vec3 vNormal;\n\nvoid main() {\n  vNormal = normal;\n  vPos = (modelMatrix * vec4(position, 1.0 )).xyz;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0 );\n\n}\n        ";
  };

  return ShadersVertex;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersVertex);

/***/ }),

/***/ "./src/shaders/shaders.js":
/*!********************************!*\
  !*** ./src/shaders/shaders.js ***!
  \********************************/
/*! exports provided: ContourUniformShader, ContourFragmentShader, ContourVertexShader, DataUniformShader, DataFragmentShader, DataVertexShader, VRUniformShader, VRFragmentShader, VRVertexShader, LayerUniformShader, LayerFragmentShader, LayerVertexShader, LocalizerUniformShader, LocalizerFragmentShader, LocalizerVertexShader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shaders_contour_uniform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shaders.contour.uniform */ "./src/shaders/shaders.contour.uniform.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContourUniformShader", function() { return _shaders_contour_uniform__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _shaders_contour_fragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders.contour.fragment */ "./src/shaders/shaders.contour.fragment.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContourFragmentShader", function() { return _shaders_contour_fragment__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _shaders_contour_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders.contour.vertex */ "./src/shaders/shaders.contour.vertex.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContourVertexShader", function() { return _shaders_contour_vertex__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _shaders_data_uniform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shaders.data.uniform */ "./src/shaders/shaders.data.uniform.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataUniformShader", function() { return _shaders_data_uniform__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _shaders_data_fragment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shaders.data.fragment */ "./src/shaders/shaders.data.fragment.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataFragmentShader", function() { return _shaders_data_fragment__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _shaders_data_vertex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shaders.data.vertex */ "./src/shaders/shaders.data.vertex.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataVertexShader", function() { return _shaders_data_vertex__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _shaders_vr_uniform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shaders.vr.uniform */ "./src/shaders/shaders.vr.uniform.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VRUniformShader", function() { return _shaders_vr_uniform__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _shaders_vr_fragment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./shaders.vr.fragment */ "./src/shaders/shaders.vr.fragment.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VRFragmentShader", function() { return _shaders_vr_fragment__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _shaders_vr_vertex__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./shaders.vr.vertex */ "./src/shaders/shaders.vr.vertex.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VRVertexShader", function() { return _shaders_vr_vertex__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _shaders_layer_uniform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./shaders.layer.uniform */ "./src/shaders/shaders.layer.uniform.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LayerUniformShader", function() { return _shaders_layer_uniform__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony import */ var _shaders_layer_fragment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./shaders.layer.fragment */ "./src/shaders/shaders.layer.fragment.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LayerFragmentShader", function() { return _shaders_layer_fragment__WEBPACK_IMPORTED_MODULE_10__["default"]; });

/* harmony import */ var _shaders_layer_vertex__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./shaders.layer.vertex */ "./src/shaders/shaders.layer.vertex.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LayerVertexShader", function() { return _shaders_layer_vertex__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony import */ var _shaders_localizer_uniform__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./shaders.localizer.uniform */ "./src/shaders/shaders.localizer.uniform.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalizerUniformShader", function() { return _shaders_localizer_uniform__WEBPACK_IMPORTED_MODULE_12__["default"]; });

/* harmony import */ var _shaders_localizer_fragment__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./shaders.localizer.fragment */ "./src/shaders/shaders.localizer.fragment.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalizerFragmentShader", function() { return _shaders_localizer_fragment__WEBPACK_IMPORTED_MODULE_13__["default"]; });

/* harmony import */ var _shaders_localizer_vertex__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./shaders.localizer.vertex */ "./src/shaders/shaders.localizer.vertex.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalizerVertexShader", function() { return _shaders_localizer_vertex__WEBPACK_IMPORTED_MODULE_14__["default"]; });























/***/ }),

/***/ "./src/shaders/shaders.layer.fragment.js":
/*!***********************************************!*\
  !*** ./src/shaders/shaders.layer.fragment.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShadersFragment = function () {
  // pass uniforms object
  function ShadersFragment(uniforms) {
    _classCallCheck(this, ShadersFragment);

    this._uniforms = uniforms;
    this._functions = {};
    this._main = '';
  }

  ShadersFragment.prototype.functions = function functions() {
    if (this._main === '') {
      // if main is empty, functions can not have been computed
      this.main();
    }

    var content = '';
    for (var property in this._functions) {
      content += this._functions[property] + '\n';
    }

    return content;
  };

  ShadersFragment.prototype.uniforms = function uniforms() {
    var content = '';
    for (var property in this._uniforms) {
      var uniform = this._uniforms[property];
      content += 'uniform ' + uniform.typeGLSL + ' ' + property;

      if (uniform && uniform.length) {
        content += '[' + uniform.length + ']';
      }

      content += ';\n';
    }

    return content;
  };

  ShadersFragment.prototype.main = function main() {
    // need to pre-call main to fill up the functions list
    this._main = '\nvoid main(void) {\n\n  vec2 texc = vec2(((vProjectedCoords.x / vProjectedCoords.w) + 1.0 ) / 2.0,\n                ((vProjectedCoords.y / vProjectedCoords.w) + 1.0 ) / 2.0 );\n\n  // just silence warning for\n  // vec4 dummy = vPos;\n\n  //The back position is the world space position stored in the texture.\n  vec4 baseColor0 = texture2D(uTextureBackTest0, texc);\n  vec4 baseColor1 = texture2D(uTextureBackTest1, texc);\n\n  if( uTrackMouse == 1 ){\n\n      if( vProjectedCoords.x < uMouse.x ){\n\n        gl_FragColor = baseColor0;\n\n      }\n      else{\n\n        gl_FragColor = mix( baseColor0, baseColor1, uOpacity1 );\n\n      }\n\n  }\n  else{\n\n    if( uType1 == 0 ){\n\n      //merge an image into\n      gl_FragColor = mix( baseColor0, baseColor1, uOpacity1 );\n\n    }\n    else{\n\n      float opacity = baseColor1.a;\n      gl_FragColor = mix( baseColor0, baseColor1, opacity * uOpacity1 );\n\n    }\n\n  }\n\n  return;\n}\n   ';
  };

  ShadersFragment.prototype.compute = function compute() {
    var shaderInterpolation = '';
    // shaderInterpolation.inline(args) //true/false
    // shaderInterpolation.functions(args)

    return '\n// uniforms\n' + this.uniforms() + '\n\n// varying (should fetch it from vertex directly)\n// varying vec4      vPos;\nvarying vec4      vProjectedCoords;\n\n// tailored functions\n' + this.functions() + '\n\n// main loop\n' + this._main + '\n      ';
  };

  return ShadersFragment;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersFragment);

/***/ }),

/***/ "./src/shaders/shaders.layer.uniform.js":
/*!**********************************************!*\
  !*** ./src/shaders/shaders.layer.uniform.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var three_src_math_Vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three/src/math/Vector2 */ "./node_modules/three/src/math/Vector2.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @module shaders/data
 */

var ShadersUniform = function () {
  function ShadersUniform() {
    _classCallCheck(this, ShadersUniform);
  }

  ShadersUniform.uniforms = function uniforms() {
    return {
      uTextureBackTest0: {
        type: 't',
        value: [],
        typeGLSL: 'sampler2D'
      },
      uTextureBackTest1: {
        type: 't',
        value: [],
        typeGLSL: 'sampler2D'
      },
      uOpacity0: {
        type: 'f',
        value: 1.0,
        typeGLSL: 'float'
      },
      uOpacity1: {
        type: 'f',
        value: 1.0,
        typeGLSL: 'float'
      },
      uType0: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      },
      uType1: {
        type: 'i',
        value: 1,
        typeGLSL: 'int'
      },
      uTrackMouse: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      },
      uMouse: {
        type: 'v2',
        value: new three_src_math_Vector2__WEBPACK_IMPORTED_MODULE_0__["Vector2"](),
        typeGLSL: 'vec2'
      }
    };
  };

  return ShadersUniform;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersUniform);

/***/ }),

/***/ "./src/shaders/shaders.layer.vertex.js":
/*!*********************************************!*\
  !*** ./src/shaders/shaders.layer.vertex.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShadersVertex = function () {
  function ShadersVertex() {
    _classCallCheck(this, ShadersVertex);
  }

  ShadersVertex.prototype.compute = function compute() {
    return "\n// varying vec4 vPos;\nvarying vec4 vProjectedCoords;\n\n//\n// main\n//\nvoid main() {\n\n  vec4 vPos = modelMatrix * vec4(position, 1.0 );\n  vProjectedCoords =  projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0 );\n\n}\n        ";
  };

  return ShadersVertex;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersVertex);

/***/ }),

/***/ "./src/shaders/shaders.localizer.fragment.js":
/*!***************************************************!*\
  !*** ./src/shaders/shaders.localizer.fragment.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Localizer fragment shader
 */
var _class = function () {
  /**
   *
   */
  function _class(uniforms) {
    _classCallCheck(this, _class);

    this._uniforms = uniforms;
    this._functions = {};
    this._main = '';
  }

  /**
   *
   */


  _class.prototype.functions = function functions() {
    if (this._main === '') {
      // if main is empty, functions can not have been computed
      this.main();
    }

    var content = '';
    for (var property in this._functions) {
      content += this._functions[property] + '\n';
    }

    return content;
  };

  /**
   *
   */


  _class.prototype.uniforms = function uniforms() {
    var content = '';
    for (var property in this._uniforms) {
      var uniform = this._uniforms[property];
      content += 'uniform ' + uniform.typeGLSL + ' ' + property;

      if (uniform && uniform.length) {
        content += '[' + uniform.length + ']';
      }

      content += ';\n';
    }

    return content;
  };

  /**
   *
   */


  _class.prototype.main = function main() {
    // need to pre-call main to fill up the functions list
    this._main = '\nvoid intersectionProjection(\n  in vec4 plane,\n  in vec4 slice,\n  out vec3 intersectionProjection){\n\n      vec3 intersectionDirection = normalize(cross(plane.xyz, slice.xyz));\n      vec3 intersectionPoint = \n        cross(intersectionDirection,slice.xyz) * plane.w +\n        cross(plane.xyz, intersectionDirection) * slice.w;\n\n      intersectionProjection =\n        intersectionPoint.xyz +\n        (dot(vPos.xyz - intersectionPoint, intersectionDirection)\n          * intersectionDirection);\n\n}\n\nvoid main(void) {\n      vec4 c1 = vec4(0., 0., 0., 0.);\n      vec4 c2 = vec4(0., 0., 0., 0.);\n      vec4 c3 = vec4(0., 0., 0., 0.);\n\n      // localizer #1\n      // must be normalized!\n      if(length(uPlane1.xyz) > 0.5) {\n        vec3 projection1 = vec3(1.);\n        intersectionProjection(\n          uPlane1,\n          uSlice,\n          projection1\n        );\n\n        vec4 projInter1 = (vProjectionViewMatrix * vec4(projection1, 1.));\n        vec3 ndc1 = projInter1.xyz / projInter1.w;\n        vec2 screenSpace1 = (ndc1.xy * .5 + .5) * vec2(uCanvasWidth, uCanvasHeight);\n\n        float d1 = distance(gl_FragCoord.xy, screenSpace1.xy);\n        c1 = vec4(uPlaneColor1, 1. - smoothstep(.5, .7, d1));\n      }\n\n      // localizer #2\n      if(length(uPlane2.xyz) > 0.5) {\n        vec3 projection2 = vec3(1.);\n        intersectionProjection(\n          uPlane2,\n          uSlice,\n          projection2\n        );\n\n        vec4 projInter2 = (vProjectionViewMatrix * vec4(projection2, 1.));\n        vec3 ndc2 = projInter2.xyz / projInter2.w;\n        vec2 screenSpace2 = (ndc2.xy * .5 + .5) * vec2(uCanvasWidth, uCanvasHeight);\n\n        float d2 = distance(gl_FragCoord.xy, screenSpace2.xy);\n        c2 = vec4(uPlaneColor2, 1. - smoothstep(.5, .7, d2));\n      }\n\n      // localizer #3\n      if(length(uPlane3.xyz) > 0.5) {\n        vec3 projection3 = vec3(1.);\n        intersectionProjection(\n          uPlane3,\n          uSlice,\n          projection3\n        );\n\n        vec4 projInter3 = (vProjectionViewMatrix * vec4(projection3, 1.));\n        vec3 ndc3 = projInter3.xyz / projInter3.w;\n        vec2 screenSpace3 = (ndc3.xy * .5 + .5) * vec2(uCanvasWidth, uCanvasHeight);\n\n        float d3 = distance(gl_FragCoord.xy, screenSpace3.xy);\n        c3 = vec4(uPlaneColor3, 1. - smoothstep(.5, .7, d3));\n      }\n\n      // float uBorderDashLength = 10.0;\n      // float uBorderWidth = 2.0;\n      // float valueX = mod(gl_FragCoord.x, 2. * uBorderDashLength);\n      // float valueY = mod(gl_FragCoord.y, 2. * uBorderDashLength);\n      // if( valueX < uBorderDashLength || valueY < uBorderDashLength ){\n        vec3 colorMix = c1.xyz*c1.w + c2.xyz*c2.w + c3.xyz*c3.w;\n        gl_FragColor = vec4(colorMix, max(max(c1.w, c2.w),c3.w)*0.5);\n        return;\n      // }\n      \n      // gl_FragColor = vec4(0., 0., 0., 0.);\n      // return;\n}\n   ';
  };

  /**
   *
   */


  _class.prototype.compute = function compute() {
    return '\n// uniforms\n' + this.uniforms() + '\n\n// varying (should fetch it from vertex directly)\nvarying vec4 vPos;\nvarying mat4 vProjectionViewMatrix;\n\n// tailored functions\n' + this.functions() + '\n\n// main loop\n' + this._main + '\n      ';
  };

  return _class;
}();

/* harmony default export */ __webpack_exports__["default"] = (_class);

/***/ }),

/***/ "./src/shaders/shaders.localizer.uniform.js":
/*!**************************************************!*\
  !*** ./src/shaders/shaders.localizer.uniform.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @module shaders/localizer/uniforms
 */

var _class = function () {
  function _class() {
    _classCallCheck(this, _class);
  }

  /**
   * Shaders data uniforms
   */
  _class.uniforms = function uniforms() {
    return {
      uCanvasWidth: {
        type: 'f',
        value: 0,
        typeGLSL: 'float'
      },
      uCanvasHeight: {
        type: 'f',
        value: 0,
        typeGLSL: 'float'
      },
      uSlice: {
        type: 'v4',
        value: [0.0, 0.0, 0.0, 0.0],
        typeGLSL: 'vec4'
      },
      uPlane1: {
        type: 'v4',
        value: [0.0, 0.0, 0.0, 0.0],
        typeGLSL: 'vec4'
      },
      uPlaneColor1: {
        type: 'v3',
        value: [1.0, 1.0, 0.0],
        typeGLSL: 'vec3'
      },
      uPlane2: {
        type: 'v4',
        value: [0.0, 0.0, 0.0, 0.0],
        typeGLSL: 'vec4'
      },
      uPlaneColor2: {
        type: 'v3',
        value: [1.0, 1.0, 0.0],
        typeGLSL: 'vec3'
      },
      uPlane3: {
        type: 'v4',
        value: [0.0, 0.0, 0.0, 0.0],
        typeGLSL: 'vec4'
      },
      uPlaneColor3: {
        type: 'v3',
        value: [1.0, 1.0, 0.0],
        typeGLSL: 'vec3'
      }
    };
  };

  return _class;
}();

/* harmony default export */ __webpack_exports__["default"] = (_class);

/***/ }),

/***/ "./src/shaders/shaders.localizer.vertex.js":
/*!*************************************************!*\
  !*** ./src/shaders/shaders.localizer.vertex.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 *
 */
var _class = function () {
  function _class() {
    _classCallCheck(this, _class);
  }

  /**
   *
   */
  _class.prototype.compute = function compute() {
    return "\nvarying vec4 vPos;\nvarying mat4 vProjectionViewMatrix;\n\n//\n// main\n//\nvoid main() {\n\n  vPos = modelMatrix * vec4(position, 1.0 );\n  vProjectionViewMatrix = projectionMatrix * viewMatrix;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0 );\n\n}\n        ";
  };

  return _class;
}();

/* harmony default export */ __webpack_exports__["default"] = (_class);

/***/ }),

/***/ "./src/shaders/shaders.vr.fragment.js":
/*!********************************************!*\
  !*** ./src/shaders/shaders.vr.fragment.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _interpolation_shaders_interpolation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interpolation/shaders.interpolation */ "./src/shaders/interpolation/shaders.interpolation.js");
/* harmony import */ var _helpers_shaders_helpers_intersectBox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/shaders.helpers.intersectBox */ "./src/shaders/helpers/shaders.helpers.intersectBox.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var ShadersFragment = function () {
  // pass uniforms object
  function ShadersFragment(uniforms) {
    _classCallCheck(this, ShadersFragment);

    this._uniforms = uniforms;
    this._functions = {};
    this._main = '';
  }

  ShadersFragment.prototype.functions = function functions() {
    if (this._main === '') {
      // if main is empty, functions can not have been computed
      this.main();
    }

    var content = '';
    for (var property in this._functions) {
      content += this._functions[property] + '\n';
    }

    return content;
  };

  ShadersFragment.prototype.uniforms = function uniforms() {
    var content = '';
    for (var property in this._uniforms) {
      var uniform = this._uniforms[property];
      content += 'uniform ' + uniform.typeGLSL + ' ' + property;

      if (uniform && uniform.length) {
        content += '[' + uniform.length + ']';
      }

      content += ';\n';
    }

    return content;
  };

  ShadersFragment.prototype.main = function main() {
    // need to pre-call main to fill up the functions list
    this._main = '\nvoid getIntensity(in vec3 dataCoordinates, out float intensity, out vec3 gradient){\n\n  vec4 dataValue = vec4(0., 0., 0., 0.);\n  ' + Object(_interpolation_shaders_interpolation__WEBPACK_IMPORTED_MODULE_0__["default"])(this, 'dataCoordinates', 'dataValue', 'gradient') + '\n\n  intensity = dataValue.r;\n\n  // rescale/slope\n  intensity = intensity*uRescaleSlopeIntercept[0] + uRescaleSlopeIntercept[1];\n  // window level\n  float windowMin = uWindowCenterWidth[0] - uWindowCenterWidth[1] * 0.5;\n  intensity = ( intensity - windowMin ) / uWindowCenterWidth[1];\n}\n\nmat4 inverse(mat4 m) {\n  float\n    a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n    a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n    a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n    a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n    b00 = a00 * a11 - a01 * a10,\n    b01 = a00 * a12 - a02 * a10,\n    b02 = a00 * a13 - a03 * a10,\n    b03 = a01 * a12 - a02 * a11,\n    b04 = a01 * a13 - a03 * a11,\n    b05 = a02 * a13 - a03 * a12,\n    b06 = a20 * a31 - a21 * a30,\n    b07 = a20 * a32 - a22 * a30,\n    b08 = a20 * a33 - a23 * a30,\n    b09 = a21 * a32 - a22 * a31,\n    b10 = a21 * a33 - a23 * a31,\n    b11 = a22 * a33 - a23 * a32,\n\n    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n    a11 * b11 - a12 * b10 + a13 * b09,\n    a02 * b10 - a01 * b11 - a03 * b09,\n    a31 * b05 - a32 * b04 + a33 * b03,\n    a22 * b04 - a21 * b05 - a23 * b03,\n    a12 * b08 - a10 * b11 - a13 * b07,\n    a00 * b11 - a02 * b08 + a03 * b07,\n    a32 * b02 - a30 * b05 - a33 * b01,\n    a20 * b05 - a22 * b02 + a23 * b01,\n    a10 * b10 - a11 * b08 + a13 * b06,\n    a01 * b08 - a00 * b10 - a03 * b06,\n    a30 * b04 - a31 * b02 + a33 * b00,\n    a21 * b02 - a20 * b04 - a23 * b00,\n    a11 * b07 - a10 * b09 - a12 * b06,\n    a00 * b09 - a01 * b07 + a02 * b06,\n    a31 * b01 - a30 * b03 - a32 * b00,\n    a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\n/**\n * Adapted from original sources\n * \n * Original code: \n * http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/\n * https://www.shadertoy.com/view/lt33z7\n * \n * The vec3 returned is the RGB color of the light\'s contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongShading(vec3 k_a, vec3 k_d, vec3 k_s, float shininess, vec3 p, vec3 eye,\n  vec3 lightPos, vec3 lightIntensity, vec3 normal) {\n  vec3 N = normal;\n  vec3 L = lightPos - p;\n  if (length(L) > 0.) {\n    L = L / length(L);\n  }\n  vec3 V = eye - p;\n  if (length(V) > 0.) {\n    V = V / length(V);\n  }\n  vec3 R = reflect(-L, N);\n  if (length(R) > 0.) {\n    R = R / length(R);\n  }\n\n  // https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\n  vec3 h = L + V;\n  vec3 H = h;\n  if (length(h) > 0.) {\n    H = H / length(h);\n  }\n\n  float dotLN = dot(L, N);\n  float dotRV = dot(R, V);\n\n  if (dotLN < 0.) {\n    // Light not visible from this point on the surface\n    return k_a;\n  } \n\n  if (dotRV < 0.) {\n    // Light reflection in opposite direction as viewer, apply only diffuse\n    // component\n    return k_a + lightIntensity * (k_d * dotLN);\n  }\n\n  float specAngle = max(dot(H, normal), 0.0);\n  float specular = pow(dotRV, shininess); //pow(specAngle, shininess); // \n  return k_a + lightIntensity * (k_d * dotLN  + k_s * specular);\n}\n\nfloat PI = 3.14159265358979323846264 * 00000.1; // PI\n\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\nhighp float rand( const in vec2 uv) {\n  const highp float a = 12.9898;\n  const highp float b = 78.233;\n  const highp float c = 43758.5453;\n  highp float dt = dot(uv.xy, vec2(a, b)), sn = mod(dt, PI);\n  return fract(sin(sn) * c);\n}\n\nvoid main(void) {\n  const int maxSteps = 1024;\n\n  // the ray\n  vec3 rayOrigin = cameraPosition;\n  vec3 rayDirection = normalize(vPos.xyz - rayOrigin);\n\n  vec3 lightOrigin = uLightPositionInCamera == 1 ? cameraPosition : uLightPosition;\n\n  // the Axe-Aligned B-Box\n  vec3 AABBMin = vec3(uWorldBBox[0], uWorldBBox[2], uWorldBBox[4]);\n  vec3 AABBMax = vec3(uWorldBBox[1], uWorldBBox[3], uWorldBBox[5]);\n\n  // Intersection ray/bbox\n  float tNear, tFar;\n  bool intersect = false;\n  ' + _helpers_shaders_helpers_intersectBox__WEBPACK_IMPORTED_MODULE_1__["default"].api(this, 'rayOrigin', 'rayDirection', 'AABBMin', 'AABBMax', 'tNear', 'tFar', 'intersect') + '\n  if (tNear < 0.0) tNear = 0.0;\n\n  // x / y should be within o-1\n  // should\n  float offset = rand(gl_FragCoord.xy);\n\n  // init the ray marching\n  float tStep = (tFar - tNear) / float(uSteps);\n  float tCurrent = tNear + offset * tStep;\n  vec4 accumulatedColor = vec4(0.0);\n  float accumulatedAlpha = 0.0;\n\n  // MIP volume rendering\n  float maxIntensity = 0.0;\n\n  mat4 dataToWorld = inverse(uWorldToData);\n\n  // rayOrigin -= rayDirection * 0.1; // gold_noise(vPos.xz, vPos.y) / 100.;  \n\n  for(int rayStep = 0; rayStep < maxSteps; rayStep++){\n    vec3 currentPosition = rayOrigin + rayDirection * tCurrent;\n    // some non-linear FUN\n    // some occlusion issue to be fixed\n    vec3 transformedPosition = currentPosition; //transformPoint(currentPosition, uAmplitude, uFrequence);\n    // world to data coordinates\n    // rounding trick\n    // first center of first voxel in data space is CENTERED on (0,0,0)\n    vec4 dataCoordinatesRaw = uWorldToData * vec4(transformedPosition, 1.0);\n    vec3 currentVoxel = vec3(dataCoordinatesRaw.x, dataCoordinatesRaw.y, dataCoordinatesRaw.z);\n    float intensity = 0.0;\n    vec3 gradient = vec3(0., 0., 0.);\n    getIntensity(currentVoxel, intensity, gradient);\n    // map gradient to world space and normalize before using\n    // we avoid to call "normalize" as it may be undefined if vector length == 0.\n    gradient = (vec3(dataToWorld * vec4(gradient, 0.)));\n    if (length(gradient) > 0.0) {\n      gradient = normalize(gradient);\n    }\n\n    vec4 colorSample;\n    float alphaSample;\n    if(uLut == 1){\n      vec4 colorFromLUT = texture2D( uTextureLUT, vec2( intensity, 1.0) );\n      // 256 colors\n      colorSample = colorFromLUT;\n      alphaSample = colorFromLUT.a;\n    }\n    else{\n      alphaSample = intensity;\n      colorSample.r = colorSample.g = colorSample.b = intensity;\n    }\n\n    // ray marching algorithm\n    // shading on\n    // interpolation on\n    if (uAlgorithm == 0 && uShading == 1 && uInterpolation != 0) {\n      //  && alphaSample > .3\n      vec3 ambientComponent = uSampleColorToAmbient == 1 ? colorSample.xyz : uAmbientColor;\n      ambientComponent *= uAmbient;\n      vec3 diffuseComponent = uSampleColorToDiffuse == 1 ? colorSample.xyz : uDiffuseColor;\n      diffuseComponent *= uDiffuse;\n      vec3 specularComponent = uSpecular * uSpecularColor;\n      float shininess = uShininess;\n      vec3 vIntensity = uIntensity;\n\n      colorSample.xyz += phongShading(\n        ambientComponent,\n        diffuseComponent,\n        specularComponent,\n        shininess,\n        currentPosition.xyz,\n        rayOrigin.xyz,\n        lightOrigin.xyz,\n        vIntensity,\n        gradient);\n    }\n\n    alphaSample = 1.0 - pow((1.0- alphaSample),tStep*uAlphaCorrection);\n    alphaSample *= (1.0 - accumulatedAlpha);\n\n    accumulatedColor += alphaSample * colorSample;\n    accumulatedAlpha += alphaSample;\n\n    tCurrent += tStep;\n\n    if (tCurrent > tFar || (uAlgorithm == 0 && accumulatedAlpha >= 1.0)) break;\n\n    if (uAlgorithm == 1 && (intensity >= maxIntensity)) {\n      maxIntensity = intensity;\n      accumulatedColor = colorSample;\n      accumulatedAlpha = 1.;\n    }\n  }\n\n  gl_FragColor = vec4(accumulatedColor.xyz, accumulatedAlpha);\n}\n   ';
  };

  ShadersFragment.prototype.compute = function compute() {
    var shaderInterpolation = '';
    // shaderInterpolation.inline(args) //true/false
    // shaderInterpolation.functions(args)

    return '\n// uniforms\n' + this.uniforms() + '\n\n// varying (should fetch it from vertex directly)\nvarying vec4      vPos;\n\n// tailored functions\n' + this.functions() + '\n\n// main loop\n' + this._main + '\n      ';
  };

  return ShadersFragment;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersFragment);

/***/ }),

/***/ "./src/shaders/shaders.vr.uniform.js":
/*!*******************************************!*\
  !*** ./src/shaders/shaders.vr.uniform.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three/src/math/Matrix4 */ "./node_modules/three/src/math/Matrix4.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * @module shaders/data
 */

var ShadersUniform = function () {
  function ShadersUniform() {
    _classCallCheck(this, ShadersUniform);
  }

  ShadersUniform.uniforms = function uniforms() {
    return {
      uTextureSize: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      },
      uTextureContainer: {
        type: 'tv',
        value: [],
        typeGLSL: 'sampler2D',
        length: 7
      },
      uDataDimensions: {
        type: 'iv',
        value: [0, 0, 0],
        typeGLSL: 'ivec3'
      },
      uWorldToData: {
        type: 'm4',
        value: new three_src_math_Matrix4__WEBPACK_IMPORTED_MODULE_0__["Matrix4"](),
        typeGLSL: 'mat4'
      },
      uWindowCenterWidth: {
        type: 'fv1',
        value: [0.0, 0.0],
        typeGLSL: 'float',
        length: 2
      },
      uRescaleSlopeIntercept: {
        type: 'fv1',
        value: [0.0, 0.0],
        typeGLSL: 'float',
        length: 2
      },
      uNumberOfChannels: {
        type: 'i',
        value: 1,
        typeGLSL: 'int'
      },
      uBitsAllocated: {
        type: 'i',
        value: 8,
        typeGLSL: 'int'
      },
      uInvert: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      },
      uLut: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      },
      uTextureLUT: {
        type: 't',
        value: [],
        typeGLSL: 'sampler2D'
      },
      uPixelType: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      },
      uPackedPerPixel: {
        type: 'i',
        value: 1,
        typeGLSL: 'int'
      },
      uInterpolation: {
        type: 'i',
        value: 1,
        typeGLSL: 'int'
      },
      uWorldBBox: {
        type: 'fv1',
        value: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        typeGLSL: 'float',
        length: 6
      },
      uSteps: {
        type: 'i',
        value: 256,
        typeGLSL: 'int'
      },
      uAlphaCorrection: {
        type: 'f',
        value: 0.5,
        typeGLSL: 'float'
      },
      uFrequence: {
        type: 'f',
        value: 0,
        typeGLSL: 'float'
      },
      uAmplitude: {
        type: 'f',
        value: 0,
        typeGLSL: 'float'
      },
      uShading: {
        type: 'i',
        value: 1,
        typeGLSL: 'int'
      },
      uAmbient: {
        type: 'f',
        value: 0.1,
        typeGLSL: 'float'
      },
      uAmbientColor: {
        type: 'v3',
        value: [1.0, 1.0, 0.0],
        typeGLSL: 'vec3'
      },
      uSampleColorToAmbient: {
        type: 'i',
        value: 1,
        typeGLSL: 'int'
      },
      uSpecular: {
        type: 'f',
        value: 1,
        typeGLSL: 'float'
      },
      uSpecularColor: {
        type: 'v3',
        value: [1.0, 1.0, 1.0],
        typeGLSL: 'vec3'
      },
      uDiffuse: {
        type: 'f',
        value: 0.3,
        typeGLSL: 'float'
      },
      uDiffuseColor: {
        type: 'v3',
        value: [1.0, 1.0, 0.0],
        typeGLSL: 'vec3'
      },
      uSampleColorToDiffuse: {
        type: 'i',
        value: 1,
        typeGLSL: 'int'
      },
      uShininess: {
        type: 'f',
        value: 5,
        typeGLSL: 'float'
      },
      uLightPosition: {
        type: 'v3',
        value: [0.0, 0.0, 0.0],
        typeGLSL: 'vec3'
      },
      uLightPositionInCamera: {
        type: 'i',
        value: 1,
        typeGLSL: 'int'
      },
      uIntensity: {
        type: 'v3',
        value: [0.8, 0.8, 0.8],
        typeGLSL: 'vec3'
      },
      uAlgorithm: {
        type: 'i',
        value: 0,
        typeGLSL: 'int'
      }
    };
  };

  return ShadersUniform;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersUniform);

/***/ }),

/***/ "./src/shaders/shaders.vr.vertex.js":
/*!******************************************!*\
  !*** ./src/shaders/shaders.vr.vertex.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShadersVertex = function () {
  function ShadersVertex() {
    _classCallCheck(this, ShadersVertex);
  }

  ShadersVertex.prototype.compute = function compute() {
    return "\nvarying vec4 vPos;\n\n//\n// main\n//\nvoid main() {\n\n  vPos = modelMatrix * vec4(position, 1.0 );\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0 );\n\n}\n        ";
  };

  return ShadersVertex;
}();

/* harmony default export */ __webpack_exports__["default"] = (ShadersVertex);

/***/ }),

/***/ "./src/widgets/widgets.angle.js":
/*!**************************************!*\
  !*** ./src/widgets/widgets.angle.js ***!
  \**************************************/
/*! exports provided: widgetsAngle, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsAngle", function() { return widgetsAngle; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * @module widgets/angle
 */
var widgetsAngle = function widgetsAngle() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'Angle';

      // incoming parameters (optional: worldPosition)

      // outgoing values
      _this._opangle = null;

      _this._moving = false;
      _this._domHovered = false;
      _this._defaultAngle = true;

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      // dom stuff
      _this._line = null;
      _this._line2 = null;
      _this._label = null;

      // add handles
      _this._handles = [];

      var handle = void 0;
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);
      for (var i = 0; i < 3; i++) {
        handle = new WidgetsHandle(targetMesh, controls, params);
        _this.add(handle);
        _this._handles.push(handle);
      }
      _this._handles[1].active = true;
      _this._handles[1].tracking = true;
      _this._handles[2].active = true;
      _this._handles[2].tracking = true;

      _this._moveHandle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._moveHandle);
      _this._handles.push(_this._moveHandle);
      _this._moveHandle.hide();

      _this.create();

      _this.onMove = _this.onMove.bind(_this);
      _this.onHover = _this.onHover.bind(_this);
      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._container.addEventListener('wheel', this.onMove);

      this._line.addEventListener('mouseenter', this.onHover);
      this._line.addEventListener('mouseleave', this.onHover);
      this._line2.addEventListener('mouseenter', this.onHover);
      this._line2.addEventListener('mouseleave', this.onHover);
      this._label.addEventListener('mouseenter', this.onHover);
      this._label.addEventListener('mouseleave', this.onHover);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._container.removeEventListener('wheel', this.onMove);

      this._line.removeEventListener('mouseenter', this.onHover);
      this._line.removeEventListener('mouseleave', this.onHover);
      this._line2.removeEventListener('mouseenter', this.onHover);
      this._line2.removeEventListener('mouseleave', this.onHover);
      this._label.removeEventListener('mouseenter', this.onHover);
      this._label.removeEventListener('mouseleave', this.onHover);
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this.hoverMesh();

      this._hovered = this._handles[0].hovered || this._handles[1].hovered || this._handles[2].hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverMesh = function hoverMesh() {
      // check raycast intersection, do we want to hover on mesh or just css?
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.onStart = function onStart(evt) {
      this._moveHandle.onMove(evt, true);

      this._handles[0].onStart(evt);
      this._handles[1].onStart(evt);
      this._handles[2].onStart(evt);

      this._active = this._handles[0].active || this._handles[1].active || this._handles[2].active || this._domHovered;

      if (this._domHovered && !this._handles[1].tracking && !this._handles[2].tracking) {
        this._moving = true;
        this._controls.enabled = false;
      }

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      var _this2 = this;

      if (this._active) {
        var prevPosition = this._moveHandle.worldPosition.clone();

        this._dragged = true;
        this._moveHandle.onMove(evt, true);

        if (this._moving) {
          this._handles.slice(0, -1).forEach(function (handle) {
            handle.worldPosition.add(_this2._moveHandle.worldPosition.clone().sub(prevPosition));
          });
        }
      } else {
        this.onHover(null);
      }

      this._handles[0].onMove(evt);
      this._handles[1].onMove(evt);
      this._handles[2].onMove(evt);

      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      this._handles[0].onEnd(); // First Handle

      if (this._handles[1].tracking && this._handles[0].screenPosition.distanceTo(this._handles[1].screenPosition) < 10 || !this._handles[1].tracking && this._handles[2].tracking && this._handles[1].screenPosition.distanceTo(this._handles[2].screenPosition) < 10) {
        return;
      }

      if (!this._dragged && this._active && !this._handles[2].tracking) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handles[0].selected = this._selected;
      }

      // Third Handle
      if (this._handles[1].active) {
        this._handles[2].onEnd();
      } else if (this._dragged || !this._handles[2].tracking) {
        this._handles[2].tracking = false;
        this._handles[2].onEnd();
      } else {
        this._handles[2].tracking = false;
      }
      this._handles[2].selected = this._selected;

      // Second Handle
      if (this._dragged || !this._handles[1].tracking) {
        this._handles[1].tracking = false;
        this._handles[1].onEnd();
      } else {
        this._handles[1].tracking = false;
      }
      this._handles[1].selected = this._selected;

      this._active = this._handles[0].active || this._handles[1].active || this._handles[2].active;
      this._dragged = this._handles[2].tracking;
      this._moving = false;
      this.update();
    };

    _class.prototype.create = function create() {
      this.createMesh();
      this.createDOM();
    };

    _class.prototype.createMesh = function createMesh() {
      // geometry
      this._geometry = new three.Geometry();
      this._geometry.vertices = [this._handles[0].worldPosition, this._handles[1].worldPosition, this._handles[1].worldPosition, this._handles[2].worldPosition];

      // material
      this._material = new three.LineBasicMaterial();

      this.updateMeshColor();

      // mesh
      this._mesh = new three.LineSegments(this._geometry, this._material);
      this._mesh.visible = true;
      this.add(this._mesh);
    };

    _class.prototype.createDOM = function createDOM() {
      this._line = document.createElement('div');
      this._line.className = 'widgets-line';
      this._container.appendChild(this._line);

      this._line2 = document.createElement('div');
      this._line2.className = 'widgets-line';
      this._container.appendChild(this._line2);

      this._label = document.createElement('div');
      this._label.className = 'widgets-label';
      this._container.appendChild(this._label);

      this.updateDOMColor();
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._line.style.display = 'none';
      this._line2.style.display = 'none';
      this._label.style.display = 'none';

      this._handles.forEach(function (elem) {
        return elem.hideDOM();
      });
    };

    _class.prototype.showDOM = function showDOM() {
      this._line.style.display = '';
      this._line2.style.display = '';
      this._label.style.display = '';

      this._handles[0].showDOM();
      this._handles[1].showDOM();
      this._handles[2].showDOM();
    };

    _class.prototype.update = function update() {
      this.updateColor();

      this._handles[0].update();
      this._handles[1].update();
      this._handles[2].update();

      // calculate values
      this._opangle = this._handles[1].worldPosition.clone().sub(this._handles[0].worldPosition).angleTo(this._handles[1].worldPosition.clone().sub(this._handles[2].worldPosition)) * 180 / Math.PI || 0.0;
      this._opangle = this._defaultAngle ? this._opangle : 360 - this._opangle;

      this.updateMeshColor();
      this.updateMeshPosition();

      this.updateDOM();
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateMeshPosition = function updateMeshPosition() {
      if (this._geometry) {
        this._geometry.verticesNeedUpdate = true;
      }
    };

    _class.prototype.updateDOM = function updateDOM() {
      this.updateDOMColor();

      // update first line
      var lineData = this.getLineData(this._handles[1].screenPosition, this._handles[0].screenPosition);

      this._line.style.transform = 'translate3D(' + lineData.transformX + 'px, ' + lineData.transformY + 'px, 0)\n            rotate(' + lineData.transformAngle + 'rad)';
      this._line.style.width = lineData.length + 'px';

      // update second line
      var line2Data = this.getLineData(this._handles[1].screenPosition, this._handles[2].screenPosition);

      this._line2.style.transform = 'translate3D(' + line2Data.transformX + 'px, ' + line2Data.transformY + 'px, 0)\n            rotate(' + line2Data.transformAngle + 'rad)';
      this._line2.style.width = line2Data.length + 'px';

      // update angle and label
      this._label.innerHTML = this._opangle.toFixed(2) + '&deg;';

      var paddingNormVector = lineData.line.clone().add(line2Data.line).normalize().negate();
      var normAngle = paddingNormVector.angleTo(new three.Vector3(1, 0, 0));

      if (normAngle > Math.PI / 2) {
        normAngle = Math.PI - normAngle;
      }

      var labelPadding = Math.tan(normAngle) < this._label.offsetHeight / this._label.offsetWidth ? this._label.offsetWidth / 2 / Math.cos(normAngle) + 15 // 15px padding
      : this._label.offsetHeight / 2 / Math.cos(Math.PI / 2 - normAngle) + 15;
      var paddingPoint = this._handles[1].screenPosition.clone().add(paddingNormVector.multiplyScalar(labelPadding));
      var transform = this.adjustLabelTransform(this._label, paddingPoint);

      this._label.style.transform = 'translate3D(' + transform.x + 'px, ' + transform.y + 'px, 0)';
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      this._line.style.backgroundColor = this._color;
      this._line2.style.backgroundColor = this._color;
      this._label.style.borderColor = this._color;
    };

    _class.prototype.free = function free() {
      var _this3 = this;

      this.removeEventListeners();

      this._handles.forEach(function (h) {
        _this3.remove(h);
        h.free();
      });
      this._handles = [];

      this._container.removeChild(this._line);
      this._container.removeChild(this._line2);
      this._container.removeChild(this._label);

      // mesh, geometry, material
      this.remove(this._mesh);
      this._mesh.geometry.dispose();
      this._mesh.geometry = null;
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._mesh = null;
      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.toggleDefaultAngle = function toggleDefaultAngle() {
      this._defaultAngle = !this._defaultAngle;
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handles.forEach(function (elem) {
          return elem.targetMesh = targetMesh;
        });
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handles[0].worldPosition.copy(worldPosition);
        this._handles[1].worldPosition.copy(worldPosition);
        this._handles[2].worldPosition.copy(worldPosition);
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }, {
      key: 'angle',
      get: function get() {
        return this._opangle;
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsAngle());

/***/ }),

/***/ "./src/widgets/widgets.annotation.js":
/*!*******************************************!*\
  !*** ./src/widgets/widgets.annotation.js ***!
  \*******************************************/
/*! exports provided: widgetsAnnotation, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsAnnotation", function() { return widgetsAnnotation; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * @module widgets/annotation
 * @todo: add option to show only label (without mesh, dots and lines)
 */
var widgetsAnnotation = function widgetsAnnotation() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'Annotation';

      // incoming parameters (optional: worldPosition)

      _this._initialized = false; // set to true when the name of the label is entered
      _this._movinglabel = null; // bool that turns true when the label is moving with the mouse
      _this._labelmoved = false; // bool that turns true once the label is moved by the user (at least once)
      _this._labelhovered = false;
      _this._manuallabeldisplay = false; // Make true to force the label to be displayed

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._meshline = null;
      _this._cone = null;

      // dom stuff
      _this._line = null;
      _this._dashline = null;
      _this._label = null;
      _this._labeltext = null;

      // var
      _this._labelOffset = new three.Vector3(); // difference between label center and second handle
      _this._mouseLabelOffset = new three.Vector3(); // difference between mouse coordinates and label center

      // add handles
      _this._handles = [];

      var handle = void 0;
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);
      for (var i = 0; i < 2; i++) {
        handle = new WidgetsHandle(targetMesh, controls, params);
        _this.add(handle);
        _this._handles.push(handle);
      }
      _this._handles[1].active = true;

      _this.create();
      _this.initOffsets();

      _this.onResize = _this.onResize.bind(_this);
      _this.onMove = _this.onMove.bind(_this);
      _this.onHoverlabel = _this.onHoverlabel.bind(_this);
      _this.notonHoverlabel = _this.notonHoverlabel.bind(_this);
      _this.changelabeltext = _this.changelabeltext.bind(_this);

      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      window.addEventListener('resize', this.onResize);

      this._label.addEventListener('mouseenter', this.onHoverlabel);
      this._label.addEventListener('mouseleave', this.notonHoverlabel);
      this._label.addEventListener('dblclick', this.changelabeltext);

      this._container.addEventListener('wheel', this.onMove);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      window.removeEventListener('resize', this.onResize);

      this._label.removeEventListener('mouseenter', this.onHoverlabel);
      this._label.removeEventListener('mouseleave', this.notonHoverlabel);
      this._label.removeEventListener('dblclick', this.changelabeltext);

      this._container.removeEventListener('wheel', this.onMove);
    };

    _class.prototype.onResize = function onResize() {
      this.initOffsets();
    };

    _class.prototype.onHoverlabel = function onHoverlabel() {
      // this function is called when mouse enters the label with "mouseenter" event
      this._labelhovered = true;
      this._container.style.cursor = 'pointer';
    };

    _class.prototype.notonHoverlabel = function notonHoverlabel() {
      // this function is called when mouse leaves the label with "mouseleave" event
      this._labelhovered = false;
      this._container.style.cursor = 'default';
    };

    _class.prototype.onStart = function onStart(evt) {
      if (this._labelhovered) {
        // if label hovered then it should be moved
        // save mouse coordinates offset from label center
        var offsets = this.getMouseOffsets(evt, this._container);
        var paddingPoint = this._handles[1].screenPosition.clone().sub(this._labelOffset);

        this._mouseLabelOffset = new three.Vector3(offsets.screenX - paddingPoint.x, offsets.screenY - paddingPoint.y, 0);
        this._movinglabel = true;
        this._labelmoved = true;
      }

      this._handles[0].onStart(evt);
      this._handles[1].onStart(evt);

      this._active = this._handles[0].active || this._handles[1].active || this._labelhovered;

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      if (this._movinglabel) {
        var offsets = this.getMouseOffsets(evt, this._container);

        this._labelOffset = new three.Vector3(this._handles[1].screenPosition.x - offsets.screenX + this._mouseLabelOffset.x, this._handles[1].screenPosition.y - offsets.screenY + this._mouseLabelOffset.y, 0);
        this._controls.enabled = false;
      }

      if (this._active) {
        this._dragged = true;
      }

      this._handles[0].onMove(evt);
      this._handles[1].onMove(evt);

      this._hovered = this._handles[0].hovered || this._handles[1].hovered || this._labelhovered;

      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      this._handles[0].onEnd(); // First Handle

      // Second Handle
      if (this._dragged || !this._handles[1].tracking) {
        this._handles[1].tracking = false;
        this._handles[1].onEnd();
      } else {
        this._handles[1].tracking = false;
      }

      if (!this._dragged && this._active && this._initialized) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handles[0].selected = this._selected;
        this._handles[1].selected = this._selected;
      }

      if (!this._initialized) {
        this._labelOffset = this._handles[1].screenPosition.clone().sub(this._handles[0].screenPosition).multiplyScalar(0.5);
        this.setlabeltext();
        this._initialized = true;
      }

      this._active = this._handles[0].active || this._handles[1].active;
      this._dragged = false;
      this._movinglabel = false;
      this.update();
    };

    _class.prototype.setlabeltext = function setlabeltext() {
      // called when the user creates a new arrow
      while (!this._labeltext) {
        this._labeltext = prompt('Please enter the annotation text', '');
      }
      this.displaylabel();
    };

    _class.prototype.changelabeltext = function changelabeltext() {
      // called when the user does double click in the label
      this._labeltext = prompt('Please enter a new annotation text', this._label.innerHTML);
      this.displaylabel();
    };

    _class.prototype.displaylabel = function displaylabel() {
      this._label.innerHTML = typeof this._labeltext === 'string' && this._labeltext.length > 0 // avoid error
      ? this._labeltext : ''; // empty string is passed or Cancel is pressed
      // show the label (in css an empty string is used to revert display=none)
      this._label.style.display = '';
      this._dashline.style.display = '';
      this._label.style.transform = 'translate3D(\n        ' + (this._handles[1].screenPosition.x - this._labelOffset.x - this._label.offsetWidth / 2) + 'px,\n        ' + (this._handles[1].screenPosition.y - this._labelOffset.y - this._label.offsetHeight / 2 - this._container.offsetHeight) + 'px, 0)';
    };

    _class.prototype.create = function create() {
      this.createMesh();
      this.createDOM();
    };

    _class.prototype.createMesh = function createMesh() {
      // material
      this._material = new three.LineBasicMaterial();

      this.updateMeshColor();

      // line geometry
      this._geometry = new three.Geometry();
      this._geometry.vertices.push(this._handles[0].worldPosition);
      this._geometry.vertices.push(this._handles[1].worldPosition);

      // line mesh
      this._meshline = new three.Line(this._geometry, this._material);
      this._meshline.visible = true;

      this.add(this._meshline);

      // cone geometry
      this._conegeometry = new three.CylinderGeometry(0, 2, 10);
      this._conegeometry.translate(0, -5, 0);
      this._conegeometry.rotateX(-Math.PI / 2);

      // cone mesh
      this._cone = new three.Mesh(this._conegeometry, this._material);
      this._cone.visible = true;

      this.add(this._cone);
    };

    _class.prototype.createDOM = function createDOM() {
      this._line = document.createElement('div');
      this._line.className = 'widgets-line';
      this._container.appendChild(this._line);

      this._dashline = document.createElement('div');
      this._dashline.className = 'widgets-dashline';
      this._dashline.style.display = 'none';
      this._container.appendChild(this._dashline);

      this._label = document.createElement('div');
      this._label.className = 'widgets-label';
      this._label.style.display = 'none';
      this._container.appendChild(this._label);

      this.updateDOMColor();
    };

    _class.prototype.update = function update() {
      this.updateColor();

      this._handles[0].update();
      this._handles[1].update();

      this.updateMeshColor();
      this.updateMeshPosition();

      this.updateDOM();
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateMeshPosition = function updateMeshPosition() {
      if (this._geometry) {
        this._geometry.verticesNeedUpdate = true;
      }

      if (this._cone) {
        this._cone.position.copy(this._handles[1].worldPosition);
        this._cone.lookAt(this._handles[0].worldPosition);
      }
    };

    _class.prototype.updateDOM = function updateDOM() {
      this.updateDOMColor();

      // update line
      var lineData = this.getLineData(this._handles[0].screenPosition, this._handles[1].screenPosition);

      this._line.style.transform = 'translate3D(' + lineData.transformX + 'px, ' + lineData.transformY + 'px, 0)\n        rotate(' + lineData.transformAngle + 'rad)';
      this._line.style.width = lineData.length + 'px';

      // update label
      var paddingVector = lineData.line.multiplyScalar(0.5);
      var paddingPoint = this._handles[1].screenPosition.clone().sub(this._labelmoved ? this._labelOffset // if the label is moved, then its position is defined by labelOffset
      : paddingVector); // otherwise it's placed in the center of the line
      var labelPosition = this.adjustLabelTransform(this._label, paddingPoint);

      this._label.style.transform = 'translate3D(' + labelPosition.x + 'px, ' + labelPosition.y + 'px, 0)';

      // create the label without the interaction of the user. Useful when we need to create the label manually
      if (this._manuallabeldisplay) {
        this.displaylabel();
      }

      // update dash line
      var minLine = this.getLineData(this._handles[0].screenPosition, paddingPoint);
      var lineCL = this.getLineData(lineData.center, paddingPoint);
      var line1L = this.getLineData(this._handles[1].screenPosition, paddingPoint);

      if (minLine.length > lineCL.length) {
        minLine = lineCL;
      }
      if (minLine.length > line1L.length) {
        minLine = line1L;
      }

      this._dashline.style.transform = 'translate3D(' + minLine.transformX + 'px, ' + minLine.transformY + 'px, 0)\n        rotate(' + minLine.transformAngle + 'rad)';
      this._dashline.style.width = minLine.length + 'px';
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      this._line.style.backgroundColor = this._color;
      this._dashline.style.borderTop = '1.5px dashed ' + this._color;
      this._label.style.borderColor = this._color;
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._line.style.display = 'none';
      this._dashline.style.display = 'none';
      this._label.style.display = 'none';
      this._handles.forEach(function (elem) {
        return elem.hideDOM();
      });
    };

    _class.prototype.showDOM = function showDOM() {
      this._line.style.display = '';
      this._dashline.style.display = '';
      this._label.style.display = '';
      this._handles.forEach(function (elem) {
        return elem.showDOM();
      });
    };

    _class.prototype.free = function free() {
      var _this2 = this;

      this.removeEventListeners();

      this._handles.forEach(function (h) {
        _this2.remove(h);
        h.free();
      });
      this._handles = [];

      this._container.removeChild(this._line);
      this._container.removeChild(this._dashline);
      this._container.removeChild(this._label);

      // mesh, geometry, material
      this.remove(this._meshline);
      this._meshline.geometry.dispose();
      this._meshline.geometry = null;
      this._meshline.material.dispose();
      this._meshline.material = null;
      this._meshline = null;
      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;
      this.remove(this._cone);
      this._cone.geometry.dispose();
      this._cone.geometry = null;
      this._cone.material.dispose();
      this._cone.material = null;
      this._cone = null;
      this._conegeometry.dispose();
      this._conegeometry = null;

      _Constructor.prototype.free.call(this);
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handles.forEach(function (elem) {
          return elem.targetMesh = targetMesh;
        });
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handles[0].worldPosition.copy(worldPosition);
        this._handles[1].worldPosition.copy(worldPosition);
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsAnnotation());

/***/ }),

/***/ "./src/widgets/widgets.base.ts":
/*!*************************************!*\
  !*** ./src/widgets/widgets.base.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var widgets_css_1 = __importDefault(__webpack_require__(/*! ./widgets.css */ "./src/widgets/widgets.css.js"));
var core_colors_1 = __webpack_require__(/*! ../core/core.colors */ "./src/core/core.colors.ts");
var core_utils_1 = __importDefault(__webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js"));
/**
 * @module Abstract Widget
 */
// tslint:disable-next-line
var widgetsBase = function (three) {
    if (three === void 0) { three = window.THREE; }
    if (three === undefined || three.Object3D === undefined) {
        return null;
    }
    var Constructor = three.Object3D;
    return /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1(targetMesh, controls, params) {
            var _this = _super.call(this) || this;
            _this._widgetType = 'Base';
            _this._params = params;
            if (params.hideMesh === true) {
                _this.visible = false;
            }
            var elementStyle = document.getElementById('ami-widgets');
            if (elementStyle === null) {
                var styleEl = document.createElement('style');
                styleEl.id = 'ami-widgets';
                styleEl.innerHTML = widgets_css_1.default.code;
                document.head.appendChild(styleEl);
            }
            _this._enabled = true;
            _this._selected = false;
            _this._hovered = true;
            _this._active = true;
            _this._colors = {
                default: core_colors_1.COLORS.blue,
                active: core_colors_1.COLORS.yellow,
                hover: core_colors_1.COLORS.red,
                select: core_colors_1.COLORS.green,
                text: core_colors_1.COLORS.white,
                error: core_colors_1.COLORS.lightRed,
            };
            _this._color = _this._colors.default;
            _this._dragged = false;
            // can not call it visible because it conflicts with THREE.Object3D
            _this._displayed = true;
            _this._targetMesh = targetMesh;
            _this._controls = controls;
            _this._camera = controls.object;
            _this._container = controls.domElement;
            _this._worldPosition = new three.Vector3(); // LPS position
            if (params.worldPosition) {
                _this._worldPosition.copy(params.worldPosition);
            }
            else if (_this._targetMesh !== null) {
                _this._worldPosition.copy(_this._targetMesh.position);
            }
            return _this;
        }
        class_1.prototype.initOffsets = function () {
            var box = this._container.getBoundingClientRect();
            var body = document.body;
            var docEl = document.documentElement;
            var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
            var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
            var clientTop = docEl.clientTop || body.clientTop || 0;
            var clientLeft = docEl.clientLeft || body.clientLeft || 0;
            this._offsets = {
                top: Math.round(box.top + scrollTop - clientTop),
                left: Math.round(box.left + scrollLeft - clientLeft),
            };
        };
        class_1.prototype.getMouseOffsets = function (event, container) {
            return {
                x: ((event.clientX - this._offsets.left) / container.offsetWidth) * 2 - 1,
                y: -((event.clientY - this._offsets.top) / container.offsetHeight) * 2 + 1,
                screenX: event.clientX - this._offsets.left,
                screenY: event.clientY - this._offsets.top,
            };
        };
        /**
         * Get area of polygon.
         *
         * @param {Array} points Ordered vertices' coordinates
         *
         * @returns {Number}
         */
        class_1.prototype.getArea = function (points) {
            var area = 0;
            var j = points.length - 1; // the last vertex is the 'previous' one to the first
            for (var i = 0; i < points.length; i++) {
                area += (points[j].x + points[i].x) * (points[j].y - points[i].y);
                j = i; // j is the previous vertex to i
            }
            return Math.abs(area / 2);
        };
        /**
         * Get index of ultrasound region by data coordinates.
         *
         * @param {Array}   regions US regions
         * @param {Vector3} point   Data coordinates
         *
         * @returns {Number|null}
         */
        class_1.prototype.getRegionByXY = function (regions, point) {
            var result = null;
            regions.some(function (region, ind) {
                if (point.x >= region.x0 &&
                    point.x <= region.x1 &&
                    point.y >= region.y0 &&
                    point.y <= region.y1) {
                    result = ind;
                    return true;
                }
            });
            return result;
        };
        /**
         * Get point inside ultrasound region by data coordinates.
         *
         * @param {Object}  region US region data
         * @param {Vector3} point  Data coordinates
         *
         * @returns {Vector2|null}
         */
        class_1.prototype.getPointInRegion = function (region, point) {
            if (!region) {
                return null;
            }
            return new three.Vector2((point.x - region.x0 - (region.axisX || 0)) * region.deltaX, (point.y - region.y0 - (region.axisY || 0)) * region.deltaY);
        };
        /**
         * Get point's ultrasound coordinates by data coordinates.
         *
         * @param {Array}   regions US regions
         * @param {Vector3} point   Data coordinates
         *
         * @returns {Vector2|null}
         */
        class_1.prototype.getUsPoint = function (regions, point) {
            return this.getPointInRegion(regions[this.getRegionByXY(regions, point)], point);
        };
        /**
         * Get distance between points inside ultrasound region.
         *
         * @param {Vector3} pointA Begin data coordinates
         * @param {Vector3} pointB End data coordinates
         *
         * @returns {Number|null}
         */
        class_1.prototype.getUsDistance = function (pointA, pointB) {
            var regions = this._params.ultrasoundRegions || [];
            if (regions.length < 1) {
                return null;
            }
            var regionA = this.getRegionByXY(regions, pointA);
            var regionB = this.getRegionByXY(regions, pointB);
            if (regionA === null ||
                regionB === null ||
                regionA !== regionB ||
                regions[regionA].unitsX !== 'cm' ||
                regions[regionA].unitsY !== 'cm') {
                return null;
            }
            return this.getPointInRegion(regions[regionA], pointA).distanceTo(this.getPointInRegion(regions[regionA], pointB));
        };
        /**
         * Get distance between points
         *
         * @param {Vector3} pointA Begin world coordinates
         * @param {Vector3} pointB End world coordinates
         * @param {number}  cf     Calibration factor
         *
         * @returns {Object}
         */
        class_1.prototype.getDistanceData = function (pointA, pointB, calibrationFactor) {
            var distance = null;
            var units = null;
            if (calibrationFactor) {
                distance = pointA.distanceTo(pointB) * calibrationFactor;
            }
            else if (this._params.ultrasoundRegions && this._params.lps2IJK) {
                var usDistance = this.getUsDistance(core_utils_1.default.worldToData(this._params.lps2IJK, pointA), core_utils_1.default.worldToData(this._params.lps2IJK, pointB));
                if (usDistance !== null) {
                    distance = usDistance * 10;
                    units = 'mm';
                }
                else {
                    distance = pointA.distanceTo(pointB);
                    units = this._params.pixelSpacing ? 'mm' : 'units';
                }
            }
            else {
                distance = pointA.distanceTo(pointB);
            }
            return {
                distance: distance,
                units: units,
            };
        };
        class_1.prototype.getLineData = function (pointA, pointB) {
            var line = pointB.clone().sub(pointA);
            var center = pointB
                .clone()
                .add(pointA)
                .multiplyScalar(0.5);
            var length = line.length();
            var angle = line.angleTo(new three.Vector3(1, 0, 0));
            return {
                line: line,
                length: length,
                transformX: center.x - length / 2,
                transformY: center.y - this._container.offsetHeight,
                transformAngle: pointA.y < pointB.y ? angle : -angle,
                center: center,
            };
        };
        class_1.prototype.getRectData = function (pointA, pointB) {
            var line = pointB.clone().sub(pointA);
            var vertical = line.clone().projectOnVector(new three.Vector3(0, 1, 0));
            var min = pointA.clone().min(pointB); // coordinates of the top left corner
            return {
                width: line
                    .clone()
                    .projectOnVector(new three.Vector3(1, 0, 0))
                    .length(),
                height: vertical.length(),
                transformX: min.x,
                transformY: min.y - this._container.offsetHeight,
                paddingVector: vertical.clone().normalize(),
            };
        };
        /**
         * @param {HTMLElement} label
         * @param {Vector3}     point  label's center coordinates (default)
         * @param {Boolean}     corner if true, then point is the label's top left corner coordinates
         */
        class_1.prototype.adjustLabelTransform = function (label, point, corner) {
            var x = Math.round(point.x - (corner ? 0 : label.offsetWidth / 2));
            var y = Math.round(point.y - (corner ? 0 : label.offsetHeight / 2)) - this._container.offsetHeight;
            if (x < 0) {
                x = x > -label.offsetWidth ? 0 : x + label.offsetWidth;
            }
            else if (x > this._container.offsetWidth - label.offsetWidth) {
                x =
                    x < this._container.offsetWidth
                        ? this._container.offsetWidth - label.offsetWidth
                        : x - label.offsetWidth;
            }
            if (y < -this._container.offsetHeight) {
                y =
                    y > -this._container.offsetHeight - label.offsetHeight
                        ? -this._container.offsetHeight
                        : y + label.offsetHeight;
            }
            else if (y > -label.offsetHeight) {
                y = y < 0 ? -label.offsetHeight : y - label.offsetHeight;
            }
            return new three.Vector2(x, y);
        };
        class_1.prototype.worldToScreen = function (worldCoordinate) {
            var screenCoordinates = worldCoordinate.clone();
            screenCoordinates.project(this._camera);
            screenCoordinates.x = Math.round(((screenCoordinates.x + 1) * this._container.offsetWidth) / 2);
            screenCoordinates.y = Math.round(((-screenCoordinates.y + 1) * this._container.offsetHeight) / 2);
            screenCoordinates.z = 0;
            return screenCoordinates;
        };
        class_1.prototype.update = function () {
            // to be overloaded
            window.console.log('update() should be overloaded!');
        };
        class_1.prototype.updateColor = function () {
            if (this._active) {
                this._color = this._colors.active;
            }
            else if (this._hovered) {
                this._color = this._colors.hover;
            }
            else if (this._selected) {
                this._color = this._colors.select;
            }
            else {
                this._color = this._colors.default;
            }
        };
        // tslint:disable-next-line
        class_1.prototype.setDefaultColor = function (color) {
            this._colors.default = color;
            if (this._handles) {
                this._handles.forEach(function (elem) { return (elem._colors.default = color); });
            }
            this.update();
        };
        class_1.prototype.show = function () {
            this.showDOM();
            this.showMesh();
            this.update();
            this._displayed = true;
        };
        class_1.prototype.hide = function () {
            this.hideDOM();
            this.hideMesh();
            this._displayed = false;
        };
        class_1.prototype.hideDOM = function () {
            // to be overloaded
            window.console.log('hideDOM() should be overloaded!');
        };
        class_1.prototype.showDOM = function () {
            // to be overloaded
            window.console.log('showDOM() should be overloaded!');
        };
        class_1.prototype.hideMesh = function () {
            this.visible = false;
        };
        class_1.prototype.showMesh = function () {
            if (this._params.hideMesh === true) {
                return;
            }
            this.visible = true;
        };
        class_1.prototype.free = function () {
            this._camera = null;
            this._container = null;
            this._controls = null;
            this._params = null;
            this._targetMesh = null;
        };
        Object.defineProperty(class_1.prototype, "widgetType", {
            get: function () {
                return this._widgetType;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(class_1.prototype, "targetMesh", {
            get: function () {
                return this._targetMesh;
            },
            set: function (targetMesh) {
                this._targetMesh = targetMesh;
                this.update();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(class_1.prototype, "worldPosition", {
            get: function () {
                return this._worldPosition;
            },
            set: function (worldPosition) {
                this._worldPosition.copy(worldPosition);
                this.update();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(class_1.prototype, "enabled", {
            get: function () {
                return this._enabled;
            },
            set: function (enabled) {
                this._enabled = enabled;
                this.update();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(class_1.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (selected) {
                this._selected = selected;
                this.update();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(class_1.prototype, "hovered", {
            get: function () {
                return this._hovered;
            },
            set: function (hovered) {
                this._hovered = hovered;
                this.update();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(class_1.prototype, "dragged", {
            get: function () {
                return this._dragged;
            },
            set: function (dragged) {
                this._dragged = dragged;
                this.update();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(class_1.prototype, "displayed", {
            get: function () {
                return this._displayed;
            },
            set: function (displayed) {
                this._displayed = displayed;
                this.update();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(class_1.prototype, "active", {
            get: function () {
                return this._active;
            },
            set: function (active) {
                this._active = active;
                this.update();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(class_1.prototype, "color", {
            get: function () {
                return this._color;
            },
            // tslint:disable-next-line
            set: function (color) {
                this._color = color;
                this.update();
            },
            enumerable: true,
            configurable: true
        });
        return class_1;
    }(Constructor));
};
exports.widgetsBase = widgetsBase;
exports.default = widgetsBase();


/***/ }),

/***/ "./src/widgets/widgets.biruler.js":
/*!****************************************!*\
  !*** ./src/widgets/widgets.biruler.js ***!
  \****************************************/
/*! exports provided: widgetsBiruler, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsBiruler", function() { return widgetsBiruler; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * @module widgets/biruler
 */
var widgetsBiruler = function widgetsBiruler() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'BiRuler';

      // incoming parameters (optional: lps2IJK, pixelSpacing, ultrasoundRegions, worldPosition)
      _this._calibrationFactor = params.calibrationFactor || null;

      // outgoing values
      _this._distance = null;
      _this._distance2 = null;
      _this._units = !_this._calibrationFactor && !params.pixelSpacing ? 'units' : 'mm';

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      // dom stuff
      _this._line = null;
      _this._label = null;
      _this._line2 = null;
      _this._label2 = null;
      _this._dashline = null;

      // add handles
      _this._handles = [];

      var handle = void 0;
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);
      for (var i = 0; i < 4; i++) {
        handle = new WidgetsHandle(targetMesh, controls, params);
        _this.add(handle);
        _this._handles.push(handle);
      }
      _this._handles[1].active = true;
      _this._handles[1].tracking = true;
      _this._handles[3].active = true;
      _this._handles[3].tracking = true;

      _this.create();

      _this.onMove = _this.onMove.bind(_this);
      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._container.addEventListener('wheel', this.onMove);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._container.removeEventListener('wheel', this.onMove);
    };

    _class.prototype.onStart = function onStart(evt) {
      this._handles.forEach(function (elem) {
        return elem.onStart(evt);
      });

      this._active = this._handles[0].active || this._handles[1].active || this._handles[2].active || this._handles[3].active;

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      if (this._active) {
        this._dragged = true;
      } else {
        this._hovered = this._handles[0].hovered || this._handles[1].hovered || this._handles[2].hovered || this._handles[3].hovered;
        this._container.style.cursor = this._hovered ? 'pointer' : 'default';
      }

      this._handles.forEach(function (elem) {
        return elem.onMove(evt);
      });

      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      this._handles[0].onEnd();
      this._handles[2].onEnd();

      if (this._handles[1].tracking && this._handles[0].screenPosition.distanceTo(this._handles[1].screenPosition) < 10) {
        return;
      }

      if (!this._dragged && this._active && !this._handles[3].tracking) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handles[0].selected = this._selected;
        this._handles[2].selected = this._selected;
      }

      // Fourth Handle
      if (this._handles[1].active) {
        this._handles[3].onEnd();
      } else if (this._dragged || !this._handles[3].tracking) {
        this._handles[3].tracking = false;
        this._handles[3].onEnd();
      } else {
        this._handles[3].tracking = false;
      }
      this._handles[3].selected = this._selected;

      // Second Handle
      if (this._dragged || !this._handles[1].tracking) {
        this._handles[1].tracking = false;
        this._handles[1].onEnd();
      } else {
        this._handles[1].tracking = false;
      }
      this._handles[1].selected = this._selected;

      this._active = this._handles[0].active || this._handles[1].active || this._handles[2].active || this._handles[3].active;
      this._dragged = false;
      this.update();
    };

    _class.prototype.create = function create() {
      this.createMesh();
      this.createDOM();
    };

    _class.prototype.createMesh = function createMesh() {
      // geometry
      this._geometry = new three.Geometry();
      this._geometry.vertices = [this._handles[0].worldPosition, this._handles[1].worldPosition, this._handles[2].worldPosition, this._handles[3].worldPosition];

      // material
      this._material = new three.LineBasicMaterial();

      this.updateMeshColor();

      // mesh
      this._mesh = new three.LineSegments(this._geometry, this._material);
      this._mesh.visible = true;
      this.add(this._mesh);
    };

    _class.prototype.createDOM = function createDOM() {
      this._line = document.createElement('div');
      this._line.className = 'widgets-line';
      this._container.appendChild(this._line);

      this._label = document.createElement('div');
      this._label.className = 'widgets-label';
      this._container.appendChild(this._label);

      this._line2 = document.createElement('div');
      this._line2.className = 'widgets-line';
      this._container.appendChild(this._line2);

      this._label2 = document.createElement('div');
      this._label2.className = 'widgets-label';
      this._container.appendChild(this._label2);

      this._dashline = document.createElement('div');
      this._dashline.className = 'widgets-dashline';
      this._container.appendChild(this._dashline);

      this.updateDOMColor();
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._line.style.display = 'none';
      this._label.style.display = 'none';
      this._line2.style.display = 'none';
      this._label2.style.display = 'none';
      this._dashline.style.display = 'none';

      this._handles.forEach(function (elem) {
        return elem.hideDOM();
      });
    };

    _class.prototype.showDOM = function showDOM() {
      this._line.style.display = '';
      this._label.style.display = '';
      this._line2.style.display = '';
      this._label2.style.display = '';
      this._dashline.style.display = '';

      this._handles.forEach(function (elem) {
        return elem.showDOM();
      });
    };

    _class.prototype.update = function update() {
      this.updateColor();

      this._handles.forEach(function (elem) {
        return elem.update();
      });

      this.updateMeshColor();
      this.updateMeshPosition();

      this.updateDOM();
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateMeshPosition = function updateMeshPosition() {
      if (this._geometry) {
        this._geometry.verticesNeedUpdate = true;
      }
    };

    _class.prototype.updateDOM = function updateDOM() {
      this.updateDOMColor();

      // update first line
      var lineData = this.getLineData(this._handles[0].screenPosition, this._handles[1].screenPosition);

      this._line.style.transform = 'translate3D(' + lineData.transformX + 'px, ' + lineData.transformY + 'px, 0)\n                rotate(' + lineData.transformAngle + 'rad)';
      this._line.style.width = lineData.length + 'px';

      // update second line
      var line2Data = this.getLineData(this._handles[2].screenPosition, this._handles[3].screenPosition);

      this._line2.style.transform = 'translate3D(' + line2Data.transformX + 'px, ' + line2Data.transformY + 'px, 0)\n                rotate(' + line2Data.transformAngle + 'rad)';
      this._line2.style.width = line2Data.length + 'px';

      // update dash line
      var line1Center = this._handles[0].worldPosition.clone().add(this._handles[1].worldPosition).multiplyScalar(0.5);
      var line2Center = this._handles[2].worldPosition.clone().add(this._handles[3].worldPosition).multiplyScalar(0.5);
      var dashLineData = this.getLineData(this.worldToScreen(line1Center), this.worldToScreen(line2Center));

      this._dashline.style.transform = 'translate3D(' + dashLineData.transformX + 'px, ' + dashLineData.transformY + 'px, 0)\n                rotate(' + dashLineData.transformAngle + 'rad)';
      this._dashline.style.width = dashLineData.length + 'px';

      // update labels
      var distanceData = this.getDistanceData(this._handles[0].worldPosition, this._handles[1].worldPosition, this._calibrationFactor);
      var distanceData2 = this.getDistanceData(this._handles[2].worldPosition, this._handles[3].worldPosition, this._calibrationFactor);
      var title = 'Calibration is required to display the distance in mm';

      this._distance = distanceData.distance;
      this._distance2 = distanceData2.distance;
      if (distanceData.units && distanceData2.units && distanceData.units === distanceData2.units) {
        this._units = distanceData.units;
      } else {
        if (!distanceData.units) {
          distanceData.units = this._units;
        }
        if (!distanceData2.units) {
          distanceData2.units = this._units;
        }
      }

      if (distanceData.units === 'units' && !this._label.hasAttribute('title')) {
        this._label.setAttribute('title', title);
        this._label.style.color = this._colors.error;
      } else if (distanceData.units !== 'units' && this._label.hasAttribute('title')) {
        this._label.removeAttribute('title');
        this._label.style.color = this._colors.text;
      }
      if (distanceData2.units === 'units' && !this._label2.hasAttribute('title')) {
        this._label2.setAttribute('title', title);
        this._label2.style.color = this._colors.error;
      } else if (distanceData2.units !== 'units' && this._label2.hasAttribute('title')) {
        this._label2.removeAttribute('title');
        this._label2.style.color = this._colors.text;
      }
      this._label.innerHTML = this._distance.toFixed(2) + ' ' + distanceData.units;
      this._label2.innerHTML = this._distance2.toFixed(2) + ' ' + distanceData2.units;

      var angle = Math.abs(lineData.transformAngle);
      if (angle > Math.PI / 2) {
        angle = Math.PI - angle;
      }

      var labelPadding = Math.tan(angle) < this._label.offsetHeight / this._label.offsetWidth ? this._label.offsetWidth / 2 / Math.cos(angle) + 15 // 5px for each handle + padding
      : this._label.offsetHeight / 2 / Math.cos(Math.PI / 2 - angle) + 15;
      var paddingVector = lineData.line.normalize().multiplyScalar(labelPadding);
      var paddingPoint = lineData.length > labelPadding * 2 ? this._handles[1].screenPosition.clone().sub(paddingVector) : this._handles[1].screenPosition.clone().add(paddingVector);
      var transform = this.adjustLabelTransform(this._label, paddingPoint);

      this._label.style.transform = 'translate3D(' + transform.x + 'px, ' + transform.y + 'px, 0)';

      var angle2 = Math.abs(line2Data.transformAngle);
      if (angle2 > Math.PI / 2) {
        angle2 = Math.PI - angle2;
      }

      var label2Padding = Math.tan(angle2) < this._label2.offsetHeight / this._label2.offsetWidth ? this._label2.offsetWidth / 2 / Math.cos(angle2) + 15 // 5px for each handle + padding
      : this._label2.offsetHeight / 2 / Math.cos(Math.PI / 2 - angle2) + 15;
      var paddingVector2 = line2Data.line.normalize().multiplyScalar(label2Padding);
      var paddingPoint2 = line2Data.length > label2Padding * 2 ? this._handles[3].screenPosition.clone().sub(paddingVector2) : this._handles[3].screenPosition.clone().add(paddingVector2);
      var transform2 = this.adjustLabelTransform(this._label2, paddingPoint2);

      this._label2.style.transform = 'translate3D(' + transform2.x + 'px, ' + transform2.y + 'px, 0)';
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      this._line.style.backgroundColor = this._color;
      this._label.style.borderColor = this._color;

      this._line2.style.backgroundColor = this._color;
      this._label2.style.borderColor = this._color;

      this._dashline.style.borderTop = '1.5px dashed ' + this._color;
    };

    _class.prototype.free = function free() {
      var _this2 = this;

      this.removeEventListeners();

      this._handles.forEach(function (h) {
        _this2.remove(h);
        h.free();
      });
      this._handles = [];

      this._container.removeChild(this._line);
      this._container.removeChild(this._label);
      this._container.removeChild(this._line2);
      this._container.removeChild(this._label2);
      this._container.removeChild(this._dashline);

      // mesh, geometry, material
      this.remove(this._mesh);
      this._mesh.geometry.dispose();
      this._mesh.geometry = null;
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._mesh = null;
      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      _Constructor.prototype.free.call(this);
    };

    /**
     * Get length of rulers
     *
     * @return {Array}
     */


    _class.prototype.getDistances = function getDistances() {
      return [this._distance, this._distance2];
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handles.forEach(function (elem) {
          return elem.targetMesh = targetMesh;
        });
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handles.forEach(function (elem) {
          return elem.worldPosition.copy(worldPosition);
        });
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }, {
      key: 'calibrationFactor',
      get: function get() {
        return this._calibrationFactor;
      },
      set: function set(calibrationFactor) {
        this._calibrationFactor = calibrationFactor;
        this._units = 'mm';
        this.update();
      }
    }, {
      key: 'shotestDistance',
      get: function get() {
        return this._distance < this._distance2 ? this._distance : this._distance2;
      }
    }, {
      key: 'longestDistance',
      get: function get() {
        return this._distance > this._distance2 ? this._distance : this._distance2;
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsBiruler());

/***/ }),

/***/ "./src/widgets/widgets.crossRuler.js":
/*!*******************************************!*\
  !*** ./src/widgets/widgets.crossRuler.js ***!
  \*******************************************/
/*! exports provided: widgetsCrossRuler, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsCrossRuler", function() { return widgetsCrossRuler; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * @module widgets/crossRuler
 */
var widgetsCrossRuler = function widgetsCrossRuler() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'CrossRuler';

      // incoming parameters (optional: lps2IJK, pixelSpacing, ultrasoundRegions, worldPosition)
      _this._calibrationFactor = params.calibrationFactor || null;

      _this._distances = null; // from intersection point to handles
      _this._line01 = null; // vector from 0 to 1st handle
      _this._normal = null; // normal vector to line01

      // outgoing values
      _this._distance = null;
      _this._distance2 = null;
      _this._units = !_this._calibrationFactor && !params.pixelSpacing ? 'units' : 'mm';

      _this._domHovered = false;
      _this._moving = false;

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      // dom stuff
      _this._line = null;
      _this._line2 = null;
      _this._label = null;
      _this._label2 = null;

      // add handles
      _this._handles = [];

      var handle = void 0;
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);
      for (var i = 0; i < 4; i++) {
        handle = new WidgetsHandle(targetMesh, controls, params);
        _this.add(handle);
        _this._handles.push(handle);
      }
      _this._handles[1].active = true;
      _this._handles[1].tracking = true;

      _this._moveHandle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._moveHandle);
      _this._handles.push(_this._moveHandle);
      _this._moveHandle.hide();

      _this.onHover = _this.onHover.bind(_this);
      _this.onMove = _this.onMove.bind(_this);

      _this.create();

      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._line.addEventListener('mouseenter', this.onHover);
      this._line.addEventListener('mouseleave', this.onHover);
      this._line2.addEventListener('mouseenter', this.onHover);
      this._line2.addEventListener('mouseleave', this.onHover);

      this._container.addEventListener('wheel', this.onMove);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._line.removeEventListener('mouseenter', this.onHover);
      this._line.removeEventListener('mouseleave', this.onHover);
      this._line2.removeEventListener('mouseenter', this.onHover);
      this._line2.removeEventListener('mouseleave', this.onHover);

      this._container.removeEventListener('wheel', this.onMove);
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this.hoverMesh();

      this._hovered = this._handles[0].hovered || this._handles[1].hovered || this._handles[2].hovered || this._handles[3].hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverMesh = function hoverMesh() {
      // check raycast intersection, do we want to hover on mesh or just css?
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.onStart = function onStart(evt) {
      this._moveHandle.onMove(evt, true);

      this._handles.slice(0, -1).forEach(function (elem) {
        return elem.onStart(evt);
      });

      this._active = this._handles[0].active || this._handles[1].active || this._handles[2].active || this._handles[3].active || this._domHovered;

      if (this._domHovered && this._distances) {
        this._moving = true;
        this._controls.enabled = false;
      }

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      var _this2 = this;

      if (this._active) {
        var prevPosition = this._moveHandle.worldPosition.clone();

        this._dragged = true;
        this._moveHandle.onMove(evt, true);

        if (this._moving) {
          this._handles.slice(0, -1).forEach(function (handle) {
            handle.worldPosition.add(_this2._moveHandle.worldPosition.clone().sub(prevPosition));
          });
        }
      } else {
        this.onHover(null);
      }

      this._handles.slice(0, -1).forEach(function (elem) {
        return elem.onMove(evt);
      });

      if (this._distances) {
        if (this._handles[0].active || this._handles[1].active) {
          this.repositionOrtho(); // change worldPosition of 2nd and 3rd handle
        } else if (this._handles[2].active || this._handles[3].active) {
          this.recalculateOrtho();
        }
      }
      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      this._handles[0].onEnd();
      this._handles[2].onEnd();
      this._handles[3].onEnd();

      if (this._handles[1].tracking && this._handles[0].screenPosition.distanceTo(this._handles[1].screenPosition) < 10) {
        return;
      }

      if (!this._dragged && this._active && !this._handles[1].tracking) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handles[0].selected = this._selected;
        this._handles[2].selected = this._selected;
        this._handles[3].selected = this._selected;
      }

      // Second Handle
      if (this._dragged || !this._handles[1].tracking) {
        this._handles[1].tracking = false;
        this._handles[1].onEnd();
      } else {
        this._handles[1].tracking = false;
      }
      this._handles[1].selected = this._selected;

      this._active = this._handles[0].active || this._handles[1].active || this._handles[2].active || this._handles[3].active;
      this._dragged = false;
      this._moving = false;

      if (!this._distances) {
        this.initOrtho();
      }
      this.update();
    };

    _class.prototype.create = function create() {
      this.createMesh();
      this.createDOM();
    };

    _class.prototype.createMesh = function createMesh() {
      // geometry
      this._geometry = new three.Geometry();
      this._geometry.vertices = [this._handles[0].worldPosition, this._handles[1].worldPosition, this._handles[2].worldPosition, this._handles[3].worldPosition];

      // material
      this._material = new three.LineBasicMaterial();

      this.updateMeshColor();

      // mesh
      this._mesh = new three.LineSegments(this._geometry, this._material);
      this._mesh.visible = true;
      this.add(this._mesh);
    };

    _class.prototype.createDOM = function createDOM() {
      this._line = document.createElement('div');
      this._line.className = 'widgets-line';
      this._container.appendChild(this._line);

      this._line2 = document.createElement('div');
      this._line2.className = 'widgets-line';
      this._container.appendChild(this._line2);

      this._label = document.createElement('div');
      this._label.className = 'widgets-label';
      this._container.appendChild(this._label);

      this._label2 = document.createElement('div');
      this._label2.className = 'widgets-label';
      this._container.appendChild(this._label2);

      this.updateDOMColor();
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._line.style.display = 'none';
      this._line2.style.display = 'none';
      this._label.style.display = 'none';
      this._label2.style.display = 'none';

      this._handles.slice(0, -1).forEach(function (elem) {
        return elem.hideDOM();
      });
    };

    _class.prototype.showDOM = function showDOM() {
      this._line.style.display = '';
      this._line2.style.display = '';
      this._label.style.display = '';
      this._label2.style.display = '';

      this._handles.slice(0, -1).forEach(function (elem) {
        return elem.showDOM();
      });
    };

    _class.prototype.update = function update() {
      this.updateColor();

      this._handles.slice(0, -1).forEach(function (elem) {
        return elem.update();
      });

      this.updateMeshColor();
      this.updateMeshPosition();

      this.updateDOM();
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateMeshPosition = function updateMeshPosition() {
      if (this._geometry) {
        this._geometry.verticesNeedUpdate = true;
      }
    };

    _class.prototype.updateDOM = function updateDOM() {
      this.updateDOMColor();

      // update first line
      var lineData = this.getLineData(this._handles[0].screenPosition, this._handles[1].screenPosition);

      this._line.style.transform = 'translate3D(' + lineData.transformX + 'px, ' + lineData.transformY + 'px, 0)\n            rotate(' + lineData.transformAngle + 'rad)';
      this._line.style.width = lineData.length + 'px';

      // update second line
      var line2Data = this.getLineData(this._handles[2].screenPosition, this._handles[3].screenPosition);

      this._line2.style.transform = 'translate3D(' + line2Data.transformX + 'px, ' + line2Data.transformY + 'px, 0)\n            rotate(' + line2Data.transformAngle + 'rad)';
      this._line2.style.width = line2Data.length + 'px';

      // update labels
      var distanceData = this.getDistanceData(this._handles[0].worldPosition, this._handles[1].worldPosition, this._calibrationFactor);
      var distanceData2 = this.getDistanceData(this._handles[2].worldPosition, this._handles[3].worldPosition, this._calibrationFactor);
      var title = 'Calibration is required to display the distance in mm';

      this._distance = distanceData.distance;
      this._distance2 = distanceData2.distance;
      if (distanceData.units && distanceData2.units && distanceData.units === distanceData2.units) {
        this._units = distanceData.units;
      } else {
        if (!distanceData.units) {
          distanceData.units = this._units;
        }
        if (!distanceData2.units) {
          distanceData2.units = this._units;
        }
      }

      if (distanceData.units === 'units' && !this._label.hasAttribute('title')) {
        this._label.setAttribute('title', title);
        this._label.style.color = this._colors.error;
      } else if (distanceData.units !== 'units' && this._label.hasAttribute('title')) {
        this._label.removeAttribute('title');
        this._label.style.color = this._colors.text;
      }
      if (distanceData2.units === 'units' && !this._label2.hasAttribute('title')) {
        this._label2.setAttribute('title', title);
        this._label2.style.color = this._colors.error;
      } else if (distanceData2.units !== 'units' && this._label2.hasAttribute('title')) {
        this._label2.removeAttribute('title');
        this._label2.style.color = this._colors.text;
      }
      this._label.innerHTML = this._distance.toFixed(2) + ' ' + distanceData.units;
      this._label2.innerHTML = this._distance2.toFixed(2) + ' ' + distanceData2.units;

      var angle = Math.abs(lineData.transformAngle);
      if (angle > Math.PI / 2) {
        angle = Math.PI - angle;
      }

      var labelPadding = Math.tan(angle) < this._label.offsetHeight / this._label.offsetWidth ? this._label.offsetWidth / 2 / Math.cos(angle) + 15 // 5px for each handle + padding
      : this._label.offsetHeight / 2 / Math.cos(Math.PI / 2 - angle) + 15,
          paddingVector = lineData.line.normalize().multiplyScalar(labelPadding),
          paddingPoint = lineData.length > labelPadding * 4 ? this._handles[1].screenPosition.clone().sub(paddingVector) : this._handles[1].screenPosition.clone().add(paddingVector),
          transform = this.adjustLabelTransform(this._label, paddingPoint);

      this._label.style.transform = 'translate3D(' + transform.x + 'px, ' + transform.y + 'px, 0)';

      var angle2 = Math.abs(line2Data.transformAngle);
      if (angle2 > Math.PI / 2) {
        angle2 = Math.PI - angle2;
      }

      var label2Padding = Math.tan(angle2) < this._label2.offsetHeight / this._label2.offsetWidth ? this._label2.offsetWidth / 2 / Math.cos(angle2) + 15 // 5px for each handle + padding
      : this._label2.offsetHeight / 2 / Math.cos(Math.PI / 2 - angle2) + 15,
          paddingVector2 = line2Data.line.normalize().multiplyScalar(label2Padding),
          paddingPoint2 = line2Data.length > label2Padding * 4 ? this._handles[3].screenPosition.clone().sub(paddingVector2) : this._handles[3].screenPosition.clone().add(paddingVector2),
          transform2 = this.adjustLabelTransform(this._label2, paddingPoint2);

      this._label2.style.transform = 'translate3D(' + transform2.x + 'px, ' + transform2.y + 'px, 0)';
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      this._line.style.backgroundColor = this._color;
      this._line2.style.backgroundColor = this._color;
      this._label.style.borderColor = this._color;
      this._label2.style.borderColor = this._color;
    };

    _class.prototype.free = function free() {
      var _this3 = this;

      this.removeEventListeners();

      this._handles.forEach(function (h) {
        _this3.remove(h);
        h.free();
      });
      this._handles = [];

      this._container.removeChild(this._line);
      this._container.removeChild(this._line2);
      this._container.removeChild(this._label);
      this._container.removeChild(this._label2);

      // mesh, geometry, material
      this.remove(this._mesh);
      this._mesh.geometry.dispose();
      this._mesh.geometry = null;
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._mesh = null;
      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.initLineAndNormal = function initLineAndNormal() {
      this._line01 = this._handles[1].worldPosition.clone().sub(this._handles[0].worldPosition);
      this._normal = this._line01.clone().cross(this._camera._direction).normalize();
    };

    _class.prototype.initOrtho = function initOrtho() {
      // called onEnd if distances are null
      this.initLineAndNormal();

      var center = this._handles[1].worldPosition.clone().add(this._handles[0].worldPosition).multiplyScalar(0.5);
      var halfLength = this._line01.length() / 2;
      var normLine = this._normal.clone().multiplyScalar(halfLength * 0.8);
      var normLength = normLine.length();

      this._handles[2].worldPosition.copy(center.clone().add(normLine));
      this._handles[3].worldPosition.copy(center.clone().sub(normLine));

      this._distances = [halfLength, halfLength, normLength, normLength];
    };

    _class.prototype.repositionOrtho = function repositionOrtho() {
      // called onMove if 0 or 1st handle is active
      this.initLineAndNormal();
      this._distances[0] *= this._line01.length() / (this._distances[0] + this._distances[1]);
      this._distances[1] = this._line01.length() - this._distances[0];

      var intersect = this._handles[0].worldPosition.clone().add(this._line01.clone().normalize().multiplyScalar(this._distances[0]));

      this._handles[2].worldPosition.copy(intersect.clone().add(this._normal.clone().multiplyScalar(this._distances[2])));
      this._handles[3].worldPosition.copy(intersect.clone().sub(this._normal.clone().multiplyScalar(this._distances[3])));
    };

    _class.prototype.recalculateOrtho = function recalculateOrtho() {
      // called onMove if 2nd or 3rd handle is active
      var activeInd = this._handles[2].active ? 2 : 3;
      var lines = [];
      var intersect = new three.Vector3();

      lines[2] = this._handles[2].worldPosition.clone().sub(this._handles[0].worldPosition);
      lines[3] = this._handles[3].worldPosition.clone().sub(this._handles[0].worldPosition);
      new three.Ray(this._handles[0].worldPosition, this._line01.clone().normalize()).closestPointToPoint(this._handles[activeInd].worldPosition, intersect);

      var isOutside = intersect.clone().sub(this._handles[0].worldPosition).length() > this._line01.length();
      // if intersection is outside of the line01 then change worldPosition of active handle
      if (isOutside || intersect.equals(this._handles[0].worldPosition)) {
        if (isOutside) {
          intersect.copy(this._handles[1].worldPosition);
        }

        this._handles[activeInd].worldPosition.copy(intersect.clone().add(lines[activeInd].clone().projectOnVector(this._normal)));
      }

      if (lines[2].cross(this._line01).angleTo(this._camera._direction) > 0.01) {
        this._handles[2].worldPosition.copy(intersect); // 2nd handle should always be above line01
      }
      if (lines[3].cross(this._line01).angleTo(this._camera._direction) < Math.PI - 0.01) {
        this._handles[3].worldPosition.copy(intersect); // 3nd handle should always be below line01
      }

      lines[0] = this._normal.clone().multiplyScalar(this._distances[5 - activeInd]);
      if (activeInd === 2) {
        lines[0].negate();
      }
      this._handles[5 - activeInd].worldPosition.copy(intersect.clone().add(lines[0]));

      this._distances[activeInd] = intersect.distanceTo(this._handles[activeInd].worldPosition);
      this._distances[0] = intersect.distanceTo(this._handles[0].worldPosition);
      this._distances[1] = intersect.distanceTo(this._handles[1].worldPosition);
    };

    /**
     * Get length of rulers
     *
     * @return {Array}
     */


    _class.prototype.getDimensions = function getDimensions() {
      return [this._distance, this._distance2];
    };

    /**
     * Get CrossRuler handles position
     *
     * @return {Array.<Vector3>} First begin, first end, second begin, second end
     */


    _class.prototype.getCoordinates = function getCoordinates() {
      return [this._handles[0].worldPosition, this._handles[1].worldPosition, this._handles[2].worldPosition, this._handles[3].worldPosition];
    };

    /**
     * Set CrossRuler handles position
     *
     * @param {Vector3} first   The beginning of the first line
     * @param {Vector3} second  The end of the first line
     * @param {Vector3} third   The beginning of the second line (clockwise relative to the first line)
     * @param {Vector3} fourth  The end of the second line
     */


    _class.prototype.initCoordinates = function initCoordinates(first, second, third, fourth) {
      var intersectR = new three.Vector3();
      var intersectS = new three.Vector3();
      var ray = new three.Ray(first);

      ray.lookAt(second);
      ray.distanceSqToSegment(third, fourth, intersectR, intersectS);

      if (intersectR.distanceTo(intersectS) > 0.01 && intersectR.distanceTo(first) > second.distanceTo(first) + 0.01) {
        window.console.warn('Lines do not intersect');

        return;
      }

      this.active = false;
      this.hovered = false;
      this.setDefaultColor('#198');
      this._worldPosition.copy(first);
      this._handles[0].worldPosition.copy(first);
      this._handles[1].worldPosition.copy(second);
      this._handles[1].active = false;
      this._handles[1].tracking = false;
      this._handles[2].worldPosition.copy(third);
      this._handles[3].worldPosition.copy(fourth);
      this._distances = [intersectR.distanceTo(first), intersectR.distanceTo(second), intersectR.distanceTo(third), intersectR.distanceTo(fourth)];

      this.initLineAndNormal();
      this.update();
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handles.forEach(function (elem) {
          return elem.targetMesh = targetMesh;
        });
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handles.slice(0, -1).forEach(function (elem) {
          return elem.worldPosition.copy(worldPosition);
        });
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }, {
      key: 'calibrationFactor',
      get: function get() {
        return this._calibrationFactor;
      },
      set: function set(calibrationFactor) {
        this._calibrationFactor = calibrationFactor;
        this._units = 'mm';
        this.update();
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsCrossRuler());

/***/ }),

/***/ "./src/widgets/widgets.css.js":
/*!************************************!*\
  !*** ./src/widgets/widgets.css.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @module CSS Code for all Widgets
 */
var WidgetsCss = function () {
    function WidgetsCss() {
        _classCallCheck(this, WidgetsCss);
    }

    _createClass(WidgetsCss, null, [{
        key: "code",
        get: function get() {
            return "\n        .widgets-handle {\n            position: absolute;\n            border: 1px solid;\n            border-radius: 50%;\n            width: 10px;\n            height: 10px;\n            margin: -6px; /* border + width / 2 */\n            z-index: 3;\n        }\n        .widgets-line {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            margin-top: -0.5px; /* height / 2 */\n        }\n        .widgets-dashline {\n            position: absolute;\n            border-top: 1px dashed;\n            margin-top: -0.5px; /* border / 2 */\n        }\n        .widgets-line:before,\n        .widgets-dashline:before { /* for dragging */\n            content: \" \";\n            position: absolute;\n            height: 12px;\n            left: 0;\n            right: 0;\n            margin-top: -6px;\n        }\n        .widgets-rectangle {\n            position: absolute;\n            border: 1px solid;\n            margin: -1px; /* border */\n        }\n        .widgets-rectangle-helper {\n            position: absolute;\n            border: 1px dashed;\n            margin: -1px; /* border */\n        }\n        .widgets-ellipse {\n            position: absolute;\n            border: 1px solid;\n            border-radius: 50%;\n            margin: -1px; /* border */\n            z-index: 2;\n        }\n        .widgets-label {\n            position: absolute;\n            border: 1px solid;\n            background-color: rgba(0, 0, 0, 0.7);\n            color: rgb(255, 255, 255);\n            padding: 4px;\n            z-index: 3;\n        }\n        ";
        }
    }]);

    return WidgetsCss;
}();

/* harmony default export */ __webpack_exports__["default"] = (WidgetsCss);

/***/ }),

/***/ "./src/widgets/widgets.ellipse.js":
/*!****************************************!*\
  !*** ./src/widgets/widgets.ellipse.js ***!
  \****************************************/
/*! exports provided: widgetsEllipse, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsEllipse", function() { return widgetsEllipse; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * @module widgets/ellipse
 */
var widgetsEllipse = function widgetsEllipse() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'Ellipse';

      // incoming parameters (optional: frameIndex, worldPosition)
      _this._stack = params.stack; // required
      _this._calibrationFactor = params.calibrationFactor || null;

      // outgoing values
      _this._area = null;
      _this._units = !_this._calibrationFactor && !params.stack.frame[params.frameIndex].pixelSpacing ? 'units' : 'cm²';

      _this._moving = false;
      _this._domHovered = false;

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      // dom stuff
      _this._rectangle = null;
      _this._ellipse = null;
      _this._label = null;

      // add handles
      _this._handles = [];

      var handle = void 0;
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);
      for (var i = 0; i < 2; i++) {
        handle = new WidgetsHandle(targetMesh, controls, params);
        _this.add(handle);
        _this._handles.push(handle);
      }
      _this._handles[1].active = true;
      _this._handles[1].tracking = true;

      _this._moveHandle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._moveHandle);
      _this._handles.push(_this._moveHandle);
      _this._moveHandle.hide();

      _this.create();

      _this.onMove = _this.onMove.bind(_this);
      _this.onHover = _this.onHover.bind(_this);
      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._container.addEventListener('wheel', this.onMove);

      this._rectangle.addEventListener('mouseenter', this.onHover);
      this._rectangle.addEventListener('mouseleave', this.onHover);
      this._ellipse.addEventListener('mouseenter', this.onHover);
      this._ellipse.addEventListener('mouseleave', this.onHover);
      this._label.addEventListener('mouseenter', this.onHover);
      this._label.addEventListener('mouseleave', this.onHover);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._container.removeEventListener('wheel', this.onMove);

      this._rectangle.removeEventListener('mouseenter', this.onHover);
      this._rectangle.removeEventListener('mouseleave', this.onHover);
      this._ellipse.removeEventListener('mouseenter', this.onHover);
      this._ellipse.removeEventListener('mouseleave', this.onHover);
      this._label.removeEventListener('mouseenter', this.onHover);
      this._label.removeEventListener('mouseleave', this.onHover);
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this.hoverMesh();

      this._hovered = this._handles[0].hovered || this._handles[1].hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverMesh = function hoverMesh() {
      // check raycast intersection, if we want to hover on mesh instead of just css
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.onStart = function onStart(evt) {
      this._moveHandle.onMove(evt, true);

      this._handles[0].onStart(evt);
      this._handles[1].onStart(evt);

      this._active = this._handles[0].active || this._handles[1].active || this._domHovered;

      if (this._domHovered && !this._handles[1].tracking) {
        this._moving = true;
        this._controls.enabled = false;
      }

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      var _this2 = this;

      if (this._active) {
        var prevPosition = this._moveHandle.worldPosition.clone();

        this._dragged = true;
        this._moveHandle.onMove(evt, true);

        if (this._moving) {
          this._handles.slice(0, -1).forEach(function (handle) {
            handle.worldPosition.add(_this2._moveHandle.worldPosition.clone().sub(prevPosition));
          });
        }

        this.updateRoI(true);
      } else {
        this.onHover(null);
      }

      this._handles[0].onMove(evt);
      this._handles[1].onMove(evt);

      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      this._handles[0].onEnd(); // First Handle

      if (this._handles[1].tracking && this._handles[0].screenPosition.distanceTo(this._handles[1].screenPosition) < 10) {
        return;
      }

      if (!this._dragged && this._active && !this._handles[1].tracking) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handles[0].selected = this._selected;
      }

      // Second Handle
      if (this._dragged || !this._handles[1].tracking) {
        this._handles[1].tracking = false;
        this._handles[1].onEnd();
      } else {
        this._handles[1].tracking = false;
      }
      this._handles[1].selected = this._selected;

      this._active = this._handles[0].active || this._handles[1].active;
      this._dragged = false;
      this._moving = false;

      this.updateRoI(); // TODO: if (this._dragged || !this._initialized)
      this.update();
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._handles.forEach(function (elem) {
        return elem.hideDOM();
      });

      this._rectangle.style.display = 'none';
      this._ellipse.style.display = 'none';
      this._label.style.display = 'none';
    };

    _class.prototype.showDOM = function showDOM() {
      this._handles[0].showDOM();
      this._handles[1].showDOM();

      this._rectangle.style.display = '';
      this._ellipse.style.display = '';
      this._label.style.display = '';
    };

    _class.prototype.create = function create() {
      this.createMaterial();
      this.createDOM();
    };

    _class.prototype.createMaterial = function createMaterial() {
      this._material = new three.MeshBasicMaterial();
      this._material.transparent = true;
      this._material.opacity = 0.2;
    };

    _class.prototype.createDOM = function createDOM() {
      this._rectangle = document.createElement('div');
      this._rectangle.className = 'widgets-rectangle-helper';
      this._container.appendChild(this._rectangle);

      this._ellipse = document.createElement('div');
      this._ellipse.className = 'widgets-ellipse';
      this._container.appendChild(this._ellipse);

      this._label = document.createElement('div');
      this._label.className = 'widgets-label';

      // measurements
      var measurementsContainer = document.createElement('div');
      // Mean / SD
      var meanSDContainer = document.createElement('div');
      meanSDContainer.className = 'mean-sd';
      measurementsContainer.appendChild(meanSDContainer);
      // Max / Min
      var maxMinContainer = document.createElement('div');
      maxMinContainer.className = 'max-min';
      measurementsContainer.appendChild(maxMinContainer);
      // Area
      var areaContainer = document.createElement('div');
      areaContainer.className = 'area';
      measurementsContainer.appendChild(areaContainer);

      this._label.appendChild(measurementsContainer);

      this._container.appendChild(this._label);

      this.updateDOMColor();
    };

    _class.prototype.update = function update() {
      this.updateColor();

      this._handles[0].update();
      this._handles[1].update();

      this.updateMeshColor();
      this.updateMeshPosition();

      this.updateDOM();
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateMeshPosition = function updateMeshPosition() {
      if (this._mesh) {
        this.remove(this._mesh);
      }

      var vec01 = this._handles[1].worldPosition.clone().sub(this._handles[0].worldPosition);
      var height = vec01.clone().projectOnVector(this._camera.up).length();
      var width = vec01.clone().projectOnVector(this._camera._right).length();

      if (width === 0 || height === 0) {
        return;
      }

      this._geometry = new three.ShapeGeometry(new three.Shape(new three.EllipseCurve(0, 0, width / 2, height / 2, 0, 2 * Math.PI, false).getPoints(50)));

      this._mesh = new three.Mesh(this._geometry, this._material);
      this._mesh.position.copy(this._handles[0].worldPosition.clone().add(vec01.multiplyScalar(0.5)));
      this._mesh.rotation.copy(this._camera.rotation);
      this._mesh.visible = true;
      this.add(this._mesh);
    };

    _class.prototype.updateRoI = function updateRoI(clear) {
      if (!this._geometry) {
        return;
      }

      var meanSDContainer = this._label.querySelector('.mean-sd');
      var maxMinContainer = this._label.querySelector('.max-min');

      if (clear) {
        meanSDContainer.innerHTML = '';
        maxMinContainer.innerHTML = '';

        return;
      }

      var roi = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getRoI(this._mesh, this._camera, this._stack);

      if (roi !== null) {
        meanSDContainer.innerHTML = 'Mean: ' + roi.mean.toFixed(1) + ' / SD: ' + roi.sd.toFixed(1);
        maxMinContainer.innerHTML = 'Max: ' + roi.max.toFixed() + ' / Min: ' + roi.min.toFixed();
      } else {
        meanSDContainer.innerHTML = '';
        maxMinContainer.innerHTML = '';
      }
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      this._rectangle.style.borderColor = this._color;
      this._ellipse.style.borderColor = this._color;
      this._label.style.borderColor = this._color;
    };

    _class.prototype.updateDOM = function updateDOM() {
      if (!this._geometry) {
        return;
      }

      this.updateDOMColor();

      var regions = this._stack.frame[this._params.frameIndex].ultrasoundRegions || [];

      this._area = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getGeometryArea(this._geometry);
      if (this._calibrationFactor) {
        this._area *= Math.pow(this._calibrationFactor, 2);
      } else if (regions && regions.length > 0 && this._stack.lps2IJK) {
        var region0 = this.getRegionByXY(regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._stack.lps2IJK, this._handles[0].worldPosition));
        var region1 = this.getRegionByXY(regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._stack.lps2IJK, this._handles[1].worldPosition));

        if (region0 !== null && region1 !== null && region0 === region1 && regions[region0].unitsX === 'cm' && regions[region0].unitsY === 'cm') {
          this._area *= Math.pow(regions[region0].deltaX, 2);
          this._units = 'cm²';
        } else if (this._stack.frame[this._params.frameIndex].pixelSpacing) {
          this._area /= 100;
          this._units = 'cm²';
        } else {
          this._units = 'units';
        }
      } else if (this._units === 'cm²') {
        this._area /= 100;
      }

      if (this._units === 'units' && !this._label.hasAttribute('title')) {
        this._label.setAttribute('title', 'Calibration is required to display the area in cm²');
        this._label.style.color = this._colors.error;
      } else if (this._units !== 'units' && this._label.hasAttribute('title')) {
        this._label.removeAttribute('title');
        this._label.style.color = this._colors.text;
      }
      this._label.querySelector('.area').innerHTML = 'Area: ' + this._area.toFixed(2) + ' ' + this._units;

      var rectData = this.getRectData(this._handles[0].screenPosition, this._handles[1].screenPosition);
      var labelTransform = this.adjustLabelTransform(this._label, this._handles[1].screenPosition.clone().add(rectData.paddingVector.multiplyScalar(15 + this._label.offsetHeight / 2)));

      // update rectangle
      this._rectangle.style.transform = 'translate3D(' + rectData.transformX + 'px, ' + rectData.transformY + 'px, 0)';
      this._rectangle.style.width = rectData.width + 'px';
      this._rectangle.style.height = rectData.height + 'px';

      // update ellipse
      this._ellipse.style.transform = 'translate3D(' + rectData.transformX + 'px, ' + rectData.transformY + 'px, 0)';
      this._ellipse.style.width = rectData.width + 'px';
      this._ellipse.style.height = rectData.height + 'px';

      // update label
      this._label.style.transform = 'translate3D(' + labelTransform.x + 'px,' + labelTransform.y + 'px, 0)';
    };

    _class.prototype.free = function free() {
      var _this3 = this;

      this.removeEventListeners();

      this._handles.forEach(function (h) {
        _this3.remove(h);
        h.free();
      });
      this._handles = [];

      this._container.removeChild(this._rectangle);
      this._container.removeChild(this._ellipse);
      this._container.removeChild(this._label);

      // mesh, geometry, material
      if (this._mesh) {
        this.remove(this._mesh);
        this._mesh.geometry.dispose();
        this._mesh.geometry = null;
        this._mesh.material.dispose();
        this._mesh.material = null;
        this._mesh = null;
      }
      if (this._geometry) {
        this._geometry.dispose();
        this._geometry = null;
      }
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      this._stack = null;

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.getMeasurements = function getMeasurements() {
      return {
        area: this._area,
        units: this._units
      };
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handles.forEach(function (elem) {
          return elem.targetMesh = targetMesh;
        });
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handles[0].worldPosition.copy(worldPosition);
        this._handles[1].worldPosition.copy(worldPosition);
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }, {
      key: 'calibrationFactor',
      get: function get() {
        return this._calibrationFactor;
      },
      set: function set(calibrationFactor) {
        this._calibrationFactor = calibrationFactor;
        this._units = 'cm²';
        this.update();
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsEllipse());

/***/ }),

/***/ "./src/widgets/widgets.freehand.js":
/*!*****************************************!*\
  !*** ./src/widgets/widgets.freehand.js ***!
  \*****************************************/
/*! exports provided: widgetsFreehand, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsFreehand", function() { return widgetsFreehand; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * @module widgets/freehand
 */
var widgetsFreehand = function widgetsFreehand() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'Freehand';

      // incoming parameters (optional: frameIndex, worldPosition)
      _this._stack = params.stack; // required
      _this._calibrationFactor = params.calibrationFactor || null;

      // outgoing values
      _this._area = null;
      _this._units = !_this._calibrationFactor && !params.stack.frame[params.frameIndex].pixelSpacing ? 'units' : 'cm²';

      _this._initialized = false; // set to true onEnd if number of handles > 2
      _this._moving = false;
      _this._domHovered = false;

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      // dom stuff
      _this._lines = [];
      _this._label = null;

      // add handles
      _this._handles = [];
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);

      var handle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(handle);
      _this._handles.push(handle);

      _this._moveHandle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._moveHandle);
      _this._moveHandle.hide();

      _this.onMove = _this.onMove.bind(_this);
      _this.onHover = _this.onHover.bind(_this);

      _this.create();

      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._container.addEventListener('wheel', this.onMove);

      this._label.addEventListener('mouseenter', this.onHover);
      this._label.addEventListener('mouseleave', this.onHover);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._container.removeEventListener('wheel', this.onMove);

      this._label.removeEventListener('mouseenter', this.onHover);
      this._label.removeEventListener('mouseleave', this.onHover);
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this.hoverMesh();

      var hovered = false;

      this._handles.forEach(function (elem) {
        return hovered = hovered || elem.hovered;
      });

      this._hovered = hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverMesh = function hoverMesh() {
      // check raycast intersection, if we want to hover on mesh instead of just css
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.onStart = function onStart(evt) {
      var active = false;

      this._moveHandle.onMove(evt, true);
      this._handles.forEach(function (elem) {
        elem.onStart(evt);
        active = active || elem.active;
      });

      this._active = active || this._domHovered;

      if (this._domHovered && this._initialized) {
        this._moving = true;
        this._controls.enabled = false;
      }

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      var _this2 = this;

      var hovered = false;

      if (this.active) {
        this._dragged = true;

        if (!this._initialized) {
          this._handles[this._handles.length - 1].hovered = false;
          this._handles[this._handles.length - 1].active = false;
          this._handles[this._handles.length - 1].tracking = false;

          var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);
          var handle = new WidgetsHandle(this._targetMesh, this._controls, this._params);

          handle.hovered = true;
          handle.active = true;
          handle.tracking = true;
          this.add(handle);
          this._handles.push(handle);

          this.createLine();
        } else {
          var prevPosition = this._moveHandle.worldPosition.clone();

          this._moveHandle.onMove(evt, true);
          if (this._mesh) {
            this.remove(this._mesh);
          }
          this.updateDOMContent(true);
          if (this._moving) {
            this._handles.forEach(function (handle) {
              handle.worldPosition.add(_this2._moveHandle.worldPosition.clone().sub(prevPosition));
            });
          }
        }
      }

      this._handles.forEach(function (elem) {
        elem.onMove(evt);
        hovered = hovered || elem.hovered;
      });

      this._hovered = hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';

      if (this.active && this._handles.length > 2) {
        this.pushPopHandle();
      }

      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      var _this3 = this;

      if (this._handles.length < 3) {
        return;
      }

      var active = false;

      this._handles.slice(0, -1).forEach(function (elem) {
        elem.onEnd();
        active = active || elem.active;
      });

      // Last Handle
      if (this._dragged || !this._handles[this._handles.length - 1].tracking) {
        this._handles[this._handles.length - 1].tracking = false;
        this._handles[this._handles.length - 1].onEnd();
      } else {
        this._handles[this._handles.length - 1].tracking = false;
      }

      if (this._lines.length < this._handles.length) {
        this.createLine();
      }

      if (this._dragged || !this._initialized) {
        this.updateMesh();
        this.updateDOMContent();
      }

      if (!this._dragged && this._active) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handles.forEach(function (elem) {
          return elem.selected = _this3._selected;
        });
      }
      this._active = active || this._handles[this._handles.length - 1].active;
      this._dragged = false;
      this._moving = false;
      this._initialized = true;

      this.update();
    };

    _class.prototype.create = function create() {
      this.createMaterial();
      this.createDOM();
    };

    _class.prototype.createMaterial = function createMaterial() {
      this._material = new three.MeshBasicMaterial({ side: three.DoubleSide });
      this._material.transparent = true;
      this._material.opacity = 0.2;
    };

    _class.prototype.createDOM = function createDOM() {
      this._label = document.createElement('div');
      this._label.className = 'widgets-label';

      // measurements
      var measurementsContainer = document.createElement('div');
      // Mean / SD
      var meanSDContainer = document.createElement('div');
      meanSDContainer.className = 'mean-sd';
      measurementsContainer.appendChild(meanSDContainer);
      // Max / Min
      var maxMinContainer = document.createElement('div');
      maxMinContainer.className = 'max-min';
      measurementsContainer.appendChild(maxMinContainer);
      // Area
      var areaContainer = document.createElement('div');
      areaContainer.className = 'area';
      measurementsContainer.appendChild(areaContainer);

      this._label.appendChild(measurementsContainer);

      this._container.appendChild(this._label);

      this.updateDOMColor();
    };

    _class.prototype.createLine = function createLine() {
      var line = document.createElement('div');

      line.className = 'widgets-line';
      line.addEventListener('mouseenter', this.onHover);
      line.addEventListener('mouseleave', this.onHover);
      this._lines.push(line);
      this._container.appendChild(line);
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._handles.forEach(function (elem) {
        return elem.hideDOM();
      });

      this._lines.forEach(function (elem) {
        return elem.style.display = 'none';
      });
      this._label.style.display = 'none';
    };

    _class.prototype.showDOM = function showDOM() {
      this._handles.forEach(function (elem) {
        return elem.showDOM();
      });

      this._lines.forEach(function (elem) {
        return elem.style.display = '';
      });
      this._label.style.display = '';
    };

    _class.prototype.update = function update() {
      this.updateColor();

      // update handles
      this._handles.forEach(function (elem) {
        return elem.update();
      });

      // mesh stuff
      this.updateMeshColor();
      this.updateMeshPosition();

      // DOM stuff
      this.updateDOMColor();
      this.updateDOMPosition();
    };

    _class.prototype.updateMesh = function updateMesh() {
      if (this._mesh) {
        this.remove(this._mesh);
      }

      var points = [];

      this._handles.forEach(function (elem) {
        return points.push(elem.worldPosition);
      });

      var center = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].centerOfMass(points);
      // direction from first point to center
      var referenceDirection = new three.Vector3().subVectors(points[0], center).normalize();
      var direction = new three.Vector3().crossVectors(new three.Vector3().subVectors(points[0], center), // side 1
      new three.Vector3().subVectors(points[1], center) // side 2
      );
      var base = new three.Vector3().crossVectors(referenceDirection, direction).normalize();
      var orderedpoints = [];

      // other lines // if inter, return location + angle
      for (var j = 0; j < points.length; j++) {
        var point = new three.Vector3(points[j].x, points[j].y, points[j].z);
        point.direction = new three.Vector3().subVectors(points[j], center).normalize();

        var x = referenceDirection.dot(point.direction);
        var y = base.dot(point.direction);
        point.xy = { x: x, y: y };
        point.angle = Math.atan2(y, x) * (180 / Math.PI);

        orderedpoints.push(point);
      }

      // override to catch console.warn "THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()"
      this._shapeWarn = false;
      var oldWarn = console.warn;
      console.warn = function () {
        for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
          rest[_key] = arguments[_key];
        }

        if (rest[0] === 'three.ShapeUtils: Unable to triangulate polygon! in triangulate()') {
          this._shapeWarn = true;
        }
        return oldWarn.apply(console, rest);
      }.bind(this);

      // create the shape
      var shape = new three.Shape();
      // move to first point!
      shape.moveTo(orderedpoints[0].xy.x, orderedpoints[0].xy.y);

      // loop through all points!
      for (var l = 1; l < orderedpoints.length; l++) {
        // project each on plane!
        shape.lineTo(orderedpoints[l].xy.x, orderedpoints[l].xy.y);
      }

      // close the shape!
      shape.lineTo(orderedpoints[0].xy.x, orderedpoints[0].xy.y);

      this._geometry = new three.ShapeGeometry(shape);

      console.warn = oldWarn;

      this._geometry.vertices = orderedpoints;
      this._geometry.verticesNeedUpdate = true;
      this._geometry.elementsNeedUpdate = true;

      this.updateMeshColor();

      this._mesh = new three.Mesh(this._geometry, this._material);
      this._mesh.visible = true;
      this.add(this._mesh);
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateMeshPosition = function updateMeshPosition() {
      if (this._geometry) {
        this._geometry.verticesNeedUpdate = true;
      }
    };

    _class.prototype.isPointOnLine = function isPointOnLine(pointA, pointB, pointToCheck) {
      var c = new three.Vector3();
      c.crossVectors(pointA.clone().sub(pointToCheck), pointB.clone().sub(pointToCheck));
      return !c.length();
    };

    _class.prototype.pushPopHandle = function pushPopHandle() {
      var handle0 = this._handles[this._handles.length - 3];
      var handle1 = this._handles[this._handles.length - 2];
      var newhandle = this._handles[this._handles.length - 1];

      var isOnLine = this.isPointOnLine(handle0.worldPosition, handle1.worldPosition, newhandle.worldPosition);

      if (isOnLine || handle0.screenPosition.distanceTo(newhandle.screenPosition) < 25) {
        this.remove(handle1);
        handle1.free();

        this._handles[this._handles.length - 2] = newhandle;
        this._handles.pop();

        this._container.removeChild(this._lines.pop());
      }

      return isOnLine;
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      var _this4 = this;

      if (this._handles.length >= 2) {
        this._lines.forEach(function (elem) {
          return elem.style.backgroundColor = _this4._color;
        });
      }
      this._label.style.borderColor = this._color;
    };

    _class.prototype.updateDOMContent = function updateDOMContent(clear) {
      var _this5 = this;

      var meanSDContainer = this._label.querySelector('.mean-sd');
      var maxMinContainer = this._label.querySelector('.max-min');
      var areaContainer = this._label.querySelector('.area');

      if (clear) {
        meanSDContainer.innerHTML = '';
        maxMinContainer.innerHTML = '';
        areaContainer.innerHTML = '';

        return;
      }

      var regions = this._stack.frame[this._params.frameIndex].ultrasoundRegions || [];

      this._area = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getGeometryArea(this._geometry); // this.getArea result is changed on dragging
      if (this._calibrationFactor) {
        this._area *= Math.pow(this._calibrationFactor, 2);
      } else if (regions && regions.length > 0 && this._stack.lps2IJK) {
        var same = true;
        var cRegion = void 0;
        var pRegion = void 0;

        this._handles.forEach(function (elem) {
          cRegion = _this5.getRegionByXY(regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(_this5._stack.lps2IJK, elem.worldPosition));
          if (cRegion === null || regions[cRegion].unitsX !== 'cm' || pRegion !== undefined && pRegion !== cRegion) {
            same = false;
          }
          pRegion = cRegion;
        });

        if (same) {
          this._area *= Math.pow(regions[cRegion].deltaX, 2);
          this._units = 'cm²';
        } else if (this._stack.frame[this._params.frameIndex].pixelSpacing) {
          this._area /= 100;
          this._units = 'cm²';
        } else {
          this._units = 'units';
        }
      } else if (this._units === 'cm²') {
        this._area /= 100;
      }

      var title = this._units === 'units' ? 'Calibration is required to display the area in cm². ' : '';

      if (this._shapeWarn) {
        title += 'Values may be incorrect due to triangulation error.';
      }
      if (title !== '' && !this._label.hasAttribute('title')) {
        this._label.setAttribute('title', title);
        this._label.style.color = this._colors.error;
      } else if (title === '' && this._label.hasAttribute('title')) {
        this._label.removeAttribute('title');
        this._label.style.color = this._colors.text;
      }

      var roi = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getRoI(this._mesh, this._camera, this._stack);

      if (roi !== null) {
        meanSDContainer.innerHTML = 'Mean: ' + roi.mean.toFixed(1) + ' / SD: ' + roi.sd.toFixed(1);
        maxMinContainer.innerHTML = 'Max: ' + roi.max.toFixed() + ' / Min: ' + roi.min.toFixed();
      } else {
        meanSDContainer.innerHTML = '';
        maxMinContainer.innerHTML = '';
      }
      areaContainer.innerHTML = 'Area: ' + this._area.toFixed(2) + ' ' + this._units;
    };

    _class.prototype.updateDOMPosition = function updateDOMPosition() {
      var _this6 = this;

      if (this._handles.length < 2) {
        return;
      }
      // update lines and get coordinates of lowest handle
      var labelPosition = null;

      this._lines.forEach(function (elem, ind) {
        var lineData = _this6.getLineData(_this6._handles[ind].screenPosition, _this6._handles[ind + 1 === _this6._handles.length ? 0 : ind + 1].screenPosition);

        elem.style.transform = 'translate3D(' + lineData.transformX + 'px, ' + lineData.transformY + 'px, 0)\n                rotate(' + lineData.transformAngle + 'rad)';
        elem.style.width = lineData.length + 'px';

        if (labelPosition === null || labelPosition.y < _this6._handles[ind].screenPosition.y) {
          labelPosition = _this6._handles[ind].screenPosition.clone();
        }
      });

      if (!this._initialized) {
        return;
      }

      // update label
      labelPosition.y += 15 + this._label.offsetHeight / 2;
      labelPosition = this.adjustLabelTransform(this._label, labelPosition);

      this._label.style.transform = 'translate3D(' + labelPosition.x + 'px, ' + labelPosition.y + 'px, 0)';
    };

    _class.prototype.free = function free() {
      var _this7 = this;

      this.removeEventListeners();

      this._handles.forEach(function (h) {
        _this7.remove(h);
        h.free();
      });
      this._handles = [];

      this.remove(this._moveHandle);
      this._moveHandle.free();
      this._moveHandle = null;

      this._lines.forEach(function (elem) {
        elem.removeEventListener('mouseenter', _this7.onHover);
        elem.removeEventListener('mouseleave', _this7.onHover);
        _this7._container.removeChild(elem);
      });
      this._lines = [];
      this._container.removeChild(this._label);

      // mesh, geometry, material
      if (this._mesh) {
        this.remove(this._mesh);
        this._mesh.geometry.dispose();
        this._mesh.geometry = null;
        this._mesh.material.dispose();
        this._mesh.material = null;
        this._mesh = null;
      }
      if (this._geometry) {
        this._geometry.dispose();
        this._geometry = null;
      }
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      this._stack = null;

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.getMeasurements = function getMeasurements() {
      return {
        area: this._area,
        units: this._units
      };
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handles.forEach(function (elem) {
          return elem.targetMesh = targetMesh;
        });
        this._moveHandle.targetMesh = targetMesh;
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handles.forEach(function (elem) {
          return elem._worldPosition.copy(worldPosition);
        });
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }, {
      key: 'calibrationFactor',
      get: function get() {
        return this._calibrationFactor;
      },
      set: function set(calibrationFactor) {
        this._calibrationFactor = calibrationFactor;
        this._units = 'cm²';
        this.update();
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsFreehand());

/***/ }),

/***/ "./src/widgets/widgets.handle.js":
/*!***************************************!*\
  !*** ./src/widgets/widgets.handle.js ***!
  \***************************************/
/*! exports provided: widgetsHandle, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsHandle", function() { return widgetsHandle; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _core_core_intersections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/core.intersections */ "./src/core/core.intersections.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * @module widgets/handle
 */
var widgetsHandle = function widgetsHandle() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'Handle';

      // incoming parameters (optional: worldPosition)
      if (params.hideHandleMesh === true) {
        _this.visible = false;
      }

      // if no target mesh, use plane for FREE dragging.
      _this._plane = {
        position: new three.Vector3(),
        direction: new three.Vector3()
      };
      _this._offset = new three.Vector3();
      _this._raycaster = new three.Raycaster();

      _this._active = false;
      _this._hovered = false;
      _this._tracking = false;

      _this._mouse = new three.Vector2();

      _this._initialized = false;

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;
      _this._meshHovered = false;

      // dom stuff
      _this._dom = null;
      _this._domHovered = false;

      _this._screenPosition = _this.worldToScreen(_this._worldPosition);

      _this.create();
      _this.initOffsets();

      // event listeners
      _this.onResize = _this.onResize.bind(_this);
      _this.onMove = _this.onMove.bind(_this);
      _this.onHover = _this.onHover.bind(_this);
      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      window.addEventListener('resize', this.onResize);

      this._dom.addEventListener('mouseenter', this.onHover);
      this._dom.addEventListener('mouseleave', this.onHover);

      this._container.addEventListener('wheel', this.onMove);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      window.removeEventListener('resize', this.onResize);

      this._dom.removeEventListener('mouseenter', this.onHover);
      this._dom.removeEventListener('mouseleave', this.onHover);

      this._container.removeEventListener('wheel', this.onMove);
    };

    _class.prototype.onResize = function onResize() {
      this.initOffsets();
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this.hoverMesh();

      this._hovered = this._meshHovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverMesh = function hoverMesh() {
      // check raycast intersection, do we want to hover on mesh or just css?
      var intersectsHandle = this._raycaster.intersectObject(this._mesh);
      this._meshHovered = intersectsHandle.length > 0;
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.onStart = function onStart(evt) {
      var offsets = this.getMouseOffsets(evt, this._container);
      this._mouse.set(offsets.x, offsets.y);

      // update raycaster
      this._raycaster.setFromCamera(this._mouse, this._camera);
      this._raycaster.ray.position = this._raycaster.ray.origin;

      if (this._hovered) {
        this._active = true;
        this._controls.enabled = false;

        if (this._targetMesh) {
          var intersectsTarget = this._raycaster.intersectObject(this._targetMesh);
          if (intersectsTarget.length > 0) {
            this._offset.copy(intersectsTarget[0].point).sub(this._worldPosition);
          }
        } else {
          this._plane.position.copy(this._worldPosition);
          this._plane.direction.copy(this._camera.getWorldDirection());
          var intersection = _core_core_intersections__WEBPACK_IMPORTED_MODULE_1__["default"].rayPlane(this._raycaster.ray, this._plane);
          if (intersection !== null) {
            this._offset.copy(intersection).sub(this._plane.position);
          }
        }

        this.update();
      }
    };

    /**
     * @param {Object} evt - Browser event
     * @param {Boolean} forced - true to move inactive handles
     */


    _class.prototype.onMove = function onMove(evt, forced) {
      var offsets = this.getMouseOffsets(evt, this._container);
      this._mouse.set(offsets.x, offsets.y);

      // update raycaster
      // set ray.position to satisfy CoreIntersections::rayPlane API
      this._raycaster.setFromCamera(this._mouse, this._camera);
      this._raycaster.ray.position = this._raycaster.ray.origin;

      if (this._active || forced) {
        this._dragged = true;

        if (this._targetMesh !== null) {
          var intersectsTarget = this._raycaster.intersectObject(this._targetMesh);
          if (intersectsTarget.length > 0) {
            this._worldPosition.copy(intersectsTarget[0].point.sub(this._offset));
          }
        } else {
          if (this._plane.direction.length() === 0) {
            // free mode!this._targetMesh
            this._plane.position.copy(this._worldPosition);
            this._plane.direction.copy(this._camera.getWorldDirection());
          }

          var intersection = _core_core_intersections__WEBPACK_IMPORTED_MODULE_1__["default"].rayPlane(this._raycaster.ray, this._plane);
          if (intersection !== null) {
            this._worldPosition.copy(intersection.sub(this._offset));
          }
        }
      } else {
        this.onHover(null);
      }

      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      if (this._tracking === true) {
        // stay active and keep controls disabled
        return;
      }

      if (!this._dragged && this._active && this._initialized) {
        this._selected = !this._selected; // change state if there was no dragging
      }

      this._initialized = true;
      this._active = false;
      this._dragged = false;
      this._controls.enabled = true;

      this.update();
    };

    _class.prototype.create = function create() {
      this.createMesh();
      this.createDOM();
    };

    _class.prototype.createMesh = function createMesh() {
      // geometry
      this._geometry = new three.SphereGeometry(1, 16, 16);

      // material
      this._material = new three.MeshBasicMaterial({
        wireframe: true,
        wireframeLinewidth: 2
      });

      this.updateMeshColor();

      // mesh
      this._mesh = new three.Mesh(this._geometry, this._material);
      this._mesh.position.copy(this._worldPosition);
      this._mesh.visible = true;

      this.add(this._mesh);
    };

    _class.prototype.createDOM = function createDOM() {
      this._dom = document.createElement('div');
      this._dom.className = 'widgets-handle';

      this._dom.style.transform = 'translate3D(\n      ' + this._screenPosition.x + 'px,\n      ' + (this._screenPosition.y - this._container.offsetHeight) + 'px, 0)';

      this.updateDOMColor();

      this._container.appendChild(this._dom);
    };

    _class.prototype.update = function update() {
      // general update
      this.updateColor();

      // update screen position of handle
      this._screenPosition = this.worldToScreen(this._worldPosition);

      // mesh stuff
      this.updateMeshColor();
      this.updateMeshPosition();

      // DOM stuff
      this.updateDOMColor();
      this.updateDOMPosition();
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateMeshPosition = function updateMeshPosition() {
      if (this._mesh) {
        this._mesh.position.copy(this._worldPosition);
      }
    };

    _class.prototype.updateDOMPosition = function updateDOMPosition() {
      if (this._dom) {
        this._dom.style.transform = 'translate3D(' + this._screenPosition.x + 'px,\n        ' + (this._screenPosition.y - this._container.offsetHeight) + 'px, 0)';
      }
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      this._dom.style.borderColor = this._color;
    };

    _class.prototype.showMesh = function showMesh() {
      if (this._params.hideMesh === true || this._params.hideHandleMesh === true) {
        return;
      }

      this.visible = true;
    };

    _class.prototype.free = function free() {
      // events
      this.removeEventListeners();
      // dom
      this._container.removeChild(this._dom);
      // mesh, geometry, material
      this.remove(this._mesh);
      this._mesh.geometry.dispose();
      this._mesh.geometry = null;
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._mesh = null;
      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._dom.style.display = 'none';
    };

    _class.prototype.showDOM = function showDOM() {
      this._dom.style.display = '';
    };

    _createClass(_class, [{
      key: 'screenPosition',
      get: function get() {
        return this._screenPosition;
      },
      set: function set(screenPosition) {
        this._screenPosition = screenPosition;
      }
    }, {
      key: 'active',
      get: function get() {
        return this._active;
      },
      set: function set(active) {
        this._active = active;
        // this._tracking = this._active;
        this._controls.enabled = !this._active;

        this.update();
      }
    }, {
      key: 'tracking',
      get: function get() {
        return this._tracking;
      },
      set: function set(tracking) {
        this._tracking = tracking;
        this.update();
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsHandle());

/***/ }),

/***/ "./src/widgets/widgets.js":
/*!********************************!*\
  !*** ./src/widgets/widgets.js ***!
  \********************************/
/*! exports provided: WidgetsCss, AngleWidget, angleWidgetFactory, AnnotationWidget, annotationWidgetFactory, BiRulerWidget, birulerWidgetFactory, CrossRulerWidget, crossrulerWidgetFactory, EllipseWidget, ellipseWidgetFactory, FreehandWidget, freehandWidgetFactory, HandleWidget, handleWidgetFactory, PeakVelocityWidget, peakVelocityWidgetFactory, PressureHalfTimeWidget, pressureHalfTimeWidgetFactory, PolygonWidget, polygonWidgetFactory, RectangleWidget, rectangleWidgetFactory, RulerWidget, rulerWidgetFactory, VelocityTimeIntegralWidget, velocityTimeIntegralWidgetFactory, VoxelProbeWidget, voxelprobeWidgetFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _widgets_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.css */ "./src/widgets/widgets.css.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WidgetsCss", function() { return _widgets_css__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _widgets_angle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.angle */ "./src/widgets/widgets.angle.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AngleWidget", function() { return _widgets_angle__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "angleWidgetFactory", function() { return _widgets_angle__WEBPACK_IMPORTED_MODULE_1__["widgetsAngle"]; });

/* harmony import */ var _widgets_annotation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./widgets.annotation */ "./src/widgets/widgets.annotation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnnotationWidget", function() { return _widgets_annotation__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "annotationWidgetFactory", function() { return _widgets_annotation__WEBPACK_IMPORTED_MODULE_2__["widgetsAnnotation"]; });

/* harmony import */ var _widgets_biruler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./widgets.biruler */ "./src/widgets/widgets.biruler.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BiRulerWidget", function() { return _widgets_biruler__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "birulerWidgetFactory", function() { return _widgets_biruler__WEBPACK_IMPORTED_MODULE_3__["widgetsBiruler"]; });

/* harmony import */ var _widgets_crossRuler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./widgets.crossRuler */ "./src/widgets/widgets.crossRuler.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CrossRulerWidget", function() { return _widgets_crossRuler__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "crossrulerWidgetFactory", function() { return _widgets_crossRuler__WEBPACK_IMPORTED_MODULE_4__["widgetsCrossRuler"]; });

/* harmony import */ var _widgets_ellipse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./widgets.ellipse */ "./src/widgets/widgets.ellipse.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EllipseWidget", function() { return _widgets_ellipse__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ellipseWidgetFactory", function() { return _widgets_ellipse__WEBPACK_IMPORTED_MODULE_5__["widgetsEllipse"]; });

/* harmony import */ var _widgets_freehand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./widgets.freehand */ "./src/widgets/widgets.freehand.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FreehandWidget", function() { return _widgets_freehand__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "freehandWidgetFactory", function() { return _widgets_freehand__WEBPACK_IMPORTED_MODULE_6__["widgetsFreehand"]; });

/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HandleWidget", function() { return _widgets_handle__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "handleWidgetFactory", function() { return _widgets_handle__WEBPACK_IMPORTED_MODULE_7__["widgetsHandle"]; });

/* harmony import */ var _widgets_peakVelocity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./widgets.peakVelocity */ "./src/widgets/widgets.peakVelocity.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PeakVelocityWidget", function() { return _widgets_peakVelocity__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "peakVelocityWidgetFactory", function() { return _widgets_peakVelocity__WEBPACK_IMPORTED_MODULE_8__["widgetsPeakVelocity"]; });

/* harmony import */ var _widgets_pressureHalfTime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./widgets.pressureHalfTime */ "./src/widgets/widgets.pressureHalfTime.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PressureHalfTimeWidget", function() { return _widgets_pressureHalfTime__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pressureHalfTimeWidgetFactory", function() { return _widgets_pressureHalfTime__WEBPACK_IMPORTED_MODULE_9__["widgetsPressureHalfTime"]; });

/* harmony import */ var _widgets_polygon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./widgets.polygon */ "./src/widgets/widgets.polygon.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PolygonWidget", function() { return _widgets_polygon__WEBPACK_IMPORTED_MODULE_10__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "polygonWidgetFactory", function() { return _widgets_polygon__WEBPACK_IMPORTED_MODULE_10__["widgetsPolygon"]; });

/* harmony import */ var _widgets_rectangle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./widgets.rectangle */ "./src/widgets/widgets.rectangle.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RectangleWidget", function() { return _widgets_rectangle__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rectangleWidgetFactory", function() { return _widgets_rectangle__WEBPACK_IMPORTED_MODULE_11__["widgetsRectangle"]; });

/* harmony import */ var _widgets_ruler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./widgets.ruler */ "./src/widgets/widgets.ruler.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RulerWidget", function() { return _widgets_ruler__WEBPACK_IMPORTED_MODULE_12__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rulerWidgetFactory", function() { return _widgets_ruler__WEBPACK_IMPORTED_MODULE_12__["widgetsRuler"]; });

/* harmony import */ var _widgets_velocityTimeIntegral__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./widgets.velocityTimeIntegral */ "./src/widgets/widgets.velocityTimeIntegral.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VelocityTimeIntegralWidget", function() { return _widgets_velocityTimeIntegral__WEBPACK_IMPORTED_MODULE_13__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "velocityTimeIntegralWidgetFactory", function() { return _widgets_velocityTimeIntegral__WEBPACK_IMPORTED_MODULE_13__["widgetsVelocityTimeIntegral"]; });

/* harmony import */ var _widgets_voxelProbe__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./widgets.voxelProbe */ "./src/widgets/widgets.voxelProbe.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VoxelProbeWidget", function() { return _widgets_voxelProbe__WEBPACK_IMPORTED_MODULE_14__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "voxelprobeWidgetFactory", function() { return _widgets_voxelProbe__WEBPACK_IMPORTED_MODULE_14__["widgetsVoxelprobe"]; });




















/***/ }),

/***/ "./src/widgets/widgets.peakVelocity.js":
/*!*********************************************!*\
  !*** ./src/widgets/widgets.peakVelocity.js ***!
  \*********************************************/
/*! exports provided: widgetsPeakVelocity, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsPeakVelocity", function() { return widgetsPeakVelocity; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * @module widgets/peakVelocity (Gradient)
 */
var widgetsPeakVelocity = function widgetsPeakVelocity() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);

  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'PeakVelocity';

      // incoming parameters (required: lps2IJK, worldPosition)
      _this._regions = params.ultrasoundRegions || []; // required
      if (_this._regions.length < 1) {
        throw new Error('Ultrasound regions should not be empty!');
      }

      // outgoing values
      _this._velocity = null;
      _this._gradient = null;

      _this._container.style.cursor = 'pointer';
      _this._controls.enabled = false; // controls should be disabled for widgets with a single handle
      _this._initialized = false; // set to true onEnd
      _this._active = true;
      _this._domHovered = false;
      _this._initialRegion = _this.getRegionByXY(_this._regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(params.lps2IJK, params.worldPosition));
      if (_this._initialRegion === null) {
        throw new Error('Invalid initial UltraSound region!');
      }

      // dom stuff
      _this._line = null;
      _this._label = null;

      // handle (represent line)
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);
      _this._handle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._handle);

      _this._moveHandle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._moveHandle);
      _this._moveHandle.hide();

      _this.create();

      // event listeners
      _this.onMove = _this.onMove.bind(_this);
      _this.onHover = _this.onHover.bind(_this);
      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._container.addEventListener('wheel', this.onMove);

      this._line.addEventListener('mouseenter', this.onHover);
      this._line.addEventListener('mouseleave', this.onHover);
      this._label.addEventListener('mouseenter', this.onHover);
      this._label.addEventListener('mouseleave', this.onHover);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._container.removeEventListener('wheel', this.onMove);

      this._line.removeEventListener('mouseenter', this.onHover);
      this._line.removeEventListener('mouseleave', this.onHover);
      this._label.removeEventListener('mouseenter', this.onHover);
      this._label.removeEventListener('mouseleave', this.onHover);
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this._hovered = this._handle.hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.onStart = function onStart(evt) {
      this._moveHandle.onMove(evt, true);
      this._handle.onStart(evt);

      this._active = this._handle.active || this._domHovered;

      if (this._domHovered) {
        this._controls.enabled = false;
      }

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      if (this._active) {
        var prevPosition = this._moveHandle.worldPosition.clone();

        this._moveHandle.onMove(evt, true);

        var shift = this._moveHandle.worldPosition.clone().sub(prevPosition);

        if (!this.isCorrectRegion(shift)) {
          this._moveHandle.worldPosition.copy(prevPosition);

          return;
        }

        if (!this._handle.active) {
          this._handle.worldPosition.add(shift);
        }
        this._dragged = true;
      } else {
        this.onHover(null);
      }

      this._handle.onMove(evt);
      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      this._handle.onEnd();

      if (!this._dragged && this._active && this._initialized) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handle.selected = this._selected;
      }

      this._initialized = true;
      this._active = false;
      this._dragged = false;

      this.update();
    };

    _class.prototype.isCorrectRegion = function isCorrectRegion(shift) {
      var region = this.getRegionByXY(this._regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._params.lps2IJK, this._handle.worldPosition.clone().add(shift)));

      return region !== null && region === this._initialRegion && this._regions[region].unitsY === 'cm/sec';
    };

    _class.prototype.create = function create() {
      this.createDOM();
    };

    _class.prototype.createDOM = function createDOM() {
      this._line = document.createElement('div');
      this._line.className = 'widgets-dashline';
      this._container.appendChild(this._line);

      this._label = document.createElement('div');
      this._label.className = 'widgets-label';

      // Measurements
      var measurementsContainer = document.createElement('div');
      // Peak Velocity
      var pvContainer = document.createElement('div');
      pvContainer.className = 'peakVelocity';
      measurementsContainer.appendChild(pvContainer);
      // Gradient
      var gradientContainer = document.createElement('div');
      gradientContainer.className = 'gradient';
      measurementsContainer.appendChild(gradientContainer);

      this._label.appendChild(measurementsContainer);
      this._container.appendChild(this._label);

      this.updateDOMColor();
    };

    _class.prototype.update = function update() {
      this.updateColor();

      this._handle.update();
      this._worldPosition.copy(this._handle.worldPosition);

      this.updateDOM();
    };

    _class.prototype.updateDOM = function updateDOM() {
      this.updateDOMColor();

      var point = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._params.lps2IJK, this._worldPosition);
      var region = this._regions[this.getRegionByXY(this._regions, point)];
      var usPosition = this.getPointInRegion(region, point);

      this._velocity = Math.abs(usPosition.y / 100);
      this._gradient = 4 * Math.pow(this._velocity, 2);

      // content
      this._label.querySelector('.peakVelocity').innerHTML = this._velocity.toFixed(2) + ' m/s';
      this._label.querySelector('.gradient').innerHTML = this._gradient.toFixed(2) + ' mmhg';

      // position
      var transform = this.adjustLabelTransform(this._label, this._handle.screenPosition, true);

      this._line.style.transform = 'translate3D(' + (transform.x - (point.x - region.x0) * this._camera.zoom) + 'px, ' + transform.y + 'px, 0)';
      this._line.style.width = (region.x1 - region.x0) * this._camera.zoom + 'px';
      this._label.style.transform = 'translate3D(' + (transform.x + 10) + 'px, ' + (transform.y + 10) + 'px, 0)';
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      this._line.style.backgroundColor = this._color;
      this._label.style.borderColor = this._color;
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._line.style.display = 'none';
      this._label.style.display = 'none';
      this._handle.hideDOM();
    };

    _class.prototype.showDOM = function showDOM() {
      this._line.style.display = '';
      this._label.style.display = '';
      this._handle.showDOM();
    };

    _class.prototype.free = function free() {
      this.removeEventListeners();

      this.remove(this._handle);
      this._handle.free();
      this._handle = null;
      this.remove(this._moveHandle);
      this._moveHandle.free();
      this._moveHandle = null;

      this._container.removeChild(this._line);
      this._container.removeChild(this._label);

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.getMeasurements = function getMeasurements() {
      return {
        velocity: this._velocity,
        gradient: this._gradient
      };
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handle.targetMesh = targetMesh;
        this._moveHandle.targetMesh = targetMesh;
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handle.worldPosition.copy(worldPosition);
        this._moveHandle.worldPosition.copy(worldPosition);
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }, {
      key: 'active',
      get: function get() {
        return this._active;
      },
      set: function set(active) {
        this._active = active;
        this._controls.enabled = !this._active;

        this.update();
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsPeakVelocity());

/***/ }),

/***/ "./src/widgets/widgets.polygon.js":
/*!****************************************!*\
  !*** ./src/widgets/widgets.polygon.js ***!
  \****************************************/
/*! exports provided: widgetsPolygon, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsPolygon", function() { return widgetsPolygon; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * @module widgets/polygon
 */
var widgetsPolygon = function widgetsPolygon() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'Polygon';

      // incoming parameters (optional: frameIndex, worldPosition)
      _this._stack = params.stack; // required
      _this._calibrationFactor = params.calibrationFactor || null;

      // outgoing values
      _this._area = null;
      _this._units = !_this._calibrationFactor && !params.stack.frame[params.frameIndex].pixelSpacing ? 'units' : 'cm²';

      _this._initialized = false; // set to true onDblClick if number of handles > 2
      _this._newHandleRequired = true; // should handle be created onMove?
      _this._moving = false;
      _this._domHovered = false;

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      // dom stuff
      _this._lines = [];
      _this._label = null;

      // add handles
      _this._handles = [];
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);

      var handle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(handle);
      _this._handles.push(handle);

      _this._moveHandle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._moveHandle);
      _this._moveHandle.hide();

      _this.onDoubleClick = _this.onDoubleClick.bind(_this);
      _this.onMove = _this.onMove.bind(_this);
      _this.onHover = _this.onHover.bind(_this);

      _this.create();

      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._container.addEventListener('dblclick', this.onDoubleClick);
      this._container.addEventListener('wheel', this.onMove);

      this._label.addEventListener('mouseenter', this.onHover);
      this._label.addEventListener('mouseleave', this.onHover);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._container.removeEventListener('dblclick', this.onDoubleClick);
      this._container.removeEventListener('wheel', this.onMove);

      this._label.removeEventListener('mouseenter', this.onHover);
      this._label.removeEventListener('mouseleave', this.onHover);
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this.hoverMesh();

      var hovered = false;

      this._handles.forEach(function (elem) {
        return hovered = hovered || elem.hovered;
      });

      this._hovered = hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverMesh = function hoverMesh() {
      // check raycast intersection, if we want to hover on mesh instead of just css
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.onStart = function onStart(evt) {
      var active = false;

      this._handles.forEach(function (elem) {
        elem.onStart(evt);
        active = active || elem.active;
      });

      if (!this._initialized) {
        return;
      }

      this._moveHandle.onMove(evt, true);
      this._active = active || this._domHovered;

      if (this._domHovered && this._initialized) {
        this._moving = true;
        this._controls.enabled = false;
      }

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      var _this2 = this;

      var hovered = false;

      if (this.active) {
        this._dragged = true;

        if (this._newHandleRequired && !this._initialized) {
          this._handles[this._handles.length - 1].hovered = false;
          this._handles[this._handles.length - 1].active = false;
          this._handles[this._handles.length - 1].tracking = false;

          var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);
          var handle = new WidgetsHandle(this._targetMesh, this._controls, this._params);

          handle.hovered = true;
          handle.active = true;
          handle.tracking = true;
          this.add(handle);
          this._handles.push(handle);

          this.createLine();
          this._newHandleRequired = false;
        } else {
          var prevPosition = this._moveHandle.worldPosition.clone();

          this._moveHandle.onMove(evt, true);
          if (this._mesh) {
            this.remove(this._mesh);
          }
          this.updateDOMContent(true);
          if (this._moving) {
            this._handles.forEach(function (handle) {
              handle.worldPosition.add(_this2._moveHandle.worldPosition.clone().sub(prevPosition));
            });
          }
        }
      }

      this._handles.forEach(function (elem) {
        elem.onMove(evt);
        hovered = hovered || elem.hovered;
      });

      this._hovered = hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';

      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      var _this3 = this;

      var numHandles = this._handles.length;
      var active = false;

      if (!this._initialized && numHandles > 1 && this._handles[numHandles - 2].screenPosition.distanceTo(this._handles[numHandles - 1].screenPosition) < 10) {
        return;
      }

      this._handles.forEach(function (elem) {
        elem.onEnd();
        active = active || elem.active;
      });

      if (!this._initialized) {
        this._newHandleRequired = true;

        return;
      }

      if (this._dragged) {
        this.updateMesh();
        this.updateDOMContent();
      }

      if (!this._dragged && this._active) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handles.forEach(function (elem) {
          return elem.selected = _this3._selected;
        });
      }
      this._active = active || this._handles[numHandles - 1].active;
      this._dragged = false;
      this._moving = false;

      this.update();
    };

    _class.prototype.onDoubleClick = function onDoubleClick() {
      var numHandles = this._handles.length;

      if (numHandles < 3 || this._initialized || numHandles > 1 && this._handles[numHandles - 2].screenPosition.distanceTo(this._handles[numHandles - 1].screenPosition) < 10) {
        return;
      }

      this._handles[numHandles - 1].tracking = false;
      this._handles.forEach(function (elem) {
        return elem.onEnd();
      });

      this._active = false;
      this._dragged = false;
      this._moving = false;
      this._initialized = true;

      this.updateMesh();
      this.updateDOMContent();
      this.update();
    };

    _class.prototype.create = function create() {
      this.createMaterial();
      this.createDOM();
    };

    _class.prototype.createMaterial = function createMaterial() {
      this._material = new three.MeshBasicMaterial({ side: THREE.DoubleSide });
      this._material.transparent = true;
      this._material.opacity = 0.2;
    };

    _class.prototype.createDOM = function createDOM() {
      this.createLine();

      this._label = document.createElement('div');
      this._label.className = 'widgets-label';

      // measurements
      var measurementsContainer = document.createElement('div');
      // Mean / SD
      var meanSDContainer = document.createElement('div');
      meanSDContainer.className = 'mean-sd';
      measurementsContainer.appendChild(meanSDContainer);
      // Max / Min
      var maxMinContainer = document.createElement('div');
      maxMinContainer.className = 'max-min';
      measurementsContainer.appendChild(maxMinContainer);
      // Area
      var areaContainer = document.createElement('div');
      areaContainer.className = 'area';
      measurementsContainer.appendChild(areaContainer);

      this._label.appendChild(measurementsContainer);

      this._container.appendChild(this._label);

      this.updateDOMColor();
    };

    _class.prototype.createLine = function createLine() {
      var line = document.createElement('div');

      line.className = 'widgets-line';
      line.addEventListener('mouseenter', this.onHover);
      line.addEventListener('mouseleave', this.onHover);
      this._lines.push(line);
      this._container.appendChild(line);
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._handles.forEach(function (elem) {
        return elem.hideDOM();
      });

      this._lines.forEach(function (elem) {
        return elem.style.display = 'none';
      });
      this._label.style.display = 'none';
    };

    _class.prototype.showDOM = function showDOM() {
      this._handles.forEach(function (elem) {
        return elem.showDOM();
      });

      this._lines.forEach(function (elem) {
        return elem.style.display = '';
      });
      this._label.style.display = '';
    };

    _class.prototype.update = function update() {
      this.updateColor();

      // update handles
      this._handles.forEach(function (elem) {
        return elem.update();
      });

      // mesh stuff
      this.updateMeshColor();
      this.updateMeshPosition();

      // DOM stuff
      this.updateDOMColor();
      this.updateDOMPosition();
    };

    _class.prototype.updateMesh = function updateMesh() {
      if (this._mesh) {
        this.remove(this._mesh);
      }

      var points = [];

      this._handles.forEach(function (elem) {
        return points.push(elem.worldPosition);
      });

      var center = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].centerOfMass(points);
      // direction from first point to center
      var referenceDirection = new three.Vector3().subVectors(points[0], center).normalize();
      var direction = new three.Vector3().crossVectors(new three.Vector3().subVectors(points[0], center), // side 1
      new three.Vector3().subVectors(points[1], center) // side 2
      );
      var base = new three.Vector3().crossVectors(referenceDirection, direction).normalize();
      var orderedpoints = [];

      // other lines // if inter, return location + angle
      for (var j = 0; j < points.length; j++) {
        var point = new three.Vector3(points[j].x, points[j].y, points[j].z);

        point.direction = new three.Vector3().subVectors(points[j], center).normalize();

        var x = referenceDirection.dot(point.direction);
        var y = base.dot(point.direction);

        point.xy = { x: x, y: y };
        point.angle = Math.atan2(y, x) * (180 / Math.PI);

        orderedpoints.push(point);
      }

      // override to catch console.warn "THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()"
      this._shapeWarn = false;
      var oldWarn = console.warn;
      console.warn = function () {
        for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
          rest[_key] = arguments[_key];
        }

        if (rest[0] === 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()') {
          this._shapeWarn = true;
        }
        return oldWarn.apply(console, rest);
      }.bind(this);

      // create the shape
      var shape = new three.Shape();
      // move to first point!
      shape.moveTo(orderedpoints[0].xy.x, orderedpoints[0].xy.y);

      // loop through all points!
      for (var l = 1; l < orderedpoints.length; l++) {
        // project each on plane!
        shape.lineTo(orderedpoints[l].xy.x, orderedpoints[l].xy.y);
      }

      // close the shape!
      shape.lineTo(orderedpoints[0].xy.x, orderedpoints[0].xy.y);

      this._geometry = new three.ShapeGeometry(shape);

      console.warn = oldWarn;

      this._geometry.vertices = orderedpoints;
      this._geometry.verticesNeedUpdate = true;
      this._geometry.elementsNeedUpdate = true;

      this.updateMeshColor();

      this._mesh = new three.Mesh(this._geometry, this._material);
      this._mesh.visible = true;
      this.add(this._mesh);
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateMeshPosition = function updateMeshPosition() {
      if (this._geometry) {
        this._geometry.verticesNeedUpdate = true;
      }
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      var _this4 = this;

      this._lines.forEach(function (elem) {
        return elem.style.backgroundColor = _this4._color;
      });
      this._label.style.borderColor = this._color;
    };

    _class.prototype.updateDOMContent = function updateDOMContent(clear) {
      var _this5 = this;

      var meanSDContainer = this._label.querySelector('.mean-sd');
      var maxMinContainer = this._label.querySelector('.max-min');
      var areaContainer = this._label.querySelector('.area');

      if (clear) {
        meanSDContainer.innerHTML = '';
        maxMinContainer.innerHTML = '';
        areaContainer.innerHTML = '';

        return;
      }

      var regions = this._stack.frame[this._params.frameIndex].ultrasoundRegions || [];

      this._area = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getGeometryArea(this._geometry); // this.getArea result is changed on dragging
      if (this._calibrationFactor) {
        this._area *= Math.pow(this._calibrationFactor, 2);
      } else if (regions && regions.length > 0 && this._stack.lps2IJK) {
        var same = true;
        var cRegion = void 0;
        var pRegion = void 0;

        this._handles.forEach(function (elem) {
          cRegion = _this5.getRegionByXY(regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(_this5._stack.lps2IJK, elem.worldPosition));
          if (cRegion === null || regions[cRegion].unitsX !== 'cm' || pRegion !== undefined && pRegion !== cRegion) {
            same = false;
          }
          pRegion = cRegion;
        });

        if (same) {
          this._area *= Math.pow(regions[cRegion].deltaX, 2);
          this._units = 'cm²';
        } else if (this._stack.frame[this._params.frameIndex].pixelSpacing) {
          this._area /= 100;
          this._units = 'cm²';
        } else {
          this._units = 'units';
        }
      } else if (this._units === 'cm²') {
        this._area /= 100;
      }

      var title = this._units === 'units' ? 'Calibration is required to display the area in cm². ' : '';

      if (this._shapeWarn) {
        title += 'Values may be incorrect due to triangulation error.';
      }
      if (title !== '' && !this._label.hasAttribute('title')) {
        this._label.setAttribute('title', title);
        this._label.style.color = this._colors.error;
      } else if (title === '' && this._label.hasAttribute('title')) {
        this._label.removeAttribute('title');
        this._label.style.color = this._colors.text;
      }

      var roi = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getRoI(this._mesh, this._camera, this._stack);

      if (roi !== null) {
        meanSDContainer.innerHTML = 'Mean: ' + roi.mean.toFixed(1) + ' / SD: ' + roi.sd.toFixed(1);
        maxMinContainer.innerHTML = 'Max: ' + roi.max.toFixed() + ' / Min: ' + roi.min.toFixed();
      } else {
        meanSDContainer.innerHTML = '';
        maxMinContainer.innerHTML = '';
      }
      areaContainer.innerHTML = 'Area: ' + this._area.toFixed(2) + ' ' + this._units;
    };

    _class.prototype.updateDOMPosition = function updateDOMPosition() {
      var _this6 = this;

      // update lines and get coordinates of lowest handle
      var labelPosition = null;

      this._lines.forEach(function (elem, ind) {
        var lineData = _this6.getLineData(_this6._handles[ind].screenPosition, _this6._handles[ind + 1 === _this6._handles.length ? 0 : ind + 1].screenPosition);

        elem.style.transform = 'translate3D(' + lineData.transformX + 'px, ' + lineData.transformY + 'px, 0)\n                    rotate(' + lineData.transformAngle + 'rad)';
        elem.style.width = lineData.length + 'px';

        if (labelPosition === null || labelPosition.y < _this6._handles[ind].screenPosition.y) {
          labelPosition = _this6._handles[ind].screenPosition.clone();
        }
      });

      if (!this._initialized) {
        return;
      }

      // update label
      labelPosition.y += 15 + this._label.offsetHeight / 2;
      labelPosition = this.adjustLabelTransform(this._label, labelPosition);

      this._label.style.transform = 'translate3D(' + labelPosition.x + 'px, ' + labelPosition.y + 'px, 0)';
    };

    _class.prototype.free = function free() {
      var _this7 = this;

      this.removeEventListeners();

      this._handles.forEach(function (h) {
        _this7.remove(h);
        h.free();
      });
      this._handles = [];

      this.remove(this._moveHandle);
      this._moveHandle.free();
      this._moveHandle = null;

      this._lines.forEach(function (elem) {
        elem.removeEventListener('mouseenter', _this7.onHover);
        elem.removeEventListener('mouseleave', _this7.onHover);
        _this7._container.removeChild(elem);
      });
      this._lines = [];
      this._container.removeChild(this._label);

      // mesh, geometry, material
      if (this._mesh) {
        this.remove(this._mesh);
        this._mesh.geometry.dispose();
        this._mesh.geometry = null;
        this._mesh.material.dispose();
        this._mesh.material = null;
        this._mesh = null;
      }
      if (this._geometry) {
        this._geometry.dispose();
        this._geometry = null;
      }
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      this._stack = null;

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.getMeasurements = function getMeasurements() {
      return {
        area: this._area,
        units: this._units
      };
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handles.forEach(function (elem) {
          return elem.targetMesh = targetMesh;
        });
        this._moveHandle.targetMesh = targetMesh;
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handles.forEach(function (elem) {
          return elem.worldPosition.copy(worldPosition);
        });
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }, {
      key: 'calibrationFactor',
      get: function get() {
        return this._calibrationFactor;
      },
      set: function set(calibrationFactor) {
        this._calibrationFactor = calibrationFactor;
        this._units = 'cm²';
        this.update();
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsPolygon());

/***/ }),

/***/ "./src/widgets/widgets.pressureHalfTime.js":
/*!*************************************************!*\
  !*** ./src/widgets/widgets.pressureHalfTime.js ***!
  \*************************************************/
/*! exports provided: widgetsPressureHalfTime, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsPressureHalfTime", function() { return widgetsPressureHalfTime; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * @module widgets/pressureHalfTime
 */
var widgetsPressureHalfTime = function widgetsPressureHalfTime() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);

  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'PressureHalfTime';

      // incoming parameters (required: lps2IJK, worldPosition)
      _this._regions = params.ultrasoundRegions || []; // required
      if (_this._regions.length < 1) {
        throw new Error('Ultrasound regions should not be empty!');
      }

      // outgoing values
      _this._vMax = null; // Maximum Velocity (Vmax)
      _this._gMax = null; // Maximum Gradient (Gmax)
      _this._pht = null; // Pressure Half Time (PHT)
      _this._mva = null; // Mitral Valve Area (MVA)
      _this._dt = null; // Deceleration Time (DT)
      _this._ds = null; // Deceleration Slope (DS)

      _this._domHovered = false;
      _this._initialRegion = _this.getRegionByXY(_this._regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(params.lps2IJK, params.worldPosition));
      if (_this._initialRegion === null) {
        throw new Error('Invalid initial UltraSound region!');
      }

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      // dom stuff
      _this._line = null;
      _this._label = null;

      // add handles
      _this._handles = [];
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);

      var handle = void 0;
      for (var i = 0; i < 2; i++) {
        handle = new WidgetsHandle(targetMesh, controls, params);
        _this.add(handle);
        _this._handles.push(handle);
      }
      _this._handles[1].active = true;
      _this._handles[1].tracking = true;

      _this._moveHandle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._moveHandle);
      _this._handles.push(_this._moveHandle);
      _this._moveHandle.hide();

      _this.create();

      _this.onMove = _this.onMove.bind(_this);
      _this.onHover = _this.onHover.bind(_this);
      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._container.addEventListener('wheel', this.onMove);

      this._line.addEventListener('mouseenter', this.onHover);
      this._line.addEventListener('mouseleave', this.onHover);
      this._label.addEventListener('mouseenter', this.onHover);
      this._label.addEventListener('mouseleave', this.onHover);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._container.removeEventListener('wheel', this.onMove);

      this._line.removeEventListener('mouseenter', this.onHover);
      this._line.removeEventListener('mouseleave', this.onHover);
      this._label.removeEventListener('mouseenter', this.onHover);
      this._label.removeEventListener('mouseleave', this.onHover);
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this.hoverMesh();

      this._hovered = this._handles[0].hovered || this._handles[1].hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverMesh = function hoverMesh() {
      // check raycast intersection, do we want to hover on mesh or just css?
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.onStart = function onStart(evt) {
      this._moveHandle.onMove(evt, true);

      this._handles[0].onStart(evt);
      this._handles[1].onStart(evt);

      this._active = this._handles[0].active || this._handles[1].active || this._domHovered;

      if (this._domHovered) {
        this._controls.enabled = false;
      }

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      if (this._active) {
        var prevPosition = this._moveHandle.worldPosition.clone();

        this._moveHandle.onMove(evt, true);

        var shift = this._moveHandle.worldPosition.clone().sub(prevPosition);

        if (!this.isCorrectRegion(shift)) {
          this._moveHandle.worldPosition.copy(prevPosition);

          return;
        }

        if (!this._handles[0].active && !this._handles[1].active) {
          this._handles.slice(0, -1).forEach(function (handle) {
            handle.worldPosition.add(shift);
          });
        }
        this._dragged = true;
      } else {
        this.onHover(null);
      }

      this._handles[0].onMove(evt);
      this._handles[1].onMove(evt);
      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      this._handles[0].onEnd(); // First Handle

      if (this._handles[1].tracking && this._handles[0].screenPosition.distanceTo(this._handles[1].screenPosition) < 10) {
        return;
      }

      if (!this._dragged && this._active && !this._handles[1].tracking) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handles[0].selected = this._selected;
      }

      // Second Handle
      if (this._dragged || !this._handles[1].tracking) {
        this._handles[1].tracking = false;
        this._handles[1].onEnd();
      } else {
        this._handles[1].tracking = false;
      }
      this._handles[1].selected = this._selected;

      this._active = this._handles[0].active || this._handles[1].active;
      this._dragged = false;

      this.update();
    };

    _class.prototype.isCorrectRegion = function isCorrectRegion(shift) {
      var inActive = !(this._handles[0].active || this._handles[1].active);
      var isCorrect = true;

      if (this._handles[0].active || inActive) {
        isCorrect = isCorrect && this.checkHandle(0, shift);
      }
      if (this._handles[1].active || inActive) {
        isCorrect = isCorrect && this.checkHandle(1, shift);
      }

      return isCorrect;
    };

    _class.prototype.checkHandle = function checkHandle(index, shift) {
      var region = this.getRegionByXY(this._regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._params.lps2IJK, this._handles[index].worldPosition.clone().add(shift)));

      return region !== null && region === this._initialRegion && this._regions[region].unitsY === 'cm/sec';
    };

    _class.prototype.create = function create() {
      this.createMesh();
      this.createDOM();
    };

    _class.prototype.createMesh = function createMesh() {
      // geometry
      this._geometry = new three.Geometry();
      this._geometry.vertices = [this._handles[0].worldPosition, this._handles[1].worldPosition];

      // material
      this._material = new three.LineBasicMaterial();

      this.updateMeshColor();

      // mesh
      this._mesh = new three.Line(this._geometry, this._material);
      this._mesh.visible = true;

      this.add(this._mesh);
    };

    _class.prototype.createDOM = function createDOM() {
      this._line = document.createElement('div');
      this._line.className = 'widgets-line';
      this._container.appendChild(this._line);

      this._label = document.createElement('div');
      this._label.className = 'widgets-label';

      var measurementsContainer = document.createElement('div');

      ['vmax', 'gmax', 'pht', 'mva', 'dt', 'ds'].forEach(function (name) {
        var div = document.createElement('div');

        div.className = name;
        measurementsContainer.appendChild(div);
      });
      this._label.appendChild(measurementsContainer);

      this._container.appendChild(this._label);

      this.updateDOMColor();
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._line.style.display = 'none';
      this._label.style.display = 'none';
      this._handles.forEach(function (elem) {
        return elem.hideDOM();
      });
    };

    _class.prototype.showDOM = function showDOM() {
      this._line.style.display = '';
      this._label.style.display = '';
      this._handles[0].showDOM();
      this._handles[1].showDOM();
    };

    _class.prototype.update = function update() {
      this.updateColor();

      this._handles[0].update();
      this._handles[1].update();

      this.updateValues();

      this.updateMeshColor();
      this.updateMeshPosition();

      this.updateDOM();
    };

    _class.prototype.updateValues = function updateValues() {
      var usPosition0 = this.getUsPoint(this._regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._params.lps2IJK, this._handles[0].worldPosition));
      var usPosition1 = this.getUsPoint(this._regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._params.lps2IJK, this._handles[1].worldPosition));
      var velocity0 = Math.abs(usPosition0.y / 100);
      var velocity1 = Math.abs(usPosition1.y / 100);
      var time0 = Math.abs(usPosition0.x);
      var time1 = Math.abs(usPosition1.x);
      var vMaxTime = this._vMax === velocity0 ? time0 : time1;

      this._vMax = Math.max(velocity0, velocity1);
      this._gMax = 4 * Math.pow(this._vMax, 2);

      var phtVelocity = this._vMax / Math.sqrt(2);
      var phtKoeff = (velocity0 - phtVelocity) / (velocity1 - phtVelocity);
      var dtKoeff = velocity0 / velocity1;

      this._pht = phtKoeff === 1 ? Number.POSITIVE_INFINITY : Math.abs(vMaxTime - (time0 - phtKoeff * time1) / (1 - phtKoeff)) * 1000;
      this._mva = 220 / this._pht;
      this._dt = dtKoeff === 1 ? Number.POSITIVE_INFINITY : Math.abs(vMaxTime - (time0 - dtKoeff * time1) / (1 - dtKoeff)) * 1000;
      this._ds = this._dt === 0 ? Number.POSITIVE_INFINITY : this._vMax / this._dt * 1000;
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateMeshPosition = function updateMeshPosition() {
      if (this._geometry) {
        this._geometry.verticesNeedUpdate = true;
      }
    };

    _class.prototype.updateDOM = function updateDOM() {
      this.updateDOMColor();

      // update line
      var lineData = this.getLineData(this._handles[0].screenPosition, this._handles[1].screenPosition);

      this._line.style.transform = 'translate3D(' + lineData.transformX + 'px, ' + lineData.transformY + 'px, 0)\n                rotate(' + lineData.transformAngle + 'rad)';
      this._line.style.width = lineData.length + 'px';

      // update label
      this._label.querySelector('.vmax').innerHTML = 'Vmax: ' + this._vMax.toFixed(2) + ' m/s';
      this._label.querySelector('.gmax').innerHTML = 'Gmax: ' + this._gMax.toFixed(2) + ' mmhg';
      this._label.querySelector('.pht').innerHTML = 'PHT: ' + this._pht.toFixed(1) + ' ms';
      this._label.querySelector('.mva').innerHTML = 'MVA: ' + this._mva.toFixed(2) + ' cm\xB2';
      this._label.querySelector('.dt').innerHTML = 'DT: ' + this._dt.toFixed(1) + ' ms';
      this._label.querySelector('.ds').innerHTML = 'DS: ' + this._ds.toFixed(2) + ' m/s\xB2';

      var angle = Math.abs(lineData.transformAngle);

      if (angle > Math.PI / 2) {
        angle = Math.PI - angle;
      }

      var labelPadding = Math.tan(angle) < this._label.offsetHeight / this._label.offsetWidth ? this._label.offsetWidth / 2 / Math.cos(angle) + 15 // 5px for each handle + padding
      : this._label.offsetHeight / 2 / Math.cos(Math.PI / 2 - angle) + 15;
      var paddingVector = lineData.line.normalize().multiplyScalar(labelPadding);
      var paddingPoint = lineData.length > labelPadding * 2 ? this._handles[1].screenPosition.clone().sub(paddingVector) : this._handles[1].screenPosition.clone().add(paddingVector);
      var transform = this.adjustLabelTransform(this._label, paddingPoint);

      this._label.style.transform = 'translate3D(' + transform.x + 'px, ' + transform.y + 'px, 0)';
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      this._line.style.backgroundColor = this._color;
      this._label.style.borderColor = this._color;
    };

    _class.prototype.free = function free() {
      var _this2 = this;

      this.removeEventListeners();

      this._handles.forEach(function (h) {
        _this2.remove(h);
        h.free();
      });
      this._handles = [];

      this._container.removeChild(this._line);
      this._container.removeChild(this._label);

      // mesh, geometry, material
      this.remove(this._mesh);
      this._mesh.geometry.dispose();
      this._mesh.geometry = null;
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._mesh = null;
      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.getMeasurements = function getMeasurements() {
      return {
        vMax: this._vMax,
        gMax: this._gMax,
        pht: this._pht,
        mva: this._mva,
        dt: this._dt,
        ds: this._ds
      };
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handles.forEach(function (elem) {
          return elem.targetMesh = targetMesh;
        });
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handles[0].worldPosition.copy(worldPosition);
        this._handles[1].worldPosition.copy(worldPosition);
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsPressureHalfTime());

/***/ }),

/***/ "./src/widgets/widgets.rectangle.js":
/*!******************************************!*\
  !*** ./src/widgets/widgets.rectangle.js ***!
  \******************************************/
/*! exports provided: widgetsRectangle, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsRectangle", function() { return widgetsRectangle; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * @module widgets/rectangle
 */
var widgetsRectangle = function widgetsRectangle() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'Rectangle';

      // incoming parameters (optional: frameIndex, worldPosition)
      _this._stack = params.stack; // required
      _this._calibrationFactor = params.calibrationFactor || null;

      // outgoing values
      _this._area = null;
      _this._units = !_this._calibrationFactor && !params.stack.frame[params.frameIndex].pixelSpacing ? 'units' : 'cm²';

      _this._moving = false;
      _this._domHovered = false;

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      // dom stuff
      _this._rectangle = null;
      _this._label = null;

      // add handles
      _this._handles = [];
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);

      var handle = void 0;
      for (var i = 0; i < 2; i++) {
        handle = new WidgetsHandle(targetMesh, controls, params);
        _this.add(handle);
        _this._handles.push(handle);
      }
      _this._handles[1].active = true;
      _this._handles[1].tracking = true;

      _this._moveHandle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._moveHandle);
      _this._handles.push(_this._moveHandle);
      _this._moveHandle.hide();

      _this.create();

      _this.onMove = _this.onMove.bind(_this);
      _this.onHover = _this.onHover.bind(_this);
      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._container.addEventListener('wheel', this.onMove);

      this._rectangle.addEventListener('mouseenter', this.onHover);
      this._rectangle.addEventListener('mouseleave', this.onHover);
      this._label.addEventListener('mouseenter', this.onHover);
      this._label.addEventListener('mouseleave', this.onHover);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._container.removeEventListener('wheel', this.onMove);

      this._rectangle.removeEventListener('mouseenter', this.onHover);
      this._rectangle.removeEventListener('mouseleave', this.onHover);
      this._label.removeEventListener('mouseenter', this.onHover);
      this._label.removeEventListener('mouseleave', this.onHover);
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this.hoverMesh();

      this._hovered = this._handles[0].hovered || this._handles[1].hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverMesh = function hoverMesh() {
      // check raycast intersection, if we want to hover on mesh instead of just css
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.onStart = function onStart(evt) {
      this._moveHandle.onMove(evt, true);

      this._handles[0].onStart(evt);
      this._handles[1].onStart(evt);

      this._active = this._handles[0].active || this._handles[1].active || this._domHovered;

      if (this._domHovered && !this._handles[1].tracking) {
        this._moving = true;
        this._controls.enabled = false;
      }

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      var _this2 = this;

      if (this._active) {
        var prevPosition = this._moveHandle.worldPosition.clone();

        this._dragged = true;
        this._moveHandle.onMove(evt, true);

        if (this._moving) {
          this._handles.slice(0, -1).forEach(function (handle) {
            handle.worldPosition.add(_this2._moveHandle.worldPosition.clone().sub(prevPosition));
          });
        }

        this.updateRoI(true);
      } else {
        this.onHover(null);
      }

      this._handles[0].onMove(evt);
      this._handles[1].onMove(evt);

      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      this._handles[0].onEnd(); // First Handle

      if (this._handles[1].tracking && this._handles[0].screenPosition.distanceTo(this._handles[1].screenPosition) < 10) {
        return;
      }

      if (!this._dragged && this._active && !this._handles[1].tracking) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handles[0].selected = this._selected;
      }

      // Second Handle
      if (this._dragged || !this._handles[1].tracking) {
        this._handles[1].tracking = false;
        this._handles[1].onEnd();
      } else {
        this._handles[1].tracking = false;
      }
      this._handles[1].selected = this._selected;

      this._active = this._handles[0].active || this._handles[1].active;
      this._dragged = false;
      this._moving = false;

      this.updateRoI(); // TODO: if (this._dragged || !this._initialized)
      this.update();
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._handles.forEach(function (elem) {
        return elem.hideDOM();
      });

      this._rectangle.style.display = 'none';
      this._label.style.display = 'none';
    };

    _class.prototype.showDOM = function showDOM() {
      this._handles[0].showDOM();
      this._handles[1].showDOM();

      this._rectangle.style.display = '';
      this._label.style.display = '';
    };

    _class.prototype.create = function create() {
      this.createMesh();
      this.createDOM();
    };

    _class.prototype.createMesh = function createMesh() {
      this._geometry = new three.PlaneGeometry(1, 1);

      this._material = new three.MeshBasicMaterial({ side: three.DoubleSide });
      this._material.transparent = true;
      this._material.opacity = 0.2;

      this.updateMeshColor();

      this._mesh = new three.Mesh(this._geometry, this._material);
      this._mesh.visible = true;

      this.add(this._mesh);
    };

    _class.prototype.createDOM = function createDOM() {
      this._rectangle = document.createElement('div');
      this._rectangle.className = 'widgets-rectangle';
      this._container.appendChild(this._rectangle);

      this._label = document.createElement('div');
      this._label.className = 'widgets-label';

      // measurements
      var measurementsContainer = document.createElement('div');
      // Mean / SD
      var meanSDContainer = document.createElement('div');
      meanSDContainer.className = 'mean-sd';
      measurementsContainer.appendChild(meanSDContainer);
      // Max / Min
      var maxMinContainer = document.createElement('div');
      maxMinContainer.className = 'max-min';
      measurementsContainer.appendChild(maxMinContainer);
      // Area
      var areaContainer = document.createElement('div');
      areaContainer.className = 'area';
      measurementsContainer.appendChild(areaContainer);

      this._label.appendChild(measurementsContainer);

      this._container.appendChild(this._label);

      this.updateDOMColor();
    };

    _class.prototype.update = function update() {
      this.updateColor();

      this._handles[0].update();
      this._handles[1].update();

      this.updateMeshColor();
      this.updateMeshPosition();

      this.updateDOM();
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateMeshPosition = function updateMeshPosition() {
      if (this._geometry) {
        var progection = new three.Vector3().subVectors(this._handles[1].worldPosition, this._handles[0].worldPosition).projectOnVector(this._camera.up);

        this._geometry.vertices[0].copy(this._handles[0].worldPosition);
        this._geometry.vertices[1].copy(new three.Vector3().addVectors(this._handles[0].worldPosition, progection));
        this._geometry.vertices[2].copy(new three.Vector3().subVectors(this._handles[1].worldPosition, progection));
        this._geometry.vertices[3].copy(this._handles[1].worldPosition);

        this._geometry.verticesNeedUpdate = true;
        this._geometry.computeBoundingSphere();
      }
    };

    _class.prototype.updateRoI = function updateRoI(clear) {
      var meanSDContainer = this._label.querySelector('.mean-sd');
      var maxMinContainer = this._label.querySelector('.max-min');

      if (clear) {
        meanSDContainer.innerHTML = '';
        maxMinContainer.innerHTML = '';

        return;
      }

      var roi = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getRoI(this._mesh, this._camera, this._stack);

      if (roi !== null) {
        meanSDContainer.innerHTML = 'Mean: ' + roi.mean.toFixed(1) + ' / SD: ' + roi.sd.toFixed(1);
        maxMinContainer.innerHTML = 'Max: ' + roi.max.toFixed() + ' / Min: ' + roi.min.toFixed();
      } else {
        meanSDContainer.innerHTML = '';
        maxMinContainer.innerHTML = '';
      }
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      this._rectangle.style.borderColor = this._color;
      this._label.style.borderColor = this._color;
    };

    _class.prototype.updateDOM = function updateDOM() {
      this.updateDOMColor();

      var regions = this._stack.frame[this._params.frameIndex].ultrasoundRegions || [];

      this._area = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getGeometryArea(this._geometry);
      if (this._calibrationFactor) {
        this._area *= Math.pow(this._calibrationFactor, 2);
      } else if (regions && regions.length > 0 && this._stack.lps2IJK) {
        var region0 = this.getRegionByXY(regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._stack.lps2IJK, this._handles[0].worldPosition));
        var region1 = this.getRegionByXY(regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._stack.lps2IJK, this._handles[1].worldPosition));

        if (region0 !== null && region1 !== null && region0 === region1 && regions[region0].unitsX === 'cm' && regions[region0].unitsY === 'cm') {
          this._area *= Math.pow(regions[region0].deltaX, 2);
          this._units = 'cm²';
        } else if (this._stack.frame[this._params.frameIndex].pixelSpacing) {
          this._area /= 100;
          this._units = 'cm²';
        } else {
          this._units = 'units';
        }
      } else if (this._units === 'cm²') {
        this._area /= 100;
      }

      if (this._units === 'units' && !this._label.hasAttribute('title')) {
        this._label.setAttribute('title', 'Calibration is required to display the area in cm²');
        this._label.style.color = this._colors.error;
      } else if (this._units !== 'units' && this._label.hasAttribute('title')) {
        this._label.removeAttribute('title');
        this._label.style.color = this._colors.text;
      }
      this._label.querySelector('.area').innerHTML = 'Area: ' + this._area.toFixed(2) + ' ' + this._units;

      var rectData = this.getRectData(this._handles[0].screenPosition, this._handles[1].screenPosition);
      var labelTransform = this.adjustLabelTransform(this._label, this._handles[1].screenPosition.clone().add(rectData.paddingVector.multiplyScalar(15 + this._label.offsetHeight / 2)));

      // update rectangle
      this._rectangle.style.transform = 'translate3D(' + rectData.transformX + 'px, ' + rectData.transformY + 'px, 0)';
      this._rectangle.style.width = rectData.width + 'px';
      this._rectangle.style.height = rectData.height + 'px';

      // update label
      this._label.style.transform = 'translate3D(' + labelTransform.x + 'px,' + labelTransform.y + 'px, 0)';
    };

    _class.prototype.free = function free() {
      var _this3 = this;

      this.removeEventListeners();

      this._handles.forEach(function (h) {
        _this3.remove(h);
        h.free();
      });
      this._handles = [];

      this._container.removeChild(this._rectangle);
      this._container.removeChild(this._label);

      // mesh, geometry, material
      this.remove(this._mesh);
      this._mesh.geometry.dispose();
      this._mesh.geometry = null;
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._mesh = null;
      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      this._stack = null;

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.getMeasurements = function getMeasurements() {
      return {
        area: this._area,
        units: this._units
      };
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handles.forEach(function (elem) {
          return elem.targetMesh = targetMesh;
        });
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handles[0].worldPosition.copy(worldPosition);
        this._handles[1].worldPosition.copy(worldPosition);
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }, {
      key: 'calibrationFactor',
      get: function get() {
        return this._calibrationFactor;
      },
      set: function set(calibrationFactor) {
        this._calibrationFactor = calibrationFactor;
        this._units = 'cm²';
        this.update();
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsRectangle());

/***/ }),

/***/ "./src/widgets/widgets.ruler.js":
/*!**************************************!*\
  !*** ./src/widgets/widgets.ruler.js ***!
  \**************************************/
/*! exports provided: widgetsRuler, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsRuler", function() { return widgetsRuler; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/**
 * @module widgets/ruler
 */
var widgetsRuler = function widgetsRuler() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'Ruler';

      // incoming parameters (optional: lps2IJK, pixelSpacing, ultrasoundRegions, worldPosition)
      _this._calibrationFactor = params.calibrationFactor || null;

      // outgoing values
      _this._distance = null;
      _this._units = !_this._calibrationFactor && !params.pixelSpacing ? 'units' : 'mm';

      _this._moving = false;
      _this._domHovered = false;

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      // dom stuff
      _this._line = null;
      _this._label = null;

      // add handles
      _this._handles = [];
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);

      var handle = void 0;
      for (var i = 0; i < 2; i++) {
        handle = new WidgetsHandle(targetMesh, controls, params);
        _this.add(handle);
        _this._handles.push(handle);
      }
      _this._handles[1].active = true;
      _this._handles[1].tracking = true;

      _this._moveHandle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._moveHandle);
      _this._handles.push(_this._moveHandle);
      _this._moveHandle.hide();

      _this.create();

      _this.onMove = _this.onMove.bind(_this);
      _this.onHover = _this.onHover.bind(_this);
      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._container.addEventListener('wheel', this.onMove);

      this._line.addEventListener('mouseenter', this.onHover);
      this._line.addEventListener('mouseleave', this.onHover);
      this._label.addEventListener('mouseenter', this.onHover);
      this._label.addEventListener('mouseleave', this.onHover);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._container.removeEventListener('wheel', this.onMove);

      this._line.removeEventListener('mouseenter', this.onHover);
      this._line.removeEventListener('mouseleave', this.onHover);
      this._label.removeEventListener('mouseenter', this.onHover);
      this._label.removeEventListener('mouseleave', this.onHover);
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this.hoverMesh();

      this._hovered = this._handles[0].hovered || this._handles[1].hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverMesh = function hoverMesh() {
      // check raycast intersection, do we want to hover on mesh or just css?
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.onStart = function onStart(evt) {
      this._moveHandle.onMove(evt, true);

      this._handles[0].onStart(evt);
      this._handles[1].onStart(evt);

      this._active = this._handles[0].active || this._handles[1].active || this._domHovered;

      if (this._domHovered && !this._handles[1].tracking) {
        this._moving = true;
        this._controls.enabled = false;
      }

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      var _this2 = this;

      if (this._active) {
        var prevPosition = this._moveHandle.worldPosition.clone();

        this._dragged = true;
        this._moveHandle.onMove(evt, true);

        if (this._moving) {
          this._handles.slice(0, -1).forEach(function (handle) {
            handle.worldPosition.add(_this2._moveHandle.worldPosition.clone().sub(prevPosition));
          });
        }
      } else {
        this.onHover(null);
      }

      this._handles[0].onMove(evt);
      this._handles[1].onMove(evt);

      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      this._handles[0].onEnd(); // First Handle

      if (this._handles[1].tracking && this._handles[0].screenPosition.distanceTo(this._handles[1].screenPosition) < 10) {
        return;
      }

      if (!this._dragged && this._active && !this._handles[1].tracking) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handles[0].selected = this._selected;
      }

      // Second Handle
      if (this._dragged || !this._handles[1].tracking) {
        this._handles[1].tracking = false;
        this._handles[1].onEnd();
      } else {
        this._handles[1].tracking = false;
      }
      this._handles[1].selected = this._selected;

      this._active = this._handles[0].active || this._handles[1].active;
      this._dragged = false;
      this._moving = false;

      this.update();
    };

    _class.prototype.create = function create() {
      this.createMesh();
      this.createDOM();
    };

    _class.prototype.createMesh = function createMesh() {
      // geometry
      this._geometry = new three.Geometry();
      this._geometry.vertices.push(this._handles[0].worldPosition);
      this._geometry.vertices.push(this._handles[1].worldPosition);

      // material
      this._material = new three.LineBasicMaterial();

      this.updateMeshColor();

      // mesh
      this._mesh = new three.Line(this._geometry, this._material);
      this._mesh.visible = true;

      this.add(this._mesh);
    };

    _class.prototype.createDOM = function createDOM() {
      this._line = document.createElement('div');
      this._line.className = 'widgets-line';
      this._container.appendChild(this._line);

      this._label = document.createElement('div');
      this._label.className = 'widgets-label';
      this._container.appendChild(this._label);

      this.updateDOMColor();
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._line.style.display = 'none';
      this._label.style.display = 'none';
      this._handles.forEach(function (elem) {
        return elem.hideDOM();
      });
    };

    _class.prototype.showDOM = function showDOM() {
      this._line.style.display = '';
      this._label.style.display = '';
      this._handles[0].showDOM();
      this._handles[1].showDOM();
    };

    _class.prototype.update = function update() {
      this.updateColor();

      this._handles[0].update();
      this._handles[1].update();

      // calculate values
      var distanceData = this.getDistanceData(this._handles[0].worldPosition, this._handles[1].worldPosition, this._calibrationFactor);

      this._distance = distanceData.distance;
      if (distanceData.units) {
        this._units = distanceData.units;
      }

      this.updateMeshColor();
      this.updateMeshPosition();

      this.updateDOM();
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateMeshPosition = function updateMeshPosition() {
      if (this._geometry) {
        this._geometry.verticesNeedUpdate = true;
      }
    };

    _class.prototype.updateDOM = function updateDOM() {
      this.updateDOMColor();

      // update line
      var lineData = this.getLineData(this._handles[0].screenPosition, this._handles[1].screenPosition);

      this._line.style.transform = 'translate3D(' + lineData.transformX + 'px, ' + lineData.transformY + 'px, 0)\n      rotate(' + lineData.transformAngle + 'rad)';
      this._line.style.width = lineData.length + 'px';

      // update label
      if (this._units === 'units' && !this._label.hasAttribute('title')) {
        this._label.setAttribute('title', 'Calibration is required to display the distance in mm');
        this._label.style.color = this._colors.error;
      } else if (this._units !== 'units' && this._label.hasAttribute('title')) {
        this._label.removeAttribute('title');
        this._label.style.color = this._colors.text;
      }
      this._label.innerHTML = this._distance.toFixed(2) + ' ' + this._units;

      var angle = Math.abs(lineData.transformAngle);
      if (angle > Math.PI / 2) {
        angle = Math.PI - angle;
      }

      var labelPadding = Math.tan(angle) < this._label.offsetHeight / this._label.offsetWidth ? this._label.offsetWidth / 2 / Math.cos(angle) + 15 // 5px for each handle + padding
      : this._label.offsetHeight / 2 / Math.cos(Math.PI / 2 - angle) + 15;
      var paddingVector = lineData.line.normalize().multiplyScalar(labelPadding);
      var paddingPoint = lineData.length > labelPadding * 2 ? this._handles[1].screenPosition.clone().sub(paddingVector) : this._handles[1].screenPosition.clone().add(paddingVector);
      var transform = this.adjustLabelTransform(this._label, paddingPoint);

      this._label.style.transform = 'translate3D(' + transform.x + 'px, ' + transform.y + 'px, 0)';
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      this._line.style.backgroundColor = this._color;
      this._label.style.borderColor = this._color;
    };

    _class.prototype.free = function free() {
      var _this3 = this;

      this.removeEventListeners();

      this._handles.forEach(function (h) {
        _this3.remove(h);
        h.free();
      });
      this._handles = [];

      this._container.removeChild(this._line);
      this._container.removeChild(this._label);

      // mesh, geometry, material
      this.remove(this._mesh);
      this._mesh.geometry.dispose();
      this._mesh.geometry = null;
      this._mesh.material.dispose();
      this._mesh.material = null;
      this._mesh = null;
      this._geometry.dispose();
      this._geometry = null;
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.getMeasurements = function getMeasurements() {
      return {
        distance: this._distance,
        units: this._units
      };
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handles.forEach(function (elem) {
          return elem.targetMesh = targetMesh;
        });
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handles[0].worldPosition.copy(worldPosition);
        this._handles[1].worldPosition.copy(worldPosition);
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }, {
      key: 'calibrationFactor',
      get: function get() {
        return this._calibrationFactor;
      },
      set: function set(calibrationFactor) {
        this._calibrationFactor = calibrationFactor;
        this._units = 'mm';
        this.update();
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsRuler());

/***/ }),

/***/ "./src/widgets/widgets.velocityTimeIntegral.js":
/*!*****************************************************!*\
  !*** ./src/widgets/widgets.velocityTimeIntegral.js ***!
  \*****************************************************/
/*! exports provided: widgetsVelocityTimeIntegral, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsVelocityTimeIntegral", function() { return widgetsVelocityTimeIntegral; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * @module widgets/velocityTimeIntegral
 */
var widgetsVelocityTimeIntegral = function widgetsVelocityTimeIntegral() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'VelocityTimeIntegral';

      // incoming parameters (+ ijk2LPS, lps2IJK, worldPosition)
      _this._regions = params.ultrasoundRegions || []; // required
      if (_this._regions.length < 1) {
        throw new Error('Ultrasound regions should not be empty!');
      }

      // outgoing values
      _this._vMax = null; // Maximum Velocity (Vmax)
      _this._vMean = null; // Mean Velocity (Vmean)
      _this._gMax = null; // Maximum Gradient (Gmax)
      _this._gMean = null; // Mean Gradient (Gmean)
      _this._envTi = null; // Envelope Duration (Env.Ti)
      _this._vti = null; // Velocity Time Integral (VTI)
      _this._extraInfo = null; // extra information which is added to label

      _this._initialized = false; // set to true onEnd if number of handles > 2
      _this._isHandleActive = true;
      _this._domHovered = false;
      _this._initialRegion = _this.getRegionByXY(_this._regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(params.lps2IJK, params.worldPosition));
      if (_this._initialRegion === null) {
        throw new Error('Invalid initial UltraSound region!');
      }
      _this._usPoints = [];

      // mesh stuff
      _this._material = null;
      _this._geometry = null;
      _this._mesh = null;

      // dom stuff
      _this._lines = [];
      _this._label = null;

      // add handles
      _this._handles = [];
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);

      var handle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(handle);
      _this._handles.push(handle);

      _this._moveHandle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._moveHandle);
      _this._moveHandle.hide();

      _this.onMove = _this.onMove.bind(_this);
      _this.onHover = _this.onHover.bind(_this);

      _this.create();

      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._container.addEventListener('wheel', this.onMove);

      this._label.addEventListener('mouseenter', this.onHover);
      this._label.addEventListener('mouseleave', this.onHover);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._container.removeEventListener('wheel', this.onMove);

      this._label.removeEventListener('mouseenter', this.onHover);
      this._label.removeEventListener('mouseleave', this.onHover);
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this.hoverMesh();

      var hovered = false;

      this._handles.forEach(function (elem) {
        return hovered = hovered || elem.hovered;
      });

      this._hovered = hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverMesh = function hoverMesh() {
      // check raycast intersection, if we want to hover on mesh instead of just css
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.onStart = function onStart(evt) {
      var active = false;

      this._moveHandle.onMove(evt, true);
      this._handles.forEach(function (elem) {
        elem.onStart(evt);
        active = active || elem.active;
      });

      this._active = active || this._domHovered;
      this._isHandleActive = active;

      if (this._domHovered) {
        this._controls.enabled = false;
      }

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      if (this.active) {
        var prevPosition = this._moveHandle.worldPosition.clone();

        this._moveHandle.onMove(evt, true);

        var shift = this._moveHandle.worldPosition.clone().sub(prevPosition);

        if (!this.isCorrectRegion(shift)) {
          this._moveHandle.worldPosition.copy(prevPosition);

          return;
        }

        if (!this._initialized) {
          this._handles[this._handles.length - 1].hovered = false;
          this._handles[this._handles.length - 1].active = false;
          this._handles[this._handles.length - 1].tracking = false;

          var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);
          var handle = new WidgetsHandle(this._targetMesh, this._controls, this._params);

          handle.hovered = true;
          handle.active = true;
          handle.tracking = true;
          this.add(handle);
          this._handles.push(handle);

          this.createLine();
        } else {
          this.updateDOMContent(true);

          if (!this._isHandleActive || this._handles[this._handles.length - 2].active || this._handles[this._handles.length - 1].active) {
            this._handles.forEach(function (handle) {
              handle.worldPosition.add(shift);
            });
            this._isHandleActive = false;
            this._handles[this._handles.length - 2].active = false;
            this._handles[this._handles.length - 1].active = false;
            this._controls.enabled = false;
          }
        }
        this._dragged = true;
      } else {
        this.onHover(null);
      }

      this._handles.forEach(function (elem) {
        elem.onMove(evt);
      });
      if (this.active && this._handles.length > 2) {
        this.pushPopHandle();
      }
      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      var _this2 = this;

      if (this._handles.length < 3) {
        return;
      }

      var active = false;

      this._handles.slice(0, -1).forEach(function (elem) {
        elem.onEnd();
        active = active || elem.active;
      });

      // Last Handle
      if (this._dragged || !this._handles[this._handles.length - 1].tracking) {
        this._handles[this._handles.length - 1].tracking = false;
        this._handles[this._handles.length - 1].onEnd();
      } else {
        this._handles[this._handles.length - 1].tracking = false;
      }

      if (this._dragged || !this._initialized) {
        this.finalize();
        this.updateDOMContent();
      }

      if (!this._dragged && this._active) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handles.forEach(function (elem) {
          return elem.selected = _this2._selected;
        });
      }
      this._active = active || this._handles[this._handles.length - 1].active;
      this._isHandleActive = active;
      this._dragged = false;
      this._initialized = true;

      this.update();
    };

    _class.prototype.isCorrectRegion = function isCorrectRegion(shift) {
      var _this3 = this;

      var isCorrect = true;

      this._handles.forEach(function (handle, index) {
        if (handle.active || !_this3._isHandleActive) {
          isCorrect = isCorrect && _this3.checkHandle(index, shift);
        }
      });

      return isCorrect;
    };

    _class.prototype.checkHandle = function checkHandle(index, shift) {
      var region = this.getRegionByXY(this._regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._params.lps2IJK, this._handles[index].worldPosition.clone().add(shift)));

      return region !== null && region === this._initialRegion && this._regions[region].unitsY === 'cm/sec';
    };

    _class.prototype.create = function create() {
      this.createMaterial();
      this.createDOM();
    };

    _class.prototype.createMaterial = function createMaterial() {
      this._material = new three.LineBasicMaterial();
    };

    _class.prototype.createDOM = function createDOM() {
      this._label = document.createElement('div');
      this._label.className = 'widgets-label';

      var measurementsContainer = document.createElement('div');

      ['vmax', 'vmean', 'gmax', 'gmean', 'envti', 'vti', 'info'].forEach(function (name) {
        var div = document.createElement('div');

        div.className = name;
        measurementsContainer.appendChild(div);
      });
      this._label.appendChild(measurementsContainer);

      this._container.appendChild(this._label);

      this.updateDOMColor();
    };

    _class.prototype.createLine = function createLine() {
      var line = document.createElement('div');

      line.className = 'widgets-line';
      line.addEventListener('mouseenter', this.onHover);
      line.addEventListener('mouseleave', this.onHover);
      this._lines.push(line);
      this._container.appendChild(line);
    };

    _class.prototype.pushPopHandle = function pushPopHandle() {
      var handle0 = this._handles[this._handles.length - 3];
      var handle1 = this._handles[this._handles.length - 2];
      var newhandle = this._handles[this._handles.length - 1];
      var isOnLine = this.isPointOnLine(handle0.worldPosition, handle1.worldPosition, newhandle.worldPosition);

      if (isOnLine || handle0.screenPosition.distanceTo(newhandle.screenPosition) < 25) {
        this.remove(handle1);
        handle1.free();

        this._handles[this._handles.length - 2] = newhandle;
        this._handles.pop();

        this._container.removeChild(this._lines.pop());
      }

      return isOnLine;
    };

    _class.prototype.isPointOnLine = function isPointOnLine(pointA, pointB, pointToCheck) {
      return !new three.Vector3().crossVectors(pointA.clone().sub(pointToCheck), pointB.clone().sub(pointToCheck)).length();
    };

    _class.prototype.finalize = function finalize() {
      var _this4 = this;

      if (this._initialized) {
        // remove old axis handles
        this._handles.splice(-2).forEach(function (elem) {
          _this4.remove(elem);
          elem.free();
        });
      }

      var pointF = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._params.lps2IJK, this._handles[0]._worldPosition);
      var pointL = _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._params.lps2IJK, this._handles[this._handles.length - 1]._worldPosition);
      var region = this._regions[this.getRegionByXY(this._regions, pointF)];
      var axisY = region.y0 + (region.axisY || 0); // data coordinate equal to US region's zero Y coordinate

      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);
      var params = { hideHandleMesh: this._params.hideHandleMesh || false };

      pointF.y = axisY;
      pointL.y = axisY;
      this._usPoints = [this.getPointInRegion(region, pointL), this.getPointInRegion(region, pointF)];

      params.worldPosition = pointL.applyMatrix4(this._params.ijk2LPS); // projection of last point on Y axis
      this._handles.push(new WidgetsHandle(this._targetMesh, this._controls, params));
      this.add(this._handles[this._handles.length - 1]);

      params.worldPosition = pointF.applyMatrix4(this._params.ijk2LPS); // projection of first point on Y axis
      this._handles.push(new WidgetsHandle(this._targetMesh, this._controls, params));
      this.add(this._handles[this._handles.length - 1]);

      while (this._lines.length < this._handles.length) {
        this.createLine();
      }
    };

    _class.prototype.update = function update() {
      this.updateColor();

      // update handles
      this._handles.forEach(function (elem) {
        return elem.update();
      });

      // mesh stuff
      this.updateMesh();

      // DOM stuff
      this.updateDOMColor();
      this.updateDOMPosition();
    };

    _class.prototype.updateValues = function updateValues() {
      var _this5 = this;

      var region = this._regions[this.getRegionByXY(this._regions, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(this._params.lps2IJK, this._handles[0]._worldPosition))];
      var boundaries = {
        xMin: Number.POSITIVE_INFINITY,
        xMax: Number.NEGATIVE_INFINITY,
        yMin: Number.POSITIVE_INFINITY,
        yMax: Number.NEGATIVE_INFINITY
      };
      var pVelocity = void 0;
      var pGradient = void 0;
      var pTime = void 0;
      var totalTime = 0;

      this._vMax = 0;
      this._vMean = 0;
      this._gMean = 0;
      this._usPoints.splice(2);
      this._handles.slice(0, -2).forEach(function (elem) {
        var usPosition = _this5.getPointInRegion(region, _core_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].worldToData(_this5._params.lps2IJK, elem._worldPosition));
        var velocity = Math.abs(usPosition.y / 100);
        var gradient = 4 * Math.pow(velocity, 2);

        if (_this5._vMax === null || velocity > _this5._vMax) {
          _this5._vMax = velocity;
        }
        boundaries.xMin = Math.min(usPosition.x, boundaries.xMin);
        boundaries.xMax = Math.max(usPosition.x, boundaries.xMax);
        boundaries.yMin = Math.min(usPosition.y, boundaries.yMin);
        boundaries.yMax = Math.max(usPosition.y, boundaries.yMax);

        if (pTime) {
          var length = Math.abs(usPosition.x - pTime);

          totalTime += length;
          _this5._vMean += length * (pVelocity + velocity) / 2;
          _this5._gMean += length * (pGradient + gradient) / 2;
        }

        pVelocity = velocity;
        pGradient = gradient;
        pTime = usPosition.x;
        _this5._usPoints.push(usPosition);
      });

      this._gMax = 4 * Math.pow(this._vMax, 2);
      this._vMean /= totalTime;
      this._gMean /= totalTime;
      this._envTi = totalTime * 1000;
      this._vti = this.getArea(this._usPoints);

      this._shapeWarn = boundaries.xMax - boundaries.xMin !== totalTime || boundaries.yMin < 0 !== boundaries.yMax < 0;
    };

    _class.prototype.updateMesh = function updateMesh() {
      var _this6 = this;

      if (this._mesh) {
        this.remove(this._mesh);
      }

      this._geometry = new three.Geometry();
      this._handles.forEach(function (elem) {
        return _this6._geometry.vertices.push(elem.worldPosition);
      });
      this._geometry.vertices.push(this._handles[0].worldPosition);
      this._geometry.verticesNeedUpdate = true;

      this.updateMeshColor();

      this._mesh = new three.Line(this._geometry, this._material);
      this._mesh.visible = true;
      this.add(this._mesh);
    };

    _class.prototype.updateMeshColor = function updateMeshColor() {
      if (this._material) {
        this._material.color.set(this._color);
      }
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      var _this7 = this;

      if (this._handles.length >= 2) {
        this._lines.forEach(function (elem) {
          return elem.style.backgroundColor = _this7._color;
        });
      }
      this._label.style.borderColor = this._color;
    };

    _class.prototype.updateDOMContent = function updateDOMContent(clear) {
      var vMaxContainer = this._label.querySelector('.vmax');
      var vMeanContainer = this._label.querySelector('.vmean');
      var gMaxContainer = this._label.querySelector('.gmax');
      var gMeanContainer = this._label.querySelector('.gmean');
      var envTiContainer = this._label.querySelector('.envti');
      var vtiContainer = this._label.querySelector('.vti');
      var infoContainer = this._label.querySelector('.info');

      if (clear) {
        vMaxContainer.innerHTML = '';
        vMeanContainer.innerHTML = '';
        gMaxContainer.innerHTML = '';
        gMeanContainer.innerHTML = '';
        envTiContainer.innerHTML = '';
        vtiContainer.innerHTML = '';
        infoContainer.innerHTML = '';

        return;
      }

      this.updateValues();

      if (this._shapeWarn && !this._label.hasAttribute('title')) {
        this._label.setAttribute('title', 'Values may be incorrect due to invalid curve.');
        this._label.style.color = this._colors.error;
      } else if (!this._shapeWarn && this._label.hasAttribute('title')) {
        this._label.removeAttribute('title');
        this._label.style.color = this._colors.text;
      }

      vMaxContainer.innerHTML = 'Vmax: ' + this._vMax.toFixed(2) + ' m/s';
      vMeanContainer.innerHTML = 'Vmean: ' + this._vMean.toFixed(2) + ' m/s';
      gMaxContainer.innerHTML = 'Gmax: ' + this._gMax.toFixed(2) + ' mmhg';
      gMeanContainer.innerHTML = 'Gmean: ' + this._gMean.toFixed(2) + ' mmhg';
      envTiContainer.innerHTML = 'Env.Ti: ' + this._envTi.toFixed(1) + ' ms';
      vtiContainer.innerHTML = 'VTI: ' + this._vti.toFixed(2) + ' cm';
      infoContainer.innerHTML = this._extraInfo;
    };

    _class.prototype.updateDOMPosition = function updateDOMPosition() {
      var _this8 = this;

      if (this._handles.length < 2) {
        return;
      }
      // update lines and get coordinates of lowest handle
      var labelPosition = null;

      this._lines.forEach(function (elem, ind) {
        var lineData = _this8.getLineData(_this8._handles[ind].screenPosition, _this8._handles[ind + 1 === _this8._handles.length ? 0 : ind + 1].screenPosition);

        elem.style.transform = 'translate3D(' + lineData.transformX + 'px, ' + lineData.transformY + 'px, 0)\n                    rotate(' + lineData.transformAngle + 'rad)';
        elem.style.width = lineData.length + 'px';

        if (labelPosition === null || labelPosition.y < _this8._handles[ind].screenPosition.y) {
          labelPosition = _this8._handles[ind].screenPosition.clone();
        }
      });

      if (!this._initialized) {
        return;
      }

      // update label
      labelPosition.y += 15 + this._label.offsetHeight / 2;
      labelPosition = this.adjustLabelTransform(this._label, labelPosition);

      this._label.style.transform = 'translate3D(' + labelPosition.x + 'px, ' + labelPosition.y + 'px, 0)';
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._handles.forEach(function (elem) {
        return elem.hideDOM();
      });

      this._lines.forEach(function (elem) {
        return elem.style.display = 'none';
      });
      this._label.style.display = 'none';
    };

    _class.prototype.showDOM = function showDOM() {
      this._handles.forEach(function (elem) {
        return elem.showDOM();
      });

      this._lines.forEach(function (elem) {
        return elem.style.display = '';
      });
      this._label.style.display = '';
    };

    _class.prototype.free = function free() {
      var _this9 = this;

      this.removeEventListeners();

      this._handles.forEach(function (elem) {
        _this9.remove(elem);
        elem.free();
      });
      this._handles = [];
      this._usPoints = [];

      this.remove(this._moveHandle);
      this._moveHandle.free();
      this._moveHandle = null;

      this._lines.forEach(function (elem) {
        elem.removeEventListener('mouseenter', _this9.onHover);
        elem.removeEventListener('mouseleave', _this9.onHover);
        _this9._container.removeChild(elem);
      });
      this._lines = [];
      this._container.removeChild(this._label);

      // mesh, geometry, material
      if (this._mesh) {
        this.remove(this._mesh);
        this._mesh.geometry.dispose();
        this._mesh.geometry = null;
        this._mesh.material.dispose();
        this._mesh.material = null;
        this._mesh = null;
      }
      if (this._geometry) {
        this._geometry.dispose();
        this._geometry = null;
      }
      this._material.vertexShader = null;
      this._material.fragmentShader = null;
      this._material.uniforms = null;
      this._material.dispose();
      this._material = null;

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.getMeasurements = function getMeasurements() {
      return {
        vMax: this._vMax,
        vMean: this._vMean,
        gMax: this._gMax,
        gMean: this._gMean,
        envTi: this._envTi,
        vti: this._vti
      };
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handles.forEach(function (elem) {
          return elem.targetMesh = targetMesh;
        });
        this._moveHandle.targetMesh = targetMesh;
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handles.forEach(function (elem) {
          return elem._worldPosition.copy(worldPosition);
        });
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }, {
      key: 'extraInfo',
      get: function get() {
        return this._extraInfo;
      },
      set: function set(info) {
        this._extraInfo = info;
        this._label.querySelector('.info').innerHTML = info;
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsVelocityTimeIntegral());

/***/ }),

/***/ "./src/widgets/widgets.voxelProbe.js":
/*!*******************************************!*\
  !*** ./src/widgets/widgets.voxelProbe.js ***!
  \*******************************************/
/*! exports provided: widgetsVoxelprobe, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "widgetsVoxelprobe", function() { return widgetsVoxelprobe; });
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets.base */ "./src/widgets/widgets.base.ts");
/* harmony import */ var _widgets_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets.handle */ "./src/widgets/widgets.handle.js");
/* harmony import */ var _models_models_voxel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/models.voxel */ "./src/models/models.voxel.js");
/* harmony import */ var _core_core_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/core.utils */ "./src/core/core.utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






/**
 * @module widgets/voxelProbe
 */
var widgetsVoxelprobe = function widgetsVoxelprobe() {
  var three = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.THREE;

  if (three === undefined || three.Object3D === undefined) {
    return null;
  }

  var Constructor = Object(_widgets_base__WEBPACK_IMPORTED_MODULE_0__["widgetsBase"])(three);
  return function (_Constructor) {
    _inherits(_class, _Constructor);

    function _class(targetMesh, controls) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, _Constructor.call(this, targetMesh, controls, params));

      _this._widgetType = 'VoxelProbe';

      // incoming parameters (optional: worldPosition)
      _this._stack = params.stack; // required

      _this._container.style.cursor = 'pointer';
      _this._controls.enabled = false; // controls should be disabled for widgets with a single handle
      _this._initialized = false; // set to true onEnd
      _this._active = true;
      _this._moving = true;
      _this._domHovered = false;

      // dom stuff
      _this._label = null;

      // handle (represent voxel)
      var WidgetsHandle = Object(_widgets_handle__WEBPACK_IMPORTED_MODULE_1__["widgetsHandle"])(three);
      _this._handle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._handle);

      _this._moveHandle = new WidgetsHandle(targetMesh, controls, params);
      _this.add(_this._moveHandle);
      _this._moveHandle.hide();

      _this.create();

      // event listeners
      _this.onMove = _this.onMove.bind(_this);
      _this.onHover = _this.onHover.bind(_this);
      _this.addEventListeners();
      return _this;
    }

    _class.prototype.addEventListeners = function addEventListeners() {
      this._label.addEventListener('mouseenter', this.onHover);
      this._label.addEventListener('mouseleave', this.onHover);

      this._container.addEventListener('wheel', this.onMove);
    };

    _class.prototype.removeEventListeners = function removeEventListeners() {
      this._label.removeEventListener('mouseenter', this.onHover);
      this._label.removeEventListener('mouseleave', this.onHover);

      this._container.removeEventListener('wheel', this.onMove);
    };

    _class.prototype.onStart = function onStart(evt) {
      this._moveHandle.onMove(evt, true);
      this._handle.onStart(evt);

      this._active = this._handle.active || this._domHovered;

      if (this._domHovered) {
        this._moving = true;
        this._controls.enabled = false;
      }

      this.update();
    };

    _class.prototype.onMove = function onMove(evt) {
      if (this._active) {
        var prevPosition = this._moveHandle.worldPosition.clone();

        this._dragged = true;
        this._moveHandle.onMove(evt, true);

        if (this._moving) {
          this._handle.worldPosition.add(this._moveHandle.worldPosition.clone().sub(prevPosition));
        }
      } else {
        this.onHover(null);
      }

      this._handle.onMove(evt);

      this.update();
    };

    _class.prototype.onEnd = function onEnd() {
      this._handle.onEnd();

      if (!this._dragged && this._active && this._initialized) {
        this._selected = !this._selected; // change state if there was no dragging
        this._handle.selected = this._selected;
      }

      this._initialized = true;
      this._active = this._handle.active;
      this._dragged = false;
      this._moving = false;

      this.update();
    };

    _class.prototype.onHover = function onHover(evt) {
      if (evt) {
        this.hoverDom(evt);
      }

      this._hovered = this._handle.hovered || this._domHovered;
      this._container.style.cursor = this._hovered ? 'pointer' : 'default';
    };

    _class.prototype.hoverDom = function hoverDom(evt) {
      this._domHovered = evt.type === 'mouseenter';
    };

    _class.prototype.create = function create() {
      this.createVoxel();
      this.createDOM();
    };

    _class.prototype.createVoxel = function createVoxel() {
      this._voxel = new _models_models_voxel__WEBPACK_IMPORTED_MODULE_2__["default"]();
      this._voxel.id = this.id;
    };

    _class.prototype.createDOM = function createDOM() {
      this._label = document.createElement('div');
      this._label.className = 'widgets-label';

      // measurements
      var measurementsContainer = document.createElement('div');
      // LPS
      var lpsContainer = document.createElement('div');
      lpsContainer.className = 'lpsPosition';
      measurementsContainer.appendChild(lpsContainer);
      // IJK
      var ijkContainer = document.createElement('div');
      ijkContainer.className = 'ijkPosition';
      measurementsContainer.appendChild(ijkContainer);
      // Value
      var valueContainer = document.createElement('div');
      valueContainer.className = 'value';
      measurementsContainer.appendChild(valueContainer);

      this._label.appendChild(measurementsContainer);

      this._container.appendChild(this._label);

      this.updateDOMColor();
    };

    _class.prototype.update = function update() {
      this.updateColor();

      this._handle.update();
      this._worldPosition.copy(this._handle.worldPosition);

      this.updateVoxel(); // set data coordinates && value

      this.updateDOM();
    };

    _class.prototype.updateVoxel = function updateVoxel() {
      this._voxel.worldCoordinates = this._worldPosition;
      this._voxel.dataCoordinates = _core_core_utils__WEBPACK_IMPORTED_MODULE_3__["default"].worldToData(this._stack.lps2IJK, this._worldPosition);

      // update value
      var value = _core_core_utils__WEBPACK_IMPORTED_MODULE_3__["default"].getPixelData(this._stack, this._voxel.dataCoordinates);

      this._voxel.value = value === null || this._stack.numberOfChannels > 1 ? 'NA' // coordinates outside the image or RGB
      : _core_core_utils__WEBPACK_IMPORTED_MODULE_3__["default"].rescaleSlopeIntercept(value, this._stack.rescaleSlope, this._stack.rescaleIntercept).toFixed();
    };

    _class.prototype.updateDOM = function updateDOM() {
      var rasContainer = this._label.querySelector('.lpsPosition');
      var ijkContainer = this._label.querySelector('.ijkPosition');
      var valueContainer = this._label.querySelector('.value');

      rasContainer.innerHTML = 'LPS: \n      ' + this._voxel.worldCoordinates.x.toFixed(2) + ' :\n      ' + this._voxel.worldCoordinates.y.toFixed(2) + ' :\n      ' + this._voxel.worldCoordinates.z.toFixed(2);
      ijkContainer.innerHTML = 'IJK: \n      ' + this._voxel.dataCoordinates.x + ' :\n      ' + this._voxel.dataCoordinates.y + ' :\n      ' + this._voxel.dataCoordinates.z;
      valueContainer.innerHTML = 'Value: ' + this._voxel.value;

      this.updateDOMColor();

      var transform = this.adjustLabelTransform(this._label, this._handle.screenPosition, true);

      this._label.style.transform = 'translate3D(' + transform.x + 'px, ' + transform.y + 'px, 0)';
    };

    _class.prototype.updateDOMColor = function updateDOMColor() {
      this._label.style.borderColor = this._color;
    };

    _class.prototype.free = function free() {
      this.removeEventListeners();

      this.remove(this._handle);
      this._handle.free();
      this._handle = null;
      this.remove(this._moveHandle);
      this._moveHandle.free();
      this._moveHandle = null;

      this._container.removeChild(this._label);

      this._stack = null;
      this._voxel = null;

      _Constructor.prototype.free.call(this);
    };

    _class.prototype.hideDOM = function hideDOM() {
      this._label.style.display = 'none';
      this._handle.hideDOM();
    };

    _class.prototype.showDOM = function showDOM() {
      this._label.style.display = '';
      this._handle.showDOM();
    };

    _createClass(_class, [{
      key: 'targetMesh',
      get: function get() {
        return this._targetMesh;
      },
      set: function set(targetMesh) {
        this._targetMesh = targetMesh;
        this._handle.targetMesh = targetMesh;
        this._moveHandle.targetMesh = targetMesh;
        this.update();
      }
    }, {
      key: 'worldPosition',
      get: function get() {
        return this._worldPosition;
      },
      set: function set(worldPosition) {
        this._handle.worldPosition.copy(worldPosition);
        this._moveHandle.worldPosition.copy(worldPosition);
        this._worldPosition.copy(worldPosition);
        this.update();
      }
    }, {
      key: 'active',
      get: function get() {
        return this._active;
      },
      set: function set(active) {
        this._active = active;
        this._controls.enabled = !this._active;

        this.update();
      }
    }]);

    return _class;
  }(Constructor);
};


/* harmony default export */ __webpack_exports__["default"] = (widgetsVoxelprobe());

/***/ }),

/***/ 0:
/*!**************************!*\
  !*** multi ./src/ami.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./src/ami.ts */"./src/ami.ts");


/***/ })

/******/ });
});
//# sourceMappingURL=ami.js.map
