'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

exports.default = getExecutorsFromTest;

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _isMeteorProp = require('../ast/isMeteorProp');

var _isMeteorProp2 = _interopRequireDefault(_isMeteorProp);

var _sets = require('./sets');

var _invert = require('./invert');

var _invert2 = _interopRequireDefault(_invert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Nodes -> Set
function getExecutorsFromTest(test) {
  switch (test.type) {
    case 'MemberExpression':
      if ((0, _isMeteorProp2.default)(test, 'isClient')) {
        return new _set2.default(['browser', 'cordova']);
      } else if ((0, _isMeteorProp2.default)(test, 'isServer')) {
        return new _set2.default(['server']);
      } else if ((0, _isMeteorProp2.default)(test, 'isCordova')) {
        return new _set2.default(['cordova']);
      }
      return (0, _invariant2.default)(false, 'Unkown Meteor prop should never be reached');
    case 'UnaryExpression':
      return (0, _invert2.default)(getExecutorsFromTest(test.argument));
    case 'LogicalExpression':
      if (test.operator === '&&') {
        return (0, _sets.intersection)(getExecutorsFromTest(test.left), getExecutorsFromTest(test.right));
      } else if (test.operator === '||') {
        return (0, _sets.union)(getExecutorsFromTest(test.left), getExecutorsFromTest(test.right));
      }
      return (0, _invariant2.default)(false, 'Unkown operator should never be reached');
    default:
      return (0, _invariant2.default)(false, 'Called getExecutorsFromTest on unkown node type');
  }
}