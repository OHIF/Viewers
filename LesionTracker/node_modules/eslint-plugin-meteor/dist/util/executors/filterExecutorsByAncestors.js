'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

exports.default = filterExecutorsByAncestors;

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _isMeteorBlockOnlyTest = require('./isMeteorBlockOnlyTest');

var _isMeteorBlockOnlyTest2 = _interopRequireDefault(_isMeteorBlockOnlyTest);

var _getExecutorsFromTest = require('./getExecutorsFromTest');

var _getExecutorsFromTest2 = _interopRequireDefault(_getExecutorsFromTest);

var _sets = require('./sets');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Set -> Array -> Set
function filterExecutorsByAncestors(originalExecutors, ancestors) {
  var executors = new _set2.default([].concat((0, _toConsumableArray3.default)(originalExecutors)));

  for (var i = ancestors.length - 1; i > 0; i -= 1) {
    var current = ancestors[i];
    var parent = ancestors[i - 1];
    if (parent.type === 'IfStatement') {
      if ((0, _isMeteorBlockOnlyTest2.default)(parent.test)) {
        var executorsFromTest = (0, _getExecutorsFromTest2.default)(parent.test);
        if (parent.consequent === current) {
          executors = (0, _sets.intersection)(executors, executorsFromTest);
        } else if (parent.alternate === current) {
          executors = (0, _sets.difference)(executors, executorsFromTest);
        } else {
          (0, _invariant2.default)(false, 'Block is neither consequent nor alternate of parent');
        }
      }
    }
  }

  return executors;
}