'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = undefined;

var _ast = require('../util/ast');

// -----------------------------------------------------------------------------
// Rule Definition
// -----------------------------------------------------------------------------

exports.default = function (context) {
  // ---------------------------------------------------------------------------
  // Helpers
  // ---------------------------------------------------------------------------

  function auditArgumentChecks(node) {
    if (!(0, _ast.isFunction)(node.type)) {
      return;
    }

    var checkedParams = [];

    // short-circuit
    if (node.params.length === 0) {
      return;
    }

    if (node.body.type === 'BlockStatement') {
      node.body.body.forEach(function (expression) {
        if (expression.type === 'ExpressionStatement' && expression.expression.type === 'CallExpression' && expression.expression.callee.type === 'Identifier' && expression.expression.callee.name === 'check' && expression.expression.arguments.length > 1 && expression.expression.arguments[0].type === 'Identifier') {
          checkedParams.push(expression.expression.arguments[0].name);
        }
        if (expression.type === 'ExpressionStatement' && expression.expression.type === 'CallExpression' && expression.expression.callee.type === 'Identifier' && expression.expression.callee.name === 'check' && expression.expression.arguments.length > 1 && expression.expression.arguments[0].type === 'ArrayExpression') {
          expression.expression.arguments[0].elements.forEach(function (element) {
            if (element.type === 'Identifier') checkedParams.push(element.name);
          });
        }
      });
    }

    node.params.forEach(function (param) {
      if (param.type === 'Identifier') {
        if (checkedParams.indexOf(param.name) === -1) {
          context.report(param, '"' + param.name + '" is not checked');
        }
      }
    });
  }

  // ---------------------------------------------------------------------------
  // Public
  // ---------------------------------------------------------------------------

  return {
    CallExpression: function CallExpression(node) {
      // publications
      if ((0, _ast.isMeteorCall)(node, 'publish') && node.arguments.length >= 2) {
        auditArgumentChecks(node.arguments[1]);
        return;
      }

      // method
      if ((0, _ast.isMeteorCall)(node, 'methods') && node.arguments.length > 0 && node.arguments[0].type === 'ObjectExpression') {
        node.arguments[0].properties.forEach(function (property) {
          auditArgumentChecks(property.value);
        });
      }
    }
  };
}; /**
    * @fileoverview Enforce check on all arguments passed to methods and publish functions
    * @author Dominik Ferber
    */

var schema = exports.schema = [];