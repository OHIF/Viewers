'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @fileoverview Prefer Session.equals in conditions
 * @author Dominik Ferber
 * @copyright 2016 Dominik Ferber. All rights reserved.
 * See LICENSE file in root directory for full license.
 */

var isSessionGetCallExpression = function isSessionGetCallExpression(node) {
  return node.type === 'CallExpression' && node.callee.type === 'MemberExpression' && node.callee.object.type === 'Identifier' && node.callee.object.name === 'Session' && (!node.callee.computed && node.callee.property.type === 'Identifier' && node.callee.property.name === 'get' || node.callee.computed && node.callee.property.type === 'Literal' && node.callee.property.value === 'get');
};

// -----------------------------------------------------------------------------
// Rule Definition
// -----------------------------------------------------------------------------

exports.default = function (context) {
  // ---------------------------------------------------------------------------
  // Helpers
  // ---------------------------------------------------------------------------
  var errorMessage = 'Use "Session.equals" instead';

  var checkTest = function checkTest(node) {
    switch (node.type) {
      case 'BinaryExpression':
      case 'LogicalExpression':
        checkTest(node.left);
        checkTest(node.right);
        break;
      case 'CallExpression':
        if (isSessionGetCallExpression(node)) {
          context.report(node.callee, errorMessage);
        }
        break;
      default:
        break;
    }
  };

  // ---------------------------------------------------------------------------
  // Public
  // ---------------------------------------------------------------------------
  return {
    ConditionalExpression: function ConditionalExpression(node) {
      checkTest(node.test);
    },
    IfStatement: function IfStatement(node) {
      return checkTest(node.test);
    }
  };
};

var schema = exports.schema = [];