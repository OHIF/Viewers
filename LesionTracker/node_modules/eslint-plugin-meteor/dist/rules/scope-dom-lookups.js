'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = undefined;

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _getPropertyName = require('../util/ast/getPropertyName');

var _getPropertyName2 = _interopRequireDefault(_getPropertyName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var jQueryNames = new _set2.default(['$', 'jQuery']); /**
                                                       * @fileoverview Scope DOM lookups to the template instance
                                                       * @author Dominik Ferber
                                                       * @copyright 2016 Dominik Ferber. All rights reserved.
                                                       * See LICENSE file in root directory for full license.
                                                       */

var relevantTemplatePropertyNames = new _set2.default(['onRendered', 'onDestroyed', 'events', 'helpers']);

var isJQueryIdentifier = function isJQueryIdentifier(node) {
  return node.type === 'Identifier' && jQueryNames.has(node.name);
};

var isRelevantTemplateCallExpression = function isRelevantTemplateCallExpression(node) {
  return node.type === 'CallExpression' && node.callee.type === 'MemberExpression' && node.callee.object.type === 'MemberExpression' && node.callee.object.object.type === 'Identifier' && node.callee.object.object.name === 'Template' && relevantTemplatePropertyNames.has((0, _getPropertyName2.default)(node.callee.property));
};

var isInRelevantTemplateScope = function isInRelevantTemplateScope(ancestors) {
  return ancestors.some(isRelevantTemplateCallExpression);
};

exports.default = function (context) {
  return {
    CallExpression: function CallExpression(node) {
      if (!isJQueryIdentifier(node.callee)) return;
      if (!isInRelevantTemplateScope(context.getAncestors())) return;
      context.report(node, 'Use scoped DOM lookup instead');
    }
  };
};

var schema = exports.schema = [];