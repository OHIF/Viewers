'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = undefined;

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _ast = require('../util/ast');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -----------------------------------------------------------------------------
// Rule Definition
// -----------------------------------------------------------------------------

exports.default = function (context) {
  // ---------------------------------------------------------------------------
  // Helpers
  // ---------------------------------------------------------------------------

  var _context$options = (0, _slicedToArray3.default)(context.options, 2),
      _context$options$ = _context$options[0],
      prefix = _context$options$ === undefined ? 'js-' : _context$options$,
      _context$options$2 = _context$options[1],
      mode = _context$options$2 === undefined ? 'relaxed' : _context$options$2;

  // algorithm to parse event map selector taken from blaze itself
  // https://github.com/meteor/meteor/blob/15a0369581ef27a6d3d49cb0110d10b1198d5383/packages/blaze/view.js#L867


  function validateEventDefinition(node) {
    if (node.key.type !== 'Literal') return;

    var spec = node.key.value;
    var clauses = spec.split(/,\s+/);
    clauses.forEach(function (clause) {
      var parts = clause.split(/\s+/);

      if (parts.length === 1) {
        if (mode === 'strict') {
          context.report(node.key, 'Missing selector');
        }
        return;
      }

      var selector = parts[1];

      if (selector.startsWith('.')) {
        if (!selector.startsWith('.' + prefix)) {
          context.report(node.key, 'Expected selector to be prefixed with "' + prefix + '"');
        } else if (selector === '.' + prefix) {
          context.report(node.key, 'Selector may not consist of prefix only');
        }
      } else if (mode === 'strict') {
        context.report(node.key, 'Expected selector to be a class');
      }
    });
  }

  // ---------------------------------------------------------------------------
  // Public
  // ---------------------------------------------------------------------------

  return {
    CallExpression: function CallExpression(node) {
      if (node.arguments.length === 0 || !(0, _ast.isTemplateProp)(node.callee, 'events')) {
        return;
      }
      var eventMap = node.arguments[0];

      if (eventMap.type === 'ObjectExpression') {
        eventMap.properties.forEach(validateEventDefinition);
      }
    }
  };
}; /**
    * @fileoverview Convention for eventmap selectors
    * @author Dominik Ferber
    * @copyright 2016 Dominik Ferber. All rights reserved.
    * See LICENSE file in root directory for full license.
    */

var schema = exports.schema = [{ type: 'string' }, { enum: ['relaxed', 'strict'] }];