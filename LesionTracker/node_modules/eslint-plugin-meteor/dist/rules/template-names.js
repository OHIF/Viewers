'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = undefined;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @fileoverview Force a naming convention for templates
 * @author Dominik Ferber
 * @copyright 2016 Dominik Ferber. All rights reserved.
 * See LICENSE file in root directory for full license.
 */

var templateProps = new _set2.default(['onCreated', 'onRendered', 'onDestroyed', 'events', 'helpers', 'created', 'rendered', 'destroyed']);

var NAMING_CONVENTIONS = {
  CAMEL: 'camel-case',
  PASCAL: 'pascal-case',
  SNAKE: 'snake-case',
  UPPER_SNAKE: 'upper-snake-case'
};

var isTemplateMemberExpression = function isTemplateMemberExpression(node) {
  return node.object.type === 'MemberExpression' && node.object.object.type === 'Identifier' && node.object.object.name === 'Template' && (node.object.property.type === 'Identifier' || node.object.property.type === 'Literal') && node.property.type === 'Identifier' && templateProps.has(node.property.name);
};

// assuming node type is always either Identifier or Literal
var getNameOfProperty = function getNameOfProperty(node) {
  return node.type === 'Identifier' ? node.name : node.value;
};

var getErrorMessage = function getErrorMessage(expected) {
  return 'Invalid template name, expected name to be in ' + expected;
};

exports.default = function (context) {
  return {
    MemberExpression: function MemberExpression(node) {
      if (!isTemplateMemberExpression(node)) return;

      var _context$options = (0, _slicedToArray3.default)(context.options, 1),
          namingConvention = _context$options[0];

      var templateName = getNameOfProperty(node.object.property);
      switch (namingConvention) {
        case NAMING_CONVENTIONS.PASCAL:
          if (!/^[A-Z]([A-Z]|[a-z]|[0-9])*$/.test(templateName)) {
            context.report(node, getErrorMessage(NAMING_CONVENTIONS.PASCAL));
          }
          break;
        case NAMING_CONVENTIONS.SNAKE:
          if (!/^([a-z]|[0-9]|_)+$/i.test(templateName)) {
            context.report(node, getErrorMessage(NAMING_CONVENTIONS.SNAKE));
          }
          break;
        case NAMING_CONVENTIONS.UPPER_SNAKE:
          if (!/^[A-Z]([a-z]|[A-Z]|[0-9]|_)+$/.test(templateName)) {
            context.report(node, getErrorMessage(NAMING_CONVENTIONS.UPPER_SNAKE));
          }
          break;
        case NAMING_CONVENTIONS.CAMEL:
        default:
          if (!/^[a-z]([A-Z]|[a-z]|[0-9])+$/.test(templateName)) {
            context.report(node, getErrorMessage(NAMING_CONVENTIONS.CAMEL));
          }
          break;
      }
    }
  };
};

var schema = exports.schema = [{ enum: (0, _values2.default)(NAMING_CONVENTIONS) }];