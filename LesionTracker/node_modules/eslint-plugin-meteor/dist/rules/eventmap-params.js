'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = undefined;

var _ast = require('../util/ast');

// -----------------------------------------------------------------------------
// Rule Definition
// -----------------------------------------------------------------------------

exports.default = function (context) {
  // ---------------------------------------------------------------------------
  // Helpers
  // ---------------------------------------------------------------------------

  function ensureParamName(param, expectedParamName, preventDestructuring) {
    if (param) {
      if (param.type === 'ObjectPattern' && preventDestructuring) {
        context.report(param, 'Unexpected destructuring, use name "' + expectedParamName + '"');
      } else if (param.type === 'Identifier' && param.name !== expectedParamName) {
        context.report(param, 'Invalid parameter name, use "' + expectedParamName + '" instead');
      }
    }
  }

  function validateEventDefinition(node) {
    var eventHandler = node.value;
    if ((0, _ast.isFunction)(eventHandler.type)) {
      var _ref = context.options[0] || {},
          _ref$eventParamName = _ref.eventParamName,
          eventParamName = _ref$eventParamName === undefined ? 'event' : _ref$eventParamName,
          _ref$templateInstance = _ref.templateInstanceParamName,
          templateInstanceParamName = _ref$templateInstance === undefined ? 'templateInstance' : _ref$templateInstance,
          _ref$preventDestructu = _ref.preventDestructuring,
          preventDestructuring = _ref$preventDestructu === undefined ? 'neither' : _ref$preventDestructu;

      ensureParamName(eventHandler.params[0], eventParamName, preventDestructuring === 'both' || preventDestructuring === 'event');
      ensureParamName(eventHandler.params[1], templateInstanceParamName, preventDestructuring === 'both' || preventDestructuring === 'templateInstance');
    }
  }

  // ---------------------------------------------------------------------------
  // Public
  // ---------------------------------------------------------------------------

  return {
    CallExpression: function CallExpression(node) {
      if (node.arguments.length === 0 || !(0, _ast.isTemplateProp)(node.callee, 'events')) {
        return;
      }
      var eventMap = node.arguments[0];

      if (eventMap.type === 'ObjectExpression') {
        eventMap.properties.forEach(validateEventDefinition);
      }
    }
  };
}; /**
    * @fileoverview Ensures consistent parameter names in blaze event maps
    * @author Philipp Sporrer, Dominik Ferber, Rúnar Berg Baugsson Sigríðarson
    * @copyright 2016 Philipp Sporrer. All rights reserved.
    * See LICENSE file in root directory for full license.
    */

var schema = exports.schema = [{
  type: 'object',
  properties: {
    eventParamName: {
      type: 'string'
    },
    templateInstanceParamName: {
      type: 'string'
    }
  },
  additionalProperties: false
}];