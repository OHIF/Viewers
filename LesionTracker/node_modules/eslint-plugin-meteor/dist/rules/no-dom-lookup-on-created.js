'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schema = undefined;

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _getPropertyName = require('../util/ast/getPropertyName');

var _getPropertyName2 = _interopRequireDefault(_getPropertyName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var errorMessage = 'Accessing DOM from "onCreated" is forbidden. Try from "onRendered" instead.'; /**
                                                                                                   * @fileoverview Forbid DOM lookup in template creation callback
                                                                                                   * @author Dominik Ferber
                                                                                                   * @copyright 2016 Dominik Ferber. All rights reserved.
                                                                                                   * See LICENSE file in root directory for full license.
                                                                                                   */

var jQueryNames = new _set2.default(['$', 'jQuery']);

var isJQueryCallee = function isJQueryCallee(node) {
  return (
    // $()
    node.type === 'Identifier' && jQueryNames.has(node.name) || // Template.instance().$()
    node.type === 'MemberExpression' && node.property.type === 'Identifier' && node.property.name === '$' && node.object.type === 'CallExpression' && node.object.callee.type === 'MemberExpression' && node.object.callee.object.type === 'Identifier' && node.object.callee.object.name === 'Template' && (0, _getPropertyName2.default)(node.object.callee.property) === 'instance'
  );
};

var isRelevantTemplateCallExpression = function isRelevantTemplateCallExpression(node) {
  return node.type === 'CallExpression' && node.callee.type === 'MemberExpression' && node.callee.object.type === 'MemberExpression' && node.callee.object.object.type === 'Identifier' && node.callee.object.object.name === 'Template' && (0, _getPropertyName2.default)(node.callee.property) === 'onCreated';
};

var isInRelevantTemplateScope = function isInRelevantTemplateScope(ancestors) {
  return ancestors.some(isRelevantTemplateCallExpression);
};

exports.default = function (context) {
  return {
    CallExpression: function CallExpression(node) {
      if (!isJQueryCallee(node.callee)) return;
      if (!isInRelevantTemplateScope(context.getAncestors())) return;

      context.report(node, errorMessage);
    }
  };
};

var schema = exports.schema = [];