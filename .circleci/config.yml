version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5
  cypress: cypress-io/cypress@3.3.1

defaults: &defaults
  docker:
    - image: cimg/node:20.18.1
      environment:
        TERM: xterm
        QUICK_BUILD: true
  working_directory: ~/repo

commands:
  install_bun:
    steps:
      - restore_cache:
          keys:
            - bun-cache-v2-{{ arch }}-latest
      - run:
          name: Install Bun
          command: |
            if [ ! -d "$HOME/.bun" ]; then
              curl -fsSL https://bun.sh/install | bash
            fi
            echo 'export BUN_INSTALL="$HOME/.bun"' >> $BASH_ENV
            echo 'export PATH="$BUN_INSTALL/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
      - save_cache:
          key: bun-cache-v2-{{ arch }}-latest
          paths:
            - ~/.bun

jobs:
  UNIT_TESTS:
    <<: *defaults
    resource_class: large
    steps:
      - install_bun
      - run: node --version
      - checkout
      - run:
          name: Install Dependencies
          command: bun install --no-save
      # RUN TESTS
      - run:
          name: 'JavaScript Test Suite'
          command: bun run test:unit:ci
      # platform/app
      - run:
          name: 'VIEWER: Combine report output'
          command: |
            viewerCov="/home/circleci/repo/platform/app/coverage"
            touch "${viewerCov}/reports"
            cat "${viewerCov}/clover.xml" >> "${viewerCov}/reports"
            echo "\<<\<<\<< EOF" >> "${viewerCov}/reports"
            cat "${viewerCov}/lcov.info" >>"${viewerCov}/reports"
            echo "\<<\<<\<< EOF" >> "${viewerCov}/reports"
      - codecov/upload:
          file: '/home/circleci/repo/platform/app/coverage/reports'
          flags: 'viewer'
      # PLATFORM/CORE
      - run:
          name: 'CORE: Combine report output'
          command: |
            coreCov="/home/circleci/repo/platform/core/coverage"
            touch "${coreCov}/reports"
            cat "${coreCov}/clover.xml" >> "${coreCov}/reports"
            echo "\<<\<<\<< EOF" >> "${coreCov}/reports"
            cat "${coreCov}/lcov.info" >> "${coreCov}/reports"
            echo "\<<\<<\<< EOF" >> "${coreCov}/reports"
      - codecov/upload:
          file: '/home/circleci/repo/platform/core/coverage/reports'
          flags: 'core'

  BUILD:
    <<: *defaults
    resource_class: large
    steps:
      # Checkout code and ALL Git Tags
      - checkout
      - install_bun
      - run:
          name: Install Dependencies
          command: bun install --no-save
      # Build & Test
      - run:
          name: 'Perform the versioning before build'
          command: bun ./version.mjs
      - run:
          name: 'Build the OHIF Viewer'
          command: bun run build
          no_output_timeout: 45m
      - run:
          name: 'Upload SourceMaps, Send Deploy Notification'
          command: |
            # export FILE_1=$(find ./build/static/js -type f -name "2.*.js" -exec basename {} \;)
            # export FILE_MAIN=$(find ./build/static/js -type f -name "main.*.js" -exec basename {} \;)
            # export FILE_RUNTIME_MAIN=$(find ./build/static/js -type f -name "runtime~main.*.js" -exec basename {} \;)
            # curl https://api.rollbar.com/api/1/sourcemap -F source_map=@build/static/js/$FILE_1.map -F access_token=$ROLLBAR_TOKEN -F version=$CIRCLE_SHA1 -F minified_url=https://$GOOGLE_STORAGE_BUCKET/static/js/$FILE_1
            # curl https://api.rollbar.com/api/1/sourcemap -F source_map=@build/static/js/$FILE_MAIN.map -F access_token=$ROLLBAR_TOKEN -F version=$CIRCLE_SHA1 -F minified_url=https://$GOOGLE_STORAGE_BUCKET/static/js/$FILE_MAIN
            # curl https://api.rollbar.com/api/1/sourcemap -F source_map=@build/static/js/$FILE_RUNTIME_MAIN.map -F access_token=$ROLLBAR_TOKEN -F version=$CIRCLE_SHA1 -F minified_url=https://$GOOGLE_STORAGE_BUCKET/static/js/$FILE_RUNTIME_MAIN
            curl --request POST https://api.rollbar.com/api/1/deploy/ -F access_token=$ROLLBAR_TOKEN -F environment=$GOOGLE_STORAGE_BUCKET -F revision=$CIRCLE_SHA1 -F local_username=CircleCI
      # Persist :+1:
      - persist_to_workspace:
          root: ~/repo
          paths:
            - platform/app/dist
            - Dockerfile
            - version.txt
            - commit.txt
            - version.json

  BUILD_PACKAGES_QUICK:
    <<: *defaults
    resource_class: large
    steps:
      - install_bun
      # Checkout code and ALL Git Tags
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Install Dependencies
          command: bun install --frozen-lockfile
      - run:
          name: Avoid hosts unknown for github
          command: |
            rm -rf ~/.ssh
            mkdir ~/.ssh/
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            git config --global user.email "danny.ri.brown+ohif-bot@gmail.com"
            git config --global user.name "ohif-bot"
      - run:
          name: Authenticate with NPM registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/.npmrc
      - run:
          name: build half of the packages (to avoid out of memory in circleci)
          command: |
            bun run build:package-all
      - run:
          name: build the other half of the packages
          command: |
            bun run build:package-all-1

  NPM_PUBLISH:
    <<: *defaults
    resource_class: large
    steps:
      - install_bun
      # Checkout code and ALL Git Tags
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Install Dependencies
          command: bun install --no-save
      - run:
          name: Avoid hosts unknown for github
          command: |
            rm -rf ~/.ssh
            mkdir ~/.ssh/
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            git config --global user.email "danny.ri.brown+ohif-bot@gmail.com"
            git config --global user.name "ohif-bot"
      - run:
          name: Authenticate with NPM registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/.npmrc
      - run:
          name: build half of the packages (to avoid out of memory in circleci)
          command: |
            bun run build:package-all
      - run:
          name: build the other half of the packages
          command: |
            bun run build:package-all-1
      - run:
          name: increase min time out
          command: |
            npm config set fetch-retry-mintimeout 20000
      - run:
          name: increase max time out
          command: |
            npm config set fetch-retry-maxtimeout 120000
      - run:
          name: publish package versions
          command: |
            bun ./publish-version.mjs
      - run:
          name: Again set the NPM registry (was deleted in the version script)
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/.npmrc
      - run:
          name: publish package dist
          command: |
            bun ./publish-package.mjs
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .

  DOCKER_RELEASE_PUBLISH:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build and push Docker image from the release branch
          command: |
            # This file will exist if a new version was published by
            # our command in the previous job.
            if [[ ! -e version.txt ]]; then
              exit 0
            else
              # Remove npm config
              rm -f ./.npmrc
              # Set our version number using vars
              export IMAGE_VERSION=$(cat version.txt)
              export IMAGE_VERSION_FULL=v$IMAGE_VERSION
              echo $IMAGE_VERSION
              echo $IMAGE_VERSION_FULL
              # Build our image, auth, and push
              docker build --tag ohif/app:$IMAGE_VERSION_FULL --tag ohif/app:latest .
              echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
              docker push ohif/app:$IMAGE_VERSION_FULL
              docker push ohif/app:latest
            fi

  DOCKER_BETA_PUBLISH:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build and push Docker image from the master branch (beta releases)
          command: |
            echo $(ls -l)

            # This file will exist if a new version was published by
            # our command in the previous job.
            if [[ ! -e version.txt ]]; then
              echo "don't have version txt"
              exit 0
            else
              echo "Building and pushing Docker image from the master branch (beta releases)"
              rm -f ./.npmrc
              # Set our version number using vars
              export IMAGE_VERSION=$(cat version.txt)
              export IMAGE_VERSION_FULL=v$IMAGE_VERSION
              echo $IMAGE_VERSION
              echo $IMAGE_VERSION_FULL
              # Build our image, auth, and push

              echo "starting docker build"
              docker build --tag ohif/app:$IMAGE_VERSION_FULL .
              echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin

              echo "starting docker push"
              docker push ohif/app:$IMAGE_VERSION_FULL
            fi

  CYPRESS:
    <<: *defaults
    resource_class: large
    parallelism: 8
    steps:
      - install_bun
      - run:
          name: Install Xvfb
          command: sudo apt-get update && sudo apt-get install -y xvfb
      - run:
          name: Start Xvfb
          command: Xvfb :99 -screen 0 1920x1080x24 &
          background: true
      - run:
          name: Export Display Variable
          command: export DISPLAY=:99
      - cypress/install:
          install-browsers: true
          install-command: bun install --no-save
          package-manager: yarn
      - cypress/run-tests:
          cypress-command:
            npx wait-on@latest http://localhost:3000 && cd platform/app &&  npx cypress run --record
            --browser chrome --parallel
          start-command: bun run test:data && bun run test:e2e:serve

workflows:
  PR_CHECKS:
    jobs:
      - BUILD_PACKAGES_QUICK:
          filters:
            branches:
              ignore: master
      - UNIT_TESTS
      - CYPRESS:
          name: 'Cypress Tests'
          context: cypress

  # viewer-dev.ohif.org
  DEPLOY_MASTER:
    jobs:
      - BUILD:
          filters:
            branches:
              only: master
      - NPM_PUBLISH:
          requires:
            - BUILD
      - DOCKER_BETA_PUBLISH:
          requires:
            - NPM_PUBLISH

  # viewer.ohif.org
  DEPLOY_RELEASE:
    jobs:
      - BUILD:
          filters:
            branches:
              only: /^release\/.*/
      - HOLD_FOR_APPROVAL:
          type: approval
          requires:
            - BUILD
      - NPM_PUBLISH:
          requires:
            - HOLD_FOR_APPROVAL
      - DOCKER_RELEASE_PUBLISH:
          requires:
            - NPM_PUBLISH
