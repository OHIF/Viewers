version: 2

### ABOUT
#
# This configuration powers our Circleci.io integration
#
# Note:
# Netlify works independently from this configuration to
# create pull request previews and to update `https://docs.ohif.org`
###

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:10.15.1

jobs:
  build_and_test:
    <<: *defaults
    steps:
      # Download and cache dependencies
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          paths:
            - ~/.cache/yarn
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      # Build & Test
      - run: yarn build:package:ci
      # https://www.viget.com/articles/using-junit-on-circleci-2-0-with-jest-and-eslint/
      - run:
          name: 'JavaScript Test Suite'
          command: yarn test:ci
          environment:
            JEST_JUNIT_OUTPUT: 'reports/junit/js-test-results.xml'
      # Store result
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      # Persist :+1:
      - persist_to_workspace:
          root: ~/repo
          paths: .

  npm_publish:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Avoid hosts unknown for github
          command:
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking
            no\n" > ~/.ssh/config
      # --no-ci argument is not ideal; however, semantic-rlease thinks we're
      # attempting to run it from a `pr`, which is not the case
      - run:
          name: Publish using Semantic Release
          command: npx semantic-release --debug
      # Persist :+1:
      - persist_to_workspace:
          root: ~/repo
          paths: .

  docs_publish:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Avoid hosts unknown for github
          command:
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking
            no\n" > ~/.ssh/config
      - run: git config --global user.email "gh-pages@localhost"
      - run: git config --global user.name "npm gh-pages"
      - run: yarn global add gh-pages
      - run:
          name: Generate Docs
          command: yarn run staticDeploy
      - run:
          name: Publish Docs
          command: yarn run docs:publish

  docker_publish:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push Docker image
          command: |
            # This file will exist if a new version was published by
            # our `semantic-release` command in the previous job
            if [[ ! -e tmp/updated-version.txt ]]; then
              exit 0
            else
              # Remove npm config
              rm -f ./.npmrc
              # Set our version number using vars
              export IMAGE_VERSION=$(cat tmp/updated-version.txt)
              export IMAGE_VERSION_FULL=v$IMAGE_VERSION.${CIRCLE_BUILD_NUM}
              echo $IMAGE_VERSION
              echo $IMAGE_VERSION_FULL
              # Build our image, auth, and push
              docker build --tag ohif/$IMAGE_NAME:$IMAGE_VERSION_FULL --tag ohif/$IMAGE_NAME:latest .
              echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
              docker push ohif/$IMAGE_NAME:$IMAGE_VERSION_FULL
              docker push ohif/$IMAGE_NAME:latest
            fi
  build_demo_site:
    <<: *defaults
    steps:
      # Download and cache dependencies
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          paths:
            - ~/.cache/yarn
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      # Build & Test
      - run: yarn build:demo:ci
      # Persist :+1:
      - persist_to_workspace:
          root: ~/repo
          paths: .
  demo_site_publish:
    working_directory: ~/repo
    docker:
    - image: google/cloud-sdk
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Deploy latest version to viewer.ohif.org
          command: |
            # This file will exist if a new version was published by
            # our `semantic-release` command in the previous job
            #if [[ ! -e tmp/updated-version.txt ]]; then
            #  exit 0
            #else
              echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
              gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
              gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

              gsutil -m rm gs://$GOOGLE_STORAGE_BUCKET/**
              gsutil -m rsync -R build gs://$GOOGLE_STORAGE_BUCKET
            #fi

workflows:
  version: 2

  # PULL REQUESTS
  pull_requests:
    jobs:
      - build_and_test:
          filters:
            branches:
              ignore:
                - master
                - feature/*
                - hotfix/*

  # MERGE TO MASTER
  cut_release:
    jobs:
      - build_and_test:
          filters:
            branches:
              only: master
      - npm_publish:
          requires:
            - build_and_test
      - docs_publish:
          requires:
            - build_and_test
      - docker_publish:
          requires:
            - build_and_test
            - npm_publish
      - build_demo_site:
          requires:
            - build_and_test
          filters:
            branches:
              only: master
      - demo_site_publish:
          requires:
            - build_demo_site
          filters:
            branches:
              only: master